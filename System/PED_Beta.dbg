00000008 <PED.ab2@0> auto_constructs       Dc.b 0
00000030 <PED.ab2@25> default_assign$ = "Blitz3:"
00000094 <PED.ab2@60> !initasm
000000BE <PED.ab2@61> !basic
000000CA <PED.ab2@62> optimize 5
000000CA <library_offsets.ab3@1> XINCLUDE "/Shared/library_offsets.ab3"
000000CA <PED.ab2@71> ;GetMsg                       SET -$174
000000CA <common.ab3@1> XINCLUDE "/Shared/common.ab3"
000000D0 <common.ab3@214> JMP COMDATABASE_END
000000D2 <common.ab3@215> comFunc_Default:  RTS
00000262 <common.ab3@216> greenzone:                      Ds.l 100
00000266 <common.ab3@217> comdata:                        Dc.l COMDATABASE
0000026A <common.ab3@219> comFunc_CloseGUI:               Dc.l comFunc_Default                                            ;-$8  ;close_gui
0000026E <common.ab3@220> comFunc_CreateGUI:              Dc.l comFunc_Default                                            ;-$4  ;create_whole_gui
00000272 <common.ab3@222> comFunc_OpenWindow:             Dc.l comFunc_Default                                            ;$0
00000276 <common.ab3@223> comFunc_CloseWindow:            Dc.l comFunc_Default                                            ;$4
0000027A <common.ab3@224> comFunc_MessageLoop:            Dc.l comFunc_Default                                            ;$8
0000027E <common.ab3@225> comFunc_ErrorRequest:           Dc.l comFunc_Default                                            ;$0C
00000282 <common.ab3@226> comFunc_DetokenizeSource:       Dc.l comFunc_Default                                            ;$10
00000286 <common.ab3@227> comFunc_TokenizeSource:         Dc.l comFunc_Default                                            ;$14
0000028A <common.ab3@228> comFunc_ASLFileRequest:         Dc.l comFunc_Default                                            ;$18
0000028E <common.ab3@229> comFunc_RefreshGadList:         Dc.l comFunc_Default                                            ;$1c
00000292 <common.ab3@230> comFunc_CheckEvents:            Dc.l comFunc_Default                                            ;$20
00000296 <common.ab3@232>                                 Ds.l 1                                                          ;$24
0000029A <common.ab3@234>                                 Ds.l 1                                                          ;$28   (pointer screen)
0000029E <common.ab3@235> comPtr_IntuiBase:               Ds.l 1                                                          ;$2c   (_intuibase)
000002A2 <common.ab3@236> comFunc_SetStoredColors:        Dc.l comFunc_Default                                            ;$30
000002A6 <common.ab3@237> comFunc_SetStoredColors2:       Dc.l comFunc_Default                                            ;$34
000002AA <common.ab3@238> comFunc_DebugTrap:              Dc.l 0                                                          ;$38
000002AE <common.ab3@239> comFunc_OpenConsole:            Dc.l comFunc_Default                                            ;$3C
000002B2 <common.ab3@240> comFunc_CloseConsole:           Dc.l comFunc_Default                                            ;$40
000002B6 <common.ab3@241> comFunc_ActivateGadCompilerWin: Dc.l comFunc_Default                                            ;$44
000002BA <common.ab3@242> comFunc_SetNormalPointer:       Dc.l comFunc_Default                                            ;$48
000002BE <common.ab3@243> comFunc_SetBusyPointer:         Dc.l comFunc_Default                                            ;$4C   4c 4d 4e 4f
000002C6 <common.ab3@246>                                 Ds.l 2                                                          ;$50   50 51 52 53 54 55 56 57
000002CA <common.ab3@247> comFunc_CloseCompilerWin:       Dc.l comFunc_Default                                            ;$58   58 59 5a 5b
000002CC <common.ab3@248> comWord_ScreenWidth:            Ds.w 1                                                          ;$5C   5c 5d
000002D0 <common.ab3@249> comPtr_CompilerWindow:          Ds.l 1                                                          ;$5E   5e 5f 60 61
000002D2 <common.ab3@250> comWord__AL_0_8520:             Ds.w 1                                                          ;$62   62 63
000002D6 <common.ab3@251> comFunc_DetokenizeLine:         Dc.l 0;detokenize_line                                          ;$64
000002DA <common.ab3@252> comPtr_CurrentDir:              Dc.l 0;str_currentdir                                           ;$68
000002DE <common.ab3@253> comPtr_SourceName:              Dc.l 0;str_sourcename                                           ;$6C
000002E2 <common.ab3@254> comFunc_AL_0_852E:              Dc.l 0;AL_0_8BD2                                                ;$70
000002E6 <common.ab3@255> comFunc_AL_0_8532:              Dc.l 0;AL_0_8BD6                                                ;$74
000002EE <common.ab3@256> comWord_DoTokenize:             Ds.l 2                                                          ;$78
000002F6 <common.ab3@257> comLongLong_XtraBegin:          Dc.b "tEdSdOc!"                                                 ;$80
000002FA <common.ab3@258> comPtr_FirstSourceLine:         Ds.l 1                                                          ;$88
000002FE <common.ab3@259> comPtr_LastSourceLine:          Ds.l 1                                                          ;$8C
00000302 <common.ab3@260> comPtr_CurrentSourceLine:       Ds.l 1                                                          ;$90
00000304 <common.ab3@262>                                 Ds.w 1                                                          ;$94
000003C4 <common.ab3@263> comStr_CurrentDir:              Ds.l 48                                                         ;$96
0000040C <common.ab3@264> comStr_SourceName:              Ds.l 18                                                         ;$156  ;$96+48*4
00000410 <common.ab3@266>                                 Ds.l 1                                                          ;$19E
00000412 <common.ab3@267> comWord__AL_0_8660:             Ds.w 1                                                          ;$1A2
00000416 <common.ab3@268> comByte__AL_0_8662:             Ds.l 1                                                          ;$1A4
00000418 <common.ab3@269> comWord_PasteMode:              Ds.w 1                                                          ;$1A8
0000041A <common.ab3@270> comWord__AL_0_8668:             Ds.w 1                                                          ;$1AA
0000041C <common.ab3@271> comByte_EnteredCharacter:       Ds.w 1                                                          ;$1AC
0000041E <common.ab3@272> comByte_StateBlockMark:         Ds.w 1                                                          ;$1AE
00000420 <common.ab3@274>                                 Ds.w 1                                                          ;$1B0
00000422 <common.ab3@275> comWord__AL_0_8670:             Ds.w 1                                                          ;$1B2
00000423 <common.ab3@277>                                 Ds.b 1                                                          ;$1B4
00000424 <common.ab3@278> comByte_ScreenBarHeight:        Ds.b 1                                                          ;$1B5
00000426 <common.ab3@279> comWord_WinHeight_disabled:     Ds.w 1                                                          ;$1B6
00000428 <common.ab3@280> comWord_MaxColumns:             Dc.w 250;columnsize                                             ;$1B8
0000042A <common.ab3@282>                                 Dc.w $0050                                                    ;$1BA
0000042C <common.ab3@285>                                 Ds.w 1                                                          ;$1BC
0000042E <common.ab3@287>                                 Ds.w 1                                                          ;$1BE
00000430 <common.ab3@289>                                 Ds.w 1                                                          ;$1C0
00000434 <common.ab3@291>                                 Ds.l 1                                                          ;$1C2
00000436 <common.ab3@293>                                 Ds.w 1                                                          ;$1C6
00000438 <common.ab3@294> comWord_Column:                 Ds.w 1                                                          ;$1C8
0000043A <common.ab3@296>                                 Ds.w 1                                                          ;$1CA
0000043E <common.ab3@298>                                 Ds.l 1                                                          ;$1CC
00000440 <common.ab3@299> comWord_TextBufferOffset:       Ds.w 1                                                          ;$1D0
00000442 <common.ab3@300> comWord_StoreColumn:            Dc.w 0                                                          ;$1D2
00000446 <common.ab3@303>                                 Ds.l 1                                                          ;$1D6
00000448 <common.ab3@304> comWord_StoreTextBufferOffset:  Ds.w 1                                                          ;$1DA
0000044A <common.ab3@305> comWord__AL_0_869A:             Ds.w 1                                                          ;$1DC
0000044C <common.ab3@306> comWord_ColumnsOffset:          Ds.w 1                                                          ;$1DE
0000044E <common.ab3@308>                                 Ds.w 1                                                          ;$1E0
00000450 <common.ab3@309> comWord_QualifierStore:         Ds.w 1                                                          ;$1E2
00000454 <common.ab3@311>                                 Ds.l 1                                                          ;$1E4
00000456 <common.ab3@312> comWord_KeyBeforeReturn:        Ds.w 1                                                          ;$1E8
00000458 <common.ab3@313> comByte_RunningFlag:            Dc.w $0                                                         ;$1EA
0000045A <common.ab3@317>                                 Ds.w 1                                                          ;$1EC
0000045C <common.ab3@318> comWord_LinePosEndX:            Ds.w 1                                                          ;$1EE;org comment: position of block.
00000460 <common.ab3@319> comPtr_DestBufferStart:         Ds.l 1                                                          ;$1F0
00000462 <common.ab3@325>                                 Ds.w 1                                                          ;$1F4
00000464 <common.ab3@327>                                 Ds.w 1                                                          ;$1F6
00000466 <common.ab3@329>                                 Ds.w 1                                                          ;$1F8
00000468 <common.ab3@330> comWord__AL_0_86B8:             Ds.w 1                                                          ;$1FA
0000046A <common.ab3@331> comWord_CursorInMarkedBlock:    Ds.w 1                                                          ;$1FC
0000046E <common.ab3@332> comPtr_SourceFileHandle:        Ds.l 1                                                          ;$1FE
00000470 <common.ab3@333> comWord__AL_0_86C0:             Ds.w 1                                                          ;$202
00000472 <common.ab3@334> comWord_SourceModifiedFlag:     Ds.w 1
00000474 <common.ab3@335> comWord__AL_0_86C4:             Ds.w 1
00000476 <common.ab3@336> comWord__AL_0_86C6:             Ds.w 1
00000478 <common.ab3@338>                                 Dc.w $0006
0000047A <common.ab3@340>                                 Dc.w $0005
0000047C <common.ab3@342>                                 Ds.w 1
00000480 <common.ab3@343> comPtr_LabelList:               Ds.l 1
00000482 <common.ab3@344> comWord_LabelListChanged:       Ds.w 1
000004B0 <common.ab3@345> comStr_StatusString:            Dc.b "Line:       ",0,"Column:    ",0,"                   ",0,0 ; moved position of Line string termination and the begin of Column to the right to support up to 999999 lines  tomsmart1
000004BA <common.ab3@346> comStr_Block:                   Dc.b "Block   ",0,0
000004BE <common.ab3@347> comLong_ActualColumn:           Ds.l 1
000004C0 <common.ab3@349>                                 Ds.w 1
000004C2 <common.ab3@350> comWord_PrefsWrittenState:      Ds.w 1                                                          ; nach writeprefs $FFFF, ansonsten $0
000004C6 <common.ab3@351> comPtr_CompilerWindowStructur:  Ds.l 1    ; was comwin_datas:  tomsmart1
000004CA <common.ab3@352> comWord_SourceChanged:          Dc.l $203A
000004D3 <common.ab3@353> comStr_Modified:                Dc.b "        ",0     ; cang form to Longs to a string tomsmart1
000004D6 <common.ab3@354>                                 Ds.b 3  ;fill bytes for the modify string  tomsmart1
00000503 <common.ab3@355> comStr_FilePattern:             Dc.b "(#?.bb|#?.bb2|#?.asm|#?ab2|#?.txt|#?.guide)",0,0
00000543 <common.ab3@356>                                 Ds.l 16
0000054F <common.ab3@357> comStr_FilePattern_Standalone:  Dc.b $7e,"(#?.info)",0,0
0000059F <common.ab3@358>                                 Ds.l 20
000005AB <common.ab3@359> comStr_FilePattern_NoInfo:      Dc.b $7e,"(#?.info)",0,0
000005FB <common.ab3@360>                                 Ds.l 20
000006F7 <common.ab3@361> comStr_SourceFileComplete:      Ds.l 63
000006F9 <common.ab3@362>                                 Ds.w 1
000007B9 <common.ab3@363> comStr_ASLDummyDir:             Ds.l 48
000007F9 <common.ab3@364> comStr_ASLDummyPath:            Ds.l 16
000007FB <common.ab3@365> comWord_LabelSize:              Ds.w 1                                                          ; AL_0_8A3E
000007FC <common.ab3@366> Even
00000800 <common.ab3@369> comLong_StoreDisplayLine:       Dc.l 0
00000804 <common.ab3@371>                                 Dc.l 0
00000808 <common.ab3@372> comLong_DisplayLineOffsetStore: Dc.l 0
0000080C <common.ab3@373> comLong_BlockStartDisplayLine:  Dc.l 0
00000810 <common.ab3@375> comLong_DisplayLine:            Dc.l 0
00000814 <common.ab3@377> comLong_DisplayLineOffset:      Dc.l 0
00000818 <common.ab3@378> comLong_LinePosEndY:            Dc.l 0
0000081C <common.ab3@379> comLong_LinePosStartX:          Dc.l 0                                                          ;current cursor line
00000820 <common.ab3@380> comLong_LinePosStartY:          Dc.l 0
00000824 <common.ab3@381> comLong_BlockStartX:            Dc.l 0
00000828 <common.ab3@382> comLong_BlockStartY:            Dc.l 0
0000082C <common.ab3@383> comLong_BlockEndX:              Dc.l 0
00000830 <common.ab3@384> comLong_BlockEndY:              Dc.l 0
00000834 <common.ab3@386> comLong_TotalLines:             Dc.l 0                                                          ;ok
00000838 <common.ab3@388>                                 Dc.l 0
0000083C <common.ab3@390>                                 Dc.l 0
00000840 <common.ab3@392> comLong_BoundLines:             Dc.l $6
00000844 <common.ab3@393> comLong_Label1VisableItem:      Dc.l 0
0000084E <common.ab3@394> comWord_LabelCounter:           Ds.w 5
00000852 <common.ab3@395>                                 Dc.l 0
00000856 <common.ab3@398> comLong_CursorPosStore:         Dc.l 0                                                          ; saved cursorposition
00000858 <common.ab3@399> comWord_LabelRemark:            Dc.w 0                                                          ; state of buttons in label window
0000085A <common.ab3@400> comWord_LabelAll:               Dc.w 0
00000878 <common.ab3@401> comStr_LabelSearchString:       Ds.b 30                                                         ; stored string of stringgadget
0000087C <common.ab3@402> comLong_Label1VisableItemStore: Dc.l 0
0000087E <common.ab3@404> comWord_CreateDebugFile:        Dc.w -1  ; added by Thilo
00000882 <common.ab3@405> xtra_dumm6:                     Ds.b 4
000008B6 <common.ab3@406> xtra_dummy:                     Ds.b 52
000008BA <common.ab3@407> comLong_XtraTerminator:         Dc.l -1
000008C8 <common.ab3@409> comStr_EnvPEDPrefs:             Dc.b "ENV:ped.prefs",0
000008DA <common.ab3@410> comStr_EnvarcPEDPrefs:          Dc.b "ENVARC:ped.prefs",0,0
000008DC <common.ab3@411> comWord__AL_0_8A6A:             Ds.w 1
000008F0 <common.ab3@412> comStr_ASLChangeDir:            Dc.b "Choose directory...",0
00000906 <common.ab3@413> comStr_ASLLoadFile:             Dc.b "Name of file to open",0,0
0000091C <common.ab3@414> comStr_ASLSaveFile:             Dc.b "Name to save file as",0,0
00000932 <common.ab3@415> comStr_ASLLoadBlock:            Dc.b "Name of block to load",0
00000948 <common.ab3@416> comStr_ASLSaveBlock:            Dc.b "Name to save block as",0
0000094A <common.ab3@417> comWord__AL_0_8AD8:             Ds.w 1
0000094C <common.ab3@418> comWord_LabelSizeC:             Ds.w 1
00000950 <common.ab3@420>                                 Ds.l 1
00000954 <common.ab3@422>                                 Ds.l 1
00000958 <common.ab3@424>                                 Ds.l 1
0000095C <common.ab3@425> comPtr_SourceAreaRastPort:      Ds.l 1
00000960 <common.ab3@426> comPtr_UnknownRastPort:         Ds.l 1
00000964 <common.ab3@427> comPtr_Temp_TokenString1:       Ds.l 1
00000968 <common.ab3@428> comPtr_Temp_TokenString2:       Ds.l 1
0000096C <common.ab3@429> comPtr_Temp_TokenString3:       Ds.l 1
00000970 <common.ab3@430> comPtr_Temp_TokenStringObsolete:Ds.l 1
00000974 <common.ab3@431> comPtr_DosBuffer:               Ds.l 1
0000097A <common.ab3@432> comStr_TokenError:              Dc.b "?????",0
0000098C <common.ab3@433>                                 Dc.b "Token Unavailable",0
0000098E <common.ab3@437>                                 Dc.b $1C,$01                  ; CURSORUP
00000992 <common.ab3@438>                                 Dc.l 0;key_cursorup
00000994 <common.ab3@439>                                 Dc.b $1D,$01                  ; CURSORDOWN
00000998 <common.ab3@440>                                 Dc.l 0;key_cursordown
0000099A <common.ab3@441>                                 Dc.b 13,$01                   ; RETURN
0000099E <common.ab3@442>                                 Dc.l 0;insertreturn
000009A0 <common.ab3@443>                                 Dc.b $81,$00                  ; F1
000009A4 <common.ab3@444>                                 Dc.l 0;menu_helpgeneral
000009A6 <common.ab3@445>                                 Dc.b $82,$00                  ; F2
000009AA <common.ab3@446>                                 Dc.l 0;menu_helpincludesguide
000009AC <common.ab3@447>                                 Dc.b $83,$00                  ; F3
000009B0 <common.ab3@448>                                 Dc.l 0;menu_helpblitzlibs
000009B2 <common.ab3@449>                                 Dc.b $84,$00                  ; F4
000009B6 <common.ab3@450>                                 Dc.l 0;menu_dublicate
000009B8 <common.ab3@451>                                 Dc.b $89,$00                  ; F9
000009BC <common.ab3@452>                                 Dc.l 0;menu_previousfile
000009BE <common.ab3@453>                                 Dc.b $8A,$00                  ; F10
000009C2 <common.ab3@454>                                 Dc.l 0;menu_nextfile
000009C4 <common.ab3@455>                                 Dc.b $8B,$00                  ; HELP
000009C8 <common.ab3@456>                                 Dc.l 0;event_helpkey
000009CA <common.ab3@457>                                 Dc.b $FF,$01                  ; VERTICAL SCROLLER
000009CE <common.ab3@458>                                 Dc.l 0;event_vertscroller
000009D0 <common.ab3@459>                                 Dc.b $FE,$00
000009D4 <common.ab3@460>                                 Dc.l 0;event_shortcut         ; SHORTCUT
000009D6 <common.ab3@461>                                 Dc.b $FD,$01
000009DA <common.ab3@462>                                 Dc.l 0;event_leftmousebutton  ; L-MOUSEBUTTON
000009DC <common.ab3@463>                                 Dc.b $FB,$01
000009E0 <common.ab3@464>                                 Dc.l 0;AJL_0_7FCC
000009E2 <common.ab3@465>                                 Ds.w 1
000009F6 <common.ab3@469> comStr_ErrorOpenFile:           Dc.b "Couldn't open file!",0
00000A0A <common.ab3@470> comStr_ErrorReadFile:           Dc.b "Error reading file!",0
00000A1E <common.ab3@471> comStr_ErrorWriteFile:          Dc.b "Error writing file!",0
00000A20 <common.ab3@472> comWord_PEDIsAvailable:         Ds.w 1                       ;+$7B2   B2 B3
00000A24 <common.ab3@473> comLong_AB3IsAvailable:         Ds.l 1                       ;+$7B4   B4 B5 B6 B7
00000A28 <common.ab3@474> comPtr_TokenBase:               Dc.l 0                       ;+$7B6   B8 B9 C0 CA CB CC CD CE CF
00000A2C <common.ab3@475> comPtr_TokenBase2:              Dc.l 0
00000A30 <common.ab3@476> comFunc_ReadXtraFile:           Dc.l comFunc_Default         ;+$7C0
00000A34 <common.ab3@477> comFunc_WriteXtraFile:          Dc.l comFunc_Default         ;+$7C4
00000A38 <common.ab3@478> comFunc_CallMenuEntry:          Dc.l comFunc_Default         ;+$7C8
00000A3C <common.ab3@479> comFunc_CallDummy:              Dc.l comFunc_Default         ;+$7CC   in teddata, there is a 0
00000A3D <common.ab3@480> comByte__L_0_8BCCa:             Dc.b $FF                     ;+$7D0   +++ : +++    ; ?? look like not used??  tomsmart1
00000A3E <common.ab3@481> comByte__L_0_8BCD:              Dc.b $FF                     ;+$7D1   +++ \\34 +++
00000A3F <common.ab3@482> comByte_LabelIdentifier:        Dc.b $FF                     ;+$7D2   +++ . +++
00000A42 <common.ab3@483> comByte__L_0_8BCF:              Dc.b $FF,$00,$00             ;+$7D3   +++ ; +++
00000A46 <common.ab3@484> AL_0_8BD2:                      Ds.l 1                       ;+$7D6   +++ NEW1 +++
00000A4A <common.ab3@485> AL_0_8BD6:                      Ds.l 1                       ;+$7DA
00000A4E <common.ab3@486> comLong_NewDebug:               Dc.b "newd"                  ;+$7de
00000A52 <common.ab3@487> comPtr_Trap15:                  Dc.l 0                       ;+$7e2
00000A56 <common.ab3@488> comPtr_DirectBuffer:            Dc.l 0                       ;+$7e6
00000A5A <common.ab3@489> comPtr_MacroBase:               Dc.l 0                       ;+$7ea
00000A5B <common.ab3@490> comByte_DebugMode:              Dc.b -1                      ;+$7ee
00000A5C <common.ab3@491>                                 Dc.b 1
00000A5E <common.ab3@492>                                 Dc.w 1
00000A62 <common.ab3@493> comPtr_VarBase:                 Dc.l 0                       ;+$7f2
00000A66 <common.ab3@494> comPtr_InstrBase:               Dc.l 0                       ;+$7f6
00000A6A <common.ab3@495> comPtr_LibPointer:              Dc.l 0                       ;+$7fa
00000A6E <common.ab3@497> comPtr_CompilerVersion:         Dc.l 0                       ;+$7fe   hier soll der pointer auf den versionsstring stehen
00000A72 <common.ab3@498> comFunc_OpenCompilerWindow:     Dc.l comFunc_Default         ;+$802
00000A76 <common.ab3@499> dummy2:                         Dc.l 0                       ;+$806
00000A7A <common.ab3@500> dummy3:                         Dc.l 0                       ;+$80A
00000A7E <common.ab3@501> comPtr_VersionInformation:      Dc.l 0                       ;+$80E
00000A82 <common.ab3@502> comPtr_NumberOfBuilds:          Dc.l 0                       ;+$812
00000A86 <common.ab3@503> comPtr_PreProcessor:            Dc.l 0                       ;+$816
00000A8A <common.ab3@504> dummy6:                         Dc.l 0
00000A8E <common.ab3@508> comData_Magic:                  Dc.b "...."
00000A92 <common.ab3@509> comData_A0:                     Dc.l 0
00000A96 <common.ab3@510> comData_Long:                   Dc.l 0
00000A98 <common.ab3@511> comData_Word:                   Dc.w 0
00000A99 <common.ab3@512> comData_Byte:                   Dc.b 0
00000A9D <common.ab3@513> comFunc_SaveSource:             Dc.l comFunc_Default  ; filename in D0, format is autodetected (.bb2, .ab2, .ab3)
00000AA1 <common.ab3@514> comFunc_LoadSource:             Dc.l comFunc_Default  ; filename in D0, fromat is autodetected
00000AA5 <common.ab3@515> comFunc_ClearSource:            Dc.l comFunc_Default  ; no parameters
00000AA9 <common.ab3@516> comPtr_MemPool                  Dc.l 0
00000AAA <common.ab3@518> Even
00000AAA <PED.ab2@72> 
00000AAA <preprocessor.include.ab3@1> XINCLUDE "/Shared/preprocessor.include.ab3"
00000AAA <hashmap.include.bb2@1> XINCLUDE "hashmap.include.bb2"
00000AAA <useful.include.bb2@1> XINCLUDE "useful.include.bb2"
00000AD8 <useful.include.bb2@220> Function.s lindex {string.s,ind.l}
00000AE2 <useful.include.bb2@221> ptr.l = &string
00000AF6 <useful.include.bb2@222> l.l   = FLen(string)
00000AFE <useful.include.bb2@223> pos.l = 0
00000B26 <useful.include.bb2@224> ret.s = ""
00000B4C <useful.include.bb2@225> While ind>=0 AND pos<l
00000B68 <useful.include.bb2@228>     c.w = Peek.b(ptr+pos) &$FF
00000B76 <useful.include.bb2@229>     pos+1
00000B98 <useful.include.bb2@230>   Until c>32 OR pos>=l
00000BA0 <useful.include.bb2@233>   curly.l  = 0
00000BA8 <useful.include.bb2@234>   quoted.l = 0
00000BAE <useful.include.bb2@235>   Select c
00000BCA <useful.include.bb2@236>     Case @"{" : curly+1
00000BEC <useful.include.bb2@237>     Case $22  : quoted=1-quoted
00000BFE <useful.include.bb2@238>     Case 0
00000C04 <useful.include.bb2@239>     Default
00000C4A <useful.include.bb2@240>       If ind=0 AND c>32 Then ret.s = Chr$(c)
00000C4C <useful.include.bb2@241>   End Select
00000C5A <useful.include.bb2@243>   If pos<l
00000C76 <useful.include.bb2@245>        c.w = Peek.b(ptr+pos) &$FF
00000CD4 <useful.include.bb2@246>        If ind=0 Then ret.s + Chr$(c)
00000CDA <useful.include.bb2@247>        Select c
00000CE8 <useful.include.bb2@248>          Case @"{"
00000CFC <useful.include.bb2@249>            If quoted=False
00000D0E <useful.include.bb2@250>              If curly>0
00000D1C <useful.include.bb2@251>                curly+1
00000D22 <useful.include.bb2@252>              Else
00000D2C <useful.include.bb2@253>                c=-1
00000D40 <useful.include.bb2@256>          Case @"}"
00000D54 <useful.include.bb2@257>            If quoted=False
00000D66 <useful.include.bb2@258>              If curly>0
00000D74 <useful.include.bb2@259>                curly-1
00000D90 <useful.include.bb2@260>                If curly=0 Then c=-1
00000D96 <useful.include.bb2@261>              Else
00000DA8 <useful.include.bb2@265>          Case $22
00000DB2 <useful.include.bb2@266>            If quoted
00000DBA <useful.include.bb2@267>              quoted=0
00000DD6 <useful.include.bb2@268>              If curly=0 Then c=-1
00000DDC <useful.include.bb2@269>            Else
00000E06 <useful.include.bb2@270>              If curly=0 Then c=-1 : Else quoted=1
00000E0C <useful.include.bb2@272>          Default
00000E1A <useful.include.bb2@273>            If c<=32
00000E32 <useful.include.bb2@274>              If curly  Then c + 256
00000E4A <useful.include.bb2@275>              If quoted Then c + 256
00000E62 <useful.include.bb2@276>              If c<=32 Then c=-1
00000E64 <useful.include.bb2@278>        End Select
00000E72 <useful.include.bb2@279>        pos+1
00000E94 <useful.include.bb2@280>     Until c<=32 OR pos>=l
00000F26 <useful.include.bb2@281>     If ind=0 AND c=-1 Then ret.s = Left$(ret.s,FLen(ret.s)-1)
00000F34 <useful.include.bb2@283>   ind-1
00000F3A <useful.include.bb2@284> Wend
00000F64 <useful.include.bb2@285> Function Return ret.s
00000F82 <useful.include.bb2@286> End Function
00000F82 <hashmap.include.bb2@8> 
00000FA0 <hashmap.include.bb2@34> Function.l FAST hashmap_Koehler32{buff.l,bytelength.l}
00000FA8 <hashmap.include.bb2@35>   s1.l = 0
00000FD6 <hashmap.include.bb2@36>   For n.l = 0 To bytelength-1
00001006 <hashmap.include.bb2@37>      s1 = (s1 + Peek.b(buff+n)) * 196314165 ; best hash function EVER!
00001016 <hashmap.include.bb2@38>   Next
00001020 <hashmap.include.bb2@39>   Function Return s1
00001026 <hashmap.include.bb2@40> End Function
00001048 <hashmap.include.bb2@43> Function.l FAST hashmap_GetHashIndex{*hm.hashmap,buff.l,bytelength.l}
00001066 <hashmap.include.bb2@44> If (*hm=#NULL) Then Function Return 0
00001078 <hashmap.include.bb2@45> hash.l = hashmap_Koehler32{buff,bytelength}
000010A0 <hashmap.include.bb2@46> Function Return Xor(hash,(hash LSR 16)) & *hm\mask
000010A6 <hashmap.include.bb2@47> End Function
000010C0 <hashmap.include.bb2@50> Statement hashmap_Free{*hm.hashmap}
000010D8 <hashmap.include.bb2@51>   If *hm=#NULL Then Statement Return
000010EA <hashmap.include.bb2@52>   If *hm\base
000010F8 <hashmap.include.bb2@53>     ptr.l = *hm\base
0000112C <hashmap.include.bb2@54>     For n.l=0 To *hm\size-1
0000113A <hashmap.include.bb2@55>       datptr.l = Peek.l(ptr)
00001144 <hashmap.include.bb2@56>       If datptr
00001156 <hashmap.include.bb2@57>         If (*hm\tank)
00001194 <hashmap.include.bb2@58>           If ((datptr<*hm\tank) OR (datptr>=*hm\tank+*hm\tanksize))
000011A4 <hashmap.include.bb2@59>             FreeVec_ datptr
000011AA <hashmap.include.bb2@61>         Else
000011BA <hashmap.include.bb2@62>           FreeVec_ datptr
000011CA <hashmap.include.bb2@64>         Poke.l ptr,#NULL
000011D8 <hashmap.include.bb2@66>       ptr+4
000011E8 <hashmap.include.bb2@67>     Next
0000120C <hashmap.include.bb2@68>     FreeVec_ *hm\base : *hm\base = #NULL
00001218 <hashmap.include.bb2@70>   *hm\numitems   = 0
00001226 <hashmap.include.bb2@71>   *hm\mask       = 0
00001234 <hashmap.include.bb2@72>   *hm\size       = 0
00001242 <hashmap.include.bb2@73>   *hm\searchpos  = 0
00001250 <hashmap.include.bb2@74>   *hm\numclashes = 0
00001286 <hashmap.include.bb2@75>   If *hm\tank Then FreeVec_ *hm\tank : *hm\tank =#NULL
00001294 <hashmap.include.bb2@76>   *hm\tanksize   = 0
000012A4 <hashmap.include.bb2@77>   FreeVec_ *hm
000012AC <hashmap.include.bb2@78>   *hm = #NULL
000012B0 <hashmap.include.bb2@79> End Statement
000012CA <hashmap.include.bb2@82> Function.l hashmap_Create{order.l}
000012E4 <hashmap.include.bb2@83>   If order>24 Then order=24
000012FE <hashmap.include.bb2@84>   If order<1 Then order=1
0000131E <hashmap.include.bb2@86>   *hm.hashmap = AllocVec_(SizeOf.hashmap,#MEMF_CLEAR)
00001328 <hashmap.include.bb2@87>   If *hm
00001334 <hashmap.include.bb2@88>     *hm\order        = order
00001348 <hashmap.include.bb2@89>     *hm\size         = (1 LSL order)
0000137A <hashmap.include.bb2@90>     *hm\base         = AllocVec_(4 * *hm\size,#MEMF_CLEAR)
00001392 <hashmap.include.bb2@91>     *hm\mask         = *hm\size-1
0000139E <hashmap.include.bb2@92>     *hm\numitems     = 0
000013AC <hashmap.include.bb2@93>     *hm\searchpos    = 0
000013BA <hashmap.include.bb2@94>     *hm\numclashes   = 0
000013C8 <hashmap.include.bb2@95>     *hm\tank         = #NULL
000013D6 <hashmap.include.bb2@96>     *hm\tanksize     = 0
00001400 <hashmap.include.bb2@97>     If *hm\base = #NULL Then hashmap_Free{*hm} : *hm = #NULL
0000140A <hashmap.include.bb2@99>   Function Return *hm
00001410 <hashmap.include.bb2@100> End Function
0000143E <hashmap.include.bb2@103> Statement hashmap_RemItem{*hm.hashmap,key.s}
00001456 <hashmap.include.bb2@104>   If (*hm=#NULL) Then Statement Return
00001474 <hashmap.include.bb2@105>   If (*hm\base=#NULL) Then Statement Return
00001488 <hashmap.include.bb2@106>   kl.l       = FLen(key)
000014A0 <hashmap.include.bb2@107>   hash.l     = hashmap_GetHashIndex{*hm,&key,kl}
000014C8 <hashmap.include.bb2@108>   baseptr.l  = Peek.l(*hm\base + (hash&*hm\mask)*4)
000014E0 <hashmap.include.bb2@109>   If baseptr =#NULL Then Statement Return
000014EE <hashmap.include.bb2@110>   oldsize.l  = Peek.l(baseptr)
000014FC <hashmap.include.bb2@111>   ptr.l      = baseptr +4
0000150A <hashmap.include.bb2@112>   endptr.l   = ptr + oldsize
0000151E <hashmap.include.bb2@113>   While ptr<endptr
00001572 <hashmap.include.bb2@114>     ikl.l = Peek.l(ptr) : ptr + 4 : listkey.s = Peeks$(ptr,ikl) : ptr + ikl
0000159C <hashmap.include.bb2@115>     isl.l = Peek.l(ptr) : ptr + 4                              : ptr + isl
000015E0 <hashmap.include.bb2@117>     If listkey=key
00001600 <hashmap.include.bb2@118>       newsize.l = oldsize - ikl-4 -isl-4
00001612 <hashmap.include.bb2@119>       If newsize>0
00001636 <hashmap.include.bb2@120>         newptr.l = AllocVec_ (newsize+4,#MEMF_ANY)
00001644 <hashmap.include.bb2@121>         Poke.l newptr,newsize
0000169C <hashmap.include.bb2@122>         beginsize.l = (ptr)-(baseptr+4) - ikl-4 - isl-4 : CopyMem_ baseptr+4,newptr+4,beginsize
000016E2 <hashmap.include.bb2@123>         endsize.l   = oldsize - (ptr)+(baseptr+4)       : CopyMem_ ptr,newptr+4+beginsize,endsize
000016E8 <hashmap.include.bb2@124>       Else
000016F0 <hashmap.include.bb2@125>         newptr = #NULL
00001718 <hashmap.include.bb2@127>       Poke.l *hm\base + (hash&*hm\mask)*4,newptr
0000172A <hashmap.include.bb2@128>       *hm\numitems-1
0000173C <hashmap.include.bb2@129>       If (*hm\tank)
00001776 <hashmap.include.bb2@130>         If baseptr<*hm\tank OR baseptr>=*hm\tank+*hm\tanksize
00001786 <hashmap.include.bb2@131>           FreeVec_ baseptr
0000178C <hashmap.include.bb2@133>       Else
0000179C <hashmap.include.bb2@134>         FreeVec_ baseptr
000017A2 <hashmap.include.bb2@136>       Statement Return
000017A8 <hashmap.include.bb2@138>   Wend
000017C0 <hashmap.include.bb2@139> End Statement
000017FE <hashmap.include.bb2@142> Function.l hashmap_AddItem{*hm.hashmap,key.s,string.s}
0000181C <hashmap.include.bb2@143>   If (*hm=#NULL) Then Function Return #NULL
0000184E <hashmap.include.bb2@144>   hashmap_RemItem{*hm.hashmap,key.s}
00001862 <hashmap.include.bb2@145>   kl.l     = FLen(key)
00001876 <hashmap.include.bb2@146>   sl.l     = FLen(string)
0000188E <hashmap.include.bb2@147>   hash.l   = hashmap_GetHashIndex{*hm,&key,kl}
000018B6 <hashmap.include.bb2@149>   oldptr.l = Peek.l(*hm\base + (hash&*hm\mask)*4)
000018C0 <hashmap.include.bb2@153>   If oldptr
000018CE <hashmap.include.bb2@154>     oldsize.l = Peek.l(oldptr)
000018E6 <hashmap.include.bb2@155>     *hm\numclashes+1
000018EC <hashmap.include.bb2@159>   Else
000018F4 <hashmap.include.bb2@160>     oldsize.l = 0
00001914 <hashmap.include.bb2@163>   newsize.l = oldsize + 4+kl + 4+sl
0000193A <hashmap.include.bb2@164>   newptr.l  = AllocVec_ (4+newsize,#MEMF_ANY)
00001944 <hashmap.include.bb2@165>   If newptr
00001952 <hashmap.include.bb2@166>     Poke.l newptr,newsize
0000195C <hashmap.include.bb2@168>     If oldptr
00001988 <hashmap.include.bb2@169>       CopyMem_ oldptr+4,newptr+4,oldsize
0000199C <hashmap.include.bb2@170>       itemptr.l = newptr+4+oldsize
000019A2 <hashmap.include.bb2@171>     Else
000019B0 <hashmap.include.bb2@172>       itemptr.l = newptr+4
000019E6 <hashmap.include.bb2@175>     Poke.l itemptr,kl      : CopyMem_ &key,itemptr+4,kl
00001A34 <hashmap.include.bb2@176>     Poke.l itemptr+4+kl,sl : CopyMem_ &string,itemptr+4+kl+4,sl
00001A5C <hashmap.include.bb2@178>     Poke.l *hm\base + (hash&*hm\mask)*4,newptr
00001A76 <hashmap.include.bb2@179>     If oldptr Then FreeVec_ oldptr
00001A88 <hashmap.include.bb2@180>     *hm\numitems+1
00001A92 <hashmap.include.bb2@182>   Function Return newptr
00001AAE <hashmap.include.bb2@183> End Function
00001AD4 <hashmap.include.bb2@186> Function.l FAST hashmap_GetItemByHash{*hm.hashmap,keyPtr.l,keyLength.l,preHash.l}
00001AF2 <hashmap.include.bb2@187> If (*hm=#NULL) Then Function Return #NULL
00001B16 <hashmap.include.bb2@188> If (*hm\base=#NULL) Then Function Return #NULL
00001B30 <hashmap.include.bb2@189> hash.l  = Xor(preHash,(preHash LSR 16))
00001B58 <hashmap.include.bb2@190> ptr.l   = Peek.l(*hm\base + (hash&*hm\mask)*4)
00001B76 <hashmap.include.bb2@191> If (ptr=#NULL) Then Function Return #NULL
00001B92 <hashmap.include.bb2@192> size.l   = Peek.l(ptr) : ptr +4
00001BA0 <hashmap.include.bb2@193> endptr.l = ptr + size
00001BB4 <hashmap.include.bb2@194> While ptr<endptr
00001BD6 <hashmap.include.bb2@195>   ikl.l = Peek.l(ptr) : ptr +4+ikl
00001BF8 <hashmap.include.bb2@196>   isl.l = Peek.l(ptr) : ptr +4+isl
00001C06 <hashmap.include.bb2@197>   If keyLength=ikl
00001C20 <hashmap.include.bb2@198>     lptr.l = ptr-isl-4-ikl
00001C50 <hashmap.include.bb2@199>     If Peek.b(lptr)=Peek.b(keyPtr)
00001C56 <hashmap.include.bb2@200>       succ.l = True
00001C84 <hashmap.include.bb2@201>       For n.l=1 To ikl-1
00001CC6 <hashmap.include.bb2@202>         If Peek.b(lptr+n)><Peek.b(keyPtr+n) Then succ=False
00001CD6 <hashmap.include.bb2@203>       Next
00001CE0 <hashmap.include.bb2@204>       If succ
00001CF0 <hashmap.include.bb2@205>         Function Return ptr-isl
00001CF6 <hashmap.include.bb2@209> Wend
00001D02 <hashmap.include.bb2@210> Function Return #NULL
00001D08 <hashmap.include.bb2@211> End Function
00001D36 <hashmap.include.bb2@215> Function.s hashmap_GetItem{*hm.hashmap,key.s}
00001D66 <hashmap.include.bb2@216>   If (*hm=#NULL) Then Function Return ""
00001D9C <hashmap.include.bb2@217>   If (*hm\base=#NULL) Then Function Return ""
00001DB0 <hashmap.include.bb2@218>   kl.l     = FLen(key)
00001DC8 <hashmap.include.bb2@219>   hash.l   = hashmap_GetHashIndex{*hm,&key,kl}
00001DF0 <hashmap.include.bb2@220>   ptr.l    = Peek.l(*hm\base + (hash&*hm\mask)*4)
00001E20 <hashmap.include.bb2@221>   If (ptr=#NULL) Then Function Return ""
00001E3C <hashmap.include.bb2@222>   size.l   = Peek.l(ptr) : ptr +4
00001E4A <hashmap.include.bb2@223>   endptr.l = ptr + size
00001E5E <hashmap.include.bb2@224>   While ptr<endptr
00001EB2 <hashmap.include.bb2@225>     ikl.l = Peek.l(ptr) : ptr +4 : listkey.s = Peeks$(ptr,kl) : ptr +ikl
00001EDC <hashmap.include.bb2@226>     isl.l = Peek.l(ptr) : ptr +4 :                           : ptr +isl
00001F20 <hashmap.include.bb2@227>     If listkey=key
00001F46 <hashmap.include.bb2@228>       Function Return Peeks$(ptr-isl,isl)
00001F4C <hashmap.include.bb2@230>   Wend
00001F6A <hashmap.include.bb2@231> Function Return "" ; not found
00001F88 <hashmap.include.bb2@232> End Function
00001FA6 <hashmap.include.bb2@266> Function.l hashmap_Write{*hm.hashmap,*fh.FileHandle}
00001FAC <hashmap.include.bb2@267>   succ.l = False
00001FD2 <hashmap.include.bb2@268>   If *hm><#NULL AND *fh><#NULL
00002000 <hashmap.include.bb2@270>     header.l = @"HMAP" : Write_ *fh,&header,4
00002028 <hashmap.include.bb2@271>     spos_fsize.l = Seek_ (*fh,0,#OFFSET_CURRENT)
0000204C <hashmap.include.bb2@272>     Write_ *fh,&header,4
000020A2 <hashmap.include.bb2@275>     header.l = @"ORDR" : Write_ *fh,&header,4 : Write_ *fh,&*hm\order      ,4
000020F4 <hashmap.include.bb2@276>     header.l = @"ITEM" : Write_ *fh,&header,4 : Write_ *fh,&*hm\numitems   ,4
0000214A <hashmap.include.bb2@277>     header.l = @"CLSH" : Write_ *fh,&header,4 : Write_ *fh,&*hm\numclashes ,4
0000215A <hashmap.include.bb2@280>     size.l = *hm\size*4
000021AC <hashmap.include.bb2@281>     header.l = @"MAPT" : Write_ *fh,&header,4 : Write_ *fh,&size   ,4
000021D4 <hashmap.include.bb2@282>     spos_maptable.l = Seek_ (*fh,0,#OFFSET_CURRENT)
000021FA <hashmap.include.bb2@283>     tmpbase.l = AllocVec_(*hm\size*4,#MEMF_ANY)
00002214 <hashmap.include.bb2@284>     If tmpbase=#NULL Then Function Return False
0000221C <hashmap.include.bb2@285>     tmpptr.l  = 0
00002244 <hashmap.include.bb2@286>     Write_ *fh,tmpbase,*hm\size*4
00002272 <hashmap.include.bb2@289>     header.l = @"TANK" : Write_ *fh,&header,4
0000229A <hashmap.include.bb2@290>     spos_tanksize.l = Seek_ (*fh,0,#OFFSET_CURRENT)
000022A2 <hashmap.include.bb2@291>     tanksize.l = 0
000022C6 <hashmap.include.bb2@292>     Write_ *fh,&tanksize ,4
000022FA <hashmap.include.bb2@294>     For n.l=0 To *hm\size-1
00002316 <hashmap.include.bb2@295>       datptr.l = Peek.l(*hm\base+n*4)
00002320 <hashmap.include.bb2@296>       If datptr
00002334 <hashmap.include.bb2@297>         datl.l = Peek.l(datptr)+4
00002354 <hashmap.include.bb2@298>         Write_ *fh,datptr,datl
00002370 <hashmap.include.bb2@299>         Poke.l tmpbase+n*4,tmpptr+4
0000237E <hashmap.include.bb2@300>         tmpptr + datl
0000238C <hashmap.include.bb2@301>         tanksize + datl
00002392 <hashmap.include.bb2@302>       Else
000023AA <hashmap.include.bb2@303>         Poke.l tmpbase+n*4,0
000023BA <hashmap.include.bb2@305>     Next
000023E8 <hashmap.include.bb2@306>     totalsize.l = Seek_ (*fh,0,#OFFSET_CURRENT) - 8
00002444 <hashmap.include.bb2@307>     If Seek_ (*fh,spos_fsize   ,#OFFSET_BEGINNING)><-1 Then Write_ *fh,&totalsize,4
000024BC <hashmap.include.bb2@308>     If Seek_ (*fh,spos_maptable,#OFFSET_BEGINNING)><-1 Then Write_ *fh,tmpbase,*hm\size*4 : FreeVec_ tmpbase : tmpbase=#NULL
00002518 <hashmap.include.bb2@309>     If Seek_ (*fh,spos_tanksize,#OFFSET_BEGINNING)><-1 Then Write_ *fh,&tanksize,4
0000251E <hashmap.include.bb2@310>     succ.l = True
00002528 <hashmap.include.bb2@312>   Function Return succ
0000252E <hashmap.include.bb2@313> End Function
0000255C <hashmap.include.bb2@316> Function.l hashmap_Save{*hm.hashmap,filename.s}
00002562 <hashmap.include.bb2@317>   succ.l = False
00002582 <hashmap.include.bb2@318>   *fh.FileHandle = Open_(&filename,#MODE_NEWFILE)
0000258C <hashmap.include.bb2@319>   If *fh
0000259E <hashmap.include.bb2@320>     succ = hashmap_Write{*hm,*fh}
000025AE <hashmap.include.bb2@321>     Close_ *fh
000025B8 <hashmap.include.bb2@323>   Function Return succ
000025D2 <hashmap.include.bb2@324> End Function
000025EC <hashmap.include.bb2@327> Function.l hashmap_Read{*fh.FileHandle}
000025F4 <hashmap.include.bb2@328>   *hm.hashmap = #NULL
000025FA <hashmap.include.bb2@329>   more.l = True
00002604 <hashmap.include.bb2@330>   While more
0000260C <hashmap.include.bb2@331>     header.l = 0
00002634 <hashmap.include.bb2@332>     more     = Read_ (*fh,&header,4)
0000263A <hashmap.include.bb2@333>     Select header
0000264E <hashmap.include.bb2@334>       Case 0 : more=False
0000268A <hashmap.include.bb2@336>       Case @"ORDR" : more=Read_(*fh,&order.l,4)
000026B0 <hashmap.include.bb2@337>         If order>1 AND order<25
000026BE <hashmap.include.bb2@338>           *hm.hashmap = hashmap_Create{order}
000026FA <hashmap.include.bb2@340>       Case @"ITEM" : more=Read_(*fh,&items.l,4)
0000270E <hashmap.include.bb2@341>          If *hm Then *hm\numitems = items
0000274A <hashmap.include.bb2@343>       Case @"CLSH" : more=Read_(*fh,&clashes.l,4)
00002760 <hashmap.include.bb2@344>          If *hm Then *hm\numclashes = clashes
00002774 <hashmap.include.bb2@346>       Case @"MAPT"
0000277E <hashmap.include.bb2@347>         If *hm
000027A2 <hashmap.include.bb2@348>           Read_ *fh,&size.l,4
000027DA <hashmap.include.bb2@349>           Read_ *fh,*hm\base,Min(*hm\size*4,size)
000027E0 <hashmap.include.bb2@350>         Else
000027EC <hashmap.include.bb2@351>           Function Return #NULL
00002800 <hashmap.include.bb2@354>       Case @"TANK"
0000280A <hashmap.include.bb2@355>         If *hm
00002832 <hashmap.include.bb2@356>           Read_ *fh,&*hm\tanksize,4
0000285A <hashmap.include.bb2@357>           *hm\tank = AllocVec_ (*hm\tanksize,#MEMF_ANY)
0000286C <hashmap.include.bb2@358>           If *hm\tank
00002898 <hashmap.include.bb2@359>             Read_ *fh,*hm\tank,*hm\tanksize
000028CC <hashmap.include.bb2@360>             For n.l=0 To *hm\size-1
000028F8 <hashmap.include.bb2@361>               If Peek.l(*hm\base+n*4)>0
00002944 <hashmap.include.bb2@362>                 Poke.l *hm\base+n*4,Peek.l(*hm\base+n*4)+*hm\tank-4
00002954 <hashmap.include.bb2@364>             Next
0000295A <hashmap.include.bb2@366>         Else
00002966 <hashmap.include.bb2@367>           Function Return #NULL
00002994 <hashmap.include.bb2@370>       Default : more = Read_ (*fh,&dummy.l,4)
00002996 <hashmap.include.bb2@372>     End Select
0000299C <hashmap.include.bb2@373>   Wend
000029A6 <hashmap.include.bb2@374>   If *hm
000029D0 <hashmap.include.bb2@375>     If *hm\tank=#NULL Then hashmap_Free{*hm} : *hm = #NULL
000029DA <hashmap.include.bb2@377>   Function Return *hm
000029EE <hashmap.include.bb2@378> End Function
00002A18 <hashmap.include.bb2@381> Function.l hashmap_Load{filename.s}
00002A20 <hashmap.include.bb2@382>   *hm.hashmap = #NULL
00002A40 <hashmap.include.bb2@383>   *fh.FileHandle = Open_(&filename,#MODE_OLDFILE)
00002A4A <hashmap.include.bb2@384>   If *fh
00002A58 <hashmap.include.bb2@385>     *hm = hashmap_Read{*fh}
00002A68 <hashmap.include.bb2@386>     Close_ *fh
00002A72 <hashmap.include.bb2@388>   Function Return *hm
00002A8C <hashmap.include.bb2@389> End Function
00002A8C <preprocessor.include.ab3@11> 
00002AA6 <preprocessor.include.ab3@29> Statement preproc_FlushTokens{*tn.preprocessor}
00002ABE <preprocessor.include.ab3@30> If *tn=#NULL Then Statement Return
00002AE4 <preprocessor.include.ab3@31> If *tn\tokens   Then hashmap_Free{*tn\tokens} : *tn\tokens   = #NULL
00002B1A <preprocessor.include.ab3@32> If *tn\detokens Then FreeVec_ *tn\detokens    : *tn\detokens = #NULL
00002B1E <preprocessor.include.ab3@33> End Statement
00002B38 <preprocessor.include.ab3@36> Statement preproc_Free{*tn.preprocessor}
00002B50 <preprocessor.include.ab3@37> If *tn=#NULL Then Statement Return
00002B5A <preprocessor.include.ab3@38> preproc_FlushTokens{*tn}
00002B72 <preprocessor.include.ab3@39> FreeVec_ *tn : *tn=#NULL
00002B76 <preprocessor.include.ab3@40> End Statement
00002B90 <preprocessor.include.ab3@43> Statement preproc_Update{*tn.preprocessor}
00002BA8 <preprocessor.include.ab3@44> If *tn=#NULL Then Statement Return
00002BC0 <preprocessor.include.ab3@45> If *tn\detokens=#NULL
00002BE4 <preprocessor.include.ab3@46>   *tn\detokens = AllocVec_ (128*256*4,#MEMF_CLEAR)
00002BEA <preprocessor.include.ab3@47> Else
00002C14 <preprocessor.include.ab3@48>   For n.l=0 To 128*256-1
00002C32 <preprocessor.include.ab3@49>     Poke.l *tn\detokens + n*4,#NULL
00002C42 <preprocessor.include.ab3@50>   Next
00002C4C <preprocessor.include.ab3@53> *hm.hashmap = *tn\tokens
00002C5A <preprocessor.include.ab3@54> *ta.l       = *tn\detokens
00002C80 <preprocessor.include.ab3@55> If *ta><#NULL AND *hm><#NULL
00002CB4 <preprocessor.include.ab3@56>   For n.l=0 To *hm\size-1
00002CD0 <preprocessor.include.ab3@57>     ptr.l   = Peek.l(*hm\base + n*4)
00002CDA <preprocessor.include.ab3@58>     If ptr
00002CF6 <preprocessor.include.ab3@59>       size.l   = Peek.l(ptr) : ptr +4
00002D04 <preprocessor.include.ab3@60>       endptr.l = ptr + size
00002D18 <preprocessor.include.ab3@61>       While ptr<endptr
00002D3A <preprocessor.include.ab3@62>         ikl.l = Peek.l(ptr) : ptr +4+ikl
00002D5C <preprocessor.include.ab3@63>         isl.l = Peek.l(ptr) : ptr +4+isl
00002D7A <preprocessor.include.ab3@64>         tokenIndex.l = (Peek.w(ptr-isl) & $7FFF)
00002DA8 <preprocessor.include.ab3@65>         Poke.l *ta+tokenIndex*4,ptr-isl-4-ikl-4
00002DAE <preprocessor.include.ab3@66>       Wend
00002DBE <preprocessor.include.ab3@68>   Next
00002DC2 <preprocessor.include.ab3@70> End Statement
00002DD8 <preprocessor.include.ab3@73> Function.l preproc_Create{}
00002DF8 <preprocessor.include.ab3@74> *tn.preprocessor = AllocVec_ (SizeOf.preprocessor,#MEMF_CLEAR)
00002E02 <preprocessor.include.ab3@75> If *tn
00002E2C <preprocessor.include.ab3@76>   For n.l=0 To 255
00002E42 <preprocessor.include.ab3@77>     *tn\tokenFlags[n] = #TOKENF_STOP|#TOKENF_NEW
00002E52 <preprocessor.include.ab3@78>   Next
00002E6E <preprocessor.include.ab3@80>   *tn\tokenFlags[   0] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_EOL ; Null
00002E8A <preprocessor.include.ab3@81>   *tn\tokenFlags[   1] = #TOKENF_STOP|#TOKENF_NEW ; SOH
00002EA6 <preprocessor.include.ab3@82>   *tn\tokenFlags[   2] = #TOKENF_STOP|#TOKENF_NEW ; STX
00002EC2 <preprocessor.include.ab3@83>   *tn\tokenFlags[   3] = #TOKENF_STOP|#TOKENF_NEW ; ETX
00002EDE <preprocessor.include.ab3@84>   *tn\tokenFlags[   4] = #TOKENF_STOP|#TOKENF_NEW ; EOT
00002EFA <preprocessor.include.ab3@85>   *tn\tokenFlags[   5] = #TOKENF_STOP|#TOKENF_NEW ; ENQ
00002F16 <preprocessor.include.ab3@86>   *tn\tokenFlags[   6] = #TOKENF_STOP|#TOKENF_NEW ; ACK
00002F32 <preprocessor.include.ab3@87>   *tn\tokenFlags[   7] = #TOKENF_STOP|#TOKENF_NEW ; BELL
00002F4E <preprocessor.include.ab3@88>   *tn\tokenFlags[   8] = #TOKENF_STOP|#TOKENF_NEW ; BS  (backspace)
00002F6A <preprocessor.include.ab3@89>   *tn\tokenFlags[   9] = #TOKENF_STOP|#TOKENF_NEW ; TAB (tabulator)
00002F86 <preprocessor.include.ab3@90>   *tn\tokenFlags[  10] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_EOL ; LF  (line feed) Linux Return
00002FA2 <preprocessor.include.ab3@91>   *tn\tokenFlags[  11] = #TOKENF_STOP|#TOKENF_NEW ; VT
00002FBE <preprocessor.include.ab3@92>   *tn\tokenFlags[  12] = #TOKENF_STOP|#TOKENF_NEW ; FF  (feed forward)
00002FDA <preprocessor.include.ab3@93>   *tn\tokenFlags[  13] = #TOKENF_STOP|#TOKENF_NEW ; CR  (carrier return) Windows Return
00002FF6 <preprocessor.include.ab3@94>   *tn\tokenFlags[  14] = #TOKENF_STOP|#TOKENF_NEW ; SO
00003012 <preprocessor.include.ab3@95>   *tn\tokenFlags[  15] = #TOKENF_STOP|#TOKENF_NEW ; SI
0000302E <preprocessor.include.ab3@96>   *tn\tokenFlags[  16] = #TOKENF_STOP|#TOKENF_NEW ; DLE
0000304A <preprocessor.include.ab3@97>   *tn\tokenFlags[  17] = #TOKENF_STOP|#TOKENF_NEW ; DC1
00003066 <preprocessor.include.ab3@98>   *tn\tokenFlags[  18] = #TOKENF_STOP|#TOKENF_NEW ; CD2
00003082 <preprocessor.include.ab3@99>   *tn\tokenFlags[  19] = #TOKENF_STOP|#TOKENF_NEW ; CD3
0000309E <preprocessor.include.ab3@100>   *tn\tokenFlags[  20] = #TOKENF_STOP|#TOKENF_NEW ; CD4
000030BA <preprocessor.include.ab3@101>   *tn\tokenFlags[  21] = #TOKENF_STOP|#TOKENF_NEW ; NAK
000030D6 <preprocessor.include.ab3@102>   *tn\tokenFlags[  22] = #TOKENF_STOP|#TOKENF_NEW ; SYN
000030F2 <preprocessor.include.ab3@103>   *tn\tokenFlags[  23] = #TOKENF_STOP|#TOKENF_NEW ; ETB
0000310E <preprocessor.include.ab3@104>   *tn\tokenFlags[  24] = #TOKENF_STOP|#TOKENF_NEW ; CAN (Cancel)
0000312A <preprocessor.include.ab3@105>   *tn\tokenFlags[  25] = #TOKENF_STOP|#TOKENF_NEW ; EM
00003146 <preprocessor.include.ab3@106>   *tn\tokenFlags[  26] = #TOKENF_STOP|#TOKENF_NEW ; SUB
00003162 <preprocessor.include.ab3@107>   *tn\tokenFlags[  27] = #TOKENF_STOP|#TOKENF_NEW ; ESC (Escape)
0000317E <preprocessor.include.ab3@108>   *tn\tokenFlags[  28] = #TOKENF_STOP|#TOKENF_NEW ; FS
0000319A <preprocessor.include.ab3@109>   *tn\tokenFlags[  29] = #TOKENF_STOP|#TOKENF_NEW ; GS
000031B6 <preprocessor.include.ab3@110>   *tn\tokenFlags[  30] = #TOKENF_STOP|#TOKENF_NEW ; RS
000031D2 <preprocessor.include.ab3@111>   *tn\tokenFlags[  31] = #TOKENF_STOP|#TOKENF_NEW ; US
000031EE <preprocessor.include.ab3@112>   *tn\tokenFlags[@" "] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY ; Space
0000320A <preprocessor.include.ab3@113>   *tn\tokenFlags[@"!"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003226 <preprocessor.include.ab3@114>   *tn\tokenFlags[  34] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY |#TOKENF_QUOT
00003242 <preprocessor.include.ab3@115>   *tn\tokenFlags[@"#"] = #TOKENF_STOP|#TOKENF_IS|#TOKENF_COPY
0000325E <preprocessor.include.ab3@116>   *tn\tokenFlags[@"$"] = #TOKENF_STOP|#TOKENF_IS|#TOKENF_COPY
0000327A <preprocessor.include.ab3@117>   *tn\tokenFlags[@"%"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003296 <preprocessor.include.ab3@118>   *tn\tokenFlags[@"&"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
000032B2 <preprocessor.include.ab3@119>   *tn\tokenFlags[@"'"] = #TOKENF_STOP|#TOKENF_COPY
000032CE <preprocessor.include.ab3@120>   *tn\tokenFlags[@"("] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
000032EA <preprocessor.include.ab3@121>   *tn\tokenFlags[@")"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003306 <preprocessor.include.ab3@122>   *tn\tokenFlags[@"*"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003322 <preprocessor.include.ab3@123>   *tn\tokenFlags[@"+"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000333E <preprocessor.include.ab3@124>   *tn\tokenFlags[@","] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000335A <preprocessor.include.ab3@125>   *tn\tokenFlags[@"-"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003376 <preprocessor.include.ab3@126>   *tn\tokenFlags[@"."] = #TOKENF_STOP|#TOKENF_COPY
00003392 <preprocessor.include.ab3@127>   *tn\tokenFlags[@"/"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
000033AE <preprocessor.include.ab3@128>   *tn\tokenFlags[@"0"] = #TOKENF_IS|#TOKENF_COPY
000033CA <preprocessor.include.ab3@129>   *tn\tokenFlags[@"1"] = #TOKENF_IS|#TOKENF_COPY
000033E6 <preprocessor.include.ab3@130>   *tn\tokenFlags[@"2"] = #TOKENF_IS|#TOKENF_COPY
00003402 <preprocessor.include.ab3@131>   *tn\tokenFlags[@"3"] = #TOKENF_IS|#TOKENF_COPY
0000341E <preprocessor.include.ab3@132>   *tn\tokenFlags[@"4"] = #TOKENF_IS|#TOKENF_COPY
0000343A <preprocessor.include.ab3@133>   *tn\tokenFlags[@"5"] = #TOKENF_IS|#TOKENF_COPY
00003456 <preprocessor.include.ab3@134>   *tn\tokenFlags[@"6"] = #TOKENF_IS|#TOKENF_COPY
00003472 <preprocessor.include.ab3@135>   *tn\tokenFlags[@"7"] = #TOKENF_IS|#TOKENF_COPY
0000348E <preprocessor.include.ab3@136>   *tn\tokenFlags[@"8"] = #TOKENF_IS|#TOKENF_COPY
000034AA <preprocessor.include.ab3@137>   *tn\tokenFlags[@"9"] = #TOKENF_IS|#TOKENF_COPY
000034C6 <preprocessor.include.ab3@138>   *tn\tokenFlags[@":"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
000034E2 <preprocessor.include.ab3@139>   *tn\tokenFlags[@";"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COMMENT|#TOKENF_COPY
000034FE <preprocessor.include.ab3@140>   *tn\tokenFlags[@"<"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000351A <preprocessor.include.ab3@141>   *tn\tokenFlags[@"="] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003536 <preprocessor.include.ab3@142>   *tn\tokenFlags[@">"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003552 <preprocessor.include.ab3@143>   *tn\tokenFlags[@"?"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000356E <preprocessor.include.ab3@144>   *tn\tokenFlags[@"@"] = #TOKENF_STOP|#TOKENF_COPY
0000358A <preprocessor.include.ab3@145>   *tn\tokenFlags[@"A"] = #TOKENF_FIRST|#TOKENF_IS  |#TOKENF_COPY
000035A6 <preprocessor.include.ab3@146>   *tn\tokenFlags[@"B"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000035C2 <preprocessor.include.ab3@147>   *tn\tokenFlags[@"C"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000035DE <preprocessor.include.ab3@148>   *tn\tokenFlags[@"D"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000035FA <preprocessor.include.ab3@149>   *tn\tokenFlags[@"E"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003616 <preprocessor.include.ab3@150>   *tn\tokenFlags[@"F"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003632 <preprocessor.include.ab3@151>   *tn\tokenFlags[@"G"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000364E <preprocessor.include.ab3@152>   *tn\tokenFlags[@"H"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000366A <preprocessor.include.ab3@153>   *tn\tokenFlags[@"I"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003686 <preprocessor.include.ab3@154>   *tn\tokenFlags[@"J"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000036A2 <preprocessor.include.ab3@155>   *tn\tokenFlags[@"K"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000036BE <preprocessor.include.ab3@156>   *tn\tokenFlags[@"L"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000036DA <preprocessor.include.ab3@157>   *tn\tokenFlags[@"M"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000036F6 <preprocessor.include.ab3@158>   *tn\tokenFlags[@"N"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003712 <preprocessor.include.ab3@159>   *tn\tokenFlags[@"O"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000372E <preprocessor.include.ab3@160>   *tn\tokenFlags[@"P"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000374A <preprocessor.include.ab3@161>   *tn\tokenFlags[@"Q"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003766 <preprocessor.include.ab3@162>   *tn\tokenFlags[@"R"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003782 <preprocessor.include.ab3@163>   *tn\tokenFlags[@"S"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000379E <preprocessor.include.ab3@164>   *tn\tokenFlags[@"T"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000037BA <preprocessor.include.ab3@165>   *tn\tokenFlags[@"U"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000037D6 <preprocessor.include.ab3@166>   *tn\tokenFlags[@"V"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000037F2 <preprocessor.include.ab3@167>   *tn\tokenFlags[@"W"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000380E <preprocessor.include.ab3@168>   *tn\tokenFlags[@"X"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000382A <preprocessor.include.ab3@169>   *tn\tokenFlags[@"Y"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003846 <preprocessor.include.ab3@170>   *tn\tokenFlags[@"Z"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003862 <preprocessor.include.ab3@171>   *tn\tokenFlags[@"["] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000387E <preprocessor.include.ab3@172>   *tn\tokenFlags[@"\"] = #TOKENF_STOP|#TOKENF_COPY
0000389A <preprocessor.include.ab3@173>   *tn\tokenFlags[@"]"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
000038B6 <preprocessor.include.ab3@174>   *tn\tokenFlags[@"^"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
000038D2 <preprocessor.include.ab3@175>   *tn\tokenFlags[@"_"] = #TOKENF_IS              |#TOKENF_COPY
000038EE <preprocessor.include.ab3@176>   *tn\tokenFlags[@"`"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000390A <preprocessor.include.ab3@177>   *tn\tokenFlags[@"a"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003926 <preprocessor.include.ab3@178>   *tn\tokenFlags[@"b"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003942 <preprocessor.include.ab3@179>   *tn\tokenFlags[@"c"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000395E <preprocessor.include.ab3@180>   *tn\tokenFlags[@"d"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000397A <preprocessor.include.ab3@181>   *tn\tokenFlags[@"e"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003996 <preprocessor.include.ab3@182>   *tn\tokenFlags[@"f"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000039B2 <preprocessor.include.ab3@183>   *tn\tokenFlags[@"g"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000039CE <preprocessor.include.ab3@184>   *tn\tokenFlags[@"h"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
000039EA <preprocessor.include.ab3@185>   *tn\tokenFlags[@"i"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003A06 <preprocessor.include.ab3@186>   *tn\tokenFlags[@"j"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003A22 <preprocessor.include.ab3@187>   *tn\tokenFlags[@"k"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003A3E <preprocessor.include.ab3@188>   *tn\tokenFlags[@"l"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003A5A <preprocessor.include.ab3@189>   *tn\tokenFlags[@"m"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003A76 <preprocessor.include.ab3@190>   *tn\tokenFlags[@"n"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003A92 <preprocessor.include.ab3@191>   *tn\tokenFlags[@"o"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003AAE <preprocessor.include.ab3@192>   *tn\tokenFlags[@"p"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003ACA <preprocessor.include.ab3@193>   *tn\tokenFlags[@"q"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003AE6 <preprocessor.include.ab3@194>   *tn\tokenFlags[@"r"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003B02 <preprocessor.include.ab3@195>   *tn\tokenFlags[@"s"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003B1E <preprocessor.include.ab3@196>   *tn\tokenFlags[@"t"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003B3A <preprocessor.include.ab3@197>   *tn\tokenFlags[@"u"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003B56 <preprocessor.include.ab3@198>   *tn\tokenFlags[@"v"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003B72 <preprocessor.include.ab3@199>   *tn\tokenFlags[@"w"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003B8E <preprocessor.include.ab3@200>   *tn\tokenFlags[@"x"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003BAA <preprocessor.include.ab3@201>   *tn\tokenFlags[@"y"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003BC6 <preprocessor.include.ab3@202>   *tn\tokenFlags[@"z"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
00003BE2 <preprocessor.include.ab3@203>   *tn\tokenFlags[@"{"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003BFE <preprocessor.include.ab3@204>   *tn\tokenFlags[@"|"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003C1A <preprocessor.include.ab3@205>   *tn\tokenFlags[@"}"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003C36 <preprocessor.include.ab3@206>   *tn\tokenFlags[@"~"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
00003C52 <preprocessor.include.ab3@207>   *tn\tokenFlags[ 127] = #TOKENF_STOP|#TOKENF_NEW
00003C5E <preprocessor.include.ab3@208>   *tn\tokens   = #NULL
00003C6C <preprocessor.include.ab3@209>   *tn\detokens = #NULL
00003C76 <preprocessor.include.ab3@211> Function Return *tn
00003C7C <preprocessor.include.ab3@212> End Function
00003CAE <preprocessor.include.ab3@214> Function.s preproc_CropToken{*tn.preprocessor,textline.s,pos.l}
00003CC2 <preprocessor.include.ab3@216> mpos.l = FLen(textline)
00003CDC <preprocessor.include.ab3@218> If pos<0 Then pos = 0
00003CF8 <preprocessor.include.ab3@219> If pos>=mpos Then pos = mpos-1
00003CFE <preprocessor.include.ab3@221> more.l = True
00003D1E <preprocessor.include.ab3@222> While pos>0 AND more
00003D40 <preprocessor.include.ab3@223>   c.l = Peek.b(&textline+pos)&$FF
00003D7C <preprocessor.include.ab3@224>   If (*tn\tokenFlags[c]&#TOKENF_IS) = 0 Then pos-1 : Else more=False
00003D82 <preprocessor.include.ab3@225> Wend
00003D88 <preprocessor.include.ab3@227> apos.l = pos
00003D8E <preprocessor.include.ab3@228> bpos.l = pos
00003D94 <preprocessor.include.ab3@230> more.l = True
00003DB4 <preprocessor.include.ab3@231> While apos>0 AND more
00003DD6 <preprocessor.include.ab3@232>   c.l = Peek.b(&textline+apos)&$FF
00003E20 <preprocessor.include.ab3@233>   If (*tn\tokenFlags[c]&#TOKENF_IS) = 0 Then more=False : apos+1 : Else apos-1
00003E26 <preprocessor.include.ab3@234> Wend
00003E2C <preprocessor.include.ab3@236> more=True
00003E48 <preprocessor.include.ab3@237> While bpos<mpos AND more
00003E6A <preprocessor.include.ab3@238>   c.l = Peek.b(&textline+bpos)&$FF
00003EB4 <preprocessor.include.ab3@239>   If (*tn\tokenFlags[c]&#TOKENF_IS) = 0 Then more=False : bpos-1 : Else bpos+1
00003EBA <preprocessor.include.ab3@240> Wend
00003F20 <preprocessor.include.ab3@242> token.s = Mid$(textline,apos+1,bpos-apos+1)
00003F4A <preprocessor.include.ab3@243> Function Return token
00003F68 <preprocessor.include.ab3@244> End Function
00003F96 <preprocessor.include.ab3@247> Function.l preproc_LoadTokens{*tn.preprocessor,hashmapfile.s}
00003FB4 <preprocessor.include.ab3@248> If *tn = #NULL Then Function Return #NULL
00003FE6 <preprocessor.include.ab3@249> *hm.hashmap = hashmap_Load{hashmapfile}
00003FF0 <preprocessor.include.ab3@250> If *hm
00004016 <preprocessor.include.ab3@251>   If *tn\tokens Then hashmap_Free{*tn\tokens} : *tn\tokens = #NULL
00004020 <preprocessor.include.ab3@252>   *tn\tokens = *hm
0000402A <preprocessor.include.ab3@253>   preproc_Update{*tn}
00004034 <preprocessor.include.ab3@255> Function Return *hm
0000404E <preprocessor.include.ab3@256> End Function
0000407C <preprocessor.include.ab3@259> Function.w preproc_SaveTokens{*tn.preprocessor,hashmapfile.s}
00004096 <preprocessor.include.ab3@260> If *tn = #NULL Then Function Return False
000040A4 <preprocessor.include.ab3@261> If *tn\tokens
000040DE <preprocessor.include.ab3@262>   Function Return hashmap_Save{*tn\tokens,hashmapfile}
000040E6 <preprocessor.include.ab3@264> Function Return False
00004100 <preprocessor.include.ab3@265> End Function
00004100 <error.include.bb2@1> XINCLUDE "error.include.bb2"
00004138 <error.include.bb2@62> If ver.s=""
00004160 <error.include.bb2@63>   error_title.s     = "ERROR:"
00004188 <error.include.bb2@64>   message_title.s   = "Message:"
000041B0 <error.include.bb2@65>   question_title.s  = "Question:"
000041B6 <error.include.bb2@66> Else
000041EA <error.include.bb2@67>   error_title.s     = ver.s
0000421E <error.include.bb2@68>   message_title.s   = ver.s
00004252 <error.include.bb2@69>   question_title.s  = ver.s
0000426E <error.include.bb2@73> WbToScreen 0
0000427C <error.include.bb2@104> errorengine\flags = #error_requester
000042AE <error.include.bb2@124> Statement error {text.s,@errorcode.l,@onlyonce.l}
00004332 <error.include.bb2@126>   text.s = Replace$(text.s,Chr$(0),"\\n")
0000434C <error.include.bb2@128>   If (\flags&#error_requester)
00004384 <error.include.bb2@129>     If onlyonce=False OR \err_code><errorcode OR errorcode=-1
000043E4 <error.include.bb2@130>       If Used Window<0 Then *win.Window=0:Else *win.Window=Peek.l(Addr Window(Used Window))
000043F2 <error.include.bb2@132>       \req\es_StructSize   = SizeOf.EasyStruct
00004400 <error.include.bb2@133>       \req\es_Flags        = 0;-1
0000440E <error.include.bb2@134>       \req\es_Title        = &error_title.s
0000441C <error.include.bb2@135>       \req\es_TextFormat   = &text.s
00004444 <error.include.bb2@136>       gadget.s             = "OK"
00004452 <error.include.bb2@137>       \req\es_GadgetFormat = &gadget.s
0000445A <error.include.bb2@138>       flags.l              = #IDCMP_RAWKEY
0000448C <error.include.bb2@140>       EasyRequestArgs_ *win,\req,&flags,0
000044A6 <error.include.bb2@145>   If (\flags&#error_stdout)
000044DE <error.include.bb2@146>     If onlyonce=False OR \err_code><errorcode OR errorcode=-1
000044E4 <error.include.bb2@147>       DefaultOutput
00004528 <error.include.bb2@148>       NPrint text.s
00004570 <error.include.bb2@149>       If (Used Window>=0) Then WindowOutput Used Window
0000457A <error.include.bb2@153>   \err_code = errorcode
00004592 <error.include.bb2@155> End Statement
000045CC <error.include.bb2@194> Function.l ask {text.s,buttons.s}
000045D4 <error.include.bb2@196>   n.l = 0
000045F6 <error.include.bb2@198>   If ((\flags&#error_autoask)=False)
00004656 <error.include.bb2@199>     If Used Window<0 Then *win.Window=0:Else *win.Window=Peek.l(Addr Window(Used Window))
00004664 <error.include.bb2@201>     \req\es_StructSize   = SizeOf.EasyStruct
00004672 <error.include.bb2@202>     \req\es_Flags        = 0
00004680 <error.include.bb2@203>     \req\es_Title        = &question_title
0000468E <error.include.bb2@204>     \req\es_TextFormat   = &text
000046F4 <error.include.bb2@205>     If buttons ="" Then buttons = "OK"
00004702 <error.include.bb2@206>     \req\es_GadgetFormat = &buttons
00004738 <error.include.bb2@209>     n.l=EasyRequestArgs_ (*win,\req,0,0)
00004742 <error.include.bb2@213>   Function Return n
0000475E <error.include.bb2@214> End Function
00004774 <error.include.bb2@301> Statement error_Clear {}
0000477C <error.include.bb2@303>   \err_code = False
0000477E <error.include.bb2@304> End Statement
0000477E <preprocessor.include.ab3@269> ; process the ascii data in sourcebuff length and write the tokenized source into destbuffer
000047A4 <preprocessor.include.ab3@272> Function.l preproc_Tokenize{*tn.preprocessor,sourcebuff.l,destbuff.l,bytelength.l}
000047C4 <preprocessor.include.ab3@273> If *tn = #NULL Then Function Return -1
000047E6 <preprocessor.include.ab3@274> If *tn\tokens = #NULL Then Function Return -1
000047EC <preprocessor.include.ab3@275> dptr.l        = destbuff
000047FA <preprocessor.include.ab3@276> eptr.l        = sourcebuff+bytelength
00004800 <preprocessor.include.ab3@277> sptr.l        = sourcebuff
00004808 <preprocessor.include.ab3@278> tokenlength.l = 0
0000480E <preprocessor.include.ab3@279> accept.l      = True
00004816 <preprocessor.include.ab3@280> hash.l        = 0
0000482A <preprocessor.include.ab3@282> While sptr<eptr
00004850 <preprocessor.include.ab3@283>   c.b  = Peek.b(sptr) : If c<0 Then c=$3F; ?
00004878 <preprocessor.include.ab3@284>   cf.l = *tn\tokenFlags[c&$FF]
00004882 <preprocessor.include.ab3@286>   If tokenlength ; we have a token
00004896 <preprocessor.include.ab3@287>     If (cf&#TOKENF_STOP) ; and a stop character
000048AA <preprocessor.include.ab3@288>       If c=@"$"
000048BA <preprocessor.include.ab3@289>         Poke.b dptr,c
000048D4 <preprocessor.include.ab3@290>         xhash.l = (hash+c)*196314165
000048FC <preprocessor.include.ab3@291>         tptr.l = hashmap_GetItemByHash{*tn\tokens,dptr-tokenlength,tokenlength+1,xhash}
0000490E <preprocessor.include.ab3@292>         If tptr=#NULL
00004930 <preprocessor.include.ab3@293>           tptr.l = hashmap_GetItemByHash{*tn\tokens,dptr-tokenlength,tokenlength,hash}
00004936 <preprocessor.include.ab3@294>         Else
0000493E <preprocessor.include.ab3@295>           cf=0
00004944 <preprocessor.include.ab3@297>       Else
00004966 <preprocessor.include.ab3@298>         tptr.l = hashmap_GetItemByHash{*tn\tokens,dptr-tokenlength,tokenlength,hash}
00004970 <preprocessor.include.ab3@300>       If tptr ; we found it!
0000497E <preprocessor.include.ab3@301>         dptr-tokenlength
0000499C <preprocessor.include.ab3@302>         Poke.w dptr,Peek.w(tptr)
000049AA <preprocessor.include.ab3@303>         dptr+2
000049B2 <preprocessor.include.ab3@304>         tokenlength = 0
000049B8 <preprocessor.include.ab3@305>         accept      = False
000049CC <preprocessor.include.ab3@309>     If (cf&#TOKENF_IS) ; it is a valid token char
000049D6 <preprocessor.include.ab3@310>       If tokenlength ; we have a token!
000049E4 <preprocessor.include.ab3@311>         tokenlength+1
000049FE <preprocessor.include.ab3@312>         hash = (hash+c)*196314165
00004A04 <preprocessor.include.ab3@314>     Else ; no, it's not a token
00004A0C <preprocessor.include.ab3@315>       tokenlength=0
00004A12 <preprocessor.include.ab3@317>   Else
00004A26 <preprocessor.include.ab3@318>     If (cf&#TOKENF_FIRST)
00004A30 <preprocessor.include.ab3@319>       If accept ; do we accept new tokens?
00004A38 <preprocessor.include.ab3@320>         tokenlength=1
00004A4C <preprocessor.include.ab3@321>         hash = c*196314165
00004A60 <preprocessor.include.ab3@326>   If (cf&(#TOKENF_QUOT|#TOKENF_COMMENT|#TOKENF_EOL))
00004A74 <preprocessor.include.ab3@327>     If (cf&#TOKENF_QUOT) ; it's a string constant
00004A92 <preprocessor.include.ab3@329>         Poke.b dptr,c : dptr+1
00004AA0 <preprocessor.include.ab3@330>         sptr+1
00004AB0 <preprocessor.include.ab3@331>         c  = Peek.b(sptr) ;: If c<0 Then c=$3F; ? string constants are allowed to contain >128 chars
00004AD8 <preprocessor.include.ab3@332>         cf = *tn\tokenFlags[c&$FF]
00004AFA <preprocessor.include.ab3@333>       Until ((cf&(#TOKENF_QUOT|#TOKENF_EOL)) OR (sptr>=eptr))
00004B0E <preprocessor.include.ab3@336>     If (cf&#TOKENF_COMMENT) ; it's a comment
00004B2C <preprocessor.include.ab3@338>         Poke.b dptr,c : dptr+1
00004B3A <preprocessor.include.ab3@339>         sptr+1
00004B60 <preprocessor.include.ab3@340>         c  = Peek.b(sptr) : If c<0 Then c=$3F; ?
00004B88 <preprocessor.include.ab3@341>         cf = *tn\tokenFlags[c&$FF]
00004BAA <preprocessor.include.ab3@342>       Until ((cf&(#TOKENF_EOL)) OR (sptr>=eptr))
00004BDA <preprocessor.include.ab3@345>     If (cf&#TOKENF_EOL     ) Then Poke.b dptr,0 : dptr+1
00004C08 <preprocessor.include.ab3@349>   If (cf&#TOKENF_NEW     ) Then accept=True:tokenlength=0:Else accept=False
00004C3A <preprocessor.include.ab3@350>   If (cf&#TOKENF_COPY    ) Then Poke.b dptr,c : dptr+1
00004C48 <preprocessor.include.ab3@352>   sptr+1
00004C4E <preprocessor.include.ab3@353> Wend
00004C5E <preprocessor.include.ab3@356> Function Return dptr-destbuff
00004C64 <preprocessor.include.ab3@357> End Function
00004C8A <preprocessor.include.ab3@360> Function.l preproc_DetokenizeFP{*tn.preprocessor,sourcebuff.l,bytelength.l,fp.l}
00004CAA <preprocessor.include.ab3@361> If *tn = #NULL Then Function Return -1
00004CD0 <preprocessor.include.ab3@362> If *tn\detokens = #NULL Then Function Return -1
00004CF0 <preprocessor.include.ab3@363> bptr.l        = AllocVec_(8192*2,#MEMF_ANY)
00004D10 <preprocessor.include.ab3@364> If bptr=#NULL Then Function Return -1
00004D16 <preprocessor.include.ab3@365> dptr.l        = bptr                     ; destination pointer
00004D24 <preprocessor.include.ab3@366> aptr.l        = bptr + 8192              ; write if destpointer>aptr!
00004D32 <preprocessor.include.ab3@367> eptr.l        = sourcebuff+bytelength    ; end source pointer
00004D38 <preprocessor.include.ab3@368> sptr.l        = sourcebuff               ; source pointer
00004D40 <preprocessor.include.ab3@369> count.l       = 0
00004D5E <preprocessor.include.ab3@370> Poke.l bptr+8192*2-4,@"B00B"             ; test cookie
00004D72 <preprocessor.include.ab3@371> While sptr<eptr
00004D82 <preprocessor.include.ab3@372>   c.b  = Peek.b(sptr)
00004D98 <preprocessor.include.ab3@374>   If (c&$80)
00004DB0 <preprocessor.include.ab3@376>     tokenIndex.l = Peek.w(sptr) & $7FFF
00004DCC <preprocessor.include.ab3@377>     tokenNode.l = Peek.l(*tn\detokens + tokenIndex*4)
00004DD6 <preprocessor.include.ab3@378>     If tokenNode
00004DF2 <preprocessor.include.ab3@379>       tokenLength.l = Peek.l(tokenNode) : tokenNode+4
00004E04 <preprocessor.include.ab3@380>       If tokenLength<8192
00004E32 <preprocessor.include.ab3@381>         For n.l=0 To tokenLength-1
00004E6E <preprocessor.include.ab3@382>           Poke.b dptr,Peek.b(tokenNode) : dptr+1 : tokenNode+1
00004E7E <preprocessor.include.ab3@383>         Next
00004E84 <preprocessor.include.ab3@384>       Else
00004E8A <preprocessor.include.ab3@387>     Else
00004EA2 <preprocessor.include.ab3@388>       libid.l   = (tokenIndex LSR 7) & $FF
00004EB2 <preprocessor.include.ab3@389>       tokenid.l = tokenIndex & $7F
00004F38 <preprocessor.include.ab3@390>       defToken.s = "????Lib"+Str$(libid)+"/"+Str$(tokenid)
00004F72 <preprocessor.include.ab3@391>       For n.l=0 To FLen(defToken)-1
00004FA8 <preprocessor.include.ab3@392>         Poke.b dptr,Peek.b(&defToken+n) : dptr+1
00004FB8 <preprocessor.include.ab3@393>       Next
00004FC6 <preprocessor.include.ab3@395>     sptr+2
00004FCC <preprocessor.include.ab3@396>   Else
00004FDC <preprocessor.include.ab3@397>     If c=0   ; it's a newline
00005006 <preprocessor.include.ab3@398>       Poke.b dptr,$0A : dptr+1 : sptr+1
0000500C <preprocessor.include.ab3@399>     Else
00005038 <preprocessor.include.ab3@400>       Poke.b dptr,c : dptr+1 : sptr+1
00005048 <preprocessor.include.ab3@403>     If (c=$22) ; it's a string!
00005058 <preprocessor.include.ab3@405>         c  = Peek.b(sptr)
00005076 <preprocessor.include.ab3@406>         Poke.b dptr,c : dptr+1
00005084 <preprocessor.include.ab3@407>         sptr+1
000050BA <preprocessor.include.ab3@408>       Until ((c=$22) OR (c=0) OR (sptr>=eptr))
000050DE <preprocessor.include.ab3@409>       If c=0 Then Poke.b dptr-1,$0A
000050F2 <preprocessor.include.ab3@412>     If (c=@";") ; it's a comment!
00005102 <preprocessor.include.ab3@414>         c  = Peek.b(sptr)
00005120 <preprocessor.include.ab3@415>         Poke.b dptr,c : dptr+1
0000512E <preprocessor.include.ab3@416>         sptr+1
00005152 <preprocessor.include.ab3@417>       Until ((c=0) OR (sptr>=eptr))
00005176 <preprocessor.include.ab3@418>       If c=0 Then Poke.b dptr-1,$0A
00005184 <preprocessor.include.ab3@422>   If dptr>aptr
00005192 <preprocessor.include.ab3@423>     wlen.l = dptr-bptr
000051B2 <preprocessor.include.ab3@424>     Write_ fp,bptr,wlen
000051C0 <preprocessor.include.ab3@425>     count + wlen
000051C6 <preprocessor.include.ab3@426>     dptr = bptr
000051CC <preprocessor.include.ab3@429> Wend
000051DA <preprocessor.include.ab3@431> If dptr>bptr
000051E8 <preprocessor.include.ab3@432>   wlen.l = dptr-bptr
00005208 <preprocessor.include.ab3@433>   Write_ fp,bptr,wlen
00005216 <preprocessor.include.ab3@434>   count + wlen
0000521C <preprocessor.include.ab3@435>   dptr = bptr
0000522C <preprocessor.include.ab3@440> FreeVec_ bptr
00005236 <preprocessor.include.ab3@442> Function Return count
0000524A <preprocessor.include.ab3@443> End Function
00005280 <preprocessor.include.ab3@498> Function.l preproc_AddToken{*tn.preprocessor,tokenName.s,tokenID.l,libID.l}
0000529E <preprocessor.include.ab3@499> If *tn = #NULL Then Function Return #NULL
000052C4 <preprocessor.include.ab3@500> If *tn\tokens = #NULL Then *tn\tokens=hashmap_Create{14}
000052E4 <preprocessor.include.ab3@501> If *tn\tokens = #NULL Then Function Return #NULL
00005302 <preprocessor.include.ab3@502> tokenW.w = libID LSL 7 | tokenID | $8000
00005330 <preprocessor.include.ab3@503> tokenS.s = Peeks$(&tokenW,2)
00005392 <preprocessor.include.ab3@504> Function Return hashmap_AddItem{*tn\tokens,tokenName,tokenS}
000053AC <preprocessor.include.ab3@505> End Function
000053C6 <preprocessor.include.ab3@509> Statement preproc_QueryTokens{*PreProcessor.preprocessor}
000053D0 <preprocessor.include.ab3@510> preproc_FlushTokens{*PreProcessor}
0000540E <preprocessor.include.ab3@511> !ComData_GetL{comPtr_TokenBase,D0}
00005412 <preprocessor.include.ab3@512> *token.tokeninfo = PutD0
0000541C <preprocessor.include.ab3@514> While *token
0000544A <preprocessor.include.ab3@515>   name.s    =  Peek.s(&*token\dat)
0000546A <preprocessor.include.ab3@516>   libid.l   = (*token\number LSR 7) &$FF
00005482 <preprocessor.include.ab3@517>   tokenid.l = *token\number & $7F
000054E0 <preprocessor.include.ab3@518>   tokenS.s  = hashmap_GetItem{*PreProcessor\tokens,name}
0000550C <preprocessor.include.ab3@519>   If tokenS
0000551E <preprocessor.include.ab3@520>     dtoken.l = Peek.w(&tokenS)
0000552E <preprocessor.include.ab3@521>     dtokenid.l = (dtoken) & $7F
00005546 <preprocessor.include.ab3@522>     dlibid.l   = (dtoken LSR 7) &$FF
0000554C <preprocessor.include.ab3@524>   Else
00005586 <preprocessor.include.ab3@525>     preproc_AddToken{*PreProcessor,name,tokenid,libid}
00005590 <preprocessor.include.ab3@527>   *token = *token\next_token
00005596 <preprocessor.include.ab3@528> Wend
000055A0 <preprocessor.include.ab3@529> preproc_Update{*PreProcessor}
000055B2 <preprocessor.include.ab3@530> End Statement
000055B2 <PED.ab2@73> 
000055B2 <ted.include.ab3@1> XINCLUDE "/Shared/ted.include.ab3"
000055CC <ted.include.ab3@161> Function.l ted_OpenLib{@minVersion.l}
000055D6 <ted.include.ab3@162> If (*_TEDBase)
000055F8 <ted.include.ab3@163>   If (minVersion<=*_TEDBase\lib_Version) Then Function Return *_TEDBase
00005610 <ted.include.ab3@164>   CloseLibrary_ *_TEDBase : *_TEDBase = 0
0000562A <ted.include.ab3@166> If minVersion<0 Then minVersion = 0
0000565C <ted.include.ab3@167> *_TEDBase = OpenLibrary_ ("ted.library",minVersion)
00005666 <ted.include.ab3@168> If *_TEDBase
0000566C <ted.include.ab3@170> Else
0000567E <ted.include.ab3@171>   If (minVersion>0)
000056E6 <ted.include.ab3@172>     error{"Unable to open ted.library (v"+Str$(minVersion)+"+)!"}
000056EC <ted.include.ab3@173>   Else
0000571A <ted.include.ab3@174>     error{"Unable to open ted.library!"}
00005724 <ted.include.ab3@177> Function Return *_TEDBase
0000572A <ted.include.ab3@178> End Function
00005740 <ted.include.ab3@180> Statement ted_CloseLib{}
0000574A <ted.include.ab3@181> If *_TEDBase
00005762 <ted.include.ab3@183>   CloseLibrary_ *_TEDBase : *_TEDBase = 0
00005764 <ted.include.ab3@185> End Statement
00005792 <ted.include.ab3@186> !autoexit{ted_CloseLib}
000057AC <ted.include.ab3@190> Statement TEDSetLabelList{mouselistP.l}
000057C2 <ted.include.ab3@191> If (ted_OpenLib{}) ; (!) put your min version here if needed!
000057F6 <ted.include.ab3@192>   !TEDSetLabelList{result.l,mouselistP}
000057FA <ted.include.ab3@194> End Statement
00005814 <ted.include.ab3@196> Statement TEDSetLabelCount{mousecountP.l}
0000582A <ted.include.ab3@197> If (ted_OpenLib{}) ; (!) put your min version here if needed!
0000585E <ted.include.ab3@198>   !TEDSetLabelCount{result.l,mousecountP}
00005862 <ted.include.ab3@200> End Statement
0000587C <ted.include.ab3@216> Statement TEDSetJumpTable{comdataP.l}
00005892 <ted.include.ab3@217> If (ted_OpenLib{}) ; (!) put your min version here if needed!
000058C6 <ted.include.ab3@218>   !TEDSetJumpTable{result.l,comdataP}
000058CA <ted.include.ab3@220> End Statement
000058E4 <ted.include.ab3@236> Statement TEDSetFirstLine{firstlineP.l}
000058FA <ted.include.ab3@237> If (ted_OpenLib{}) ; (!) put your min version here if needed!
0000592E <ted.include.ab3@238>   !TEDSetFirstLine{result.l,firstlineP}
00005932 <ted.include.ab3@240> End Statement
0000594C <ted.include.ab3@242> Statement TEDSetCurrentLine{currentlineP.l}
00005962 <ted.include.ab3@243> If (ted_OpenLib{})  ; (!) put your min version here if needed!
00005996 <ted.include.ab3@244>   !TEDSetCurrentLine{result.l,currentlineP}
0000599A <ted.include.ab3@246> End Statement
000059B0 <ted.include.ab3@255> Function.l TEDGetCurrentLine{}
000059C6 <ted.include.ab3@256> If (ted_OpenLib{}) ; (!) put your min version here if needed!
000059EC <ted.include.ab3@257>   !TEDGetCurrentLine{result.l}
000059F6 <ted.include.ab3@259> Function Return result
000059FC <ted.include.ab3@260> End Function
00005A16 <ted.include.ab3@262> Function.l TEDDetoke{sourcelineP.l}
00005A2C <ted.include.ab3@263> If (ted_OpenLib{}) ; (!) put your min version here if needed!
00005A60 <ted.include.ab3@264>   !TEDDetoke{result.l,sourcelineP}
00005A6A <ted.include.ab3@266> Function Return result
00005A70 <ted.include.ab3@267> End Function
00005A70 <PED.ab2@74> 
00005A70 <dos.include.bb2@1> XINCLUDE "dos.include.bb2"
00005A70 <multilist.include.bb2@1> XINCLUDE "multilist.include.bb2"
00005A70 <strptr.include.bb2@1> XINCLUDE "strptr.include.bb2"
00005A9A <strptr.include.bb2@33> str_MemPoolHeader = CreatePool_(0,32768,32768)
00005AB4 <strptr.include.bb2@84> Statement FAST str_Free {ntptr.l}
00005ABE <strptr.include.bb2@85> If ntptr
00005B0E <strptr.include.bb2@86>   !str_Free{ntptr}
00005B12 <strptr.include.bb2@88> End Statement
00005B34 <strptr.include.bb2@103> Statement FAST str_WritePtr{ntptr.l,textptr.l,@clength.l}
00005B3E <strptr.include.bb2@104> If ntptr
00005B8E <strptr.include.bb2@105>   !str_Free{ntptr}
00005B98 <strptr.include.bb2@106>   If textptr
00005BAA <strptr.include.bb2@107>     If clength<0
00005BB2 <strptr.include.bb2@108>       clength.l=0
00005BE0 <strptr.include.bb2@109>       While Peek.b(textptr+clength):clength+1:Wend
00005BF2 <strptr.include.bb2@111>     If clength>0
00005C1A <strptr.include.bb2@112>       *str.str = AllocPooled_ (str_MemPoolHeader,clength+1+4)
00005C24 <strptr.include.bb2@113>       If *str
00005C32 <strptr.include.bb2@114>         Poke.l ntptr,*str
00005C3C <strptr.include.bb2@115>         *str\size=clength
00005C62 <strptr.include.bb2@116>         CopyMem_ textptr,&*str\str,clength
00005C7C <strptr.include.bb2@117>         Poke.b *str + 4 + clength,0
00005C80 <strptr.include.bb2@122> End Statement
00005CAE <strptr.include.bb2@137> Statement str_Write{ntptr.l,text.s}
00005CB8 <strptr.include.bb2@138> If ntptr
00005D08 <strptr.include.bb2@139>   !str_Free{ntptr}
00005D1C <strptr.include.bb2@140>   l.l = FLen(text.s)
00005D2E <strptr.include.bb2@141>   If l>0
00005D56 <strptr.include.bb2@142>     *str.str = AllocPooled_ (str_MemPoolHeader,l+1+4)
00005D60 <strptr.include.bb2@143>     If *str
00005D6E <strptr.include.bb2@144>       Poke.l ntptr,*str
00005D78 <strptr.include.bb2@145>       *str\size=l
00005DA0 <strptr.include.bb2@146>       CopyMem_ &text.s,&*str\str,l
00005DBA <strptr.include.bb2@147>       Poke.b *str + 4 + l,0
00005DD2 <strptr.include.bb2@151> End Statement
00005DEC <strptr.include.bb2@213> Function.s str_Read {ntptr.l}
00005DF6 <strptr.include.bb2@214> If ntptr
00005E04 <strptr.include.bb2@215>   *str.str=Peek.l(ntptr)
00005E36 <strptr.include.bb2@216>   If *str Then Function Return Peeks$(&*str\str,*str\size)
00005E54 <strptr.include.bb2@218> Function Return ""
00005E5E <strptr.include.bb2@219> End Function
00005E74 <strptr.include.bb2@221> Statement str_FreeMemPool{}
00005E7E <strptr.include.bb2@222> If str_MemPoolHeader
00005E8E <strptr.include.bb2@223>   DeletePool_ str_MemPoolHeader
00005E96 <strptr.include.bb2@224>   str_MemPoolHeader=0
00005E98 <strptr.include.bb2@226> End Statement
00005EC6 <strptr.include.bb2@227> !autoexit{str_FreeMemPool}
00005EC6 <multilist.include.bb2@44> 
00005EDC <multilist.include.bb2@61> MaxLen ml_tempstring.s = #MAX_MLTEMPSTRING
00005F16 <multilist.include.bb2@78> Function.s _ml_AddPart {pathpart.s,filepart.s}
00005F4A <multilist.include.bb2@80> ml_tempstring = pathpart
00005F70 <multilist.include.bb2@81> AddPart_ &ml_tempstring,&filepart.s,#MAX_MLTEMPSTRING
00005F90 <multilist.include.bb2@82> Function Return Peek.s(&ml_tempstring)
00005FB0 <multilist.include.bb2@83> End Function
00005FDA <multilist.include.bb2@100> Function.s _ml_FilePart {filename.s}
00005FF0 <multilist.include.bb2@101> fptr.l = FilePart_(&filename.s)
00005FFA <multilist.include.bb2@102> If fptr
00006022 <multilist.include.bb2@103>   filepart.s = Peek.s(fptr)
00006028 <multilist.include.bb2@104> Else
00006050 <multilist.include.bb2@105>   filepath.s = ""
0000607A <multilist.include.bb2@107> Function Return filepart.s
00006098 <multilist.include.bb2@108> End Function
000060DE <multilist.include.bb2@153> Function.l ml_AddNode {*prev_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l}
000060FE <multilist.include.bb2@154> *node.ml_node = AllocMem_ (SizeOf.ml_node,#MEMF_CLEAR)
00006108 <multilist.include.bb2@155> If *node
00006114 <multilist.include.bb2@156>   \prev_node = *prev_node
0000611E <multilist.include.bb2@158>   If *prev_node
0000612A <multilist.include.bb2@159>     \next_node = *prev_node\next_node
00006134 <multilist.include.bb2@160>     *prev_node\next_node = *node
0000613A <multilist.include.bb2@161>   Else
00006146 <multilist.include.bb2@162>     \next_node = 0
00006154 <multilist.include.bb2@165>   If \next_node
00006164 <multilist.include.bb2@166>     \next_node\prev_node = *node
00006172 <multilist.include.bb2@169>   \typ      = typ
0000618E <multilist.include.bb2@170>   str_WritePtr {&\label_text,&label_text.s}
000061AA <multilist.include.bb2@171>   str_WritePtr {&\user_text ,&user_text.s}
000061B6 <multilist.include.bb2@172>   \user_data = user_data
000061C0 <multilist.include.bb2@173>   \expanded = False
000061CA <multilist.include.bb2@175> Function Return *node
000061E6 <multilist.include.bb2@176> End Function
0000622C <multilist.include.bb2@243> Function.l ml_AddNodeSorted {*next_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l}
00006236 <multilist.include.bb2@244> If *next_node
00006256 <multilist.include.bb2@245>   *node.ml_node = AllocMem_ (SizeOf.ml_node,#MEMF_CLEAR)
00006260 <multilist.include.bb2@246>   If *node
0000626E <multilist.include.bb2@247>     *parent_node.ml_node = *next_node\parent_node
00006294 <multilist.include.bb2@248>     While *next_node\prev_node:*next_node = *next_node\prev_node:Wend
0000629C <multilist.include.bb2@249>     *prev_node.ml_node = 0
000062E8 <multilist.include.bb2@250>     b.s = UCase$(label_text.s)
000062F8 <multilist.include.bb2@251>     If typ><#node_tree
000062FE <multilist.include.bb2@252>       breakme.l = False
00006318 <multilist.include.bb2@253>       While *next_node AND breakme = False
0000632E <multilist.include.bb2@254>         If *next_node\typ=#node_tree
00006334 <multilist.include.bb2@255>           *prev_node = *next_node
0000633E <multilist.include.bb2@256>           *next_node = *next_node\next_node
00006344 <multilist.include.bb2@257>         Else
0000634A <multilist.include.bb2@258>           breakme.l = True
00006350 <multilist.include.bb2@260>       Wend
00006356 <multilist.include.bb2@263>     breakme.l = False
00006370 <multilist.include.bb2@264>     While *next_node AND breakme=False
000063C2 <multilist.include.bb2@266>       a.s = UCase$(str_Read{&*next_node\label_text})
00006422 <multilist.include.bb2@267>       If a.s<b.s AND typ=*next_node\typ
00006428 <multilist.include.bb2@269>         *prev_node = *next_node
00006432 <multilist.include.bb2@270>         *next_node = *next_node\next_node
00006438 <multilist.include.bb2@272>       Else
0000643E <multilist.include.bb2@273>         breakme=True
00006444 <multilist.include.bb2@275>     Wend
00006476 <multilist.include.bb2@277>     If *prev_node=0 AND *parent_node><0 Then *parent_node\child_node = *node
0000648C <multilist.include.bb2@279>     If *next_node Then *next_node\prev_node = *node
000064A0 <multilist.include.bb2@280>     If *prev_node Then *prev_node\next_node = *node
000064AC <multilist.include.bb2@282>     \prev_node = *prev_node
000064B6 <multilist.include.bb2@283>     \next_node = *next_node
000064C2 <multilist.include.bb2@284>     \parent_node = *parent_node
000064D0 <multilist.include.bb2@285>     \child_node = 0
000064DE <multilist.include.bb2@287>     \typ      = typ
000064FA <multilist.include.bb2@288>     str_WritePtr {&\label_text,&label_text.s}
00006516 <multilist.include.bb2@289>     str_WritePtr {&\user_text ,&user_text.s}
00006522 <multilist.include.bb2@290>     \user_data = user_data
0000652C <multilist.include.bb2@291>     \expanded = False
00006550 <multilist.include.bb2@292>     If \parent_node Then \parent_node\typ = #node_tree
00006556 <multilist.include.bb2@294> Else
000065C0 <multilist.include.bb2@295>   *node = ml_AddNode {0,typ,label_text.s,user_text.s,user_data.l}
000065CA <multilist.include.bb2@297> Function Return *node
000065E6 <multilist.include.bb2@298> End Function
0000662C <multilist.include.bb2@320> Function.l ml_AddChildSorted {*parent_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l}
00006636 <multilist.include.bb2@321> If *parent_node
00006656 <multilist.include.bb2@322>   *node.ml_node = AllocMem_ (SizeOf.ml_node,#MEMF_CLEAR)
00006660 <multilist.include.bb2@323>   If *node
00006668 <multilist.include.bb2@324>     *prev_node.ml_node = 0
00006676 <multilist.include.bb2@325>     *next_node.ml_node = *parent_node\child_node
000066C2 <multilist.include.bb2@327>     b.s = UCase$(label_text.s)
000066D2 <multilist.include.bb2@328>     If typ><#node_tree
000066D8 <multilist.include.bb2@329>       breakme.l = False
000066F2 <multilist.include.bb2@330>       While *next_node AND breakme = False
00006708 <multilist.include.bb2@331>         If *next_node\typ=#node_tree
0000670E <multilist.include.bb2@332>           *prev_node = *next_node
00006718 <multilist.include.bb2@333>           *next_node = *next_node\next_node
0000671E <multilist.include.bb2@334>         Else
00006724 <multilist.include.bb2@335>           breakme.l = True
0000672A <multilist.include.bb2@337>       Wend
00006730 <multilist.include.bb2@340>     breakme.l = False
0000674A <multilist.include.bb2@341>     While *next_node AND breakme=False
0000679C <multilist.include.bb2@343>       a.s = UCase$(str_Read{&*next_node\label_text})
000067FC <multilist.include.bb2@344>       If a.s<b.s AND typ=*next_node\typ
00006802 <multilist.include.bb2@345>         *prev_node = *next_node
0000680C <multilist.include.bb2@346>         *next_node = *next_node\next_node
00006812 <multilist.include.bb2@348>       Else
00006818 <multilist.include.bb2@349>         breakme=True
0000681E <multilist.include.bb2@351>     Wend
0000683C <multilist.include.bb2@353>     If *prev_node=0 Then *parent_node\child_node = *node
00006852 <multilist.include.bb2@354>     If *next_node Then *next_node\prev_node = *node
00006866 <multilist.include.bb2@355>     If *prev_node Then *prev_node\next_node = *node
00006872 <multilist.include.bb2@357>     \prev_node = *prev_node
0000687C <multilist.include.bb2@358>     \next_node = *next_node
00006888 <multilist.include.bb2@359>     \parent_node = *parent_node
00006896 <multilist.include.bb2@360>     \child_node = 0
000068A4 <multilist.include.bb2@362>     \typ      = typ
000068C0 <multilist.include.bb2@363>     str_WritePtr {&\label_text,&label_text.s}
000068DC <multilist.include.bb2@364>     str_WritePtr {&\user_text ,&user_text.s}
000068E8 <multilist.include.bb2@365>     \user_data = user_data
000068F2 <multilist.include.bb2@366>     \expanded = False
00006904 <multilist.include.bb2@367>     \parent_node\typ = #node_tree
0000690A <multilist.include.bb2@369> Else
00006974 <multilist.include.bb2@370>   *node = ml_AddNode {0,typ,label_text.s,user_text.s,user_data.l}
0000697E <multilist.include.bb2@372> Function Return *node
0000699A <multilist.include.bb2@373> End Function
000069B4 <multilist.include.bb2@390> Function.l ml_GetFirstNode {*node.ml_node}
000069E4 <multilist.include.bb2@391> If *node Then While *node\prev_node:*node=*node\prev_node:Wend
000069EE <multilist.include.bb2@392> Function Return *node
000069F4 <multilist.include.bb2@393> End Function
00006A0E <multilist.include.bb2@406> Statement ml_RemoveNode {*node.ml_node}
00006A18 <multilist.include.bb2@407> If *node
00006A3A <multilist.include.bb2@408>   If \prev_node Then \prev_node\next_node = \next_node
00006A5E <multilist.include.bb2@409>   If \next_node Then \next_node\prev_node = \prev_node
00006A70 <multilist.include.bb2@410>   If \parent_node
00006A88 <multilist.include.bb2@411>     If \parent_node\child_node = *node
00006A9C <multilist.include.bb2@412>       \parent_node\child_node = \next_node
00006AAE <multilist.include.bb2@415>   While \child_node
00006ABE <multilist.include.bb2@416>     ml_RemoveNode {\child_node}
00006AC4 <multilist.include.bb2@417>   Wend
00006AD4 <multilist.include.bb2@418>   str_Free {&\label_text}
00006AE4 <multilist.include.bb2@419>   str_Free {&\user_text}
00006AFE <multilist.include.bb2@420>   FreeMem_ *node,SizeOf.ml_node
00006B02 <multilist.include.bb2@422> End Statement
00006B1C <multilist.include.bb2@439> Function.l ml_GetNextNode {*node.ml_node}
00006B26 <multilist.include.bb2@440> If *node
00006B32 <multilist.include.bb2@441>   Function Return *node\next_node
00006B38 <multilist.include.bb2@442> Else
00006B44 <multilist.include.bb2@443>   Function Return 0
00006B4A <multilist.include.bb2@445> End Function
00006B64 <multilist.include.bb2@501> Function.s ml_GetLabelString{*node.ml_node}
00006B6E <multilist.include.bb2@502> If *node
00006B9E <multilist.include.bb2@503>   Function Return str_Read{&\label_text}
00006BA4 <multilist.include.bb2@504> Else
00006BC2 <multilist.include.bb2@505>   Function Return ""
00006BCC <multilist.include.bb2@507> End Function
00006BE6 <multilist.include.bb2@565> Function.s ml_GetUserString{*node.ml_node}
00006BF0 <multilist.include.bb2@566> If *node
00006C20 <multilist.include.bb2@567>   Function Return str_Read{&\user_text}
00006C26 <multilist.include.bb2@568> Else
00006C44 <multilist.include.bb2@569>   Function Return ""
00006C4E <multilist.include.bb2@571> End Function
00006C68 <multilist.include.bb2@585> Statement ml_RemoveAllNodes {*node.ml_node}
00006C98 <multilist.include.bb2@586> If *node Then While *node\prev_node:*node=*node\prev_node:Wend
00006CA2 <multilist.include.bb2@588> While *node
00006CAC <multilist.include.bb2@589>   *next_node.ml_node=*node\next_node
00006CCE <multilist.include.bb2@590>   If \prev_node Then \prev_node\next_node = \next_node
00006CF2 <multilist.include.bb2@591>   If \next_node Then \next_node\prev_node = \prev_node
00006D04 <multilist.include.bb2@592>   If \parent_node
00006D1C <multilist.include.bb2@593>     If \parent_node\child_node = *node
00006D30 <multilist.include.bb2@594>       \parent_node\child_node = \next_node
00006D42 <multilist.include.bb2@597>   While \child_node
00006D52 <multilist.include.bb2@598>     ml_RemoveNode {\child_node}
00006D58 <multilist.include.bb2@599>   Wend
00006D68 <multilist.include.bb2@600>   str_Free {&\label_text}
00006D78 <multilist.include.bb2@601>   str_Free {&\user_text}
00006D92 <multilist.include.bb2@602>   FreeMem_ *node,SizeOf.ml_node
00006D98 <multilist.include.bb2@603>   *node = *next_node
00006D9E <multilist.include.bb2@604> Wend
00006DA2 <multilist.include.bb2@605> End Statement
00006DBC <multilist.include.bb2@618> Statement ml_RemoveAllChildren {*node.ml_node}
00006DC6 <multilist.include.bb2@619> If *node
00006DD8 <multilist.include.bb2@620>   While \child_node
00006DE8 <multilist.include.bb2@621>     ml_RemoveNode {\child_node}
00006DEE <multilist.include.bb2@622>   Wend
00006DF2 <multilist.include.bb2@624> End Statement
00006E0C <multilist.include.bb2@638> Statement ml_SetExpanded {*node.ml_node}
00006E16 <multilist.include.bb2@639> If *node
00006E20 <multilist.include.bb2@640>   \expanded = True
00006E24 <multilist.include.bb2@642> End Statement
00006E3E <multilist.include.bb2@656> Statement ml_SetCollapsed {*node.ml_node}
00006E48 <multilist.include.bb2@657> If *node
00006E52 <multilist.include.bb2@658>   \expanded = False
00006E56 <multilist.include.bb2@660> End Statement
00006E70 <multilist.include.bb2@713> Function.l ml_GetRowHeight {*node.ml_node}
00006E78 <multilist.include.bb2@714> lpos.l = 0
00006E82 <multilist.include.bb2@715> While *node
00006E98 <multilist.include.bb2@716>   If \typ = #node_tree
00006EAC <multilist.include.bb2@717>     If \expanded
00006ED0 <multilist.include.bb2@718>       lpos + ml_GetRowHeight{\child_node}
00006EDE <multilist.include.bb2@721>   lpos + 1
00006EE8 <multilist.include.bb2@722>   *node=\next_node
00006EEE <multilist.include.bb2@723> Wend
00006EF8 <multilist.include.bb2@724> Function Return lpos
00006EFE <multilist.include.bb2@725> End Function
00006F1C <multilist.include.bb2@742> Function.l ml_GetNode {*node.ml_node,spos.l}
00006F24 <multilist.include.bb2@743> lpos.l = 0
00006F2E <multilist.include.bb2@744> While *node
00006F4C <multilist.include.bb2@745>   If lpos=spos Then Poke.l ?getnode_res,*node
00006F62 <multilist.include.bb2@746>   If \typ = #node_tree
00006F76 <multilist.include.bb2@747>     If \expanded
00006FAA <multilist.include.bb2@748>       lpos + ml_GetNode{\child_node,spos-lpos-1}
00006FB8 <multilist.include.bb2@751>   lpos + 1
00006FC2 <multilist.include.bb2@752>   *node=\next_node
00006FC8 <multilist.include.bb2@753> Wend
00006FD2 <multilist.include.bb2@754> Function Return lpos
00006FD6 <multilist.include.bb2@756> Dc.l 0
00006FDC <multilist.include.bb2@757> End Function
00006FF6 <multilist.include.bb2@795> Statement ml_DeactivateAll {*node.ml_node}
00007000 <multilist.include.bb2@796> While *node
0000700A <multilist.include.bb2@797>   *node\active = False
00007020 <multilist.include.bb2@798>   If \typ = #node_tree
00007030 <multilist.include.bb2@799>     ml_DeactivateAll{\child_node}
0000703A <multilist.include.bb2@801>   *node=\next_node
00007040 <multilist.include.bb2@802> Wend
00007044 <multilist.include.bb2@803> End Statement
00007066 <multilist.include.bb2@821> Function.l ml_GetPixelWidth {*rp.RastPort,*node.ml_node,sdepth.l}
0000706E <multilist.include.bb2@822> pixwidth.l=1
00007088 <multilist.include.bb2@823> xs.l = sdepth * *rp\TxWidth*2
00007092 <multilist.include.bb2@824> While *node
000070A8 <multilist.include.bb2@825>   If \typ = #node_tree
000070BC <multilist.include.bb2@826>     If \expanded
00007112 <multilist.include.bb2@827>      b.s = "[-] "+str_Read{&\label_text}
0000714C <multilist.include.bb2@828>      tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) +xs
0000715E <multilist.include.bb2@829>      pixwidth.l = Max(tstwidth,pixwidth)
00007180 <multilist.include.bb2@830>      tstwidth.l = ml_GetPixelWidth{*rp,\child_node,sdepth+1}
00007186 <multilist.include.bb2@831>     Else
000071DC <multilist.include.bb2@832>      b.s = "[+] "+str_Read{&\label_text}
00007216 <multilist.include.bb2@833>      tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) + xs
0000721C <multilist.include.bb2@835>   Else
00007256 <multilist.include.bb2@836>     b.s = str_Read{&\label_text}
00007290 <multilist.include.bb2@837>     tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) + xs
000072A2 <multilist.include.bb2@839>   pixwidth.l = Max(tstwidth,pixwidth)
000072AC <multilist.include.bb2@840>   *node=\next_node
000072B2 <multilist.include.bb2@841> Wend
000072BC <multilist.include.bb2@842> Function Return pixwidth
000072D0 <multilist.include.bb2@843> End Function
00007316 <multilist.include.bb2@870> Function.l ml_Draw {*rp.RastPort,*node.ml_node,firstpos.l,lastpos.l,x.l,y.l,sdepth.l,bgpen.l,bgpen_m.l}
0000731E <multilist.include.bb2@871> lpos.l = 0
0000733C <multilist.include.bb2@872> x1.l = x + sdepth   * *rp\TxWidth ; *2
00007368 <multilist.include.bb2@873> y1.l = y - firstpos * *rp\TxHeight + *rp\TxBaseline
00007386 <multilist.include.bb2@874> y2.l = y - firstpos * *rp\TxHeight
000073A0 <multilist.include.bb2@875> SetDrMd_ *rp,1
000073BA <multilist.include.bb2@876> While *node AND lpos<=lastpos
0000743C <multilist.include.bb2@877>   SetAPen_ *rp,bgpen:RectFill_ *rp,x,y2+lpos * *rp\TxHeight,3200,y2+(lpos+1) * *rp\TxHeight-1
00007450 <multilist.include.bb2@879>   If \active
00007468 <multilist.include.bb2@880>     SetBPen_ *rp,bgpen_m
0000746E <multilist.include.bb2@881>   Else
00007486 <multilist.include.bb2@882>     SetBPen_ *rp,bgpen
0000749C <multilist.include.bb2@884>   If \typ = #node_tree
000074B6 <multilist.include.bb2@886>     SetAPen_ *rp,2
000074CA <multilist.include.bb2@887>     If \expanded
000074D8 <multilist.include.bb2@888>       If lpos>=firstpos
0000752E <multilist.include.bb2@889>         b.s = "[-] "+str_Read{&\label_text}
00007564 <multilist.include.bb2@890>         Move_ *rp,x1,y1+lpos * *rp\TxHeight
00007594 <multilist.include.bb2@891>         Text_ *rp,&b.s,Peek.l(&b.s-4)
0000761C <multilist.include.bb2@893>       lpos + ml_Draw{*rp,\child_node,firstpos-lpos-1,lastpos-lpos-1,x,y,sdepth+1,bgpen,bgpen_m}
00007622 <multilist.include.bb2@894>     Else
00007630 <multilist.include.bb2@895>       If lpos>=firstpos
00007686 <multilist.include.bb2@896>         b.s = "[+] "+str_Read{&\label_text}
000076BC <multilist.include.bb2@897>         Move_ *rp,x1,y1+lpos * *rp\TxHeight
000076EC <multilist.include.bb2@898>         Text_ *rp,&b.s,Peek.l(&b.s-4)
000076F2 <multilist.include.bb2@901>   Else
0000770C <multilist.include.bb2@902>     SetAPen_ *rp,1
0000771A <multilist.include.bb2@903>     If lpos>=firstpos
00007754 <multilist.include.bb2@904>       b.s = str_Read{&\label_text}
0000778A <multilist.include.bb2@905>       Move_ *rp,x1,y1+lpos * *rp\TxHeight
000077BA <multilist.include.bb2@906>       Text_ *rp,&b.s,Peek.l(&b.s-4)
000077C8 <multilist.include.bb2@909>   lpos + 1
000077D2 <multilist.include.bb2@910>   *node=\next_node
000077D8 <multilist.include.bb2@911> Wend
000077E2 <multilist.include.bb2@912> Function Return lpos
000077F6 <multilist.include.bb2@913> End Function
00007834 <multilist.include.bb2@928> Statement ml_AddPathChild {*parent_node.ml_node,path.s,@pattern.s}
0000783E <multilist.include.bb2@930> If *parent_node
000078A4 <multilist.include.bb2@931>   If pattern.s = "" Then pattern.s = "~(#?.(info|bak|xtra))"
000078C4 <multilist.include.bb2@932>   lock.l = Lock_(&path.s,#ACCESS_READ)
000078CE <multilist.include.bb2@933>   If lock
000078E2 <multilist.include.bb2@934>     oldlock.l = CurrentDir_(lock)
000078EC <multilist.include.bb2@935>     If oldlock
00007954 <multilist.include.bb2@937>       buf.s = LSet$(" ",FLen(pattern.s)*3+4)
00007984 <multilist.include.bb2@938>       ParsePatternNoCase_ &pattern.s,&buf.s,FLen(buf.s)
000079AE <multilist.include.bb2@939>       pattern.s = Peek.s(&buf.s)
000079D0 <multilist.include.bb2@940>       If Examine_(lock,&fib)
000079F2 <multilist.include.bb2@941>         While ExNext_(lock,&fib)
00007A76 <multilist.include.bb2@942>           filename.s = _ml_AddPart{path.s,Peek.s(&fib\fib_FileName)}
00007A8E <multilist.include.bb2@943>           If fib\fib_DirEntryType<0
00007AB6 <multilist.include.bb2@944>             If MatchPatternNoCase_ (&pattern.s,&fib\fib_FileName)
00007B4C <multilist.include.bb2@945>               *node.ml_node = ml_AddChildSorted {*parent_node,#node_simple,_ml_FilePart{filename.s},filename.s,0}
00007B52 <multilist.include.bb2@947>           Else
00007BE8 <multilist.include.bb2@948>             *node.ml_node = ml_AddChildSorted {*parent_node,#node_tree,_ml_FilePart{filename.s},filename.s,1}
00007BEE <multilist.include.bb2@950>         Wend
00007C02 <multilist.include.bb2@953>       oldlock = CurrentDir_ (oldlock)
00007C12 <multilist.include.bb2@955>     UnLock_ lock
00007C3C <multilist.include.bb2@958> End Statement
00007C7E <multilist.include.bb2@976> Function.l ml_AddPathNode {*node.ml_node,path.s,@pattern.s,@alldirs.l}
00007CE4 <multilist.include.bb2@978>   If pattern.s = "" Then pattern.s = "~(#?.(info|bak|xtra))"
00007D04 <multilist.include.bb2@979>   lock.l = Lock_(&path.s,#ACCESS_READ)
00007D0E <multilist.include.bb2@980>   If lock
00007D22 <multilist.include.bb2@981>     oldlock.l = CurrentDir_(lock)
00007D2C <multilist.include.bb2@982>     If oldlock
00007D94 <multilist.include.bb2@983>       buf.s = LSet$(" ",FLen(pattern.s)*3+4)
00007DC4 <multilist.include.bb2@984>       ParsePatternNoCase_ &pattern.s,&buf.s,FLen(buf.s)
00007DEE <multilist.include.bb2@985>       pattern.s = Peek.s(&buf.s)
00007E10 <multilist.include.bb2@986>       If Examine_(lock,&fib)
00007E32 <multilist.include.bb2@987>         While ExNext_(lock,&fib)
00007EB6 <multilist.include.bb2@988>           filename.s = _ml_AddPart{path.s,Peek.s(&fib\fib_FileName)}
00007ECE <multilist.include.bb2@989>           If fib\fib_DirEntryType<0
00007EF6 <multilist.include.bb2@990>             If MatchPatternNoCase_ (&pattern.s,&fib\fib_FileName)
00007F8C <multilist.include.bb2@991>               *node.ml_node = ml_AddNodeSorted {*node,#node_simple,_ml_FilePart{filename.s},filename.s,0}
00007F92 <multilist.include.bb2@993>           Else
00007F9C <multilist.include.bb2@994>              If alldirs
00008032 <multilist.include.bb2@995>                *node.ml_node = ml_AddNodeSorted {*node,#node_tree,_ml_FilePart{filename.s},filename.s,1}
00008038 <multilist.include.bb2@996>              Else
00008060 <multilist.include.bb2@997>                If MatchPatternNoCase_ (&pattern.s,&fib\fib_FileName)
000080F6 <multilist.include.bb2@998>                  *node.ml_node = ml_AddNodeSorted {*node,#node_tree,_ml_FilePart{filename.s},filename.s,1}
000080FC <multilist.include.bb2@1002>         Wend
00008110 <multilist.include.bb2@1004>       oldlock = CurrentDir_ (oldlock)
00008120 <multilist.include.bb2@1006>     UnLock_ lock
00008150 <multilist.include.bb2@1008> If *node Then While *node\prev_node:*node=*node\prev_node:Wend
0000815A <multilist.include.bb2@1009> Function Return *node
00008186 <multilist.include.bb2@1010> End Function
00008186 <dos.include.bb2@57> XINCLUDE "useful.include.bb2"
0000819C <dos.include.bb2@60> MaxLen dos_tempstring.s = #MAX_DOSTEMPSTRING
000081A4 <dos.include.bb2@62> *dos_WBMsg.WBStartup    = 0
000081AC <dos.include.bb2@63> *dos_icon.DiskObject    = 0
000081D4 <dos.include.bb2@64> dos_iconfile.s          = ""
000081DC <dos.include.bb2@65> dos_iconmodified.l      = 0
00008204 <dos.include.bb2@66> dos_debugexe.s          = ""
0000822C <dos.include.bb2@67> dos_lastscanpatt.s      = ""
00008254 <dos.include.bb2@68> dos_lastscanpath.s      = ""
0000825C <dos.include.bb2@69> dos_lastscanflags.l     = 0
00008264 <dos.include.bb2@70> *dos_scanlist.ml_node   = 0
0000826C <dos.include.bb2@71> *dos_scanroot.ml_node   = 0
00008274 <dos.include.bb2@72> *dos_devicelist.ml_node = 0
0000827C <dos.include.bb2@73> *dos_deviceroot.ml_node = 0
00008284 <dos.include.bb2@74> *dos_volumelist.ml_node = 0
0000828C <dos.include.bb2@75> *dos_volumeroot.ml_node = 0
00008294 <dos.include.bb2@76> *dos_assignlist.ml_node = 0
0000829C <dos.include.bb2@77> *dos_assignroot.ml_node = 0
000082BC <dos.include.bb2@78> *dos_fib.FileInfoBlock  = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
000082C4 <dos.include.bb2@79> version_iconlib.l = 0
000082CC <dos.include.bb2@80> version_doslib.l  = 0
000082F4 <dos.include.bb2@82> Dim List dos_toolstring.s(0)
0000830A <dos.include.bb2@113> Function.l dos_FromBlitz{}
00008316 <dos.include.bb2@114> Function Return FromBlitz
0000831A <dos.include.bb2@115> End Function
00008330 <dos.include.bb2@128> Function.l dos_FromCLI {}
0000834A <dos.include.bb2@129> If dos_FromBlitz{} Then Function Return 0
00008360 <dos.include.bb2@130> *pr.Process = FindTask_(0)
0000838A <dos.include.bb2@131> If *pr\pr_CLI = 0 Then succ.l=False:Else succ=True
00008394 <dos.include.bb2@132> Function Return succ
0000839A <dos.include.bb2@133> End Function
000083B0 <dos.include.bb2@146> Function.l dos_FromWB {}
000083CA <dos.include.bb2@147> If dos_FromBlitz{} Then Function Return 0
000083E0 <dos.include.bb2@148> *pr.Process = FindTask_(0)
0000840A <dos.include.bb2@149> If *pr\pr_CLI = 0 Then succ.l=True:Else succ=False
00008414 <dos.include.bb2@150> Function Return succ
0000841A <dos.include.bb2@151> End Function
00008444 <dos.include.bb2@167> Function.l dos_GetLibVersion{library.s}
00008450 <dos.include.bb2@168> libversion.l = -1
00008470 <dos.include.bb2@169> *lib.Library=OpenLibrary_(&library.s,0)
0000847A <dos.include.bb2@170> If *lib
0000848A <dos.include.bb2@171> libversion.l = *lib\lib_Version
0000849A <dos.include.bb2@172> CloseLibrary_ *lib
000084A4 <dos.include.bb2@174> Function Return libversion
000084BE <dos.include.bb2@175> End Function
000084DC <dos.include.bb2@187> arghandle\strings[0] = 0
000084E8 <dos.include.bb2@188> arghandle\arghandle  = 0
000084FE <dos.include.bb2@204> Statement dos_ReadArgs {}
0000850C <dos.include.bb2@206> If dos_FromCLI{}
00008534 <dos.include.bb2@207>   a.s = "all/M"
00008572 <dos.include.bb2@208>   arghandle\arghandle = ReadArgs_ (&a.s,&arghandle\strings[0],0)
00008580 <dos.include.bb2@209>   arghandle\argcounter = 0
00008592 <dos.include.bb2@211> End Statement
000085A8 <dos.include.bb2@229> Function.l dos_GetNumArgs {}
000085C2 <dos.include.bb2@231> If arghandle\arghandle = 0 Then dos_ReadArgs{}
000085CA <dos.include.bb2@232> offset.l = 0
000085EA <dos.include.bb2@233> If arghandle\strings[0]
00008616 <dos.include.bb2@234>   While Peek.l(arghandle\strings[0]+offset)
00008624 <dos.include.bb2@235>     offset + 4
0000862A <dos.include.bb2@236>   Wend
0000863E <dos.include.bb2@238> Function Return offset/4
00008644 <dos.include.bb2@239> End Function
0000865E <dos.include.bb2@301> Function.s dos_GetArg {argc.l}
00008678 <dos.include.bb2@303> If arghandle\arghandle = 0 Then dos_ReadArgs{}
000086A0 <dos.include.bb2@304> arg.s = ""
000086AE <dos.include.bb2@305> If arghandle\arghandle
000086CE <dos.include.bb2@306>   If arghandle\strings[0]
000086EE <dos.include.bb2@307>     If argc>1 Then argc-1
00008722 <dos.include.bb2@308>     If argc<dos_GetNumArgs{} AND argc>=0
00008752 <dos.include.bb2@309>       sptr.l = Peek.l(arghandle\strings[0]+(argc LSL 2))
0000875C <dos.include.bb2@310>       If sptr
00008784 <dos.include.bb2@311>         arg.s = Peek.s(sptr)
00008790 <dos.include.bb2@312>         arghandle\argcounter = argc
000087BA <dos.include.bb2@317> Function Return arg.s
000087D2 <dos.include.bb2@318> End Function
000087E8 <dos.include.bb2@329> Statement dos_FreeArgs{}
000087F6 <dos.include.bb2@331> If arghandle\arghandle
00008808 <dos.include.bb2@332>   FreeArgs_ arghandle\arghandle
00008810 <dos.include.bb2@333>   arghandle\arghandle = False
00008812 <dos.include.bb2@335> End Statement
0000884C <dos.include.bb2@524> Function.s dos_AddPart {pathpart.s,filepart.s}
00008880 <dos.include.bb2@526> dos_tempstring = pathpart
000088A6 <dos.include.bb2@527> AddPart_ &dos_tempstring,&filepart.s,#MAX_DOSTEMPSTRING
000088C6 <dos.include.bb2@528> Function Return Peek.s(&dos_tempstring)
000088E6 <dos.include.bb2@529> End Function
00008910 <dos.include.bb2@644> Function.s dos_FilePart {filename.s}
00008926 <dos.include.bb2@645> fptr.l = FilePart_(&filename.s)
00008930 <dos.include.bb2@646> If fptr
00008958 <dos.include.bb2@647>   filepart.s = Peek.s(fptr)
0000895E <dos.include.bb2@648> Else
00008986 <dos.include.bb2@649>   filepath.s = ""
000089B0 <dos.include.bb2@651> Function Return filepart.s
000089CE <dos.include.bb2@652> End Function
000089F8 <dos.include.bb2@675> Function.s dos_PathPart {filename.s}
00008A68 <dos.include.bb2@676> pathpart.s = Left$(filename.s,PathPart_(&filename.s)-&filename.s)
00008A92 <dos.include.bb2@677> Function Return pathpart.s
00008AB0 <dos.include.bb2@678> End Function
00008ADA <dos.include.bb2@694> Function.s dos_ParentPath {path.s}
00008B28 <dos.include.bb2@695> Function Return dos_PathPart{path.s}
00008B46 <dos.include.bb2@696> End Function
00008B70 <dos.include.bb2@713> Function.l dos_Exist {filename.s}
00008B90 <dos.include.bb2@714> lock.l=Lock_(&filename.s,#ACCESS_READ)
00008BBC <dos.include.bb2@715> If lock Then UnLock_ lock:succ.l=True:Else succ=False
00008BC6 <dos.include.bb2@716> Function Return succ
00008BE0 <dos.include.bb2@717> End Function
00008BFA <dos.include.bb2@735> Function.l dos_CreateDosList{flags.l}
00008C0E <dos.include.bb2@736> *doslist.DosList = LockDosList_(flags)
00008C16 <dos.include.bb2@737> *node.ml_node  = 0
00008C20 <dos.include.bb2@738> If *doslist
00008C3C <dos.include.bb2@740>     *doslist = NextDosEntry_(*doslist,flags)
00008C46 <dos.include.bb2@741>     If *doslist
00008C8C <dos.include.bb2@742>       pathname.s = LSet$("_",64)
00008CB6 <dos.include.bb2@743>       NameFromLock_ *doslist\dol_Lock,&pathname.s,64
00008CE0 <dos.include.bb2@744>       pathname.s = Peek.s(&pathname)
00008D7C <dos.include.bb2@745>       !BADDR{name.s,*doslist\dol_Name}
00008DC2 <dos.include.bb2@746>       name +":"
00008E2A <dos.include.bb2@747>       *node.ml_node = ml_AddNodeSorted{*node,#node_simple,name,pathname,1}
00008E42 <dos.include.bb2@749>   Until *doslist = 0
00008E52 <dos.include.bb2@750>   UnLockDosList_(flags)
00008E60 <dos.include.bb2@752> *node = ml_GetFirstNode{*node}
00008E6A <dos.include.bb2@753> Function Return *node
00008E7E <dos.include.bb2@754> End Function
00008EA8 <dos.include.bb2@864> Function.l dos_CheckAssign {name.s}
00008F56 <dos.include.bb2@865> If Right$(name.s,1)=":" Then name.s = UnLeft$(name.s,1)
00008F6C <dos.include.bb2@866> *assignlist.DosList = LockDosList_(#LDF_READ|#LDF_ASSIGNS)
00008F76 <dos.include.bb2@867> If *assignlist
00008F9E <dos.include.bb2@868>   found.l = FindDosEntry_(*assignlist,&name.s,#LDF_ASSIGNS)
00008FA8 <dos.include.bb2@869>   If found
00008FAE <dos.include.bb2@870>     succ.l = True
00008FB4 <dos.include.bb2@871>   Else
00008FBA <dos.include.bb2@872>     succ.l = False
00008FCC <dos.include.bb2@874>   UnLockDosList_(#LDF_READ|#LDF_ASSIGNS)
00008FD6 <dos.include.bb2@876> Function Return succ.l
00008FF0 <dos.include.bb2@877> End Function
0000901A <dos.include.bb2@1131> Function.s dos_GetProgDir {defaultdir.s}
00009028 <dos.include.bb2@1133> If dos_FromBlitz{}
000090F2 <dos.include.bb2@1134>   If defaultdir="" AND dos_debugexe><"" Then defaultdir=dos_PathPart{dos_debugexe}
0000911C <dos.include.bb2@1135>   Function Return defaultdir.s
00009144 <dos.include.bb2@1137> NameFromLock_ GetProgramDir_(),&dos_tempstring,#MAX_DOSTEMPSTRING
0000916E <dos.include.bb2@1138> path.s=Peek.s(&dos_tempstring)
00009198 <dos.include.bb2@1140> Function Return path.s
000091B6 <dos.include.bb2@1141> End Function
000091E0 <dos.include.bb2@1159> Function.s dos_GetProgFile {defaultexe.s}
00009252 <dos.include.bb2@1161> If defaultexe = "" Then defaultexe = dos_debugexe
0000927A <dos.include.bb2@1162> exe.s = ""
00009288 <dos.include.bb2@1163> If dos_FromBlitz{}
000092BC <dos.include.bb2@1164>   exe = defaultexe
000092CA <dos.include.bb2@1167> If dos_FromWB{}
000092EC <dos.include.bb2@1173>   exe.s = ProgPath$
000092FA <dos.include.bb2@1177> If dos_FromCLI{}
0000931E <dos.include.bb2@1178>   If GetProgramName_ (&dos_tempstring,#MAX_DOSTEMPSTRING  )
00009348 <dos.include.bb2@1179>     exe = Peek.s(&dos_tempstring)
00009372 <dos.include.bb2@1182> Function Return exe
00009390 <dos.include.bb2@1183> End Function
000093BA <dos.include.bb2@1206> Function.s dos_GetStartFile {defaultfile.s}
000093E2 <dos.include.bb2@1208> fil.s = ""
000093F0 <dos.include.bb2@1209> If dos_FromBlitz{}
00009424 <dos.include.bb2@1210>   fil = defaultfile
00009432 <dos.include.bb2@1213> If dos_FromWB{}
00009440 <dos.include.bb2@1224> If dos_FromCLI{}
0000948A <dos.include.bb2@1225>   If dos_GetNumArgs{}>0 Then fil = dos_GetArg{0}
000094B4 <dos.include.bb2@1227> Function Return fil
000094D2 <dos.include.bb2@1228> End Function
000094FC <dos.include.bb2@1244> Function.s dos_GetProgIcon {defaulticon.s}
00009554 <dos.include.bb2@1245> icon.s = dos_GetProgFile{defaulticon}
0000957E <dos.include.bb2@1246> Function Return icon;+".info"
0000959C <dos.include.bb2@1247> End Function
000095B2 <dos.include.bb2@1321> Function.l dos_CloseToolTypes{}
000095B8 <dos.include.bb2@1323> succ.l = False
000095C2 <dos.include.bb2@1324> If *dos_icon
000095CC <dos.include.bb2@1325>   If dos_iconmodified
000095EA <dos.include.bb2@1328>     succ=PutDiskObject_ (&dos_iconfile,*dos_icon)
000095F0 <dos.include.bb2@1329>   Else
000095F6 <dos.include.bb2@1330>     succ=True
00009606 <dos.include.bb2@1332>   FreeDiskObject_ *dos_icon
0000960C <dos.include.bb2@1333>   dos_iconmodified = False
00009614 <dos.include.bb2@1334>   *dos_icon        = 0
0000963C <dos.include.bb2@1335>   dos_iconfile.s   = ""
00009646 <dos.include.bb2@1336>   ClearList dos_toolstring()
00009650 <dos.include.bb2@1338> Function Return succ
00009664 <dos.include.bb2@1339> End Function
0000967A <dos.include.bb2@1349> Statement dos_FlushToolTypes{}
00009680 <dos.include.bb2@1350> dos_CloseToolTypes{}
00009682 <dos.include.bb2@1351> End Statement
00009698 <dos.include.bb2@1361> Statement dos_Free{}
0000969E <dos.include.bb2@1367> dos_CloseToolTypes{}
000096C2 <dos.include.bb2@1368> If *dos_assignroot Then ml_RemoveAllNodes{*dos_assignroot} : *dos_assignroot=0 : *dos_assignnode = 0
000096E6 <dos.include.bb2@1369> If *dos_deviceroot Then ml_RemoveAllNodes{*dos_deviceroot} : *dos_deviceroot=0 : *dos_devicenode = 0
0000970A <dos.include.bb2@1370> If *dos_volumeroot Then ml_RemoveAllNodes{*dos_volumeroot} : *dos_volumeroot=0 : *dos_volumenode = 0
00009710 <dos.include.bb2@1371> dos_FreeArgs{}
0000973C <dos.include.bb2@1372> If *dos_fib Then FreeDosObject_ #DOS_FIB,*dos_fib : *dos_fib=0
0000973E <dos.include.bb2@1373> End Statement
0000976C <dos.include.bb2@1374> !autoexit {dos_Free}
00009796 <dos.include.bb2@1390> Function.l dos_OpenToolTypes{filename.s}
00009820 <dos.include.bb2@1393> If filename.s = "" Then filename.s = dos_GetProgIcon{""}
000098E8 <dos.include.bb2@1394> If Right$(filename,5)=".info" Then filename = Left$(filename,FLen(filename)-5)
000098F2 <dos.include.bb2@1396> If *dos_icon ; do we already have an icon open ?
0000993C <dos.include.bb2@1397>   If filename><dos_iconfile Then dos_CloseToolTypes{}
00009988 <dos.include.bb2@1399> If *dos_icon=0 AND filename.s><""; there is no icon open yet ? Then open it !
000099C0 <dos.include.bb2@1400>   If version_iconlib=0 Then version_iconlib = dos_GetLibVersion{"icon.library"}
000099D2 <dos.include.bb2@1401>   If version_iconlib<36
000099E8 <dos.include.bb2@1402>     *dos_icon.DiskObject = GetDiskObject_(&filename.s)
000099EE <dos.include.bb2@1403>   Else
00009A04 <dos.include.bb2@1404>     *dos_icon.DiskObject = GetDiskObjectNew_(&filename.s)
00009A38 <dos.include.bb2@1406>   dos_iconfile         = filename
00009A3E <dos.include.bb2@1407>   dos_iconmodified     = False
00009A48 <dos.include.bb2@1409> Function Return *dos_icon
00009A62 <dos.include.bb2@1410> End Function
00009AAC <dos.include.bb2@1440> Function.s dos_GetToolString {toolname.s,def.s,@filename.s}
00009AE2 <dos.include.bb2@1442> If dos_OpenToolTypes{filename} ; do we finally have an icon ?
00009B06 <dos.include.bb2@1443>   succ.l=FindToolType_(*dos_icon\do_ToolTypes,&toolname.s)
00009B10 <dos.include.bb2@1444>   If succ ; we found it!
00009B38 <dos.include.bb2@1445>     a.s=Peek.s(succ)
00009B80 <dos.include.bb2@1448> If succ=False Then a.s = def.s ; set the default
00009C56 <dos.include.bb2@1450> If Peek.b(&a.s)=$22 AND Peek.b(&a.s+FLen(a.s)-1)=$22 Then a.s = Mid$(a.s,2,FLen(a.s)-2)
00009C80 <dos.include.bb2@1451> Function Return a.s
00009CA0 <dos.include.bb2@1452> End Function
00009CDA <dos.include.bb2@1471> Function.l dos_GetToolState {toolname.s,@filename.s}
00009CE0 <dos.include.bb2@1473> tool_exist.l  = False
00009CE6 <dos.include.bb2@1474> tool_active.l = False
00009CEE <dos.include.bb2@1475> res.l = 0
00009D24 <dos.include.bb2@1476> If dos_OpenToolTypes{filename}
00009D32 <dos.include.bb2@1477>   ttp.l = *dos_icon\do_ToolTypes
00009D3C <dos.include.bb2@1478>   If ttp
00009D68 <dos.include.bb2@1479>     While Peek.l(ttp)><0 AND tool_exist=False
00009D76 <dos.include.bb2@1480>       toolptr.l = Peek.l(ttp)
00009D80 <dos.include.bb2@1481>       If toolptr
00009DAE <dos.include.bb2@1483>         string.s   = Peek.s(toolptr)  : activated.l=True
00009E2C <dos.include.bb2@1486>         nospaces.s = Replace$(string.s," ","")
00009E7E <dos.include.bb2@1489>         pos.l      = Instr(nospaces,"=",1)
00009E90 <dos.include.bb2@1490>         If pos>0
00009EFE <dos.include.bb2@1491>           name.s = LCase$(Left$(nospaces,pos-1))
00009F04 <dos.include.bb2@1492>         Else
00009F50 <dos.include.bb2@1493>           name.s = LCase$(nospaces)
0000A01E <dos.include.bb2@1497>         If Left$(name,1)="(" Then name = Right$(name,FLen(name)-1): activated=False
0000A0FE <dos.include.bb2@1498>         If activated=False AND Right$(name,1)=")" Then name = Left$(name,FLen(name)-1)
0000A16A <dos.include.bb2@1500>         If name.s = LCase$(toolname)
0000A170 <dos.include.bb2@1501>           tool_exist = True
0000A18C <dos.include.bb2@1502>           If activated Then tool_active=True:Else tool_active=False
0000A19A <dos.include.bb2@1505>       ttp + SizeOf.l
0000A1A0 <dos.include.bb2@1506>     Wend
0000A1B2 <dos.include.bb2@1509> If tool_exist Then res=1
0000A1C8 <dos.include.bb2@1510> If tool_active Then res=-1
0000A1D2 <dos.include.bb2@1511> Function Return res
0000A1EE <dos.include.bb2@1512> End Function
0000A218 <dos.include.bb2@1528> Function.s dos_Trim{a.s}
0000A2CA <dos.include.bb2@1529> While Peek.b(&a.s)<=32 AND Peek.b(&a.s)>0:a.s=Right$(a.s,FLen(a.s)-1):Wend
0000A3C0 <dos.include.bb2@1530> While Peek.b(&a.s+FLen(a.s)-1)<=32 AND Peek.b(&a.s+FLen(a.s)-1)>0:a.s=Left$(a.s,FLen(a.s)-1):Wend
0000A3EA <dos.include.bb2@1531> Function Return a.s
0000A408 <dos.include.bb2@1532> End Function
0000A446 <dos.include.bb2@1551> Function.l dos_SetToolState {toolname.s,enabled.l,@filename.s}
0000A46C <dos.include.bb2@1553> If AddItem(dos_toolstring())=False Then Function Return 0
0000A472 <dos.include.bb2@1554> tool_exist.l     = False
0000A4A8 <dos.include.bb2@1555> If dos_OpenToolTypes{filename}
0000A4B6 <dos.include.bb2@1556>   ttp.l = *dos_icon\do_ToolTypes
0000A4C0 <dos.include.bb2@1557>   If ttp
0000A4EC <dos.include.bb2@1558>     While Peek.l(ttp)><0 AND tool_exist=False
0000A4FA <dos.include.bb2@1559>       toolptr.l = Peek.l(ttp)
0000A504 <dos.include.bb2@1560>       If toolptr
0000A532 <dos.include.bb2@1562>         string.s   = Peek.s(toolptr)  : activated.l=True
0000A58A <dos.include.bb2@1565>         nospaces.s = dos_Trim{string}
0000A658 <dos.include.bb2@1568>         If Left$(nospaces,1)="(" Then nospaces = Right$(nospaces,FLen(nospaces)-1): activated=False
0000A738 <dos.include.bb2@1569>         If activated=False AND Right$(nospaces,1)=")" Then nospaces = Left$(nospaces,FLen(nospaces)-1)
0000A78A <dos.include.bb2@1572>         pos.l      = Instr(nospaces,"=",1)
0000A79C <dos.include.bb2@1573>         If pos>0
0000A82E <dos.include.bb2@1574>           name.s = dos_Trim{LCase$(Left$(nospaces,pos-1))}
0000A834 <dos.include.bb2@1575>         Else
0000A8A4 <dos.include.bb2@1576>           name.s = dos_Trim{LCase$(nospaces)}
0000A910 <dos.include.bb2@1578>         If name.s = LCase$(toolname)
0000A916 <dos.include.bb2@1579>           tool_exist = True
0000A920 <dos.include.bb2@1581>           If activated
0000A934 <dos.include.bb2@1582>             If enabled=False
0000A992 <dos.include.bb2@1583>               dos_toolstring() = "("+nospaces+")"
0000A9A8 <dos.include.bb2@1584>               Poke.l ttp,&dos_toolstring()
0000A9AE <dos.include.bb2@1585>               dos_iconmodified = True
0000A9B4 <dos.include.bb2@1587>           Else
0000A9C8 <dos.include.bb2@1588>             If enabled=True
0000AA02 <dos.include.bb2@1589>               dos_toolstring() = nospaces
0000AA18 <dos.include.bb2@1590>               Poke.l ttp,&dos_toolstring()
0000AA1E <dos.include.bb2@1591>               dos_iconmodified = True
0000AA2C <dos.include.bb2@1597>       ttp + SizeOf.l
0000AA32 <dos.include.bb2@1598>     Wend
0000AA3C <dos.include.bb2@1601> Function Return tool_exist
0000AA58 <dos.include.bb2@1602> End Function
0000AA96 <dos.include.bb2@1628> Function.l dos_GetToolValue {toolname.s,def.l,@filename.s}   ; 0 = no value found, value else, e.g. ("$4A3F4B" or "1234")
0000AB48 <dos.include.bb2@1629> string.s = dos_GetToolString {toolname.s,Str$(def),filename.s}
0000ABDE <dos.include.bb2@1630> string.s = Replace$(LCase$(string.s)," ","")
0000AC12 <dos.include.bb2@1631> value.l=Vallong(string.s)
0000AC5C <dos.include.bb2@1632> If string.s="true" Then value=-1
0000ACA6 <dos.include.bb2@1633> If string.s="on"   Then value=-1
0000ACF0 <dos.include.bb2@1634> If string.s="yes"  Then value=-1
0000ACFA <dos.include.bb2@1635> Function Return value
0000AD16 <dos.include.bb2@1636> End Function
0000AD64 <dos.include.bb2@1743> Function.l dos_SetToolString {toolname.s,string.s,@filename.s,@quote.l}
0000AD9A <dos.include.bb2@1745> If dos_OpenToolTypes{filename}
0000ADC0 <dos.include.bb2@1746>   If AddItem(dos_toolstring())=0 Then Function Return False
0000ADCA <dos.include.bb2@1747>   If quote
0000AE46 <dos.include.bb2@1748>     dos_toolstring() = toolname.s+"=\\22"+string+"\\22"
0000AE4C <dos.include.bb2@1749>   Else
0000AE86 <dos.include.bb2@1750>     dos_toolstring() = toolname.s
0000AEBE <dos.include.bb2@1751>     If string><""
0000AF2E <dos.include.bb2@1752>       dos_toolstring()+"="+string
0000AF7A <dos.include.bb2@1755>   toolname.s = LCase$(toolname.s)
0000AF82 <dos.include.bb2@1756>   count.l = 0
0000AF88 <dos.include.bb2@1757>   found.l = False
0000AF96 <dos.include.bb2@1759>   ttp.l = *dos_icon\do_ToolTypes
0000AFA0 <dos.include.bb2@1760>   If ttp
0000AFCC <dos.include.bb2@1761>      While Peek.l(ttp)><0 AND found=False
0000AFDA <dos.include.bb2@1762>       toolptr.l = Peek.l(ttp)
0000AFE4 <dos.include.bb2@1763>       If toolptr
0000B00C <dos.include.bb2@1764>         string.s   = Peek.s(toolptr)
0000B08A <dos.include.bb2@1765>         nospaces.s = Replace$(string.s," ","")
0000B0DC <dos.include.bb2@1766>         pos.l      = Instr(nospaces,"=",1)
0000B0EE <dos.include.bb2@1767>         If pos>=0
0000B15C <dos.include.bb2@1768>           name.s = LCase$(Left$(nospaces,pos-1))
0000B162 <dos.include.bb2@1769>         Else
0000B1AE <dos.include.bb2@1770>           name.s = LCase$(nospaces)
0000B1F2 <dos.include.bb2@1772>         If name.s = toolname
0000B1F8 <dos.include.bb2@1773>           found = True
0000B20E <dos.include.bb2@1774>           Poke.l ttp,&dos_toolstring()
0000B214 <dos.include.bb2@1775>           dos_iconmodified = True
0000B222 <dos.include.bb2@1777>         count+1
0000B230 <dos.include.bb2@1779>       ttp + SizeOf.l
0000B236 <dos.include.bb2@1780>      Wend
0000B24A <dos.include.bb2@1783>   If found=False
0000B278 <dos.include.bb2@1784>     newtoolarray.l = AllocVec_(SizeOf.l*(count+2),#MEMF_CLEAR)
0000B282 <dos.include.bb2@1785>     If newtoolarray
0000B294 <dos.include.bb2@1786>       If *dos_icon\do_ToolTypes
0000B2BC <dos.include.bb2@1787>         CopyMem_ *dos_icon\do_ToolTypes,newtoolarray,count*SizeOf.l
0000B2C8 <dos.include.bb2@1789>       *dos_icon\do_ToolTypes = newtoolarray
0000B2DE <dos.include.bb2@1790>       ttp.l = *dos_icon\do_ToolTypes + count*SizeOf.l
0000B2F4 <dos.include.bb2@1791>       Poke.l ttp,&dos_toolstring()
0000B30A <dos.include.bb2@1792>       Poke.l ttp+SizeOf.l,0
0000B310 <dos.include.bb2@1793>       dos_iconmodified = True
0000B316 <dos.include.bb2@1794>       found = True
0000B31C <dos.include.bb2@1795>       dos_CloseToolTypes{}
0000B334 <dos.include.bb2@1796>       FreeVec_ newtoolarray : newtoolarray = 0
0000B33E <dos.include.bb2@1800> Function Return found
0000B35A <dos.include.bb2@1801> End Function
0000B398 <dos.include.bb2@1823> Function.l dos_SetToolValue {toolname.s,value.l,@filename.s}
0000B426 <dos.include.bb2@1824> succ.l = dos_SetToolString{toolname.s,Str$(value),filename.s,False}
0000B430 <dos.include.bb2@1825> Function Return succ
0000B44C <dos.include.bb2@1826> End Function
0000B48A <dos.include.bb2@1890> Function.l dos_SetToolSwitch {toolname.s,state.b,@filename.s}
0000B492 <dos.include.bb2@1891>   succ.l = 0
0000B4E0 <dos.include.bb2@1892>   If NOT dos_SetToolState{toolname.s,state.b}
0000B558 <dos.include.bb2@1893>     succ.l = dos_SetToolString{toolname.s,"",filename,False}
0000B59A <dos.include.bb2@1894>     dos_SetToolState{toolname.s,state}
0000B5A0 <dos.include.bb2@1895>   Else
0000B5A6 <dos.include.bb2@1896>     succ.l = True
0000B5B0 <dos.include.bb2@1898> Function Return succ
0000B5CC <dos.include.bb2@1899> End Function
0000B5F6 <dos.include.bb2@2088> Function.s dos_RemExt {filename.s} ; ------------------------------------------------------
0000B60A <dos.include.bb2@2089> m.l = FLen(filename.s)
0000B648 <dos.include.bb2@2090> While w$><"."
0000B72E <dos.include.bb2@2091>   w$=Mid$(filename.s,m,1):m-1:If m=0 OR (FLen(filename.s)-m)>8 Then w$=".":m=FLen(filename.s)
0000B734 <dos.include.bb2@2092> Wend
0000B784 <dos.include.bb2@2093> filename.s = Left$(filename.s,m)
0000B7AE <dos.include.bb2@2094> Function Return filename.s
0000B7CC <dos.include.bb2@2095> End Function
0000B7F6 <dos.include.bb2@2119> Function.s dos_GetExt {filename.s} ; ------------------------------------------------------
0000B80A <dos.include.bb2@2120> m.l = FLen(filename.s)
0000B848 <dos.include.bb2@2121> While w$><"."
0000B92E <dos.include.bb2@2122>   w$=Mid$(filename.s,m,1):m-1:If m=0 OR (FLen(filename.s)-m)>10 Then w$=".":m=FLen(filename.s)
0000B934 <dos.include.bb2@2123> Wend
0000B9A6 <dos.include.bb2@2124> filename.s = Right$(filename.s,FLen(filename.s)-m-1)
0000B9D0 <dos.include.bb2@2125> Function Return filename.s
0000B9EE <dos.include.bb2@2126> End Function
0000BA28 <dos.include.bb2@2152> Function.s dos_SetExt {filename.s,extention.s}
0000BA60 <dos.include.bb2@2153> If extention.s><""
0000BAB8 <dos.include.bb2@2154>   filename.s = dos_RemExt {filename.s}
0000BB1C <dos.include.bb2@2155>   filename.s + "." + extention.s
0000BB46 <dos.include.bb2@2157> Function Return filename.s
0000BB66 <dos.include.bb2@2158> End Function
0000BB94 <dos.include.bb2@2203> Function.l dos_CheckLib{library.s,libversion.l}
0000BBAE <dos.include.bb2@2204> If libversion<0 Then libversion=0
0000BBCC <dos.include.bb2@2205> *lib.Library=OpenLibrary_(&library.s,libversion)
0000BBD6 <dos.include.bb2@2206> If *lib
0000BBE6 <dos.include.bb2@2207>   CloseLibrary_ *lib
0000BBEE <dos.include.bb2@2208>   Function Return True
0000BBF6 <dos.include.bb2@2210> Function Return False
0000BC10 <dos.include.bb2@2211> End Function
0000BC4E <dos.include.bb2@2248> Function.l dos_CreateFileList {path.s,pattern.s,@flags.l}
0000BC6E <dos.include.bb2@2250> lock.l = Lock_(&path.s,#ACCESS_READ)
0000BC94 <dos.include.bb2@2251> If lock><0 AND *dos_fib><0
0000BC9C <dos.include.bb2@2252>   dos_listlength=0
0000BCB0 <dos.include.bb2@2253>   oldlock.l = CurrentDir_(lock)
0000BCBA <dos.include.bb2@2254>   If oldlock
0000BD22 <dos.include.bb2@2255>     buf.s = LSet$(" ",FLen(pattern.s)*3+4)
0000BD36 <dos.include.bb2@2256>     If flags&#dos_scan_nocasesense
0000BD66 <dos.include.bb2@2257>       ParsePatternNoCase_ &pattern.s,&buf.s,FLen(buf.s)
0000BD6C <dos.include.bb2@2258>     Else
0000BD9C <dos.include.bb2@2259>       ParsePattern_ &pattern.s,&buf.s,FLen(buf.s)
0000BDC6 <dos.include.bb2@2261>     pattern.s = Peek.s(&buf.s)
0000BDE6 <dos.include.bb2@2262>     If Examine_(lock,*dos_fib)
0000BE06 <dos.include.bb2@2263>       While ExNext_(lock,*dos_fib)
0000BE8A <dos.include.bb2@2264>         filename.s = dos_AddPart{path.s,Peek.s(&*dos_fib\fib_FileName)}
0000BEA2 <dos.include.bb2@2265>         If *dos_fib\fib_DirEntryType<0
0000BEB6 <dos.include.bb2@2266>           If flags&#dos_scan_files
0000BECA <dos.include.bb2@2267>             If flags&#dos_scan_nocasesense
0000BEEE <dos.include.bb2@2268>               succ.l = MatchPatternNoCase_ (&pattern.s,&*dos_fib\fib_FileName)
0000BEF4 <dos.include.bb2@2269>             Else
0000BF18 <dos.include.bb2@2270>               succ = MatchPattern_ (&pattern.s,&*dos_fib\fib_FileName)
0000BF22 <dos.include.bb2@2272>             If succ
0000BF30 <dos.include.bb2@2273>               dos_listlength+1
0000BF44 <dos.include.bb2@2274>               If flags&#dos_scan_sorted
0000BFDA <dos.include.bb2@2275>                 *node.ml_node = ml_AddNodeSorted {*node,#node_simple,dos_FilePart{filename.s},filename.s,0}
0000BFE0 <dos.include.bb2@2276>               Else
0000C076 <dos.include.bb2@2277>                 *node.ml_node = ml_AddNode       {*node,#node_simple,dos_FilePart{filename.s},filename.s,0}
0000C07C <dos.include.bb2@2281>         Else
0000C090 <dos.include.bb2@2282>           If flags&#dos_scan_dirs
0000C09E <dos.include.bb2@2283>             dos_listlength+1
0000C0B2 <dos.include.bb2@2284>             If flags&#dos_scan_sorted
0000C148 <dos.include.bb2@2285>               *node.ml_node = ml_AddNodeSorted {*node,#node_tree,dos_FilePart{filename.s},filename.s,1}
0000C14E <dos.include.bb2@2286>             Else
0000C1E4 <dos.include.bb2@2287>               *node.ml_node = ml_AddNode       {*node,#node_tree,dos_FilePart{filename.s},filename.s,1}
0000C1EA <dos.include.bb2@2291>       Wend
0000C1FE <dos.include.bb2@2293>     oldlock = CurrentDir_ (oldlock)
0000C20E <dos.include.bb2@2295>   UnLock_ lock
0000C21C <dos.include.bb2@2297> *node = ml_GetFirstNode{*node}
0000C226 <dos.include.bb2@2298> Function Return *node
0000C242 <dos.include.bb2@2299> End Function
0000C270 <dos.include.bb2@2417> Function.l dos_SetProtect {filename.s, bits.l}
0000C292 <dos.include.bb2@2418> If SetProtection_(&filename.s,bits)
0000C29A <dos.include.bb2@2419>   Function Return True
0000C2A8 <dos.include.bb2@2420> Else Function Return False
0000C2C2 <dos.include.bb2@2422> End Function
0000C2EC <dos.include.bb2@2468> Function.l dos_GetFileSizeEx {filename.s}
0000C2F8 <dos.include.bb2@2470> size.l = -1
0000C350 <dos.include.bb2@2471> path.s = dos_PathPart {filename.s}
0000C3A8 <dos.include.bb2@2472> fil.s = dos_FilePart {filename.s}
0000C3C8 <dos.include.bb2@2473> lock.l = Lock_ (&path.s,#ACCESS_READ)
0000C3EE <dos.include.bb2@2474> If lock><0 AND *dos_fib><0
0000C41A <dos.include.bb2@2475>   If Examine_(lock, *dos_fib) <> 0
0000C432 <dos.include.bb2@2476>     If *dos_fib\fib_DirEntryType >=0
0000C438 <dos.include.bb2@2477>       breakme.l=False
0000C472 <dos.include.bb2@2478>       While ExNext_ (lock,*dos_fib)><0 AND breakme=False
0000C4CA <dos.include.bb2@2479>         If Peek.s(&*dos_fib\fib_FileName)=fil.s Then size=*dos_fib\fib_Size:breakme=True
0000C4D0 <dos.include.bb2@2480>       Wend
0000C4E0 <dos.include.bb2@2483>   UnLock_ lock
0000C4EA <dos.include.bb2@2485> Function Return size
0000C504 <dos.include.bb2@2486> End Function
0000C52E <dos.include.bb2@2502> Function.l dos_IsDir {filename.s}
0000C534 <dos.include.bb2@2504> succ.l = False
0000C57A <dos.include.bb2@2505> If filename = "" Then Function Return False
0000C59A <dos.include.bb2@2506> lock.l=Lock_(&filename,#ACCESS_READ)
0000C5C0 <dos.include.bb2@2507> If lock><0 AND *dos_fib><0
0000C5EC <dos.include.bb2@2508>   If Examine_(lock, *dos_fib) <> 0
0000C604 <dos.include.bb2@2509>     If *dos_fib\fib_DirEntryType < 0
0000C60A <dos.include.bb2@2510>       succ = False
0000C610 <dos.include.bb2@2511>     Else
0000C616 <dos.include.bb2@2512>       succ = True
0000C626 <dos.include.bb2@2515>   UnLock_ lock
0000C630 <dos.include.bb2@2517> Function Return succ
0000C64A <dos.include.bb2@2518> End Function
0000C674 <dos.include.bb2@2621> Function.s dos_GetFileDate {filename.s}
0000C69C <dos.include.bb2@2623> date.s = ""
0000C6BC <dos.include.bb2@2624> lock.l = Lock_ (&filename.s,#ACCESS_READ)
0000C6E2 <dos.include.bb2@2625> If lock><0 AND *dos_fib><0
0000C70E <dos.include.bb2@2626>   If Examine_(lock, *dos_fib) <> 0
0000C73A <dos.include.bb2@2627>       date = Date$(*dos_fib\fib_Date\ds_Days)
0000C74A <dos.include.bb2@2630>   UnLock_ lock
0000C774 <dos.include.bb2@2632> Function Return date
0000C792 <dos.include.bb2@2633> End Function
0000C7D8 <dos.include.bb2@2691> Function.l dos_RunCli {filename.s,priority.l,@stack.l,@waitfinish.l,@cliargs.s}
0000C7F2 <dos.include.bb2@2692> If stack<8192 Then stack=8192
0000C894 <dos.include.bb2@2693> If cliargs.s><"" Then filename.s + " " + cliargs.s
0000C90C <dos.include.bb2@2694> ret.l = SystemTagList_ (&filename.s,Tags(#NP_Priority,priority,#NP_StackSize,stack,#SYS_Asynch,NOT(waitfinish),#SYS_Input,0,#SYS_Output,0))
0000C916 <dos.include.bb2@2695> Function Return ret
0000C932 <dos.include.bb2@2696> End Function
0000C94C <dos.include.bb2@2712> Function.l dos_GetStackSize{@*task.Task}
0000C98A <dos.include.bb2@2713> If *task=-1 OR *task=0 Then *task.Task = FindTask_(0)
0000C9A4 <dos.include.bb2@2714> stacksize.l = (*task\tc_SPUpper - *task\tc_SPLower)
0000C9AE <dos.include.bb2@2715> Function Return stacksize
0000C9B4 <dos.include.bb2@2716> End Function
0000C9B4 <PED.ab2@75> 
0000C9B4 <asl.include.bb2@1> XINCLUDE "asl.include.bb2"
0000C9D8 <asl.include.bb2@93> Dim aslfiledat.aslfiledat(#MAX_ASLFR_IDs-1)
0000CA00 <asl.include.bb2@94> Dim List file_requ_items.mfiles(0)
0000CA24 <asl.include.bb2@95> Dim asltag.TagItem (64)
0000CA52 <asl.include.bb2@156> Statement aslfo_SetInitialFont{initfontname.s,initfontsize.l}
0000CAC8 <asl.include.bb2@157> If initfontname><"" Then aslfontdat\fontname = initfontname
0000CAE6 <asl.include.bb2@158> If initfontsize>1   Then aslfontdat\fontsize = initfontsize
0000CAFE <asl.include.bb2@159> End Statement
0000CB1C <asl.include.bb2@176> Function.l aslfo_Request{@allowpropfont.l,@*scr.Screen}
0000CD3A <asl.include.bb2@177> !_ASL_Init
0000CD66 <asl.include.bb2@180> asltag(n)\ti_Tag = #ASLFO_Screen           ,*scr                          : n+1
0000CD94 <asl.include.bb2@181> asltag(n)\ti_Tag = #ASLFO_TitleText        ,&aslfontdat\title             : n+1
0000CDC0 <asl.include.bb2@182> asltag(n)\ti_Tag = #ASLFO_InitialLeftEdge  ,ASL_x                         : n+1
0000CDEC <asl.include.bb2@183> asltag(n)\ti_Tag = #ASLFO_InitialTopEdge   ,ASL_y                         : n+1
0000CE18 <asl.include.bb2@184> asltag(n)\ti_Tag = #ASLFO_InitialWidth     ,ASL_xs                        : n+1
0000CE44 <asl.include.bb2@185> asltag(n)\ti_Tag = #ASLFO_InitialHeight    ,ASL_ys                        : n+1
0000CE88 <asl.include.bb2@186> If allowpropfont=False Then  asltag(n)\ti_Tag = #ASLFO_FixedWidthOnly,-1 : n+1
0000CEFC <asl.include.bb2@188> If aslfontdat\ok><""        Then asltag(n)\ti_Tag = #ASLFO_PositiveText,&aslfontdat\ok       : n+1
0000CF70 <asl.include.bb2@189> If aslfontdat\cancel><""    Then asltag(n)\ti_Tag = #ASLFO_NegativeText,&aslfontdat\cancel   : n+1
0000CFE4 <asl.include.bb2@190> If aslfontdat\fontname><""  Then asltag(n)\ti_Tag = #ASLFO_InitialName ,&aslfontdat\fontname : n+1
0000D02E <asl.include.bb2@191> If aslfontdat\fontsize><0   Then asltag(n)\ti_Tag = #ASLFO_InitialSize ,aslfontdat\fontsize  : n+1
0000D04A <asl.include.bb2@192> asltag(n)\ti_Tag = #TAG_DONE,False
0000D074 <asl.include.bb2@194> *font_requ.FontRequester = AllocAslRequest_ (#ASL_FontRequest,&asltag(0)\ti_Tag)
0000D07E <asl.include.bb2@195> If *font_requ
0000D09C <asl.include.bb2@196>   asltag(0)\ti_Tag = #TAG_DONE,False
0000D0BE <asl.include.bb2@198>   If AslRequest_ (*font_requ,0)
0000D0EC <asl.include.bb2@200>     a.s=Peek.s(*font_requ\fo_Attr\ta_Name)
0000D124 <asl.include.bb2@201>     aslfontdat\fontname = a.s
0000D138 <asl.include.bb2@202>     aslfontdat\fontsize = *font_requ\fo_Attr\ta_YSize
0000D13E <asl.include.bb2@203>     succ = True
0000D14E <asl.include.bb2@205>     ASL_x   = *font_requ\fo_LeftEdge
0000D15E <asl.include.bb2@206>     ASL_y   = *font_requ\fo_TopEdge
0000D16E <asl.include.bb2@207>     ASL_xs  = *font_requ\fo_Width
0000D17E <asl.include.bb2@208>     ASL_ys  = *font_requ\fo_Height
0000D18E <asl.include.bb2@211>   FreeAslRequest_ *font_requ
0000D198 <asl.include.bb2@213> Function Return succ
0000D1AC <asl.include.bb2@214> End Function
0000D1C2 <asl.include.bb2@229> Function.s aslfo_GetFontName{}
0000D1F0 <asl.include.bb2@230> Function Return aslfontdat\fontname
0000D1F8 <asl.include.bb2@231> End Function
0000D20E <asl.include.bb2@245> Function.l aslfo_GetFontSize{}
0000D21E <asl.include.bb2@246> Function Return aslfontdat\fontsize
0000D222 <asl.include.bb2@247> End Function
0000D26C <asl.include.bb2@262> Statement aslfo_SetRequesterTitle{title.s,ok.s,cancel.s}
0000D2A0 <asl.include.bb2@263> aslfontdat\title = title
0000D2D8 <asl.include.bb2@264> aslfontdat\ok = ok
0000D310 <asl.include.bb2@265> aslfontdat\cancel = cancel
0000D32A <asl.include.bb2@266> End Statement
0000D358 <asl.include.bb2@294> Function.l aslfr_Request{id.l,savemode.l,multiselect.l,drawersonly.l,@*scr.Screen,@noIcons.l}
0000D576 <asl.include.bb2@296> !_ASL_Init
0000D5A4 <asl.include.bb2@298> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000D5D0 <asl.include.bb2@300> asltag(n)\ti_Tag = #ASLFR_Screen           ,*scr                          : n+1
0000D60C <asl.include.bb2@301> asltag(n)\ti_Tag = #ASLFR_TitleText        ,&aslfiledat(id)\title             : n+1
0000D638 <asl.include.bb2@302> asltag(n)\ti_Tag = #ASLFR_InitialLeftEdge  ,ASL_x                         : n+1
0000D664 <asl.include.bb2@303> asltag(n)\ti_Tag = #ASLFR_InitialTopEdge   ,ASL_y                         : n+1
0000D690 <asl.include.bb2@304> asltag(n)\ti_Tag = #ASLFR_InitialWidth     ,ASL_xs                        : n+1
0000D6BC <asl.include.bb2@305> asltag(n)\ti_Tag = #ASLFR_InitialHeight    ,ASL_ys                        : n+1
0000D6E8 <asl.include.bb2@306> asltag(n)\ti_Tag = #ASLFR_DoSaveMode       ,savemode                      : n+1
0000D714 <asl.include.bb2@307> asltag(n)\ti_Tag = #ASLFR_DoMultiSelect    ,multiselect                   : n+1
0000D740 <asl.include.bb2@308> asltag(n)\ti_Tag = #ASLFR_DrawersOnly      ,drawersonly                   : n+1
0000D76C <asl.include.bb2@309> asltag(n)\ti_Tag = #ASLFR_RejectIcons      ,noIcons                       : n+1
0000D7FC <asl.include.bb2@311> If aslfiledat(id)\ok><""   Then asltag(n)\ti_Tag = #ASLFR_PositiveText,&aslfiledat(id)\ok           : n+1
0000D88C <asl.include.bb2@312> If aslfiledat(id)\cancel><""Then asltag(n)\ti_Tag = #ASLFR_NegativeText,&aslfiledat(id)\cancel      : n+1
0000D92A <asl.include.bb2@313> If aslfiledat(id)\fil><""  AND drawersonly=False Then asltag(n)\ti_Tag = #ASLFR_InitialFile,&aslfiledat(id)\fil : n+1
0000D974 <asl.include.bb2@314> If aslfiledat(id)\path><""
0000D9B4 <asl.include.bb2@315>   asltag(n)\ti_Tag = #ASLFR_InitialDrawer,&aslfiledat(id)\path        : n+1
0000D9BA <asl.include.bb2@316> Else
0000DA04 <asl.include.bb2@319> If aslfiledat(id)\patt><""
0000DA44 <asl.include.bb2@320>   asltag(n)\ti_Tag = #ASLFR_InitialPattern,&aslfiledat(id)\patt       : n+1
0000DA6E <asl.include.bb2@321>   asltag(n)\ti_Tag = #ASLFR_DoPatterns,True                       : n+1
0000DA74 <asl.include.bb2@322> Else
0000DA9E <asl.include.bb2@323>   asltag(n)\ti_Tag = #ASLFR_DoPatterns,False                      : n+1
0000DAC8 <asl.include.bb2@325> asltag(n)\ti_Tag = #TAG_DONE,False                                        : n+1
0000DAF2 <asl.include.bb2@327> *file_requ.FileRequester_TK = AllocAslRequest_ (#ASL_FileRequest,&asltag(0)\ti_Tag)
0000DAFC <asl.include.bb2@328> If *file_requ
0000DB1A <asl.include.bb2@329>   asltag(0)\ti_Tag = #TAG_DONE,False
0000DB3C <asl.include.bb2@330>   If AslRequest_ (*file_requ,0)
0000DB6A <asl.include.bb2@331>     d$=Peek.s(*file_requ\fr_Drawer) ;,256)
0000DB98 <asl.include.bb2@332>     f$=Peek.s(*file_requ\fr_File); ,256)
0000DBC6 <asl.include.bb2@333>     p$=Peek.s(*file_requ\fr_Pattern);

0000DC0C <asl.include.bb2@336>     aslfiledat(id)\fil     = f$
0000DC52 <asl.include.bb2@337>     aslfiledat(id)\path    = d$
0000DC98 <asl.include.bb2@338>     aslfiledat(id)\patt    = p$
0000DCD0 <asl.include.bb2@340>     If d$<>""
0000DDCE <asl.include.bb2@341>       If Right$(d$,1)<>":" AND Right$(d$,1)<>"/" Then d$=d$+"/"
0000DDEC <asl.include.bb2@343>     aslfiledat(id)\filecount = 0
0000DDF6 <asl.include.bb2@345>     ClearList file_requ_items()
0000DE1C <asl.include.bb2@346>     If multiselect Then selected.l= *file_requ\fr_NumArgs :Else selected = 0
0000DE2E <asl.include.bb2@348>     If selected>1                     ;multiple files were selected
0000DE5C <asl.include.bb2@349>       For i.l = 0 To selected -1
0000DE84 <asl.include.bb2@350>         *nextarg.l=Peek.l(*file_requ\fr_ArgList+(8*i)+4)
0000DE96 <asl.include.bb2@351>         If AddItem(file_requ_items())
0000DEEC <asl.include.bb2@352>           file_requ_items()\pathname=d$+Peek.s(*nextarg)
0000DF22 <asl.include.bb2@353>           aslfiledat(id)\filecount + 1
0000DF32 <asl.include.bb2@355>       Next
0000DF38 <asl.include.bb2@356>     Else                              ;one or less selected
0000DF4A <asl.include.bb2@357>       If AddItem(file_requ_items())
0000DF54 <asl.include.bb2@358>         If drawersonly
0000DF8E <asl.include.bb2@359>           file_requ_items()\pathname=d$
0000DF94 <asl.include.bb2@360>         Else
0000DFEC <asl.include.bb2@361>           file_requ_items()\pathname=d$+f$
0000E00A <asl.include.bb2@363>         aslfiledat(id)\filecount = 1
0000E010 <asl.include.bb2@366>     succ = True
0000E020 <asl.include.bb2@369>   ASL_x   = *file_requ\fr_LeftEdge
0000E030 <asl.include.bb2@370>   ASL_y   = *file_requ\fr_TopEdge
0000E040 <asl.include.bb2@371>   ASL_xs  = *file_requ\fr_Width
0000E050 <asl.include.bb2@372>   ASL_ys  = *file_requ\fr_Height
0000E060 <asl.include.bb2@374>   FreeAslRequest_ *file_requ
0000E06A <asl.include.bb2@376> Function Return succ
0000E07E <asl.include.bb2@377> End Function
0000E094 <asl.include.bb2@393> Function.s aslfr_GetNextFile{}
0000E0BC <asl.include.bb2@395> a.s = ""
0000E0C6 <asl.include.bb2@396> ResetList file_requ_items()
0000E0D8 <asl.include.bb2@397> If NextItem(file_requ_items())
0000E112 <asl.include.bb2@398>   a.s = file_requ_items()\pathname
0000E11C <asl.include.bb2@399>   KillItem file_requ_items()
0000E146 <asl.include.bb2@401> Function Return a.s
0000E15E <asl.include.bb2@402> End Function
0000E1B0 <asl.include.bb2@438> Statement aslfr_SetPath{id.l,path.s,@fil.s,@patt.s,@optional.l}
0000E1DE <asl.include.bb2@440> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000E270 <asl.include.bb2@441> If fil ><"" OR optional=False Then aslfiledat(id)\fil   = fil.s
0000E2B6 <asl.include.bb2@442> aslfiledat(id)\path  = path.s
0000E348 <asl.include.bb2@443> If patt><"" OR optional=False Then aslfiledat(id)\patt  = patt.s
0000E362 <asl.include.bb2@444> End Statement
0000E390 <asl.include.bb2@458> Statement aslfr_SetFile{id.l,fil.s}
0000E3BE <asl.include.bb2@460> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000E404 <asl.include.bb2@461> aslfiledat(id)\fil = fil
0000E41C <asl.include.bb2@462> End Statement
0000E44A <asl.include.bb2@476> Statement aslfr_SetPattern{id.l,pattern.s}
0000E478 <asl.include.bb2@478> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000E4BE <asl.include.bb2@479> aslfiledat(id)\patt = pattern
0000E4D6 <asl.include.bb2@480> End Statement
0000E524 <asl.include.bb2@498> Statement aslfr_SetRequesterTitle{id.l,title.s,ok.s,cancel.s}
0000E552 <asl.include.bb2@500> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000E594 <asl.include.bb2@501> aslfiledat(id)\title  = title.s
0000E5DA <asl.include.bb2@502> aslfiledat(id)\ok     = ok.s
0000E620 <asl.include.bb2@503> aslfiledat(id)\cancel = cancel.s
0000E63A <asl.include.bb2@504> End Statement
0000E654 <asl.include.bb2@521> Function.s aslfr_GetFile{id.l}
0000E682 <asl.include.bb2@523> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000E6BE <asl.include.bb2@524> Function Return aslfiledat(id)\fil
0000E6C8 <asl.include.bb2@525> End Function
0000E6E2 <asl.include.bb2@543> Function.s aslfr_GetPath{id.l}
0000E710 <asl.include.bb2@545> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000E74C <asl.include.bb2@546> Function Return aslfiledat(id)\path
0000E756 <asl.include.bb2@547> End Function
0000E77C <asl.include.bb2@585> Statement asl_SetRequesterDims{x.l,y.l,xs.l,ys.l}
0000E782 <asl.include.bb2@587> ASL_x = x
0000E788 <asl.include.bb2@588> ASL_y = y
0000E78E <asl.include.bb2@589> ASL_xs = xs
0000E794 <asl.include.bb2@590> ASL_ys = ys
0000E798 <asl.include.bb2@591> End Statement
0000E7E2 <asl.include.bb2@629> Statement aslsm_SetRequesterTitle{title.s,ok.s,cancel.s}
0000E816 <asl.include.bb2@630> aslscreendat\title  = title.s
0000E84E <asl.include.bb2@631> aslscreendat\ok     = ok.s
0000E886 <asl.include.bb2@632> aslscreendat\cancel = cancel.s
0000E8A0 <asl.include.bb2@633> End Statement
0000E8CA <asl.include.bb2@677> Function.l aslsm_Request{@doDims.l,@doDepth.l,@doOverscan.l,@doAutoscroll.l,@*scr.Screen}
0000EAE8 <asl.include.bb2@678> !_ASL_Init
0000EB14 <asl.include.bb2@680> asltag(n)\ti_Tag = #ASLSM_Screen           ,*scr                         : n+1
0000EB80 <asl.include.bb2@681> If title.s><"" Then asltag(n)\ti_Tag = #ASLSM_TitleText ,&title.s        : n+1
0000EBAC <asl.include.bb2@682> asltag(n)\ti_Tag = #ASLSM_InitialLeftEdge  ,ASL_x                        : n+1
0000EBD8 <asl.include.bb2@683> asltag(n)\ti_Tag = #ASLSM_InitialTopEdge   ,ASL_y                        : n+1
0000EC04 <asl.include.bb2@684> asltag(n)\ti_Tag = #ASLSM_InitialWidth     ,ASL_xs                       : n+1
0000EC30 <asl.include.bb2@685> asltag(n)\ti_Tag = #ASLSM_InitialHeight    ,ASL_ys                       : n+1
0000EC7A <asl.include.bb2@687> If aslscreendat\mind>0 Then asltag(n)\ti_Tag = #ASLSM_MinDepth  , aslscreendat\mind  : n+1
0000ECC4 <asl.include.bb2@688> If aslscreendat\maxd>0 Then asltag(n)\ti_Tag = #ASLSM_MaxDepth  , aslscreendat\maxd  : n+1
0000ED0E <asl.include.bb2@689> If aslscreendat\minw>0 Then asltag(n)\ti_Tag = #ASLSM_MinWidth  , aslscreendat\minw  : n+1
0000ED58 <asl.include.bb2@690> If aslscreendat\minh>0 Then asltag(n)\ti_Tag = #ASLSM_MinHeight , aslscreendat\minh  : n+1
0000EDA2 <asl.include.bb2@691> If aslscreendat\maxw>0 Then asltag(n)\ti_Tag = #ASLSM_MaxWidth  , aslscreendat\maxw  : n+1
0000EDEC <asl.include.bb2@692> If aslscreendat\maxh>0 Then asltag(n)\ti_Tag = #ASLSM_MaxHeight , aslscreendat\maxh  : n+1
0000EE36 <asl.include.bb2@694> If aslscreendat\scr_id    >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayID      ,aslscreendat\scr_id        : n+1
0000EE7E <asl.include.bb2@695> If aslscreendat\scr_depth >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayDepth   ,aslscreendat\scr_depth     : n+1
0000EEC8 <asl.include.bb2@696> If aslscreendat\scr_width >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayWidth   ,aslscreendat\scr_width     : n+1
0000EF12 <asl.include.bb2@697> If aslscreendat\scr_height>0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayHeight  ,aslscreendat\scr_height    : n+1
0000EF3E <asl.include.bb2@699> asltag(n)\ti_Tag = #ASLSM_DoWidth         , doDims  : n+1
0000EF6A <asl.include.bb2@700> asltag(n)\ti_Tag = #ASLSM_DoHeight        , doDims  : n+1
0000EF96 <asl.include.bb2@701> asltag(n)\ti_Tag = #ASLSM_DoDepth         , doDepth : n+1
0000EFC2 <asl.include.bb2@702> asltag(n)\ti_Tag = #ASLSM_DoOverscanType  , doOverscan  : n+1
0000EFEE <asl.include.bb2@703> asltag(n)\ti_Tag = #ASLSM_DoAutoScroll    , doAutoscroll  : n+1
0000F00A <asl.include.bb2@704> asltag(n)\ti_Tag = #TAG_DONE,False
0000F034 <asl.include.bb2@706> *screen_requ.ScreenModeRequester = AllocAslRequest_ (#ASL_ScreenModeRequest,&asltag(0)\ti_Tag)
0000F03E <asl.include.bb2@707> If *screen_requ
0000F05C <asl.include.bb2@708>   asltag(0)\ti_Tag = #TAG_DONE,False
0000F07E <asl.include.bb2@709>   If AslRequest_ (*screen_requ,0)
0000F090 <asl.include.bb2@710>     aslscreendat\scr_width     = *screen_requ\sm_DisplayWidth
0000F0A2 <asl.include.bb2@711>     aslscreendat\scr_height    = *screen_requ\sm_DisplayHeight
0000F0B4 <asl.include.bb2@712>     aslscreendat\scr_depth     = *screen_requ\sm_DisplayDepth
0000F0C6 <asl.include.bb2@713>     aslscreendat\scr_overscan  = *screen_requ\sm_OverscanType
0000F0D4 <asl.include.bb2@714>     aslscreendat\scr_id        = *screen_requ\sm_DisplayID
0000F0E6 <asl.include.bb2@715>     aslscreendat\scr_ascroll   = *screen_requ\sm_AutoScroll
0000F0F0 <asl.include.bb2@716>     succ = *screen_requ\sm_DisplayID
0000F100 <asl.include.bb2@718>   ASL_x   = *screen_requ\sm_LeftEdge
0000F110 <asl.include.bb2@719>   ASL_y   = *screen_requ\sm_TopEdge
0000F120 <asl.include.bb2@720>   ASL_xs  = *screen_requ\sm_Width
0000F130 <asl.include.bb2@721>   ASL_ys  = *screen_requ\sm_Height
0000F140 <asl.include.bb2@723>   FreeAslRequest_ *screen_requ
0000F146 <asl.include.bb2@724> Else
0000F174 <asl.include.bb2@725>   error{"\\__THIS_FUNCTION: Unable to allocate ASL screen requester!"}
0000F17E <asl.include.bb2@727> Function Return succ.l
0000F184 <asl.include.bb2@728> End Function
0000F19E <asl.include.bb2@746> Function.s aslsm_GetModeName{@modeid.l}
0000F1C6 <asl.include.bb2@748> name.s = "unknown"
0000F1E8 <asl.include.bb2@749> If modeid =-1 Then modeid = aslscreendat\scr_id
0000F210 <asl.include.bb2@750> If modeid=-1 OR modeid = 0
0000F23E <asl.include.bb2@751>   *scr.Screen = Peek.l(Addr Screen(Used Screen))
0000F248 <asl.include.bb2@752>   If *scr
0000F262 <asl.include.bb2@753>     modeid.l = GetVPModeID_(*scr\ViewPort)
0000F28A <asl.include.bb2@756> If modeid><-1 AND modeid><0
0000F29E <asl.include.bb2@757>   mode_ptr.l = FindDisplayInfo_ (modeid)
0000F2A8 <asl.include.bb2@758>   If mode_ptr
0000F2E2 <asl.include.bb2@759>     count.l = GetDisplayInfoData_ (mode_ptr,&naminfo,SizeOf.NameInfo,#DTAG_NAME,modeid)
0000F310 <asl.include.bb2@760>     name.s = Peek.s(&naminfo\Name)
0000F33A <asl.include.bb2@763> Function Return name
0000F362 <asl.include.bb2@764> End Function
0000F378 <asl.include.bb2@782> Function.l aslsm_GetWidth{}
0000F388 <asl.include.bb2@784> Function Return aslscreendat\scr_width
0000F38C <asl.include.bb2@785> End Function
0000F3A2 <asl.include.bb2@801> Function.l aslsm_GetHeight{}
0000F3B2 <asl.include.bb2@803> Function Return aslscreendat\scr_height
0000F3B6 <asl.include.bb2@804> End Function
0000F3CC <asl.include.bb2@821> Function.l aslsm_GetDepth{}
0000F3DE <asl.include.bb2@823> Function Return aslscreendat\scr_depth
0000F3E2 <asl.include.bb2@824> End Function
0000F3F8 <asl.include.bb2@840> Function.l aslsm_GetModeID{}
0000F408 <asl.include.bb2@842> Function Return aslscreendat\scr_id
0000F40C <asl.include.bb2@843> End Function
0000F422 <asl.include.bb2@859> Function.l aslsm_GetOverscan{}
0000F434 <asl.include.bb2@861> Function Return aslscreendat\scr_overscan
0000F438 <asl.include.bb2@862> End Function
0000F44E <asl.include.bb2@876> Function.l aslsm_GetAutoscroll{}
0000F460 <asl.include.bb2@878> Function Return aslscreendat\scr_ascroll
0000F464 <asl.include.bb2@879> End Function
0000F486 <asl.include.bb2@923> Statement aslsm_SetMinDims{min_width.l,min_height.l,min_depth.l}
0000F492 <asl.include.bb2@924> aslscreendat\minw = min_width
0000F49E <asl.include.bb2@925> aslscreendat\minh = min_height
0000F4AA <asl.include.bb2@926> aslscreendat\mind = min_depth
0000F4AE <asl.include.bb2@927> End Statement
0000F4D0 <asl.include.bb2@972> Statement aslsm_SetInitialDims{init_width.l,init_height.l,init_depth.l}
0000F4DC <asl.include.bb2@973> aslscreendat\scr_depth  = init_depth
0000F4E8 <asl.include.bb2@974> aslscreendat\scr_width  = init_width
0000F4F4 <asl.include.bb2@975> aslscreendat\scr_height = init_height
0000F4F8 <asl.include.bb2@976> End Statement
0000F512 <asl.include.bb2@990> Statement aslsm_SetInitialModeID{init_id.l}
0000F51E <asl.include.bb2@992> aslscreendat\scr_id     = init_id
0000F546 <asl.include.bb2@993> If init_id><0 AND init_id><-1
0000F55A <asl.include.bb2@994>   mode_ptr.l = FindDisplayInfo_ (init_id)
0000F564 <asl.include.bb2@995>   If mode_ptr
0000F59A <asl.include.bb2@996>   GetDisplayInfoData_ mode_ptr,&diminfo,SizeOf.DimensionInfo,#DTAG_DIMS,init_id
0000F5C2 <asl.include.bb2@998>   aslscreendat\scr_width  = diminfo\Nominal\MaxX-diminfo\Nominal\MinX+1
0000F5EA <asl.include.bb2@999>   aslscreendat\scr_height = diminfo\Nominal\MaxY-diminfo\Nominal\MinY+1
0000F60C <asl.include.bb2@1002> End Statement
0000F60C <PED.ab2@76> 
0000F60C <screen.include.bb2@1> XINCLUDE "screen.include.bb2"
0000F630 <screen.include.bb2@89> Dim staglist.TagItem(20)
0000F640 <screen.include.bb2@92> \penarraydummy = -1
0000F64E <screen.include.bb2@93> \scr_id = #scr_mode_invalid
0000F658 <screen.include.bb2@94> \scr_isopen = False
0000F666 <screen.include.bb2@95> \scr_sysfont = #scr_sysfont_wb_off
0000F68C <screen.include.bb2@184> Statement screen_SetASLInitialDims {init_id.l,init_width.l,init_height.l,init_depth.l}
0000F696 <screen.include.bb2@185>   aslsm_SetInitialModeID{init_id}
0000F6A8 <screen.include.bb2@186>   aslsm_SetInitialDims{init_width,init_height,init_depth}
0000F6AC <screen.include.bb2@187> End Statement
0000F6CE <screen.include.bb2@219> Function.l screen_GetPen {r.l,g.l,b.l}
0000F6F2 <screen.include.bb2@220>   If \scr=0 Then Function Return 1
0000F712 <screen.include.bb2@221>   r = r * \bias_red   / 100
0000F72C <screen.include.bb2@222>   If r<0 Then r=0
0000F746 <screen.include.bb2@223>   If r>255 Then r=255
0000F766 <screen.include.bb2@225>   g = g * \bias_green / 100
0000F780 <screen.include.bb2@226>   If g<0 Then g=0
0000F79A <screen.include.bb2@227>   If g>255 Then g=255
0000F7BA <screen.include.bb2@229>   b = b * \bias_blue / 100
0000F7D4 <screen.include.bb2@230>   If b<0 Then b=0
0000F7EE <screen.include.bb2@231>   If b>255 Then b=255
0000F7FE <screen.include.bb2@233>   r=r LSL 24 ;

0000F80E <screen.include.bb2@234>   g=g LSL 24 ; adjust to "32-bit left justified long value"
0000F81E <screen.include.bb2@235>   b=b LSL 24 ;

0000F830 <screen.include.bb2@236>   *view.ViewPort=\scr\ViewPort
0000F83E <screen.include.bb2@237>   *cmap.ColorMap=*view\ColorMap
0000F88E <screen.include.bb2@238>   pen.l=ObtainBestPenA_(*cmap,r,g,b,Tags(#OBP_Precision,#PRECISION_IMAGE))
0000F8DE <screen.include.bb2@239>   If pen>=0 AND pen<=255 Then screenengine\screenPenLock[pen]+1
0000F92C <screen.include.bb2@240>   If pen=-1 Then error {"Unable to obtain pen!"}:Function Return 1 ; check for failure
0000F936 <screen.include.bb2@241>  Function Return pen
0000F93C <screen.include.bb2@242> End Function
0000F956 <screen.include.bb2@261> Function.l screen_GetPenRGB {color.l}
0000F96E <screen.include.bb2@262>   r.l = ((color & $00ff0000) LSR 16 )
0000F986 <screen.include.bb2@263>   g.l = ((color & $0000ff00) LSR 8 )
0000F996 <screen.include.bb2@264>   b.l = ((color & $000000ff)  )
0000F9AE <screen.include.bb2@265>  Function Return screen_GetPen{r,g,b}
0000F9B4 <screen.include.bb2@266> End Function
0000F9CE <screen.include.bb2@282> Statement screen_ReleasePen {pen.l}
0000F9E0 <screen.include.bb2@283>   If \scr
0000F9F2 <screen.include.bb2@284>     *view.ViewPort=\scr\ViewPort
0000FA00 <screen.include.bb2@285>     *cmap.ColorMap=*view\ColorMap
0000FA1C <screen.include.bb2@286>     If screenengine\screenPenLock[pen]>0
0000FA34 <screen.include.bb2@287>       ReleasePen_ *cmap,pen
0000FA5C <screen.include.bb2@288>       screenengine\screenPenLock[pen]-1
0000FA60 <screen.include.bb2@291> End Statement
0000FA86 <screen.include.bb2@313> Statement screen_SetPen {n.l,r.l,g.l,b.l}
0000FAA4 <screen.include.bb2@314>   If \scr=0 Then Statement Return
0000FAC4 <screen.include.bb2@315>   r = r * \bias_red   / 100
0000FADE <screen.include.bb2@316>   If r<0 Then r=0
0000FAF8 <screen.include.bb2@317>   If r>255 Then r=255
0000FB18 <screen.include.bb2@319>   g = g * \bias_green / 100
0000FB32 <screen.include.bb2@320>   If g<0 Then g=0
0000FB4C <screen.include.bb2@321>   If g>255 Then g=255
0000FB6C <screen.include.bb2@323>   b = b * \bias_blue / 100
0000FB86 <screen.include.bb2@324>   If b<0 Then b=0
0000FBA0 <screen.include.bb2@325>   If b>255 Then b=255
0000FBB0 <screen.include.bb2@327>   r=r LSL 24 ;

0000FBC0 <screen.include.bb2@328>   g=g LSL 24 ; adjust to "32-bit left justified long value"
0000FBD0 <screen.include.bb2@329>   b=b LSL 24 ;

0000FBE2 <screen.include.bb2@330>   *view.ViewPort=\scr\ViewPort
0000FBF0 <screen.include.bb2@331>   *cmap.ColorMap=*view\ColorMap
0000FC20 <screen.include.bb2@332>   SetRGB32_*view,n,r,g,b
0000FC8C <screen.include.bb2@333>   If ObtainPen_ (*cmap,n,r,g,b,#PEN_NO_SETCOLOR) Then screenengine\screenPenLock[n]+1;:Else error{"Setpen failed!"}
0000FC90 <screen.include.bb2@334> End Statement
0000FCAE <screen.include.bb2@351> Statement screen_SetPenRGB {pen.l,color.l}
0000FCC6 <screen.include.bb2@352>   r.l = ((color & $00ff0000) LSR 16 )
0000FCDE <screen.include.bb2@353>   g.l = ((color & $0000ff00) LSR 8 )
0000FCEE <screen.include.bb2@354>   b.l = ((color & $000000ff)  )
0000FD04 <screen.include.bb2@355>   screen_SetPen{pen,r,g,b}
0000FD08 <screen.include.bb2@356> End Statement
0000FD36 <screen.include.bb2@417> Function.l screen_ASLRequest {title.s,mask.l}
0000FD3C <screen.include.bb2@418>   succ.l = False
0000FDA2 <screen.include.bb2@419>   aslsm_SetRequesterTitle{title.s,"",""}
0000FDC8 <screen.include.bb2@420>   If mask&#asl_scr_width    Then doDims.l=True:Else doDims=False
0000FDE2 <screen.include.bb2@421>   If mask&#asl_scr_height   Then doDims=True
0000FE08 <screen.include.bb2@422>   If mask&#asl_scr_depth    Then doDepth.l=True:Else doDepth=False
0000FE2E <screen.include.bb2@423>   If mask&#asl_scr_overscan Then doOverscan.l=True:Else doOverscan=False
0000FE54 <screen.include.bb2@424>   If mask&#asl_scr_ascroll   Then doAutoscroll.l=True:Else doAutoscroll=False
0000FE7E <screen.include.bb2@425>   If aslsm_Request{doDims,doDepth,doOverscan,doAutoscroll} Then succ=True
0000FE88 <screen.include.bb2@426>  Function Return succ
0000FEA2 <screen.include.bb2@427> End Function
0000FEC4 <screen.include.bb2@447> Function.l screen_GetBestModeID {scr_width.l,scr_height.l,scr_depth.l}
0000FF10 <screen.include.bb2@448>   modeID.l= BestCModeIDTagList_ (Tags(#CYBRBIDTG_NominalWidth,scr_width,#CYBRBIDTG_NominalHeight,scr_height,#CYBRBIDTG_Depth,scr_depth))
0000FF1A <screen.include.bb2@449>  Function Return modeID
0000FF20 <screen.include.bb2@450> End Function
0000FF3A <screen.include.bb2@513> Function.s screen_GetModeName {@modeid.l}
0000FF62 <screen.include.bb2@515>   name.s = "unknown"
0000FF76 <screen.include.bb2@516>   If modeid=-1
0000FF84 <screen.include.bb2@517>     *scr.Screen = \scr
0000FFC4 <screen.include.bb2@518>     If *scr=0 Then *scr = Peek.l(Addr Screen(Used Screen))
0000FFCE <screen.include.bb2@519>     If *scr
0000FFE8 <screen.include.bb2@520>       modeid.l = GetVPModeID_(*scr\ViewPort)
0000FFFC <screen.include.bb2@523>   If modeid><-1
00010010 <screen.include.bb2@524>     mode_ptr.l = FindDisplayInfo_ (modeid)
0001001A <screen.include.bb2@525>     If mode_ptr
00010054 <screen.include.bb2@526>       count.l = GetDisplayInfoData_ (mode_ptr,&naminfo,SizeOf.NameInfo,#DTAG_NAME,modeid)
00010082 <screen.include.bb2@527>       name.s = Peek.s(&naminfo\Name)
000100AC <screen.include.bb2@530>  Function Return name
000100D4 <screen.include.bb2@531> End Function
00010102 <screen.include.bb2@558> Function.w screen_Check {modeid.l,scr_width.l,scr_height.l,scr_depth.w,scr_overscan.l,scr_ascroll.l}
00010108 <screen.include.bb2@560>   succ.w = False
00010110 <screen.include.bb2@561>   mask.l = 0
00010132 <screen.include.bb2@562>   If scr_width<=0     Then mask|#asl_scr_width  ;: Else aslscr\minw = scr_width  : aslscr\maxw = scr_width
00010154 <screen.include.bb2@563>   If scr_height<=0    Then mask|#asl_scr_height ;: Else aslscr\minh = scr_height : aslscr\maxh = scr_height
00010172 <screen.include.bb2@564>   If scr_depth<=0     Then mask|#asl_scr_depth  ;: Else aslscr\mind = scr_depth  : aslscr\maxd = scr_depth
00010198 <screen.include.bb2@568>   If mask><0 OR modeid<=0
000101C6 <screen.include.bb2@577>     If screen_ASLRequest {"",mask}
000101CC <screen.include.bb2@579>       succ.w = True
000101D2 <screen.include.bb2@581>   Else
000101DC <screen.include.bb2@582>     aslsm_SetInitialModeID{modeid}
000101F0 <screen.include.bb2@583>     aslsm_SetInitialDims{scr_width,scr_height,scr_depth}
000101FC <screen.include.bb2@584>     aslscreendat\scr_overscan   = scr_overscan
00010208 <screen.include.bb2@585>     aslscreendat\scr_ascroll    = 128
0001020E <screen.include.bb2@586>     succ.w = True
00010218 <screen.include.bb2@588>  Function Return succ
0001021E <screen.include.bb2@589> End Function
00010234 <screen.include.bb2@593> Statement screen_ReleaseAllPens{}
00010246 <screen.include.bb2@594>   If \scr_isopen
00010270 <screen.include.bb2@595>     For pen.l = 0 To 255
000102A2 <screen.include.bb2@596>       While screenengine\screenPenLock[pen]>0:screen_ReleasePen {pen}:Wend
000102B8 <screen.include.bb2@597>       screenengine\screenPenLock[pen]=0
000102C8 <screen.include.bb2@598>     Next
000102CC <screen.include.bb2@600> End Statement
000102E2 <screen.include.bb2@614> Statement screen_Close {}
000102F4 <screen.include.bb2@615>   If \scr_isopen
000102FA <screen.include.bb2@616>     screen_ReleaseAllPens{}
00010306 <screen.include.bb2@618>     Select \scr_id
00010314 <screen.include.bb2@620>       Case #scr_mode_ask
00010342 <screen.include.bb2@621>         error {"The #scr_mode_ask should be overwritten by the real screenmodeID.\\nSomething went defintely wrong here!"}
00010356 <screen.include.bb2@623>       Case #scr_mode_wb_use
0001036A <screen.include.bb2@626>       Case #scr_mode_find
0001038A <screen.include.bb2@628>         UnlockPubScreen_ 0,\scr ; we dont need the screen name as argument
000103A4 <screen.include.bb2@629>         Poke.l Addr Screen(0),0 ; make AB2 think that the screen is closed
000103B8 <screen.include.bb2@631>       Case #scr_mode_invalid
000103BE <screen.include.bb2@634>       Default ; handle wb clone and custom screen
000103D0 <screen.include.bb2@635>         If \scr
000103DA <screen.include.bb2@637>             timeout.l = 50*5
00010438 <screen.include.bb2@638>             While CloseScreen_ (\scr)=False AND timeout>0:Delay_ 1:timeout-1:Wend
0001044A <screen.include.bb2@639>             If timeout=0
0001048C <screen.include.bb2@640>               tryagain.l = ask{"Unable to close screen!\\nPlease close all windows/apps running on this screen.","try again...|ignore"}
00010492 <screen.include.bb2@641>             Else
00010498 <screen.include.bb2@642>               tryagain.l = False
000104AC <screen.include.bb2@644>           Until tryagain=False
000104C6 <screen.include.bb2@646>         Poke.l Addr Screen(0),0 ; make AB2 think that the screen is closed
000104C8 <screen.include.bb2@648>     End Select
000104D2 <screen.include.bb2@649>     \scr_isopen = False
000104E0 <screen.include.bb2@650>     \scr        = 0
000104EE <screen.include.bb2@651>     \scr_id     = #scr_mode_invalid
00010500 <screen.include.bb2@653>     If \screenfont                  ; check if we use a screenfont
00010516 <screen.include.bb2@654>       CloseFont_ (\screenfont)      ; yes then close it
00010524 <screen.include.bb2@655>       \screenfont = 0
00010528 <screen.include.bb2@659> End Statement
00010556 <screen.include.bb2@660> !autoexit{screen_Close}
00010580 <screen.include.bb2@688> Statement screen_SetPubName {pubname.s}
000105B8 <screen.include.bb2@689>   \scr_pubname = pubname.s
000105D0 <screen.include.bb2@690> End Statement
000105EA <screen.include.bb2@739> Statement screen_SetDefaultSysFont {sysfont.l}
00010620 <screen.include.bb2@741>   If (sysfont < 0) AND (sysfont > 1) Then sysfont = -1
0001062C <screen.include.bb2@742>   \scr_sysfont = sysfont
00010630 <screen.include.bb2@743> End Statement
00010666 <screen.include.bb2@765> Function.l screen_SetDefaultFont {fontname.s,@fontsize.w,@fontstyle.l,@fontflags.l}
0001069E <screen.include.bb2@767>   If fontname=""
000106C6 <screen.include.bb2@768>     If \screenfont Then CloseFont_ (\screenfont)
000106D4 <screen.include.bb2@769>     \screenfont = 0
0001070C <screen.include.bb2@770>     \scr_fontname = fontname
00010718 <screen.include.bb2@771>     \scr_fontta\ta_YSize = 0
00010724 <screen.include.bb2@772>     \scr_fontta\ta_Style = 0
00010730 <screen.include.bb2@773>     \scr_fontta\ta_Flags = 0
00010736 <screen.include.bb2@774>   Else
0001076E <screen.include.bb2@775>     \scr_fontname = fontname
00010780 <screen.include.bb2@777>     \scr_fontta\ta_Name  = &\scr_fontname
00010794 <screen.include.bb2@778>     If fontsize <= 0 Then fontsize  = 6
000107A0 <screen.include.bb2@779>     \scr_fontta\ta_YSize = fontsize
000107BC <screen.include.bb2@780>     If fontstyle =-1 Then fontstyle = #FS_NORMAL
000107C8 <screen.include.bb2@781>     \scr_fontta\ta_Style = fontstyle
000107E4 <screen.include.bb2@782>     If fontflags =-1 Then fontflags = 0
000107F0 <screen.include.bb2@783>     \scr_fontta\ta_Flags = fontflags
0001080E <screen.include.bb2@785>     \screenfont = OpenDiskFont_ (\scr_fontta)
0001081E <screen.include.bb2@787>  Function Return \screenfont
00010838 <screen.include.bb2@788> End Function
00010876 <screen.include.bb2@820> Function.w screen_Open {title.s,@modeid.l,@scr_width.l,@scr_height.l,@scr_depth.l,@visible.l} ; -1=WB;-2=cloneWB;0=ASL
0001087C <screen.include.bb2@823>   succ.w = False
00010882 <screen.include.bb2@824>   noerr.w = False
00010888 <screen.include.bb2@825>   screen_Close {}
00010902 <screen.include.bb2@827>   If \scr_pubname = "" Then \scr_pubname = title   ; set the screen title as pubscreen title by default
0001093A <screen.include.bb2@828>   \scr_titleinit = title
0001094A <screen.include.bb2@829>   \penarraydummy=-1
00010950 <screen.include.bb2@830>   Select modeid
0001095E <screen.include.bb2@832>     Case #scr_mode_wb_use
0001097A <screen.include.bb2@833>       WbToScreen 0
00010996 <screen.include.bb2@834>       \scr = Peek.l(Addr Screen(0))
000109A8 <screen.include.bb2@835>       If \scr
000109B6 <screen.include.bb2@836>         \scr_id    = #scr_mode_wb_use
000109DE <screen.include.bb2@837>         title.s = "Workbench"
000109F2 <screen.include.bb2@840>     Case #scr_mode_find
00010A2A <screen.include.bb2@841>       If title.s><""
00010A44 <screen.include.bb2@842>         \scr=LockPubScreen_ (&title)              ; lock the screen so it
00010A4A <screen.include.bb2@843>       Else
00010A64 <screen.include.bb2@844>         \scr=LockPubScreen_ (0)                     ; default pubscreen
00010A8C <screen.include.bb2@845>         title.s="Default"
00010AB8 <screen.include.bb2@847>       If \scr Then \pubscreenlocked = True:Else \pubscreenlocked = False
00010AD0 <screen.include.bb2@849>       If \scr=0 ; try to find the blitz way ...
00010B1A <screen.include.bb2@850>         succ=FindScreen (0,title)
00010B40 <screen.include.bb2@851>         If succ Then \scr = Peek.l(Addr Screen(0))
00010B58 <screen.include.bb2@854>       If \scr=0 ; if nothing helps, get the WB
00010B74 <screen.include.bb2@855>         WbToScreen 0
00010B90 <screen.include.bb2@856>         \scr = Peek.l(Addr Screen(0))
00010BB8 <screen.include.bb2@857>         title.s = "Workbench"
00010BCA <screen.include.bb2@860>       If \scr                                              ; did we get it?
00010BE8 <screen.include.bb2@861>         Poke.l Addr Screen(0),\scr ; fake AB2 screen object
00010BF6 <screen.include.bb2@862>         \scr_id    = #scr_mode_find
00010C0A <screen.include.bb2@865>     Case #scr_mode_wb_clone
00010C18 <screen.include.bb2@866>       \scr_id = #scr_mode_wb_clone
00010C20 <screen.include.bb2@867>       n.l = 0
00010C64 <screen.include.bb2@868>       If visible=False Then staglist(n)\ti_Tag = #SA_Behind         ,-1  : n+1
00010C94 <screen.include.bb2@869>       staglist(n)\ti_Tag = #SA_LikeWorkbench ,-1                       : n+1
00010CC6 <screen.include.bb2@870>       staglist(n)\ti_Tag = #SA_Title         ,&\scr_titleinit          : n+1
00010CF8 <screen.include.bb2@871>       staglist(n)\ti_Tag = #SA_PubName       ,&\scr_pubname            : n+1
00010D44 <screen.include.bb2@874>       If \scr_sysfont<>-1 Then staglist(n)\ti_Tag = #SA_SysFont      ,\scr_sysfont : n+1
00010D8E <screen.include.bb2@875>       If \screenfont<>0   Then staglist(n)\ti_Tag = #SA_Font         ,&\scr_fontta : n+1
00010DAE <screen.include.bb2@876>       staglist(n)\ti_Tag = #TAG_DONE         ,0
00010DDC <screen.include.bb2@882>           \scr = OpenScreenTagList_ (0,&staglist(0))
00010DFA <screen.include.bb2@883>           Poke.l Addr Screen(0),\scr ; fake AB2 screen object
00010E2C <screen.include.bb2@885>       If \scr Then PubScreenStatus_ \scr,0
00010E32 <screen.include.bb2@887>     Default
00010E4E <screen.include.bb2@888>       WbToScreen 0
00010E66 <screen.include.bb2@889>       ShowScreen 0
00010E90 <screen.include.bb2@890>       succ.w = screen_Check {modeid.l,scr_width,scr_height,scr_depth,-1,-1}
00010E9A <screen.include.bb2@891>       If succ
00010EA8 <screen.include.bb2@892>         \scr_id = aslsm_GetModeID{}
00010EB0 <screen.include.bb2@893>         n.l = 0
00010EF4 <screen.include.bb2@894>         If visible=False Then staglist(n)\ti_Tag = #SA_Behind         ,-1  : n+1
00010F22 <screen.include.bb2@895>         staglist(n)\ti_Tag = #SA_Left          ,0                        : n+1
00010F50 <screen.include.bb2@896>         staglist(n)\ti_Tag = #SA_Top           ,0                        : n+1
00010F7E <screen.include.bb2@897>         staglist(n)\ti_Tag = #SA_Width         ,aslsm_GetWidth{}         : n+1
00010FAC <screen.include.bb2@898>         staglist(n)\ti_Tag = #SA_Height        ,aslsm_GetHeight{}        : n+1
00010FDA <screen.include.bb2@899>         staglist(n)\ti_Tag = #SA_Depth         ,aslsm_GetDepth{}         : n+1
00011008 <screen.include.bb2@900>         staglist(n)\ti_Tag = #SA_Overscan      ,aslsm_GetOverscan{}      : n+1
00011036 <screen.include.bb2@901>         staglist(n)\ti_Tag = #SA_AutoScroll    ,aslsm_GetAutoscroll{}    : n+1
00011064 <screen.include.bb2@902>         staglist(n)\ti_Tag = #SA_DisplayID     ,aslsm_GetModeID{}        : n+1
0001108E <screen.include.bb2@903>         staglist(n)\ti_Tag = #SA_SharePens     ,True                     : n+1
000110C0 <screen.include.bb2@904>         staglist(n)\ti_Tag = #SA_Pens          ,&\penarraydummy          : n+1
0001110C <screen.include.bb2@905>         If \scr_sysfont<>-1 Then staglist(n)\ti_Tag = #SA_SysFont     ,\scr_sysfont : n+1
00011156 <screen.include.bb2@906>         If \screenfont<>0   Then staglist(n)\ti_Tag = #SA_Font        ,&\scr_fontta : n+1
00011188 <screen.include.bb2@908>         staglist(n)\ti_Tag = #SA_Title         ,&\scr_titleinit          : n+1
000111BA <screen.include.bb2@910>         staglist(n)\ti_Tag = #SA_PubName       ,&\scr_pubname            : n+1
000111E8 <screen.include.bb2@911>         staglist(n)\ti_Tag = #TAG_DONE         ,0                        : n+1
00011216 <screen.include.bb2@917>               \scr = OpenScreenTagList_ (0,&staglist(0))
00011234 <screen.include.bb2@918>               Poke.l Addr Screen(0),\scr  ; fake AB2 screen object
00011278 <screen.include.bb2@920>         If \scr Then PubScreenStatus_ \scr,0: succ=True: Else succ=False
0001127E <screen.include.bb2@921>       Else
00011284 <screen.include.bb2@922>         noerr=True
00011286 <screen.include.bb2@925>   End Select
00011298 <screen.include.bb2@927>   If \scr
000112A2 <screen.include.bb2@928>     \scr_isopen       = True
000112B8 <screen.include.bb2@929>     \scr_width        = \scr\Width
000112D0 <screen.include.bb2@930>     \scr_height       = \scr\Height
000112FC <screen.include.bb2@931>     \scr_depth        = GetBitMapAttr_(\scr\RastPort\BitMap,#BMA_DEPTH)
0001131C <screen.include.bb2@932>     If \scr_depth<=0 Then \scr_depth=24
0001132A <screen.include.bb2@933>     \bias_red         = 100
00011338 <screen.include.bb2@934>     \bias_green       = 100
00011346 <screen.include.bb2@935>     \bias_blue        = 100
0001137C <screen.include.bb2@936>     \scr_title        = Peek.s(\scr\Title)
0001139C <screen.include.bb2@937>     If visible Then ScreenToFront_ \scr
000113A2 <screen.include.bb2@938>     succ.w = True
000113CC <screen.include.bb2@939>     For pen.l = 0 To 255
000113E2 <screen.include.bb2@940>       screenengine\screenPenLock[pen]=0
000113F2 <screen.include.bb2@941>     Next
000113F8 <screen.include.bb2@942>   Else
00011414 <screen.include.bb2@943>     WbToScreen 0
00011458 <screen.include.bb2@944>     If noerr=False Then error {"Unable to open screen!"}
0001145E <screen.include.bb2@945>     succ = False
00011468 <screen.include.bb2@947>  Function Return succ.w
00011482 <screen.include.bb2@948> End Function
00011498 <screen.include.bb2@964> Function.l screen_GetWidth {}
000114A4 <screen.include.bb2@965>  Function Return \scr_width
000114A8 <screen.include.bb2@966> End Function
000114BE <screen.include.bb2@982> Function.l screen_GetHeight {}
000114CE <screen.include.bb2@983>  Function Return \scr_height
000114D2 <screen.include.bb2@984> End Function
000114E8 <screen.include.bb2@1001> Function.l screen_GetDepth {}
000114FA <screen.include.bb2@1002>  Function Return \scr_depth
000114FE <screen.include.bb2@1003> End Function
00011514 <screen.include.bb2@1019> Function.l screen_GetModeID {}
00011524 <screen.include.bb2@1020>  Function Return \scr_id
00011528 <screen.include.bb2@1021> End Function
0001153E <screen.include.bb2@1038> Function.l screen_GetASLWidth {}
0001154A <screen.include.bb2@1039>  Function Return aslsm_GetWidth{}
0001154E <screen.include.bb2@1040> End Function
00011564 <screen.include.bb2@1056> Function.l screen_GetASLHeight {}
00011570 <screen.include.bb2@1057>  Function Return aslsm_GetHeight{}
00011574 <screen.include.bb2@1058> End Function
0001158A <screen.include.bb2@1075> Function.l screen_GetASLDepth {}
00011596 <screen.include.bb2@1076>  Function Return aslsm_GetDepth{}
0001159A <screen.include.bb2@1077> End Function
000115B0 <screen.include.bb2@1093> Function.l screen_GetASLModeID {}
000115BC <screen.include.bb2@1094>  Function Return aslsm_GetModeID{}
000115C0 <screen.include.bb2@1095> End Function
000115D6 <screen.include.bb2@1109> Function.s screen_GetASLModeName {}
00011604 <screen.include.bb2@1110>  Function Return aslsm_GetModeName{}
0001160C <screen.include.bb2@1111> End Function
0001160C <PED.ab2@78> 
0001160C <semaphore.include.bb2@1> XINCLUDE "semaphore.include.bb2"
0001163A <semaphore.include.bb2@75> Function.w sema_Create {name.s,@removeOnExit.l}
00011640 <semaphore.include.bb2@77> succ.w = False
00011658 <semaphore.include.bb2@78> If semadat\is_used = False
00011660 <semaphore.include.bb2@79>   Forbid_
00011676 <semaphore.include.bb2@80>   *sema = FindSemaphore_(&name.s)
0001167E <semaphore.include.bb2@81>   Permit_
00011692 <semaphore.include.bb2@82>   If *sema=False
000116CA <semaphore.include.bb2@83>     semadat\name    = name.s
000116D6 <semaphore.include.bb2@84>     semadat\counter = 0
000116E0 <semaphore.include.bb2@85>     semadat\stolen  = False
00011700 <semaphore.include.bb2@86>     *sema = AllocMem_ (SizeOf.SignalSemaphore,#MEMF_PUBLIC|#MEMF_CLEAR)
0001170A <semaphore.include.bb2@87>     If *sema
0001171C <semaphore.include.bb2@88>       *sema\ss_Link\ln_Name = &semadat\name
00011728 <semaphore.include.bb2@89>       *sema\ss_Link\ln_Pri  = 1
00011734 <semaphore.include.bb2@90>       *sema\ss_Link\ln_Type = #NT_SIGNALSEM
00011744 <semaphore.include.bb2@91>       InitSemaphore_ *sema
00011754 <semaphore.include.bb2@92>       AddSemaphore_ *sema
00011760 <semaphore.include.bb2@93>       semadat\removeOnExit = removeOnExit
00011768 <semaphore.include.bb2@94>       semadat\is_used = True
0001176E <semaphore.include.bb2@95>       succ.w = True
00011774 <semaphore.include.bb2@96>     Else
000117A2 <semaphore.include.bb2@97>       error {"Can`t allocate memory for semaphore!"}
000117A8 <semaphore.include.bb2@102> Else
0001180A <semaphore.include.bb2@103>   error {"Semaphore "+semadat\name+" is already used!"}
00011814 <semaphore.include.bb2@105> Function Return succ
0001182E <semaphore.include.bb2@106> End Function
00011844 <semaphore.include.bb2@120> Statement sema_Remove {}
00011852 <semaphore.include.bb2@122> If semadat\is_used
00011898 <semaphore.include.bb2@123>   While semadat\counter>0:ReleaseSemaphore_ *sema:semadat\counter-1:Wend ; remove all shared locks
000118C8 <semaphore.include.bb2@124>   If semadat\counter<0 Then ReleaseSemaphore_ *sema:semadat\counter=0 ; remove if exclusivly locked
000118FA <semaphore.include.bb2@125>   If semadat\stolen = False AND semadat\removeOnExit><False
0001190A <semaphore.include.bb2@126>     ObtainSemaphore_ *sema
0001191A <semaphore.include.bb2@127>     RemSemaphore_ *sema
0001192A <semaphore.include.bb2@128>     ReleaseSemaphore_ *sema
00011944 <semaphore.include.bb2@129>     FreeMem_ *sema,SizeOf.SignalSemaphore
0001194C <semaphore.include.bb2@131>   semadat\is_used = False
00011954 <semaphore.include.bb2@132>   *sema=0
00011956 <semaphore.include.bb2@136> End Statement
00011984 <semaphore.include.bb2@137> !autoexit{sema_Remove}
000119AE <semaphore.include.bb2@285> Function.w sema_Find {name.s}
000119B4 <semaphore.include.bb2@287> succ.w = False
000119CC <semaphore.include.bb2@288> If semadat\is_used = False
000119D4 <semaphore.include.bb2@289>   Forbid_
000119EA <semaphore.include.bb2@290>   *sema = FindSemaphore_(&name.s)
000119F2 <semaphore.include.bb2@291>   Permit_
000119FC <semaphore.include.bb2@292>   If *sema
00011A04 <semaphore.include.bb2@293>     semadat\is_used = True
00011A0E <semaphore.include.bb2@294>     semadat\stolen  = True
00011A46 <semaphore.include.bb2@295>     semadat\name    = name.s
00011A52 <semaphore.include.bb2@296>     semadat\counter = 0
00011A58 <semaphore.include.bb2@297>     succ.w = True
00011A5E <semaphore.include.bb2@301> Else
00011AC0 <semaphore.include.bb2@302>   error {"Semaphore "+semadat\name+" is already used!"}
00011ACA <semaphore.include.bb2@304> Function Return succ
00011AE4 <semaphore.include.bb2@305> End Function
00011AE4 <PED.ab2@79> 
00011AE4 <vvblank.include.bb2@1> XINCLUDE "vvblank.include.bb2"
00011AFA <vvblank.include.bb2@58> Statement vvblank_Free {}
00011B2C <vvblank.include.bb2@60> If \timer_base Then CloseDevice_ \msg       :\timer_base = False
00011B5E <vvblank.include.bb2@61> If \msg        Then DeleteIORequest_ \msg   :\msg        = False
00011B90 <vvblank.include.bb2@62> If \msgport    Then DeleteMsgPort_ \msgport :\msgport    = False
00011B98 <vvblank.include.bb2@63> \is_open = False
00011B9A <vvblank.include.bb2@64> End Statement
00011BC8 <vvblank.include.bb2@65> !autoexit{vvblank_Free}
00011BDE <vvblank.include.bb2@77> Statement vvblank_ResetSync {}
00011BEC <vvblank.include.bb2@79> If \is_open
00011C00 <vvblank.include.bb2@80>   GetReg a0,&\timeindex_hi    ;ReadEClock()
00011C12 <vvblank.include.bb2@81>   GetReg d0,\timer_base
00011C14 <vvblank.include.bb2@82>   MOVE.l a6,-(a7)
00011C16 <vvblank.include.bb2@83>   MOVE.l d0,a6
00011C1A <vvblank.include.bb2@84>   JSR -60(a6)
00011C1C <vvblank.include.bb2@85>   MOVE.l (a7)+,a6
00011C20 <vvblank.include.bb2@86>   MOVE.l d0,-4(a0)
00011C36 <vvblank.include.bb2@87>   q.d = \efreq
00011C50 <vvblank.include.bb2@88>   q.d / \hz
00011C7A <vvblank.include.bb2@89>   \quantum = Int(q+.5)
00011C80 <vvblank.include.bb2@90> Else
00011CAE <vvblank.include.bb2@91>   error {"vvblank_resetSync: Tried to set vvblank while closed !"}
00011CB2 <vvblank.include.bb2@93> End Statement
00011CCC <vvblank.include.bb2@110> Function.l vvblank_Init {@hz.f}
00011CD2 <vvblank.include.bb2@112> succ.l = False
00011D08 <vvblank.include.bb2@113> If hz=-1 Then hz=50
00011D0E <vvblank.include.bb2@114> vvblank_Free {}
00011D1E <vvblank.include.bb2@115> \msgport = CreateMsgPort_()
00011D30 <vvblank.include.bb2@116> If  \msgport
00011D58 <vvblank.include.bb2@117>   \msg = CreateIORequest_(\msgport,SizeOf.timerequest)
00011D6A <vvblank.include.bb2@118>   If \msg
00011DC2 <vvblank.include.bb2@119>     If OpenDevice_ ("timer.device",#UNIT_WAITECLOCK,\msg,0) = False
00011DD0 <vvblank.include.bb2@120>       *TimerIO.timerequest = \msg
00011DDC <vvblank.include.bb2@121>       *TimerIO\tr_node\io_Command = #TR_ADDREQUEST
00011DE2 <vvblank.include.bb2@122>       succ = True
00011DEA <vvblank.include.bb2@123>       \is_open    = True
00011DF8 <vvblank.include.bb2@124>       *mp.MsgPort = \msgport
00011E16 <vvblank.include.bb2@125>       \sigflag    = 1 LSL *mp\mp_SigBit
00011E28 <vvblank.include.bb2@126>       \timer_base = *TimerIO\tr_node\io_Device
00011E34 <vvblank.include.bb2@127>       \hz         = hz
00011E3A <vvblank.include.bb2@128>       vvblank_ResetSync {}
00011E40 <vvblank.include.bb2@129>     Else
00011E6E <vvblank.include.bb2@130>       error {"vvblank_init: Unable to open timer.device !"}
00011E74 <vvblank.include.bb2@132>   Else
00011EA2 <vvblank.include.bb2@133>     error {"vvblank_init:  Failed to create timerequest !"}
00011EA8 <vvblank.include.bb2@135> Else
00011ED6 <vvblank.include.bb2@136>   error {"vvblank_init:  Failed to create msgport !"}
00011EF0 <vvblank.include.bb2@138> If succ = False Then vvblank_Free {}
00011EFA <vvblank.include.bb2@139> Function Return succ
00011F00 <vvblank.include.bb2@140> End Function
00011F1A <vvblank.include.bb2@159> Function.l vvblank_SetFreq {hz.f}
00011F20 <vvblank.include.bb2@161> succ.l = False
00011F44 <vvblank.include.bb2@162> If hz<1 Then hz=1
00011F52 <vvblank.include.bb2@164> If \is_open
00011F5E <vvblank.include.bb2@165>   \hz         = hz
00011F64 <vvblank.include.bb2@166>   vvblank_ResetSync {}
00011F6A <vvblank.include.bb2@167>   succ=True
00011F70 <vvblank.include.bb2@168> Else
00011F7E <vvblank.include.bb2@169>   succ = vvblank_Init{hz}
00011F88 <vvblank.include.bb2@171> Function Return succ
00011F8E <vvblank.include.bb2@172> End Function
00011FA8 <vvblank.include.bb2@185> Statement vvblank_Wait {@vcycles.l}
00011FD0 <vvblank.include.bb2@187> If \is_open=False Then succ.l = vvblank_Init{50}
00011FEA <vvblank.include.bb2@188> If vcycles<1 Then vcycles=1
00011FF8 <vvblank.include.bb2@189> If \is_open
0001200C <vvblank.include.bb2@190>   GetReg a0,&\timeindex_hi    ;ReadEClock()
0001201E <vvblank.include.bb2@191>   GetReg d0,\timer_base
00012020 <vvblank.include.bb2@192>   MOVE.l a6,-(a7)
00012022 <vvblank.include.bb2@193>   MOVE.l d0,a6
00012026 <vvblank.include.bb2@194>   JSR -60(a6)
00012028 <vvblank.include.bb2@195>   MOVE.l (a7)+,a6
00012036 <vvblank.include.bb2@197>   *TimerIO.timerequest = \msg
00012062 <vvblank.include.bb2@198>   If (\timeindex_lo & $7FFFFFFF)<(*TimerIO\tr_time\tv_micro & $7FFFFFFF)
00012074 <vvblank.include.bb2@199>     \timeindex_lo = *TimerIO\tr_time\tv_micro
00012086 <vvblank.include.bb2@200>     \timeindex_hi = *TimerIO\tr_time\tv_secs
0001209C <vvblank.include.bb2@201>     DoIO_ \msg
000120B0 <vvblank.include.bb2@203>   GetReg a0,&\timeindex_lo
000120BC <vvblank.include.bb2@204>   GetReg d0,vcycles
000120C0 <vvblank.include.bb2@205>   MOVE.l -12(a0),d1 ; d1 = \quantum
000120C4 <vvblank.include.bb2@206>   MULS.l d1,d0
000120C8 <vvblank.include.bb2@207>   MOVE.l -4(a0),d1
000120CA <vvblank.include.bb2@208>   CLR.l d2
000120CC <vvblank.include.bb2@209>   ADD.l d0,(a0)
000120CE <vvblank.include.bb2@210>   ADDX.l d2,d1
000120D2 <vvblank.include.bb2@211>   MOVE.l d1,-4(a0)
000120E4 <vvblank.include.bb2@213>   *TimerIO\tr_time\tv_micro = \timeindex_lo
000120F6 <vvblank.include.bb2@214>   *TimerIO\tr_time\tv_secs  = \timeindex_hi
000120FA <vvblank.include.bb2@216> End Statement
000120FA <PED.ab2@80> CEND
000120FA <cpu.include.bb2@1> XINCLUDE "cpu.include.bb2"
000120FA <PED.ab2@81> 
000120FA <file.include.bb2@1> XINCLUDE "file.include.bb2"
00012110 <file.include.bb2@66> MaxLen ASL_path.s    = 4096
00012126 <file.include.bb2@67> MaxLen ASL_file.s    = 256
0001213C <file.include.bb2@68> MaxLen ASL_pattern.s = 4096
00012152 <file.include.bb2@70> MaxLen IO_errmsg.s  = 64
0001215E <file.include.bb2@72> ASL_x.l = -1
0001216A <file.include.bb2@73> ASL_y.l = -1
00012176 <file.include.bb2@74> ASL_xs.l = -1
00012182 <file.include.bb2@75> ASL_ys.l = -1
000121AA <file.include.bb2@77> ASL_path.s = "SYS:"
000121D2 <file.include.bb2@78> ASL_file.s = ""
000121FA <file.include.bb2@79> ASL_pattern.s = "#?"
0001221E <file.include.bb2@109> Dim filedat.filedat (#max_files-1)
00012242 <file.include.bb2@110> Dim chunk.chunk(8)
0001225C <file.include.bb2@156> Function.l file_LFlip {value.l}
0001226C <file.include.bb2@157> GetReg a0,&value
0001226E <file.include.bb2@158> CLR.l d0
00012270 <file.include.bb2@159> CLR.l d1
00012272 <file.include.bb2@160> CLR.l d2
00012274 <file.include.bb2@161> CLR.l d3
00012276 <file.include.bb2@162> MOVE.b  (a0),d0
0001227A <file.include.bb2@163> MOVE.b 1(a0),d1
0001227E <file.include.bb2@164> MOVE.b 2(a0),d2
00012282 <file.include.bb2@165> MOVE.b 3(a0),d3
00012284 <file.include.bb2@166> LSL.l #8,d1
00012286 <file.include.bb2@167> LSL.l #8,d3
00012288 <file.include.bb2@168> OR.l d0,d1
0001228A <file.include.bb2@169> OR.l d2,d3
0001228C <file.include.bb2@170> SWAP d3
0001228E <file.include.bb2@171> OR.l d1,d3
00012290 <file.include.bb2@172> MOVE.l d3,(a0)
0001229A <file.include.bb2@173> Function Return value
000122A0 <file.include.bb2@174> End Function
000122BA <file.include.bb2@237> Function.l file_GetLength {fid.l}
000122D6 <file.include.bb2@239> If \is_used
000122FC <file.include.bb2@240>   If \blength<=0
0001231C <file.include.bb2@241>     *fib.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
00012326 <file.include.bb2@242>     If *fib
00012352 <file.include.bb2@243>       ExamineFH_ \fh,*fib
00012374 <file.include.bb2@244>       \blength = *fib\fib_Size
0001238E <file.include.bb2@245>       FreeDosObject_ #DOS_FIB,*fib
00012394 <file.include.bb2@248> Else
000123C2 <file.include.bb2@249>   error{"\\__THIS_FUNCTION: Requested file is not open!"}
000123E0 <file.include.bb2@251> Function Return \blength
000123E6 <file.include.bb2@252> End Function
00012404 <file.include.bb2@271> Function.w file_Seek {fid.l,filepos.l}
0001240A <file.include.bb2@273> succ.w = True
0001242C <file.include.bb2@274> If \seekpos >< filepos
0001244C <file.include.bb2@275>   If \cache_ptr
00012484 <file.include.bb2@276>     If filepos>=0 AND filepos<=\blength
000124A0 <file.include.bb2@277>       \seekpos = filepos
000124A6 <file.include.bb2@278>     Else
000124AC <file.include.bb2@279>       succ = False
000124B2 <file.include.bb2@281>   Else
000124B8 <file.include.bb2@282>     succ.w = False
000124D4 <file.include.bb2@283>     If \is_used
00012520 <file.include.bb2@285>       If Seek_ (\fh,filepos,#OFFSET_BEGINNING) = -1
00012526 <file.include.bb2@286>         succ.w=False
00012554 <file.include.bb2@287>         error{"\\__THIS_FUNCTION: Tried to seek at invalid position!"}
00012560 <file.include.bb2@288>       Else succ.w = True
0001257C <file.include.bb2@289>         \seekpos = filepos
00012582 <file.include.bb2@291>     Else
000125B0 <file.include.bb2@292>       error{"\\__THIS_FUNCTION: Requested file is not open!"}
000125BA <file.include.bb2@296> Function Return succ
000125C0 <file.include.bb2@297> End Function
000125DE <file.include.bb2@316> Function.w FAST file_SeekRel {fid.l,offset.l}
0001260C <file.include.bb2@318> Function Return file_Seek {fid,\seekpos+offset}
00012612 <file.include.bb2@319> End Function
00012628 <file.include.bb2@335> Function.l file_GetFreeFID{}
00012630 <file.include.bb2@337> fid.l = 0
0001268C <file.include.bb2@338> While (\is_used=True OR \occupied=True) AND fid < #max_files-1
0001269A <file.include.bb2@339>   fid+1
000126A0 <file.include.bb2@340> Wend
000126D2 <file.include.bb2@341> If \is_used=True Then fid = -1 ;: error{"Too many files open !"}
000126DC <file.include.bb2@342> Function Return fid
000126E2 <file.include.bb2@343> End Function
000126FC <file.include.bb2@397> Statement file_Close {fid.l}
0001270E <file.include.bb2@399> If fid>=0
0001276C <file.include.bb2@400>   If \fh Then Close_ \fh : \fh = False
000127A6 <file.include.bb2@401>   \name       = ""
000127E0 <file.include.bb2@402>   \path       = ""
000127FE <file.include.bb2@403>   \seekpos    = 0
0001281C <file.include.bb2@404>   \blength    = 0
00012832 <file.include.bb2@405>   \is_used    = False
0001284E <file.include.bb2@406>   \accessmode = 0
00012868 <file.include.bb2@407>   \occupied   = False
000128E6 <file.include.bb2@408>   If \cache_ptr Then FreeMem_ \cache_ptr,\cache_blength : \cache_ptr = 0
000128F8 <file.include.bb2@410> End Statement
0001290E <file.include.bb2@422> Statement file_CloseAll {}
00012938 <file.include.bb2@424> For fid.l=0 To #max_files-1
00012942 <file.include.bb2@425>   file_Close{fid}
00012952 <file.include.bb2@426> Next
00012956 <file.include.bb2@427> End Statement
00012984 <file.include.bb2@428> !autoexit{file_CloseAll}
0001299A <file.include.bb2@525> Function.s file_GetIOErr {}
000129E2 <file.include.bb2@527> Fault_ IoErr_(),0,&IO_errmsg.s,64 : Poke.b &IO_errmsg.s+63,0
00012A02 <file.include.bb2@528> Function Return Peek.s(&IO_errmsg.s)
00012A0A <file.include.bb2@529> End Function
00012A48 <file.include.bb2@568> Function.l file_Open {name.s,mode.l,@extention.s}
00012A54 <file.include.bb2@570> openfid.l = -1
00012A5E <file.include.bb2@571> fid.l = file_GetFreeFID{}
00012A70 <file.include.bb2@572> If fid>=0
00012A76 <file.include.bb2@573>   Select mode
00012A84 <file.include.bb2@574>     Case #file_read
00012AAC <file.include.bb2@575>       a.s = "Select file to read ..."
00012AC0 <file.include.bb2@576>     Case #file_open
00012AE8 <file.include.bb2@577>       a.s = "Select file to open ..."
00012AFC <file.include.bb2@578>     Case #file_write
00012B24 <file.include.bb2@579>       a.s = "Select file to write ..."
00012B38 <file.include.bb2@580>     Case #file_forcewrite
00012B60 <file.include.bb2@581>       a.s = "Select file to write ..."
00012B62 <file.include.bb2@582>   End Select
00012B86 <file.include.bb2@584>   If mode = #file_read Then savemode.l = False:Else savemode = True
00012BBE <file.include.bb2@586>   If name.s=""
00012C48 <file.include.bb2@587>     aslfr_SetPath {0,ASL_path.s,ASL_file.s,ASL_pattern.s}
00012C70 <file.include.bb2@588>     If aslfr_Request {0,savemode.l,False,False}
00012CA0 <file.include.bb2@589>       name.s = aslfr_GetNextFile {}
00012CD8 <file.include.bb2@593>   If name.s><""
00012D30 <file.include.bb2@594>     path.s  = dos_PathPart {name.s}
00012D88 <file.include.bb2@595>     fname.s = dos_FilePart {name.s}
00012E08 <file.include.bb2@597>     name.s  = dos_AddPart {path.s,fname.s}
00012E3C <file.include.bb2@598>     ASL_path.s = path.s
00012E70 <file.include.bb2@599>     ASL_file.s  = fname.s
00012E76 <file.include.bb2@600>     Select mode
00012E84 <file.include.bb2@601>       Case #file_read
00012EB8 <file.include.bb2@602>         \fh = Open_ (&name.s,#MODE_OLDFILE)
00012EE0 <file.include.bb2@603>         If \fh = False
00012F9E <file.include.bb2@604>           If extention.s><"" Then fname.s = dos_SetExt {fname.s,extention.s}
0001301E <file.include.bb2@605>           name.s  = dos_AddPart {path.s,fname.s}
00013052 <file.include.bb2@606>           \fh =  Open_ (&name.s,#MODE_OLDFILE)
00013072 <file.include.bb2@608>         If \fh
00013078 <file.include.bb2@609>           openfid = fid
0001307E <file.include.bb2@610>         Else
00013142 <file.include.bb2@611>           error{"\\__THIS_FUNCTION: Unable to read " + Chr$(34)+name.s+Chr$(34)+" : "+ file_GetIOErr{}+"!"}
00013156 <file.include.bb2@614>       Case #file_write
00013214 <file.include.bb2@615>         If extention.s><"" Then fname.s = dos_SetExt {fname.s,extention.s}
00013294 <file.include.bb2@616>         name.s  = dos_AddPart {path.s,fname.s}
00013378 <file.include.bb2@617>         If dos_Exist {name.s} Then bool.l = ask {"File "+Chr$(34)+fname.s+Chr$(34)+" already exists!","Overwrite|Cancel"}:Else bool = True
00013382 <file.include.bb2@618>         If bool
000133B6 <file.include.bb2@619>           \fh = Open_ (&name.s,#MODE_NEWFILE)
000133D6 <file.include.bb2@620>           If \fh
000133DC <file.include.bb2@621>             openfid = fid
000133E2 <file.include.bb2@622>           Else
000134A6 <file.include.bb2@623>             error{"\\__THIS_FUNCTION: Unable to write " + Chr$(34)+name.s+Chr$(34)+" : "+ file_GetIOErr{}+"!"}
000134BA <file.include.bb2@627>       Case #file_open
000134EE <file.include.bb2@628>         \fh = Open_ (&name.s,#MODE_READWRITE)
00013516 <file.include.bb2@629>         If \fh = False
000135D4 <file.include.bb2@630>           If extention.s><"" Then fname.s = dos_SetExt {fname.s,extention.s}
00013654 <file.include.bb2@631>           name.s  = dos_AddPart {path.s,fname.s}
00013688 <file.include.bb2@632>           \fh =  Open_ (&name.s,#MODE_READWRITE)
000136A8 <file.include.bb2@635>         If \fh
000136AE <file.include.bb2@636>           openfid = fid
000136B4 <file.include.bb2@637>         Else
00013778 <file.include.bb2@638>           error{"\\__THIS_FUNCTION: Unable to open " + Chr$(34)+name.s+Chr$(34)+" : "+ file_GetIOErr{}+"!"}
0001378C <file.include.bb2@641>       Case #file_forcewrite
0001384A <file.include.bb2@642>         If extention.s><"" Then fname.s = dos_SetExt {fname.s,extention.s}
000138CA <file.include.bb2@643>         name.s  = dos_AddPart {path.s,fname.s}
000138FE <file.include.bb2@644>         \fh = Open_ (&name.s,#MODE_NEWFILE)
0001391E <file.include.bb2@645>         If \fh
00013924 <file.include.bb2@646>           openfid = fid
0001392A <file.include.bb2@647>         Else
000139EE <file.include.bb2@648>           error{"\\__THIS_FUNCTION: Unable to write " + Chr$(34)+name.s+Chr$(34)+" : "+ file_GetIOErr{}+"!"}
000139F4 <file.include.bb2@651>       Default
00013A22 <file.include.bb2@652>         error{"\\__THIS_FUNCTION: Undefined accessmode!"}
00013A24 <file.include.bb2@653>     End Select
00013A2A <file.include.bb2@655> Else
00013AB6 <file.include.bb2@656>   error{"\\__THIS_FUNCTION: Unable to open file \\22"+dos_FilePart {name.s}+"\\22: Too many files open!"}
00013AC8 <file.include.bb2@659> If openfid>=0
00013ADE <file.include.bb2@660>   \is_used = True
00013B48 <file.include.bb2@661>   \name = dos_FilePart {name.s}
00013BB2 <file.include.bb2@662>   \path = dos_PathPart {name.s}
00013BCC <file.include.bb2@663>   If mode = #file_forcewrite Then mode = #file_write
00013BE8 <file.include.bb2@664>   \accessmode = mode
00013C06 <file.include.bb2@665>   \seekpos = 0
00013C20 <file.include.bb2@666>   \intel = False
00013C2A <file.include.bb2@668> Function Return openfid
00013C46 <file.include.bb2@669> End Function
00013C60 <file.include.bb2@733> Function.s file_GetFullName {fid.l}
00013D04 <file.include.bb2@735> filename.s = dos_AddPart {\path,\name}
00013D58 <file.include.bb2@736> If \is_used = False Then error{"\\__THIS_FUNCTION: Requested file is not open!"}
00013D82 <file.include.bb2@737> Function Return filename.s
00013D9A <file.include.bb2@738> End Function
00013DB4 <file.include.bb2@755> Function.w file_IsUsed {fid.l}
00013DF4 <file.include.bb2@757> If fid>=0 AND fid<#max_files Then Function Return \is_used
00013DFC <file.include.bb2@758> Function Return False
00013E02 <file.include.bb2@759> End Function
00013E24 <file.include.bb2@805> Function.w file_WriteMem {fid.l,sourceaddr.l,blength.l}
00013E2A <file.include.bb2@807> succ.w = False
00013E50 <file.include.bb2@808> If fid>=0 AND fid<#max_files
00013E6C <file.include.bb2@809> If \is_used
00013E7E <file.include.bb2@810>   If blength>#file_maxbuffer
00013EDC <file.include.bb2@811>     If \buffer_used Then Flush_ \fh:\buffer_used = False
00013F14 <file.include.bb2@812>     wlength.l = Write_ (\fh,sourceaddr,blength)
00013F1A <file.include.bb2@813>   Else
00013F62 <file.include.bb2@814>     wlength.l = FWrite_ (\fh,sourceaddr,blength,1) * blength
00013F7C <file.include.bb2@815>     \buffer_used = True
00013F8A <file.include.bb2@818>   If wlength=blength
00013F90 <file.include.bb2@819>     succ.w = True
00013F96 <file.include.bb2@820>   Else
00013FA8 <file.include.bb2@821>     If wlength>=0
00014088 <file.include.bb2@822>       error{"\\__THIS_FUNCTION: Failed to write data to \\22"+\name+"\\22!\\nWanted to write "+Str$(blength)+" bytes but did "+Str$(wlength)+"!"}
0001408E <file.include.bb2@823>     Else
000140D4 <file.include.bb2@824>       a.s = LSet$ (" ",85)
000140E0 <file.include.bb2@825>       err.l = IoErr_()
00014146 <file.include.bb2@826>       If Fault_ (err.l,0,&a.s,81) = False Then a.s = "undefined dos error"
00014180 <file.include.bb2@827>       error{a.s}
000141C8 <file.include.bb2@830>   If wlength>=0 Then \seekpos + wlength
00014230 <file.include.bb2@831>   If \seekpos>\blength Then \blength = \seekpos
00014236 <file.include.bb2@832> Else
00014264 <file.include.bb2@833>   error{"\\__THIS_FUNCTION: Tried to write a non-existing file!"}
0001426A <file.include.bb2@835> Else
000142C0 <file.include.bb2@836>  error{"\\__THIS_FUNCTION: Invalid dos number! "+Str$(fid)}
000142CA <file.include.bb2@838> Function Return succ
000142DE <file.include.bb2@839> End Function
00014300 <file.include.bb2@867> Function.l FAST file_ReadMem {fid.l,destaddr.l,blength.l}
00014306 <file.include.bb2@869> succ.l = False
00014322 <file.include.bb2@870> If \is_used
00014342 <file.include.bb2@871>   If \cache_ptr
00014380 <file.include.bb2@872>     If blength<\cache_blength-\seekpos
000143CE <file.include.bb2@873>       CopyMem_ \cache_ptr+\seekpos,destaddr,blength
00014404 <file.include.bb2@874>       \seekpos + blength
0001440A <file.include.bb2@875>       succ.l = True
00014410 <file.include.bb2@876>     Else
00014440 <file.include.bb2@877>       \seekpos = \blength
00014446 <file.include.bb2@878>       succ=False
0001444C <file.include.bb2@880>   Else
0001445E <file.include.bb2@881>     If blength>#file_maxbuffer
000144BC <file.include.bb2@882>       If \buffer_used Then Flush_ \fh:\buffer_used = False
000144F4 <file.include.bb2@883>       rlength.l = Read_ (\fh,destaddr,blength)
000144FA <file.include.bb2@884>     Else
00014542 <file.include.bb2@885>       rlength.l = FRead_ (\fh,destaddr,blength,1) * blength
0001455C <file.include.bb2@886>       \buffer_used = True
0001456A <file.include.bb2@888>     If rlength=blength
00014570 <file.include.bb2@889>       succ = True ; rlength
00014576 <file.include.bb2@890>     Else
00014588 <file.include.bb2@891>       If rlength>=0
0001458E <file.include.bb2@892>         succ.l = False ; rlength
00014594 <file.include.bb2@893>       Else
000145E6 <file.include.bb2@894>         error{"\\__THIS_FUNCTION: "+file_GetIOErr{}}
0001462E <file.include.bb2@897>     If rlength>=0 Then \seekpos + rlength
00014638 <file.include.bb2@900> Function Return succ
0001463E <file.include.bb2@901> End Function
00014658 <file.include.bb2@917> Statement file_Cache {fid.l}
00014674 <file.include.bb2@919> If \is_used
00014696 <file.include.bb2@920>   \cache_blength = file_GetLength {fid}
000146E4 <file.include.bb2@921>   If \cache_blength<1024*256 AND \cache_blength>0
00014700 <file.include.bb2@922>     oldpos.l = \seekpos
00014718 <file.include.bb2@923>     If file_Seek {fid,0}
0001474A <file.include.bb2@924>       cache_ptr.l = AllocMem_ (\cache_blength,0)
00014754 <file.include.bb2@925>       If cache_ptr
0001477E <file.include.bb2@926>         succ.l = file_ReadMem {fid,cache_ptr,\cache_blength}
0001479A <file.include.bb2@927>         \cache_ptr= cache_ptr
000147AE <file.include.bb2@928>         If succ=False
0001483A <file.include.bb2@929>           FreeMem_ \cache_ptr,\cache_blength : \cache_ptr = 0 :error{"\\__THIS_FUNCTION: Unable to cache file!"}
00014860 <file.include.bb2@933>     If oldpos>=0 Then succ = file_Seek {fid,oldpos}
00014864 <file.include.bb2@936> End Statement
0001487E <file.include.bb2@955> Function.w FAST file_EOF {fid.l}
00014884 <file.include.bb2@957> succ.w = False
000148CC <file.include.bb2@958> If \blength <=0 Then \blength = file_GetLength{fid}
0001490A <file.include.bb2@959> If \blength <= \seekpos Then succ=True
00014914 <file.include.bb2@960> Function Return succ
0001491A <file.include.bb2@961> End Function
00014940 <file.include.bb2@1108> Function.w file_WriteChunk {fid.l,head.l,@blength.l,@nowordalign.l}
00014946 <file.include.bb2@1110> succ.w = False
0001496C <file.include.bb2@1111> If file_chunkcounter<8 AND file_chunkcounter>=0
000149CC <file.include.bb2@1112>   If nowordalign=0 AND (filedat(fid)\seekpos&1)=1 Then dummy.l = 0:file_WriteMem {fid,&dummy,1}
000149E6 <file.include.bb2@1113>   succ.w = file_WriteMem {fid,&head,4}
000149F0 <file.include.bb2@1114>   If succ
00014A0A <file.include.bb2@1115>     succ.w = file_WriteMem {fid,&blength,4}
00014A14 <file.include.bb2@1116>     If succ
00014A2C <file.include.bb2@1117>       chunk(file_chunkcounter)\head   = head
00014A5C <file.include.bb2@1118>       chunk(file_chunkcounter)\offset = filedat(fid)\seekpos
00014A78 <file.include.bb2@1119>       chunk(file_chunkcounter)\blength = blength
00014A86 <file.include.bb2@1120>       file_chunkcounter+1
00014A8C <file.include.bb2@1123> Else
00014ABA <file.include.bb2@1124>   error{"\\__THIS_FUNCTION: Invalid chunk counter!"}
00014AC4 <file.include.bb2@1126> Function Return succ
00014ACA <file.include.bb2@1127> End Function
00014AE8 <file.include.bb2@1148> Function.w file_CloseChunk {fid.l,head.l}
00014AEE <file.include.bb2@1150> succ.w = False
00014B00 <file.include.bb2@1151> If file_chunkcounter>0
00014B0E <file.include.bb2@1152>   file_chunkcounter-1
00014B2C <file.include.bb2@1153>   If chunk(file_chunkcounter)\head=head
00014B62 <file.include.bb2@1154>     chunklength.l = filedat(fid)\seekpos - chunk(file_chunkcounter)\offset
00014B74 <file.include.bb2@1155>     If chunklength>=0
00014BBE <file.include.bb2@1156>       If chunk(file_chunkcounter)\blength><chunklength AND chunk(file_chunkcounter)\blength>0
00014C9C <file.include.bb2@1157>         error{"\\__THIS_FUNCTION: Chunk length was told wrong ("+Mkl$(head)+": "+Str$(chunk(file_chunkcounter)\blength)+"><"+Str$(chunklength)+") !"}
00014CBA <file.include.bb2@1158>         chunk(file_chunkcounter)\blength = 0
00014CE0 <file.include.bb2@1160>       If chunk(file_chunkcounter)\blength<=0
00014CFC <file.include.bb2@1161>         lastpos.l = filedat(fid)\seekpos
00014D28 <file.include.bb2@1162>         succ.w = file_Seek {fid,chunk(file_chunkcounter)\offset-4}
00014D32 <file.include.bb2@1163>         If succ
00014D60 <file.include.bb2@1164>           If filedat(fid)\intel Then chunklength = file_LFlip{chunklength}
00014D7A <file.include.bb2@1165>           succ = file_WriteMem {fid,&chunklength,4}
00014D96 <file.include.bb2@1166>           If succ Then succ = file_Seek {fid,lastpos}
00014D9C <file.include.bb2@1167>         Else
00014DCA <file.include.bb2@1168>           error{"\\__THIS_FUNCTION: unable to seek within file!"}
00014DD0 <file.include.bb2@1170>       Else
00014DD6 <file.include.bb2@1171>         succ.w = True
00014DDC <file.include.bb2@1173>     Else
00014E70 <file.include.bb2@1174>       error{"\\__THIS_FUNCTION: Length of chunk is <0! ("+Str$(chunklength)+") ("+Mkl$(head)+")"}
00014E76 <file.include.bb2@1176>   Else
00014F0C <file.include.bb2@1177>     error{"\\__THIS_FUNCTION: Closed wrong chunk! ("+Mkl$(chunk(file_chunkcounter)\head)+" >< "+Mkl$(head)+")"}
00014F12 <file.include.bb2@1179> Else
00014F40 <file.include.bb2@1180>   error{"\\__THIS_FUNCTION: There is no chunk To close!"}
00014F4A <file.include.bb2@1182> Function Return succ
00014F50 <file.include.bb2@1183> End Function
00014F6A <file.include.bb2@1398> Function.b FAST file_ReadByte {fid.l}
00014F8A <file.include.bb2@1400> If \cache_ptr
0001503E <file.include.bb2@1401>   If \seekpos<=\cache_blength Then \seekpos+1 : Function Return Peek.b(\cache_ptr+\seekpos-1)
00015044 <file.include.bb2@1402>   dummy.b=0
0001504A <file.include.bb2@1403> Else
00015074 <file.include.bb2@1404>   If file_ReadMem{fid,&dummy.b,1}=0 Then dummy=0
00015080 <file.include.bb2@1406> Function Return dummy
00015086 <file.include.bb2@1407> End Function
000150A0 <file.include.bb2@1423> Function.l FAST file_ReadLong {fid.l}
000150C0 <file.include.bb2@1425> If \cache_ptr
00015172 <file.include.bb2@1426>   If \seekpos<=\cache_blength Then \seekpos+4 : Function Return Peek.l(\cache_ptr+\seekpos-4)
0001517A <file.include.bb2@1427>   dummy.l=0
00015180 <file.include.bb2@1428> Else
000151AC <file.include.bb2@1429>   If file_ReadMem{fid,&dummy.l,4}=0 Then dummy=0
000151B6 <file.include.bb2@1431> Function Return dummy
000151BC <file.include.bb2@1432> End Function
000151D6 <file.include.bb2@1593> Function.s file_ReadLine {fid.l}
000151DE <file.include.bb2@1594> dummy.l = 0
000151E6 <file.include.bb2@1595> dummy2.l = 0
000151FC <file.include.bb2@1596> MaxLen a.s=512
00015214 <file.include.bb2@1597> While dummy>=0
00015226 <file.include.bb2@1598>   If file_EOF{fid}
00015232 <file.include.bb2@1599>     dummy=-1
00015238 <file.include.bb2@1600>   Else
00015240 <file.include.bb2@1601>     dummy=0
00015278 <file.include.bb2@1602>     If file_ReadMem {fid,&dummy+3,1} = False Then dummy=-1
0001528A <file.include.bb2@1603>     If dummy=13
000152AE <file.include.bb2@1604>       If file_ReadMem {fid,&dummy2+3,1}
000152C0 <file.include.bb2@1605>         If dummy2=10
000152CC <file.include.bb2@1606>           dummy=-1
000152D2 <file.include.bb2@1607>         Else
000152E2 <file.include.bb2@1608>           file_SeekRel{fid,1}
00015300 <file.include.bb2@1613>     If dummy=10 Then dummy=-1
00015312 <file.include.bb2@1616>   If dummy>=0
0001535E <file.include.bb2@1617>     a.s + Chr$(dummy)
00015364 <file.include.bb2@1619> Wend
0001538E <file.include.bb2@1621> Function Return a.s
000153A6 <file.include.bb2@1622> End Function
000153D4 <file.include.bb2@1682> Function.l file_WriteLine {fid.l,textline.s}
000153E8 <file.include.bb2@1683> slen.l = FLen(textline)
000153FE <file.include.bb2@1684> Poke.b &textline+slen,10 ; dont try this at home, kids!
0001541E <file.include.bb2@1685> succ.l = file_WriteMem {fid,&textline,slen+1}
00015434 <file.include.bb2@1686> Poke.b &textline+slen,0
0001543E <file.include.bb2@1687> Function Return succ
00015458 <file.include.bb2@1688> End Function
00015472 <file.include.bb2@1706> Function.s file_ReadBB2Line {fid.l}
0001547A <file.include.bb2@1707> dummy.l = 0
00015482 <file.include.bb2@1708> dummy2.l = 0
000154AA <file.include.bb2@1709> a.s = ""
000154C2 <file.include.bb2@1710> While dummy>=0
000154D4 <file.include.bb2@1711>   If file_EOF{fid}
000154E0 <file.include.bb2@1712>     dummy=-1
000154E6 <file.include.bb2@1713>   Else
000154EE <file.include.bb2@1714>     dummy=0
00015526 <file.include.bb2@1715>     If file_ReadMem {fid,&dummy+3,1} = False Then dummy=-1
00015544 <file.include.bb2@1716>     If dummy=0 Then dummy=-1
00015556 <file.include.bb2@1719>   If dummy>=0
000155A2 <file.include.bb2@1720>     a.s + Chr$(dummy)
000155A8 <file.include.bb2@1722> Wend
000155D2 <file.include.bb2@1723> Function Return a.s
000155EA <file.include.bb2@1724> End Function
0001560C <file.include.bb2@1763> Function.l file_WriteTag{fid.l,tag.l,value.l}
00015624 <file.include.bb2@1765> fileengine\tagitem\ti_Tag = tag,value
00015646 <file.include.bb2@1766> Function Return file_WriteMem{fid,fileengine\tagitem,8}
0001564C <file.include.bb2@1767> End Function
0001567E <file.include.bb2@1787> Function.l file_WriteTagString{fid.l,tag.l,string.s}
00015692 <file.include.bb2@1789> slen.l = FLen(string.s)
000156AA <file.include.bb2@1790> tag.l = (tag & $FFFFFF00) | @"$"
000156C2 <file.include.bb2@1791> fileengine\tagitem\ti_Tag = tag,slen
000156E2 <file.include.bb2@1792> succ.l = file_WriteMem {fid,fileengine\tagitem,8}
00015712 <file.include.bb2@1793> succ & file_WriteMem {fid,&string.s,slen+1}
00015742 <file.include.bb2@1794> aligns.l = 4 - ((slen+1) MOD 4)
00015754 <file.include.bb2@1795> If aligns<4
0001575C <file.include.bb2@1796>   dummy.l =0
00015786 <file.include.bb2@1797>   succ & file_WriteMem {fid,&dummy,aligns}
00015790 <file.include.bb2@1799> Function Return succ
000157AA <file.include.bb2@1800> End Function
000157C4 <file.include.bb2@1817> Function.l file_ReadTag{fid.l}
000157E2 <file.include.bb2@1819> succ.l = file_ReadMem{fid,fileengine\tagitem,8}
00015802 <file.include.bb2@1820> If (fileengine\tagitem\ti_Tag & $FF) = @"$"
0001584C <file.include.bb2@1821>   fileengine\string = LSet$(" ",fileengine\tagitem\ti_Data)
00015866 <file.include.bb2@1822>   file_ReadMem{fid,&fileengine\string,fileengine\tagitem\ti_Data}
00015878 <file.include.bb2@1823>   dummy.l = file_ReadByte{fid} ; read the 0 byte
000158AE <file.include.bb2@1824>   aligns.l = 4 - ((fileengine\tagitem\ti_Data+1) MOD 4)
000158C0 <file.include.bb2@1825>   If aligns<4
000158C8 <file.include.bb2@1826>     dummy.l =0
000158F0 <file.include.bb2@1827>     succ & file_ReadMem {fid,&dummy,aligns}
000158F6 <file.include.bb2@1829> Else
0001591E <file.include.bb2@1830>   fileengine\string = ""
0001592E <file.include.bb2@1832> Function Return fileengine\tagitem\ti_Tag
00015942 <file.include.bb2@1833> End Function
00015958 <file.include.bb2@1846> Function.l file_GetTagValue{}
00015968 <file.include.bb2@1848> Function Return fileengine\tagitem\ti_Data
0001596C <file.include.bb2@1849> End Function
00015982 <file.include.bb2@1870> Function.s file_GetTagString{}
000159AC <file.include.bb2@1872> Function Return fileengine\string
000159B4 <file.include.bb2@1873> End Function
000159B4 <PED.ab2@82> CEND
000159B4 <clipboard2.include.ab3@1> XINCLUDE "clipboard2.include.bb2"
000159CE <clipboard2.include.ab3@88> Statement clipboard_Close{*cH.clipboardHandle}
000159E8 <clipboard2.include.ab3@90>   If *cH=Null Then Statement Return
000159F6 <clipboard2.include.ab3@92>   If *cH\iffH
00015A08 <clipboard2.include.ab3@93>     CloseIFF_ *cH\iffH
00015A36 <clipboard2.include.ab3@94>     If *cH\iffH\iff_Stream Then CloseClipboard_ *cH\iffH\iff_Stream : *cH\iffH\iff_Stream = Null
00015A48 <clipboard2.include.ab3@95>     FreeIFF_ *cH\iffH
00015A50 <clipboard2.include.ab3@96>     *cH\iffH = Null
00015A54 <clipboard2.include.ab3@99> End Statement
00015A6E <clipboard2.include.ab3@102> Statement clipboard_Free{*cH.clipboardHandle}
00015A88 <clipboard2.include.ab3@104>   If *cH=Null Then Statement Return
00015A92 <clipboard2.include.ab3@106>   clipboard_Close{*cH}
00015AA2 <clipboard2.include.ab3@107>   FreeVec_ *cH
00015AA8 <clipboard2.include.ab3@108>   *cH = Null
00015AAC <clipboard2.include.ab3@110> End Statement
00015AC6 <clipboard2.include.ab3@113> Function.l clipboard_Open{@unit.l}
00015AE6 <clipboard2.include.ab3@115>   *cH.clipboardHandle = AllocVec_(SizeOf.clipboardHandle,#MEMF_ANY)
00015B02 <clipboard2.include.ab3@116>   If *cH=Null Then Function Return Null
00015B1C <clipboard2.include.ab3@118>   If unit<0 Then unit = 0
00015B2A <clipboard2.include.ab3@120>   *cH\done = 0
00015B38 <clipboard2.include.ab3@121>   *cH\iffH=AllocIFF_()
00015B46 <clipboard2.include.ab3@122>   If *cH\iffH
00015B5E <clipboard2.include.ab3@123>     *cH\iffH\iff_Stream = OpenClipboard_ (unit)
00015B6E <clipboard2.include.ab3@124>     If *cH\iffH\iff_Stream
00015B80 <clipboard2.include.ab3@125>       InitIFFasClip_ *cH\iffH
00015BB0 <clipboard2.include.ab3@126>       If (OpenIFF_ (*cH\iffH, #IFFF_READ)=0)
00015BEA <clipboard2.include.ab3@127>         If (StopChunk_ (*cH\iffH, #ID_FTXT, #ID_CHRS)=0)
00015BF4 <clipboard2.include.ab3@128>           *cH\eoc  = True
00015BFE <clipboard2.include.ab3@129>           *cH\eod  = False
00015C0C <clipboard2.include.ab3@130>           *cH\todo = 0
00015C1A <clipboard2.include.ab3@131>           *cH\done = 0
00015C24 <clipboard2.include.ab3@132>           Function Return *cH
00015C2E <clipboard2.include.ab3@137>   clipboard_Free{*cH}
00015C34 <clipboard2.include.ab3@138>   *cH = Null
00015C3C <clipboard2.include.ab3@140>   Function Return Null
00015C42 <clipboard2.include.ab3@142> End Function
00015C5C <clipboard2.include.ab3@145> Function.w clipboard_HasMoreLines{*cH.clipboardHandle}
00015C76 <clipboard2.include.ab3@146>   If *cH\eod Then Function Return False
00015C88 <clipboard2.include.ab3@149>     If *cH\eoc
00015CA8 <clipboard2.include.ab3@150>       err.l = ParseIFF_ (*cH\iffH,#IFFPARSE_SCAN)
00015CAE <clipboard2.include.ab3@151>       Select err
00015CC6 <clipboard2.include.ab3@152>         Case #IFFERR_EOC : *cH\eoc = True
00015CE4 <clipboard2.include.ab3@153>         Case #IFFERR_EOF : *cH\eod = True
00015CF8 <clipboard2.include.ab3@154>         Case 0           : ; ok
00015D12 <clipboard2.include.ab3@155>           *cH\cn = CurrentChunk_(*cH\iffH)
00015D2C <clipboard2.include.ab3@157>           If (*cH\cn><Null)
00015D6A <clipboard2.include.ab3@158>             If ((*cH\cn\cn_Type = #ID_FTXT) AND (*cH\cn\cn_ID = #ID_CHRS))
00015DA8 <clipboard2.include.ab3@159>               *cH\todo = ReadChunkBytes_ (*cH\iffH,&*cH\temp[0],#CLIPBOARD_BUFFERSIZE-2)
00015DFE <clipboard2.include.ab3@160>               If *cH\todo = 0 OR *cH\temp[0]=0 Then *cH\eoc = True : Else *cH\eoc=False
00015E0E <clipboard2.include.ab3@164>         Default : *cH\eod = True
00015E10 <clipboard2.include.ab3@165>       End Select
00015E42 <clipboard2.include.ab3@168>   Until *cH\eoc=False OR *cH\eod=True
00015E54 <clipboard2.include.ab3@170>   If *cH\eod
00015E5E <clipboard2.include.ab3@171>     clipboard_Close{*cH}
00015E66 <clipboard2.include.ab3@172>     Function Return False
00015E6E <clipboard2.include.ab3@175>   Function Return True
00015E74 <clipboard2.include.ab3@176> End Function
00015E8E <clipboard2.include.ab3@179> Function.s clipboard_GetNextLine{*cH.clipboardHandle}
00015EBE <clipboard2.include.ab3@181>   If *cH\eod Then Function Return ""
00015EE6 <clipboard2.include.ab3@183>   text.s = ""
00015EEE <clipboard2.include.ab3@184>   pos.l  = 0
00015EF4 <clipboard2.include.ab3@185>   eol.w  = False
00015EFA <clipboard2.include.ab3@186>   rc.w   = False
00015F34 <clipboard2.include.ab3@190>   If clipboard_HasMoreLines{*cH} = False Then Function Return ""
00015F4A <clipboard2.include.ab3@192>   While eol=False
00015F76 <clipboard2.include.ab3@194>     While pos<*cH\todo AND eol=False
00015F8E <clipboard2.include.ab3@195>       Select *cH\temp[pos]
00015FAA <clipboard2.include.ab3@196>         Case $0A : eol = True : rc = True
00015FD0 <clipboard2.include.ab3@197>         Case 0   : eol = True : *cH\eoc=True
00015FE4 <clipboard2.include.ab3@198>         Default  : pos+1
00015FE6 <clipboard2.include.ab3@199>       End Select
00015FEC <clipboard2.include.ab3@200>     Wend
00016000 <clipboard2.include.ab3@202>     *cH\temp[pos] = 0
00016062 <clipboard2.include.ab3@203>     text.s + Peek.s(&*cH\temp[0])
000160B2 <clipboard2.include.ab3@204>     If rc Then text+"\\n"
000160CC <clipboard2.include.ab3@205>     *cH\temp[0]=0
00016148 <clipboard2.include.ab3@207>     For n.l=pos+1 To *cH\todo-1 : *cH\temp[n-pos-1] = *cH\temp[n] : Next
00016166 <clipboard2.include.ab3@208>     *cH\todo = *cH\todo-pos-1
0001616E <clipboard2.include.ab3@209>     pos = 0
00016186 <clipboard2.include.ab3@211>     If *cH\todo<=0
000161C4 <clipboard2.include.ab3@212>       *cH\todo = ReadChunkBytes_ (*cH\iffH,&*cH\temp[0],#CLIPBOARD_BUFFERSIZE-2)
000161F6 <clipboard2.include.ab3@214>     If *cH\temp[0]=0 Then *cH\eoc = True : eol=True ;: NPrint "no more data...1"
000161FC <clipboard2.include.ab3@216>   Wend
00016226 <clipboard2.include.ab3@218>   Function Return text
0001623E <clipboard2.include.ab3@220> End Function
0001623E <PED.ab2@83> 
0001623E <translation.include.bb2@1> XINCLUDE "translation.include.bb2"
0001623E <phrasebook.include.bb2@1> XINCLUDE "phrasebook.include.bb2"  ; we will use functions from the dos.include
0001623E <prefixtree.include.bb2@1> XINCLUDE "prefixtree.include.bb2"
0001623E <dynamicarray.include.bb2@1> XINCLUDE "dynamicarray.include.bb2"
00016266 <dynamicarray.include.bb2@42> Dim List *da_TrackList.dynArray(0)
00016280 <dynamicarray.include.bb2@55> Statement da_Clear{*da.dynArray}
0001628A <dynamicarray.include.bb2@56> If *da
0001629C <dynamicarray.include.bb2@57>   If *da\array
000162C0 <dynamicarray.include.bb2@58>     FreeVec_ *da\array : *da\array = 0
000162CE <dynamicarray.include.bb2@60>   *da\allocN = 0
000162DA <dynamicarray.include.bb2@61>   *da\useN   = 0
000162DE <dynamicarray.include.bb2@63> End Statement
000162F8 <dynamicarray.include.bb2@76> Statement da_Unuse{*da.dynArray}
00016302 <dynamicarray.include.bb2@77> If *da
0001630E <dynamicarray.include.bb2@78>   *da\useN   = 0
00016312 <dynamicarray.include.bb2@80> End Statement
00016330 <dynamicarray.include.bb2@99> Function.l da_Create{itemSize.l,@incItems.l}
0001634A <dynamicarray.include.bb2@101> If incItems<1 incItems = #DA_DEFAULTINCITEMS
0001636A <dynamicarray.include.bb2@102> *da.dynArray = AllocVec_(SizeOf.dynArray,#MEMF_ANY)
00016374 <dynamicarray.include.bb2@103> If *da
00016382 <dynamicarray.include.bb2@104>   *da\allocN   = 0
0001638E <dynamicarray.include.bb2@105>   *da\useN     = 0
0001639C <dynamicarray.include.bb2@106>   *da\array    = 0
000163A8 <dynamicarray.include.bb2@107>   *da\itemSize = itemSize
000163B4 <dynamicarray.include.bb2@108>   *da\incN     = incItems
000163C6 <dynamicarray.include.bb2@109>   If AddItem(*da_TrackList())
000163D6 <dynamicarray.include.bb2@110>     *da_TrackList() = *da
000163E0 <dynamicarray.include.bb2@113> Function Return *da
000163E6 <dynamicarray.include.bb2@114> End Function
00016404 <dynamicarray.include.bb2@156> Function.l da_Expand{*da.dynArray,itemMax.l}
0001640E <dynamicarray.include.bb2@157> If *da
00016430 <dynamicarray.include.bb2@158>   If *da\allocN>itemMax Then Function Return -1
0001643E <dynamicarray.include.bb2@159>   oldAllocN.l = *da\allocN
00016466 <dynamicarray.include.bb2@160>   *da\allocN = Max(itemMax,*da\allocN + *da\incN)
00016498 <dynamicarray.include.bb2@161>   tmp.l = AllocVec_ (*da\allocN * *da\itemSize,#MEMF_CLEAR)
000164A2 <dynamicarray.include.bb2@162>   If tmp
000164B4 <dynamicarray.include.bb2@163>     If *da\array
000164E8 <dynamicarray.include.bb2@164>       CopyMem_ *da\array,tmp,oldAllocN * *da\itemSize
000164FE <dynamicarray.include.bb2@165>       FreeVec_ *da\array
0001650A <dynamicarray.include.bb2@167>     *da\array = tmp
00016518 <dynamicarray.include.bb2@168>     Function Return -1
00016524 <dynamicarray.include.bb2@171> Function Return 0
0001652A <dynamicarray.include.bb2@172> End Function
00016548 <dynamicarray.include.bb2@231> Function.l FAST da_GetItem{*da.dynArray,itemX.l}
0001655E <dynamicarray.include.bb2@233> If da_Expand{*da,itemX}
00016580 <dynamicarray.include.bb2@234>   If itemX>=*da\useN Then *da\useN = itemX+1
000165A4 <dynamicarray.include.bb2@235>   Function Return *da\array + itemX * *da\itemSize
000165B0 <dynamicarray.include.bb2@237> Function Return 0
000165B6 <dynamicarray.include.bb2@238> End Function
000165D8 <dynamicarray.include.bb2@281> Function.l FAST da_SetItem{*da.dynArray,itemX.l,@itemPtr.l}
000165E2 <dynamicarray.include.bb2@282> If *da
00016604 <dynamicarray.include.bb2@283>   If *da\allocN<=itemX Then da_Expand{*da,itemX}
00016616 <dynamicarray.include.bb2@284>   If *da\array
00016638 <dynamicarray.include.bb2@285>     If itemX>=*da\useN Then *da\useN = itemX+1
0001665A <dynamicarray.include.bb2@286>     newitemPtr.l = *da\array + itemX * *da\itemSize
00016682 <dynamicarray.include.bb2@287>     If itemPtr><-1 AND itemPtr><0
000166A8 <dynamicarray.include.bb2@288>       CopyMem_ itemPtr,newitemPtr,*da\itemSize
000166B2 <dynamicarray.include.bb2@290>     Function Return newitemPtr
000166BE <dynamicarray.include.bb2@293> Function Return 0
000166C4 <dynamicarray.include.bb2@294> End Function
000166E6 <dynamicarray.include.bb2@335> Function.l FAST da_InsertItem{*da.dynArray,itemX.l,@itemPtr.l}
000166F0 <dynamicarray.include.bb2@336> If *da
00016716 <dynamicarray.include.bb2@337>   If itemX>=0 AND itemX<*da\useN
0001672E <dynamicarray.include.bb2@338>     If da_Expand{*da.dynArray,*da\useN}
0001676C <dynamicarray.include.bb2@339>       For itemY.l = *da\useN-1 To itemX Step -1
000167CC <dynamicarray.include.bb2@340>         CopyMem_ *da\array + (itemY) * *da\itemSize, *da\array + (itemY+1) * *da\itemSize, *da\itemSize
000167DC <dynamicarray.include.bb2@341>       Next
000167EE <dynamicarray.include.bb2@342>       *da\useN+1
00016806 <dynamicarray.include.bb2@345>   Function Return da_SetItem{*da,itemX,itemPtr}
00016812 <dynamicarray.include.bb2@347> Function Return 0
00016818 <dynamicarray.include.bb2@348> End Function
00016832 <dynamicarray.include.bb2@425> Statement da_Free{*da.dynArray}
0001683C <dynamicarray.include.bb2@427> If *da
00016846 <dynamicarray.include.bb2@428>   da_Clear{*da}
00016856 <dynamicarray.include.bb2@429>   FreeVec_ *da
00016860 <dynamicarray.include.bb2@430>   ResetList *da_TrackList()
00016872 <dynamicarray.include.bb2@431>   While NextItemFast(*da_TrackList())
00016888 <dynamicarray.include.bb2@432>     If *da_TrackList()=*da
00016892 <dynamicarray.include.bb2@433>       KillItem *da_TrackList()
00016898 <dynamicarray.include.bb2@435>   Wend
0001689C <dynamicarray.include.bb2@437> End Statement
000168B2 <dynamicarray.include.bb2@531> Statement da_AutoExit{}
000168B8 <dynamicarray.include.bb2@533> done.l = False
000168C2 <dynamicarray.include.bb2@535>   ResetList *da_TrackList()
000168F8 <dynamicarray.include.bb2@536>   If NextItemFast(*da_TrackList()) Then da_Free{*da_TrackList()} : Else done=-1
00016902 <dynamicarray.include.bb2@537> Until done
00016906 <dynamicarray.include.bb2@538> End Statement
00016934 <dynamicarray.include.bb2@539> !autoexit{da_AutoExit}
00016934 <prefixtree.include.bb2@35> 
0001694E <prefixtree.include.bb2@100> Statement pft_Free{*pft.prefixtree}
00016958 <prefixtree.include.bb2@101> If *pft
00016980 <prefixtree.include.bb2@102>   If \dbase Then FreeVec_ \dbase
000169A2 <prefixtree.include.bb2@103>   If \curPath Then da_Free{\curPath}
000169BE <prefixtree.include.bb2@104>   \dbase = #NULL : \dbaseAlloc = 0
000169CE <prefixtree.include.bb2@105>   FreeVec_ *pft
000169D2 <prefixtree.include.bb2@107> End Statement
000169EC <prefixtree.include.bb2@123> Function.l pft_Create{@blocksize.l}
00016A0C <prefixtree.include.bb2@124> *pft.prefixtree = AllocVec_ (SizeOf.prefixtree,#MEMF_CLEAR)
00016A16 <prefixtree.include.bb2@125> If *pft
00016A30 <prefixtree.include.bb2@126>   If blocksize< 1 Then blocksize=1024
00016A3E <prefixtree.include.bb2@127>   \dbaseAlloc = 0
00016A4C <prefixtree.include.bb2@128>   \dbaseUsed  = 0
00016A5A <prefixtree.include.bb2@129>   \dbaseAdd   = 0
00016A68 <prefixtree.include.bb2@130>   \dbaseRoot  = 0
00016A74 <prefixtree.include.bb2@131>   \dbaseBlock = blocksize
00016A82 <prefixtree.include.bb2@132>   \dbase      = #NULL
00016A90 <prefixtree.include.bb2@133>   \dbaseRoot  = 0
00016A9E <prefixtree.include.bb2@134>   \dbaseAdd   = 0
00016AAC <prefixtree.include.bb2@135>   \dbaseUsed  = 0
00016AC6 <prefixtree.include.bb2@136>   \curPath    = da_Create{SizeOf.prefixpointer,16}
00016AD4 <prefixtree.include.bb2@137>   \curPos     = -1
00016AE4 <prefixtree.include.bb2@138>   \curDepth   = -1
00016AF4 <prefixtree.include.bb2@139>   \foundPos   = -1
00016B04 <prefixtree.include.bb2@140>   \foundDepth = -1
00016B12 <prefixtree.include.bb2@141>   \itemN      = 0
00016B1C <prefixtree.include.bb2@143> Function Return *pft
00016B22 <prefixtree.include.bb2@144> End Function
00016B40 <prefixtree.include.bb2@162> Function.l pft_Expand{*pft.prefixtree,minFree.l}
00016B46 <prefixtree.include.bb2@163> succ.l = False
00016B50 <prefixtree.include.bb2@164> If *pft
00016B70 <prefixtree.include.bb2@165>   If (\dbaseAlloc - \dbaseAdd)<minFree
00016B9E <prefixtree.include.bb2@166>     newsize.l  = \dbaseAlloc + Max(minFree,\dbaseBlock)
00016BBC <prefixtree.include.bb2@167>     newdbase.l = AllocVec_(newsize ,#MEMF_CLEAR)
00016BC6 <prefixtree.include.bb2@168>     If newdbase
00016BD8 <prefixtree.include.bb2@169>       If \dbase
00016C04 <prefixtree.include.bb2@170>         CopyMem_ \dbase,newdbase,\dbaseAlloc
00016C1A <prefixtree.include.bb2@171>         FreeVec_ \dbase
00016C26 <prefixtree.include.bb2@173>       \dbase      = newdbase
00016C32 <prefixtree.include.bb2@174>       \dbaseAlloc = newsize
00016C38 <prefixtree.include.bb2@175>       succ.l = True
00016C3E <prefixtree.include.bb2@176>     Else
00016C44 <prefixtree.include.bb2@177>       succ = False
00016C4A <prefixtree.include.bb2@179>   Else
00016C50 <prefixtree.include.bb2@180>     succ = True
00016C5A <prefixtree.include.bb2@183> Function Return succ
00016C60 <prefixtree.include.bb2@184> End Function
00016C92 <prefixtree.include.bb2@204> Function.l pft_Match{*pft.prefixtree,key.s,*pftmatch.pftmatch}
00016CAC <prefixtree.include.bb2@205> If *pft   = #NULL Then Function Return False
00016CC4 <prefixtree.include.bb2@206> If \dbase = #NULL
00016CD8 <prefixtree.include.bb2@207>   pft_Expand{*pft,\dbaseBlock}
00016D28 <prefixtree.include.bb2@208>   If \dbase Then Poke.w \dbase,0 : \dbaseRoot = 0 : \dbaseAdd = 2 : \dbaseUsed = 2
00016D48 <prefixtree.include.bb2@210> If \dbase = #NULL Then Function Return False
00016D5C <prefixtree.include.bb2@211> klen.l = FLen(key)
00016D6A <prefixtree.include.bb2@212> node.l = \dbaseRoot   ;start at the root
00016D76 <prefixtree.include.bb2@213> preNode.l = -1
00016D7E <prefixtree.include.bb2@214> preOff.l  = 0
00016D86 <prefixtree.include.bb2@215> nodeOff.l = 0
00016D8E <prefixtree.include.bb2@216> lastMatchedKeyPos.l = 0
00016D96 <prefixtree.include.bb2@217> kpos.l = 0
00016D9C <prefixtree.include.bb2@218> break.l = False
00016DAA <prefixtree.include.bb2@219> *pftmatch\state = #PFT_ADD
00016DCC <prefixtree.include.bb2@221> While kpos<klen AND break=False
00016DF8 <prefixtree.include.bb2@222>   tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF
00016E0A <prefixtree.include.bb2@224>   If tlen>0
00016E10 <prefixtree.include.bb2@225>     succ.l=True
00016E38 <prefixtree.include.bb2@227>     For n.l=1 To tlen
00016E5C <prefixtree.include.bb2@228>       kc.b = Peek.b(&key+kpos+n-1)
00016E84 <prefixtree.include.bb2@229>       tc.b = Peek.b(\dbase+ node+nodeOff+n)
00016EB8 <prefixtree.include.bb2@230>       If kc><tc Then succ=False : n=tlen : Else *pftmatch\state = #PFT_SPLIT
00016EC8 <prefixtree.include.bb2@231>     Next
00016ED2 <prefixtree.include.bb2@232>     If succ ; yes!
00016EE0 <prefixtree.include.bb2@233>       kpos + tlen
00016EF4 <prefixtree.include.bb2@234>       preOff.l = nodeOff+tlen+1
00016EFA <prefixtree.include.bb2@235>       preNode.l = node
00016F1A <prefixtree.include.bb2@236>       jump.l = Peek.l(\dbase+ preNode+preOff)
00016F20 <prefixtree.include.bb2@237>       node = jump
00016F28 <prefixtree.include.bb2@239>       nodeOff = 0
00016F62 <prefixtree.include.bb2@241>         tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF : nodeOff+1
00016F88 <prefixtree.include.bb2@242>         If tlen>0 Then nodeOff + (tlen + 4)
00016FA0 <prefixtree.include.bb2@243>       Until tlen = 0
00016FD4 <prefixtree.include.bb2@244>       If Peek.b(\dbase+ node+nodeOff)><0 Then lastMatchedKeyPos = kpos
00016FDC <prefixtree.include.bb2@245>       nodeOff = 0
00016FEA <prefixtree.include.bb2@247>       *pftmatch\state = #PFT_ADD
00016FF0 <prefixtree.include.bb2@249>     Else   ; ehm, no, check the next one
00017008 <prefixtree.include.bb2@250>       If *pftmatch\state = #PFT_SPLIT
0001700E <prefixtree.include.bb2@251>         break = True
00017014 <prefixtree.include.bb2@252>       Else
0001702E <prefixtree.include.bb2@253>         nodeOff + 1 + tlen + 4
00017034 <prefixtree.include.bb2@256>   Else
0001703A <prefixtree.include.bb2@258>     break = True
00017040 <prefixtree.include.bb2@260> Wend
0001704E <prefixtree.include.bb2@261> If kpos=klen
0001705C <prefixtree.include.bb2@262>   *pftmatch\state = #PFT_FOUND
00017096 <prefixtree.include.bb2@264>     tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF : nodeOff+1
000170BC <prefixtree.include.bb2@265>     If tlen>0 Then nodeOff + (tlen + 4)
000170D4 <prefixtree.include.bb2@266>   Until tlen = 0
000170E0 <prefixtree.include.bb2@269> *pftmatch\preNode = preNode
000170EC <prefixtree.include.bb2@270> *pftmatch\preOff  = preOff
000170F8 <prefixtree.include.bb2@271> *pftmatch\kpos    = kpos
00017104 <prefixtree.include.bb2@272> *pftmatch\node    = node
00017110 <prefixtree.include.bb2@273> *pftmatch\nodeOff = nodeOff
0001711A <prefixtree.include.bb2@274> *pftmatch\lastMatchedKeyPos = lastMatchedKeyPos
00017122 <prefixtree.include.bb2@276> Function Return True
0001713C <prefixtree.include.bb2@277> End Function
0001717A <prefixtree.include.bb2@324> Function.l pft_AddItem{*pft.prefixtree,key.s,string.s}
00017180 <prefixtree.include.bb2@325> succ.l = False
000171C0 <prefixtree.include.bb2@326> If pft_Match{*pft,key,pftmatch.pftmatch}
00017216 <prefixtree.include.bb2@327>   prefix.s  = Left$(key,pftmatch\kpos)
00017288 <prefixtree.include.bb2@328>   postfix.s = Right$(key,FLen(key)-pftmatch\kpos)
00017294 <prefixtree.include.bb2@330>   Select pftmatch\state
000172A2 <prefixtree.include.bb2@331>     Case #PFT_FOUND
000172E8 <prefixtree.include.bb2@332>       oldstring.s = Peek.s(\dbase+pftmatch\node+pftmatch\nodeOff)
00017332 <prefixtree.include.bb2@333>       \dbaseUsed + FLen(string) - FLen(oldstring)
0001736A <prefixtree.include.bb2@334>       If FLen(oldstring)>=FLen(string)
000173BE <prefixtree.include.bb2@335>         Poke.s \dbase+ pftmatch\node+pftmatch\nodeOff,string
000173C4 <prefixtree.include.bb2@336>         succ.l = True
000173CA <prefixtree.include.bb2@337>       Else
000173D8 <prefixtree.include.bb2@339>         node.l = pftmatch\node
000173E0 <prefixtree.include.bb2@340>         nodeOff.l = 0
0001741A <prefixtree.include.bb2@342>           tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF : nodeOff+1
00017440 <prefixtree.include.bb2@343>           If tlen>0 Then nodeOff + (tlen + 4)
00017458 <prefixtree.include.bb2@344>         Until tlen = 0
0001748E <prefixtree.include.bb2@345>         expNodeSize.l = nodeOff-1 + 1 + FLen(string) + 1
000174A4 <prefixtree.include.bb2@346>         If pft_Expand{*pft,expNodeSize}
000174B2 <prefixtree.include.bb2@348>           expNode.l = \dbaseAdd
000174CA <prefixtree.include.bb2@349>           \dbaseAdd + expNodeSize
00017502 <prefixtree.include.bb2@350>           CopyMem_ \dbase+ node,\dbase+ expNode,nodeOff
00017528 <prefixtree.include.bb2@351>           Poke.b \dbase+ expNode+nodeOff-1,0
00017570 <prefixtree.include.bb2@352>           Poke.s \dbase+ expNode+nodeOff,string
00017576 <prefixtree.include.bb2@353>           succ.l = True
00017590 <prefixtree.include.bb2@355>           If pftmatch\preNode=-1
0001759C <prefixtree.include.bb2@356>             \dbaseRoot = expNode
000175A2 <prefixtree.include.bb2@357>           Else
000175CE <prefixtree.include.bb2@358>             Poke.l \dbase + pftmatch\preNode + pftmatch\preOff,expNode
000175E2 <prefixtree.include.bb2@363>     Case #PFT_ADD
000175F0 <prefixtree.include.bb2@365>       node.l = pftmatch\node
000175F8 <prefixtree.include.bb2@366>       nodeOff.l = 0
00017632 <prefixtree.include.bb2@368>         tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF : nodeOff+1
00017658 <prefixtree.include.bb2@369>         If tlen>0 Then nodeOff + (tlen + 4)
00017670 <prefixtree.include.bb2@370>       Until tlen = 0
000176AA <prefixtree.include.bb2@371>       nodeString.s = Peek.s(\dbase+ node+nodeOff)
000176D4 <prefixtree.include.bb2@372>       expNodeSize.l = nodeOff + FLen(nodeString) + 1
000176EC <prefixtree.include.bb2@373>       \dbaseUsed - expNodeSize
0001771C <prefixtree.include.bb2@374>       expNodeSize + FLen(postfix.s) + 1 + 4
00017748 <prefixtree.include.bb2@375>       newNodeSize.l = 1 + FLen(string) + 1
00017764 <prefixtree.include.bb2@376>       If pft_Expand{*pft,newNodeSize+expNodeSize}
00017772 <prefixtree.include.bb2@378>         expNode.l = \dbaseAdd
00017780 <prefixtree.include.bb2@379>         newNode.l = expNode + expNodeSize
000177BE <prefixtree.include.bb2@380>         CopyMem_ \dbase+ node,\dbase+ expNode,nodeOff-1
000177FA <prefixtree.include.bb2@381>         Poke.b \dbase+ expNode+nodeOff-1,FLen(postfix)
00017866 <prefixtree.include.bb2@382>         Poke.s \dbase+ expNode+nodeOff,postfix : nodeOff + FLen(postfix)
00017894 <prefixtree.include.bb2@383>         Poke.l \dbase+ expNode+nodeOff,newNode : nodeOff+4
000178C2 <prefixtree.include.bb2@384>         Poke.b \dbase+ expNode+nodeOff,0       : nodeOff+1
0001790A <prefixtree.include.bb2@385>         Poke.s \dbase+ expNode+nodeOff,nodeString
00017924 <prefixtree.include.bb2@388>         Poke.b \dbase+ newNode,0
0001796C <prefixtree.include.bb2@389>         Poke.s \dbase+ newNode+1,string.s
0001798A <prefixtree.include.bb2@390>         \dbaseAdd  + expNodeSize + newNodeSize
000179A8 <prefixtree.include.bb2@391>         \dbaseUsed + expNodeSize + newNodeSize
000179C2 <prefixtree.include.bb2@394>         If pftmatch\preNode=-1
000179CE <prefixtree.include.bb2@395>           \dbaseRoot = expNode
000179D4 <prefixtree.include.bb2@396>         Else
00017A00 <prefixtree.include.bb2@397>           Poke.l \dbase + pftmatch\preNode + pftmatch\preOff,expNode
00017A18 <prefixtree.include.bb2@399>         \itemN + 1
00017A1E <prefixtree.include.bb2@400>         succ.l = True
00017A32 <prefixtree.include.bb2@403>     Case #PFT_SPLIT
00017A40 <prefixtree.include.bb2@405>       node.l    = pftmatch\node
00017A4E <prefixtree.include.bb2@406>       nodeOff.l = pftmatch\nodeOff
00017A5C <prefixtree.include.bb2@407>       kpos.l    = pftmatch\kpos
00017A64 <prefixtree.include.bb2@408>       spos.l    = 0
00017A88 <prefixtree.include.bb2@409>       rulelen.l = Peek.b(\dbase+node+nodeOff)
00017AB0 <prefixtree.include.bb2@410>       rule.s    = ""
00017AD8 <prefixtree.include.bb2@411>       For n.l=1 To rulelen
00017B44 <prefixtree.include.bb2@412>         rule.s + Chr$(Peek.b(\dbase+node+nodeOff+n))
00017B54 <prefixtree.include.bb2@413>       Next
00017B80 <prefixtree.include.bb2@414>       nextNode.l = Peek.l(\dbase+node+nodeOff+rulelen+1)
00017BD6 <prefixtree.include.bb2@416>       While Peek.b(&key+kpos)=Peek.b(\dbase+node+nodeOff+spos+1)
00017BE4 <prefixtree.include.bb2@417>         spos + 1
00017BF2 <prefixtree.include.bb2@418>         kpos + 1
00017BF8 <prefixtree.include.bb2@419>       Wend
00017C40 <prefixtree.include.bb2@421>       If spos=0 Then error {"SPlitpos at pos 0 !"}      : spos = 1
00017C84 <prefixtree.include.bb2@422>       If spos>=rulelen Then error {"SPlitpos at the end!"} : spos = 1
00017CD4 <prefixtree.include.bb2@425>       ruleStem.s = Left$(postfix,spos)
00017D2A <prefixtree.include.bb2@426>       oldRule.s  = Right$(rule,rulelen-spos)
00017D96 <prefixtree.include.bb2@427>       newRule.s  = Right$(postfix,FLen(postfix)-spos)
00017D9E <prefixtree.include.bb2@431>       nodeOff.l = 0
00017DD8 <prefixtree.include.bb2@433>         tlen.l = Peek.b(\dbase+node+nodeOff) & $FF : nodeOff+1
00017DFE <prefixtree.include.bb2@434>         If tlen>0 Then nodeOff + (tlen + 4)
00017E16 <prefixtree.include.bb2@435>       Until tlen = 0
00017E50 <prefixtree.include.bb2@436>       nodeString.s = Peek.s(\dbase+node+nodeOff)
00017E7A <prefixtree.include.bb2@437>       expNodeSize.l = nodeOff + FLen(nodeString) + 1
00017E92 <prefixtree.include.bb2@438>       \dbaseUsed - expNodeSize
00017EB6 <prefixtree.include.bb2@440>       If FLen(newRule)=0
00017F0A <prefixtree.include.bb2@441>         midNodeSize.l = (1+FLen(oldRule)+4) + 1 + (FLen(string)+1)
00017F12 <prefixtree.include.bb2@442>         newNodeSize.l = 0
00017F18 <prefixtree.include.bb2@443>       Else
00017F7A <prefixtree.include.bb2@444>         midNodeSize = (1+FLen(oldRule)+4) + (1+FLen(newRule)+4) + 1 + (1)
00017FA6 <prefixtree.include.bb2@445>         newNodeSize = 1 + (FLen(string)+1)
00017FC2 <prefixtree.include.bb2@448>       If pft_Expand{*pft,newNodeSize+midNodeSize}
00017FD0 <prefixtree.include.bb2@450>         midNode.l = \dbaseAdd
00017FDE <prefixtree.include.bb2@451>         newNode.l = midNode + midNodeSize
00017FEC <prefixtree.include.bb2@453>         node.l    = pftmatch\node
00017FFA <prefixtree.include.bb2@454>         nodeOff = pftmatch\nodeOff
0001803E <prefixtree.include.bb2@455>         Poke.b \dbase+node+nodeOff,FLen(ruleStem) : nodeOff + 1
000180AA <prefixtree.include.bb2@456>         Poke.s \dbase+node+nodeOff,ruleStem       : nodeOff + FLen(ruleStem)
000180D8 <prefixtree.include.bb2@457>         Poke.l \dbase+node+nodeOff,midNode        : nodeOff + 4
000180EC <prefixtree.include.bb2@458>         offset.l = FLen(oldRule)
0001811E <prefixtree.include.bb2@459>         For n.l=nodeOff To expNodeSize-1-offset
00018168 <prefixtree.include.bb2@460>           Poke.b \dbase+node+n,Peek.b(\dbase+node+n+offset)
00018178 <prefixtree.include.bb2@461>         Next
000181AC <prefixtree.include.bb2@462>         For n.l = expNodeSize-offset To expNodeSize-1
000181CE <prefixtree.include.bb2@463>           Poke.b \dbase+node+n,@"#"
000181DE <prefixtree.include.bb2@464>         Next
000181E6 <prefixtree.include.bb2@467>         nodeOff = 0
0001822A <prefixtree.include.bb2@468>         Poke.b \dbase+ midNode+nodeOff,FLen(oldRule) : nodeOff + 1
00018296 <prefixtree.include.bb2@469>         Poke.s \dbase+ midNode+nodeOff,oldRule       : nodeOff + FLen(oldRule)
000182C4 <prefixtree.include.bb2@470>         Poke.l \dbase+ midNode+nodeOff,nextNode      : nodeOff + 4
000182E8 <prefixtree.include.bb2@472>         If FLen(newRule)>0
0001832C <prefixtree.include.bb2@473>           Poke.b \dbase+ midNode+nodeOff,FLen(newRule) : nodeOff + 1
00018398 <prefixtree.include.bb2@474>           Poke.s \dbase+ midNode+nodeOff,newRule       : nodeOff + FLen(newRule)
000183C6 <prefixtree.include.bb2@475>           Poke.l \dbase+ midNode+nodeOff,newNode       : nodeOff + 4
000183F4 <prefixtree.include.bb2@476>           Poke.b \dbase+ midNode+nodeOff,0             : nodeOff + 1
000183FC <prefixtree.include.bb2@477>           nodeOff = 0
0001842A <prefixtree.include.bb2@478>           Poke.b \dbase+ newNode+nodeOff,0             : nodeOff + 1
0001849C <prefixtree.include.bb2@479>           Poke.s \dbase+ newNode+nodeOff,string        : nodeOff + FLen(string) + 1
000184A2 <prefixtree.include.bb2@480>         Else
000184D0 <prefixtree.include.bb2@481>           Poke.b \dbase+ midNode+nodeOff,0             : nodeOff+1
00018542 <prefixtree.include.bb2@482>           Poke.s \dbase+ midNode+nodeOff,string        : nodeOff + FLen(string) + 1
00018560 <prefixtree.include.bb2@485>         \dbaseAdd  + newNodeSize + midNodeSize
00018584 <prefixtree.include.bb2@486>         \dbaseUsed + expNodeSize + newNodeSize + midNodeSize
0001859C <prefixtree.include.bb2@487>         \itemN + 1
000185A2 <prefixtree.include.bb2@488>         succ.l = True
000185A8 <prefixtree.include.bb2@491>     Default
000185AA <prefixtree.include.bb2@493>   End Select
000185B4 <prefixtree.include.bb2@496> Function Return succ
000185E0 <prefixtree.include.bb2@497> End Function
00018602 <prefixtree.include.bb2@515> Function.l pft_Rethink{*pftS.prefixtree,*pftD.prefixtree,node.l}
0001860A <prefixtree.include.bb2@516> NodeOff.l = 0
00018610 <prefixtree.include.bb2@517> oldNode.l    = node
0001861E <prefixtree.include.bb2@518> newNode.l    = *pftD\dbaseAdd
00018658 <prefixtree.include.bb2@520>   tlen.l = Peek.b(*pftS\dbase+oldNode+NodeOff) & $FF : NodeOff+1
0001867E <prefixtree.include.bb2@521>   If tlen>0 Then NodeOff + (tlen + 4)
00018696 <prefixtree.include.bb2@522> Until tlen = 0
000186D0 <prefixtree.include.bb2@523> NodeString.s = Peek.s(*pftS\dbase+oldNode+NodeOff)
000186FA <prefixtree.include.bb2@524> NodeSize.l   = NodeOff + FLen(NodeString) + 1
00018712 <prefixtree.include.bb2@526> *pftD\dbaseAdd  + NodeSize
0001872A <prefixtree.include.bb2@527> *pftD\dbaseUsed + NodeSize
00018762 <prefixtree.include.bb2@528> CopyMem_ *pftS\dbase + oldNode, *pftD\dbase + newNode,NodeSize
0001876A <prefixtree.include.bb2@530> NodeOff.l = 0
000187A4 <prefixtree.include.bb2@532>   tlen.l = Peek.b(*pftS\dbase+oldNode+NodeOff) & $FF : NodeOff+1
000187B6 <prefixtree.include.bb2@534>   If tlen>0
000187DC <prefixtree.include.bb2@535>     oldJump.l = Peek.l(*pftS\dbase+oldNode+NodeOff+tlen)
000187F2 <prefixtree.include.bb2@536>     newJump.l = pft_Rethink{*pftS,*pftD,oldJump}
00018818 <prefixtree.include.bb2@537>     Poke.l *pftD\dbase+newNode+NodeOff+tlen,newJump
0001882C <prefixtree.include.bb2@538>     NodeOff + (tlen + 4)
00018844 <prefixtree.include.bb2@540> Until tlen = 0
00018856 <prefixtree.include.bb2@541> *pftD\itemN = *pftS\itemN
00018860 <prefixtree.include.bb2@542> Function Return newNode
00018874 <prefixtree.include.bb2@543> End Function
0001888E <prefixtree.include.bb2@560> Function.l pft_Optimize{*pft.prefixtree}
000188AC <prefixtree.include.bb2@561> If *pft=#NULL Then Function Return #NULL
000188BE <prefixtree.include.bb2@562> *pftT.prefixtree = pft_Create{}
000188DC <prefixtree.include.bb2@563> If *pftT=#NULL Then Function Return #NULL
000188FE <prefixtree.include.bb2@564> If *pft\dbase=#NULL Then Function Return *pftT
0001891A <prefixtree.include.bb2@565> If pft_Expand{*pftT,*pft\dbaseUsed}
0001893A <prefixtree.include.bb2@566>   *pftT\dbaseRoot = pft_Rethink{*pft,*pftT,*pft\dbaseRoot}
00018944 <prefixtree.include.bb2@567>   Function Return *pftT
0001894A <prefixtree.include.bb2@568> Else
00018954 <prefixtree.include.bb2@569>   pft_Free{*pftT}
00018960 <prefixtree.include.bb2@571> Function Return #NULL
00018966 <prefixtree.include.bb2@572> End Function
00018994 <prefixtree.include.bb2@591> Function.s pft_FindItem{*pft.prefixtree,key.s}
000189BC <prefixtree.include.bb2@592> string.s = ""
000189FC <prefixtree.include.bb2@593> If pft_Match{*pft,key,pftmatch.pftmatch}
00018A14 <prefixtree.include.bb2@594>   If pftmatch\state = #PFT_FOUND
00018A5A <prefixtree.include.bb2@595>     string.s = Peek.s(\dbase+pftmatch\node+pftmatch\nodeOff)
00018A84 <prefixtree.include.bb2@598> Function Return string.s
00018AB2 <prefixtree.include.bb2@599> End Function
00018ACC <prefixtree.include.bb2@613> Statement pft_Reset{*pft.prefixtree}
00018ADA <prefixtree.include.bb2@614> *pft\curPos   = -1
00018AEA <prefixtree.include.bb2@615> *pft\curDepth = -1
00018AFA <prefixtree.include.bb2@616> *pft\foundPos   = -1
00018B0A <prefixtree.include.bb2@617> *pft\foundDepth = -1
00018B1A <prefixtree.include.bb2@618> da_Unuse{*pft\curPath}
00018B1E <prefixtree.include.bb2@619> End Statement
00018B38 <prefixtree.include.bb2@636> Function.l pft_GetNextItem{*pft.prefixtree}
00018B3E <prefixtree.include.bb2@637> succ.l = False
00018B4E <prefixtree.include.bb2@638> *pft\foundPos   = -1
00018B5E <prefixtree.include.bb2@639> *pft\foundDepth = -1
00018B8C <prefixtree.include.bb2@641> If *pft\curPos<0 OR *pft\curDepth<0
00018BAC <prefixtree.include.bb2@642>   *pp.prefixpointer = da_SetItem{*pft\curPath,0}
00018BD4 <prefixtree.include.bb2@643>   If *pp Then *pp\offset = *pft\dbaseRoot : *pp\key = #NULL
00018BE2 <prefixtree.include.bb2@644>   *pft\curDepth = 0
00018BEE <prefixtree.include.bb2@645>   *pft\curPos   = 0
00018BF8 <prefixtree.include.bb2@648>       offset.l = *pp\offset
00018C18 <prefixtree.include.bb2@649>       While Peek.b(*pft\dbase+offset)
00018C3E <prefixtree.include.bb2@650>         keylen.l = Peek.b(*pft\dbase+offset) & $FF
00018C58 <prefixtree.include.bb2@651>         offset + 1 + keylen + 4
00018C5E <prefixtree.include.bb2@652>       Wend
00018C6C <prefixtree.include.bb2@653>       offset+1
00018C8C <prefixtree.include.bb2@654>       If Peek.b(*pft\dbase+offset)
00018C98 <prefixtree.include.bb2@655>         *pft\foundPos   = offset
00018CAA <prefixtree.include.bb2@656>         *pft\foundDepth = *pft\curDepth
00018CB0 <prefixtree.include.bb2@657>         succ=True
00018CC2 <prefixtree.include.bb2@658>         *pft\curPos + 1
00018CC8 <prefixtree.include.bb2@661> Else
00018CF2 <prefixtree.include.bb2@662>   If *pft\curPos>=*pft\dbaseUsed Then pft_Reset{*pft} : Function Return False
00018D10 <prefixtree.include.bb2@665> *pp.prefixpointer = da_GetItem{*pft\curPath,*pft\curDepth}
00018D18 <prefixtree.include.bb2@666> *npp.prefixpointer = #NULL
00018D2C <prefixtree.include.bb2@668> While succ=False
00018D54 <prefixtree.include.bb2@669>   keylen.l    = Peek.b(*pft\dbase+*pp\offset) & $FF
00018D66 <prefixtree.include.bb2@670>   If keylen>0 ;/* we got a link ... */
00018D8E <prefixtree.include.bb2@671>     key.s = ""
00018DB6 <prefixtree.include.bb2@672>     For n.l=1 To keylen
00018E1E <prefixtree.include.bb2@673>       key.s + Chr$(Peek.b(*pft\dbase+*pp\offset+n))
00018E2E <prefixtree.include.bb2@674>     Next
00018E56 <prefixtree.include.bb2@675>     jump.l = Peek.l(*pft\dbase+*pp\offset+keylen+1)
00018E74 <prefixtree.include.bb2@676>     *pp\offset + 1 + keylen + 4
00018E9E <prefixtree.include.bb2@677>     *npp = da_SetItem{*pft\curPath,*pft\curDepth+1}
00018EA8 <prefixtree.include.bb2@678>     If *npp
00018EC0 <prefixtree.include.bb2@679>       *pft\curDepth + 1
00018ECA <prefixtree.include.bb2@680>       *npp\offset = jump
00018F02 <prefixtree.include.bb2@681>       str_Write{&*npp\key,key.s}
00018F08 <prefixtree.include.bb2@682>       *pp = *npp
00018F12 <prefixtree.include.bb2@685>       offset.l = *pp\offset
00018F32 <prefixtree.include.bb2@686>       While Peek.b(*pft\dbase+offset)
00018F58 <prefixtree.include.bb2@687>         keylen.l = Peek.b(*pft\dbase+offset) & $FF
00018F72 <prefixtree.include.bb2@688>         offset + 1 + keylen + 4
00018F78 <prefixtree.include.bb2@689>       Wend
00018F86 <prefixtree.include.bb2@690>       offset+1
00018FA6 <prefixtree.include.bb2@691>       If Peek.b(*pft\dbase+offset)
00018FB2 <prefixtree.include.bb2@692>         *pft\foundPos   = offset
00018FC4 <prefixtree.include.bb2@693>         *pft\foundDepth = *pft\curDepth
00018FCA <prefixtree.include.bb2@694>         succ=True
00018FDC <prefixtree.include.bb2@695>         *pft\curPos + 1
00018FE2 <prefixtree.include.bb2@698>   Else  ;/* no more links, we have to go back */
00018FFA <prefixtree.include.bb2@699>     *pft\curDepth-1
0001903E <prefixtree.include.bb2@700>     If *pft\curDepth>=0 Then *pp = da_GetItem{*pft\curPath,*pft\curDepth} : Else Function Return False
00019044 <prefixtree.include.bb2@702> Wend
0001904E <prefixtree.include.bb2@703> Function Return succ
00019062 <prefixtree.include.bb2@704> End Function
0001907C <prefixtree.include.bb2@743> Function.s pft_GetKey{*pft.prefixtree}
000190A4 <prefixtree.include.bb2@744> key.s = ""
000190D2 <prefixtree.include.bb2@745> For d.l=0 To *pft\foundDepth
000190EA <prefixtree.include.bb2@746>   *pp.prefixpointer = da_GetItem{*pft\curPath,d}
0001914C <prefixtree.include.bb2@747>   key.s + str_Read{&*pp\key}
0001915C <prefixtree.include.bb2@748> Next
00019186 <prefixtree.include.bb2@749> Function Return key.s
0001919E <prefixtree.include.bb2@750> End Function
000191B8 <prefixtree.include.bb2@767> Function.s pft_GetString{*pft.prefixtree}
000191E0 <prefixtree.include.bb2@768> value.s = ""
000191F8 <prefixtree.include.bb2@769> If *pft\foundPos>=0
00019232 <prefixtree.include.bb2@770>   value.s = Peek.s(*pft\dbase+*pft\foundPos)
0001925C <prefixtree.include.bb2@772> Function Return value.s
00019274 <prefixtree.include.bb2@773> End Function
0001928E <prefixtree.include.bb2@815> Function.l pft_Read{fid.l}
00019296 <prefixtree.include.bb2@816> *pft.prefixtree = #NULL
000192AE <prefixtree.include.bb2@817> If file_ReadTag{fid} = @"PFTR"
000192B8 <prefixtree.include.bb2@818>   bsize.l = file_GetTagValue{}
000192CA <prefixtree.include.bb2@819>   *pft.prefixtree = pft_Create{}
00019302 <prefixtree.include.bb2@820>   While bsize>0 AND file_EOF{fid}=False
00019310 <prefixtree.include.bb2@821>     bsize-8
0001931C <prefixtree.include.bb2@822>     Select file_ReadTag{fid}
00019338 <prefixtree.include.bb2@823>       Case @"USED" : *pft\dbaseUsed  = file_GetTagValue{}
0001935A <prefixtree.include.bb2@824>       Case @"ROOT" : *pft\dbaseRoot  = file_GetTagValue{}
0001937C <prefixtree.include.bb2@825>       Case @"BLOK" : *pft\dbaseBlock = file_GetTagValue{}
0001939E <prefixtree.include.bb2@826>       Case @"ITEM" : *pft\itemN      = file_GetTagValue{}
000193C0 <prefixtree.include.bb2@827>       Case @"DATA" : *pft\dbaseAdd   = file_GetTagValue{}
000193DC <prefixtree.include.bb2@828>         If pft_Expand{*pft,*pft\dbaseAdd }
000193FA <prefixtree.include.bb2@829>           file_ReadMem{fid,*pft\dbase,*pft\dbaseAdd }
0001940E <prefixtree.include.bb2@830>           bsize - *pft\dbaseAdd
00019414 <prefixtree.include.bb2@832>       Default
00019416 <prefixtree.include.bb2@834>     End Select
0001941C <prefixtree.include.bb2@835>   Wend
00019426 <prefixtree.include.bb2@837> Function Return *pft
0001942C <prefixtree.include.bb2@838> End Function
0001944A <prefixtree.include.bb2@856> Function.l pft_Write{*pft.prefixtree,fid.l}
00019450 <prefixtree.include.bb2@857> succ.l = False
00019474 <prefixtree.include.bb2@858> If file_WriteChunk{fid,@"PFTR"}
00019492 <prefixtree.include.bb2@859>   succ = file_WriteTag{fid,@"USED",\dbaseUsed}
000194C0 <prefixtree.include.bb2@860>   succ & file_WriteTag{fid,@"ROOT",\dbaseRoot}
000194EE <prefixtree.include.bb2@861>   succ & file_WriteTag{fid,@"BLOK",\dbaseBlock}
0001951C <prefixtree.include.bb2@862>   succ & file_WriteTag{fid,@"ITEM",\itemN}
0001954A <prefixtree.include.bb2@863>   succ & file_WriteTag{fid,@"DATA",\dbaseAdd}
0001957E <prefixtree.include.bb2@864>   succ & file_WriteMem{fid,\dbase,\dbaseAdd}
0001958E <prefixtree.include.bb2@865>   file_CloseChunk{fid,@"PFTR"}
00019598 <prefixtree.include.bb2@867> Function Return succ
0001959E <prefixtree.include.bb2@868> End Function
0001959E <phrasebook.include.bb2@34> 
000195E8 <phrasebook.include.bb2@58> Function.l pb_Create{appName.s,langName.s,langNameE.s}
00019608 <phrasebook.include.bb2@59> *pb.phrasebook = AllocVec_(SizeOf.phrasebook,#MEMF_ANY)
00019612 <phrasebook.include.bb2@60> If *pb
00019626 <phrasebook.include.bb2@61>   *pb\pft         = pft_Create{}
0001966C <phrasebook.include.bb2@62>   *pb\appName     = #NULL : str_Write{&*pb\appName,appName}
000196B2 <phrasebook.include.bb2@63>   *pb\langName    = #NULL : str_Write{&*pb\langName,langName}
000196F8 <phrasebook.include.bb2@64>   *pb\langNameE   = #NULL : str_Write{&*pb\langNameE,langNameE}
00019702 <phrasebook.include.bb2@66> Function Return *pb
0001971E <phrasebook.include.bb2@67> End Function
00019748 <phrasebook.include.bb2@70> Function.s _pb_Normalize{text.s}
000197C6 <phrasebook.include.bb2@71>   text = Replace$(text,"."," . ")
00019844 <phrasebook.include.bb2@72>   text = Replace$(text,","," , ")
000198C2 <phrasebook.include.bb2@73>   text = Replace$(text,":"," : ")
00019940 <phrasebook.include.bb2@74>   text = Replace$(text,"!"," ! ")
000199BE <phrasebook.include.bb2@75>   text = Replace$(text,"-"," - ")
00019A3C <phrasebook.include.bb2@76>   text = Replace$(text,"+"," + ")
00019ABA <phrasebook.include.bb2@77>   text = Replace$(text,"?"," ? ")
00019B38 <phrasebook.include.bb2@78>   text = Replace$(text,"&"," & ")
00019BB6 <phrasebook.include.bb2@79>   text = Replace$(text,"|"," | ")
00019C34 <phrasebook.include.bb2@80>   text = Replace$(text,"\n"," \n ")
00019CB8 <phrasebook.include.bb2@81>   text = Replace$(text,Chr$(10)," \n ")
00019CE8 <phrasebook.include.bb2@82>   search.s = "" : wc.l = 0
00019D44 <phrasebook.include.bb2@84>     tmp.s = lindex{text,wc}
00019D70 <phrasebook.include.bb2@85>     If tmp
00019E3A <phrasebook.include.bb2@86>       If search Then search = search + " " + tmp : Else search = tmp
00019E48 <phrasebook.include.bb2@88>     wc+1
00019E86 <phrasebook.include.bb2@89>   Until tmp=""
00019F0A <phrasebook.include.bb2@90>   search = Replace$(search," \n ",Chr$(10))
00019F34 <phrasebook.include.bb2@91>   Function Return search
00019F52 <phrasebook.include.bb2@92> End Function
00019F6C <phrasebook.include.bb2@106> Statement pb_Free{*pb.phrasebook}
00019F76 <phrasebook.include.bb2@107> If *pb
00019F82 <phrasebook.include.bb2@108>   pft_Free{*pb\pft}
00019F92 <phrasebook.include.bb2@109>   str_Free{&*pb\appName}
00019FA2 <phrasebook.include.bb2@110>   str_Free{&*pb\langName}
00019FB2 <phrasebook.include.bb2@111>   str_Free{&*pb\langNameE}
00019FC2 <phrasebook.include.bb2@112>   FreeVec_ *pb
00019FC6 <phrasebook.include.bb2@114> End Statement
0001A004 <phrasebook.include.bb2@131> Statement pb_AddPhrase {*pb.phrasebook,template.s,native.s}
0001A05C <phrasebook.include.bb2@132> template.s = _pb_Normalize{template}
0001A0B8 <phrasebook.include.bb2@133> pft_AddItem{*pb\pft,template,native}
0001A142 <phrasebook.include.bb2@134> If pft_FindItem{*pb\pft,LCase$(template)}=""
0001A1C0 <phrasebook.include.bb2@135>   pft_AddItem{*pb\pft,LCase$(template),native}
0001A1DA <phrasebook.include.bb2@137> End Statement
0001A208 <phrasebook.include.bb2@155> Function.s _pb_LookUp{*pb.phrasebook,text.s}
0001A244 <phrasebook.include.bb2@156>   If *pb=#NULL Then Function Return text
0001A312 <phrasebook.include.bb2@158>   While (Left$(text,1) =" ") : text=Right$(text,FLen(text)-1) : Wend
0001A3E0 <phrasebook.include.bb2@159>   While (Right$(text,1)=" ") : text=Left$ (text,FLen(text)-1) : Wend
0001A42C <phrasebook.include.bb2@161>   textL.s = LCase$(text)
0001A4AA <phrasebook.include.bb2@162>   textL.s = Replace$(textL,"'","")
0001A528 <phrasebook.include.bb2@163>   textL.s = Replace$(textL,"\\22","")
0001A586 <phrasebook.include.bb2@165>   trans.s = pft_FindItem{*pb\pft,text}
0001A622 <phrasebook.include.bb2@166>   If trans="" Then trans = pft_FindItem{*pb\pft,textL}
0001A65A <phrasebook.include.bb2@168>   If trans=""
0001A6B8 <phrasebook.include.bb2@169>     first.s = lindex{text,0}                          ; split up first word
0001A740 <phrasebook.include.bb2@170>     tail.s  = Right$(text,FLen(text)-FLen(first)-1)   ; ... from tail
0001A748 <phrasebook.include.bb2@172>     i.l = 0
0001A7B2 <phrasebook.include.bb2@174>       tmp.s = lindex{text,i} : i+1
0001A824 <phrasebook.include.bb2@175>       If tmp><"" Then last.s=tmp
0001A862 <phrasebook.include.bb2@176>     Until tmp=""
0001A8EA <phrasebook.include.bb2@177>     head.s = Left$(text,FLen(text)-FLen(last)-1)
0001A916 <phrasebook.include.bb2@187>     If head
0001A972 <phrasebook.include.bb2@188>       ttrans.s = _pb_LookUp{*pb,head}
0001AA40 <phrasebook.include.bb2@189>       ltrans.s = _pb_LookUp{*pb,last} : If ltrans="" Then ltrans=last
0001AAA4 <phrasebook.include.bb2@190>       trans = ttrans + " " + ltrans
0001AAAA <phrasebook.include.bb2@191>     Else
0001AADE <phrasebook.include.bb2@192>       trans = last
0001ABAC <phrasebook.include.bb2@196>   While (Left$(trans,1) =" ") : trans=Right$(trans,FLen(trans)-1) : Wend
0001AC7A <phrasebook.include.bb2@197>   While (Right$(trans,1)=" ") : trans=Left$ (trans,FLen(trans)-1) : Wend
0001ACA4 <phrasebook.include.bb2@199>   Function Return trans
0001ACC2 <phrasebook.include.bb2@200> End Function
0001ACF0 <phrasebook.include.bb2@204> Function.s pb_Translate{*pb.phrasebook,text.s}
0001AD2C <phrasebook.include.bb2@205>   If *pb=#NULL Then Function Return text
0001AD9C <phrasebook.include.bb2@206>   text.s = _pb_Normalize{text}+Chr$(10)
0001ADA4 <phrasebook.include.bb2@207>   apos.l = 1
0001ADF6 <phrasebook.include.bb2@208>   bpos.l = Instr(text,Chr$(10))
0001AE1E <phrasebook.include.bb2@209>   trans.s=""
0001AE36 <phrasebook.include.bb2@210>   While bpos>0
0001AEEA <phrasebook.include.bb2@211>     trans + _pb_LookUp{*pb,Mid$(text,apos,bpos-apos)}
0001AEF8 <phrasebook.include.bb2@212>     apos.l = bpos+1
0001AF4E <phrasebook.include.bb2@213>     bpos.l = Instr(text,Chr$(10),apos)
0001AFAC <phrasebook.include.bb2@214>     If bpos>0 Then trans+Chr$(10)
0001AFB2 <phrasebook.include.bb2@215>   Wend
0001B036 <phrasebook.include.bb2@216>   trans = Replace$(trans," \n ",Chr$(10))
0001B0BA <phrasebook.include.bb2@217>   trans = Replace$(trans," \n",Chr$(10))
0001B13E <phrasebook.include.bb2@218>   trans = Replace$(trans,"\n",Chr$(10))
0001B1BC <phrasebook.include.bb2@219>   trans = Replace$(trans," !","!")
0001B23A <phrasebook.include.bb2@220>   trans = Replace$(trans," .",".")
0001B2B8 <phrasebook.include.bb2@221>   trans = Replace$(trans," :",":")
0001B336 <phrasebook.include.bb2@222>   trans = Replace$(trans," ,",",")
0001B3B4 <phrasebook.include.bb2@223>   trans = Replace$(trans," ;",";")
0001B432 <phrasebook.include.bb2@224>   trans = Replace$(trans," ?","?")
0001B4B0 <phrasebook.include.bb2@225>   trans = Replace$(trans," | ","|")
0001B4DA <phrasebook.include.bb2@226>   Function Return trans
0001B4F8 <phrasebook.include.bb2@227> End Function
0001B526 <phrasebook.include.bb2@245> Function.l pb_LoadText{*pb.phrasebook,filename.s}
0001B56A <phrasebook.include.bb2@246> fid.l = file_Open{filename,#file_read}
0001B570 <phrasebook.include.bb2@247> succ.l = False
0001B58A <phrasebook.include.bb2@248> If fid<0 Then Function Return False
0001B5A6 <phrasebook.include.bb2@249> While file_EOF{fid}=False
0001B5DA <phrasebook.include.bb2@250>   dictline.s = file_ReadLine{fid}
0001B5FE <phrasebook.include.bb2@251>   If FLen(dictline)>2
0001B626 <phrasebook.include.bb2@252>     If Peek.l(&dictline)&$FFFFFF00=$EFBBBF00 ; skip utf8 header
0001B692 <phrasebook.include.bb2@253>       dictline = Right$(dictline,FLen(dictline)-3)
0001B6F0 <phrasebook.include.bb2@256>   template.s = lindex{dictline,0}
0001B74E <phrasebook.include.bb2@257>   native.s   = lindex{dictline,1}
0001B79A <phrasebook.include.bb2@258>   If FLen(template)>0 AND FLen(native)>0
0001B7F4 <phrasebook.include.bb2@259>     pb_AddPhrase{*pb,template,native}
0001B7FA <phrasebook.include.bb2@260>     succ=True
0001B800 <phrasebook.include.bb2@262> Wend
0001B80A <phrasebook.include.bb2@263> file_Close{fid}
0001B814 <phrasebook.include.bb2@264> Function Return succ
0001B82E <phrasebook.include.bb2@265> End Function
0001B85C <phrasebook.include.bb2@282> Function.l pb_SaveBin{*pb.phrasebook,filename.s}
0001B862 <phrasebook.include.bb2@283> succ.l = False
0001B8A6 <phrasebook.include.bb2@284> fid.l = file_Open{filename,#file_forcewrite}
0001B8C0 <phrasebook.include.bb2@285> If fid<0 Then Function Return False
0001B8D0 <phrasebook.include.bb2@286> *pft.prefixtree = pft_Optimize{*pb\pft}
0001B8DA <phrasebook.include.bb2@287> If *pft
0001B8E6 <phrasebook.include.bb2@288>   pft_Free{*pb\pft}
0001B8F0 <phrasebook.include.bb2@289>   *pb\pft = *pft
0001B914 <phrasebook.include.bb2@292> If file_WriteChunk{fid,@"PHBK"}
0001B95C <phrasebook.include.bb2@293>   file_WriteTagString{fid,@"APP$",str_Read{&*pb\appName}}
0001B9A4 <phrasebook.include.bb2@294>   file_WriteTagString{fid,@"LAN$",str_Read{&*pb\langNameE}}
0001B9EC <phrasebook.include.bb2@295>   file_WriteTagString{fid,@"NAT$",str_Read{&*pb\langName}}
0001BA02 <phrasebook.include.bb2@296>   file_WriteTag{fid,@"PTBL",0}
0001BA16 <phrasebook.include.bb2@297>   succ.l = pft_Write{*pb\pft,fid}
0001BA20 <phrasebook.include.bb2@299> file_Close{fid}
0001BA2A <phrasebook.include.bb2@300> Function Return succ
0001BA44 <phrasebook.include.bb2@301> End Function
0001BA6E <phrasebook.include.bb2@317> Function.l pb_LoadBin{filename.s}
0001BAB2 <phrasebook.include.bb2@318> fid.l = file_Open{filename,#file_read}
0001BACC <phrasebook.include.bb2@319> If fid<0 Then Function Return False
0001BB2A <phrasebook.include.bb2@320> *pb.phrasebook = pb_Create{"","",""}
0001BB44 <phrasebook.include.bb2@321> If *pb=#NULL Then Function Return False
0001BB5C <phrasebook.include.bb2@323> If file_ReadTag{fid} = @"PHBK"
0001BB66 <phrasebook.include.bb2@324>   bsize.l = file_GetTagValue{}
0001BB82 <phrasebook.include.bb2@325>   While file_EOF{fid}=False
0001BB90 <phrasebook.include.bb2@326>     bsize - 8
0001BB9C <phrasebook.include.bb2@327>     Select file_ReadTag{fid}
0001BBE8 <phrasebook.include.bb2@328>       Case @"APP$" : str_Write{&*pb\appName  ,file_GetTagString{}}
0001BC3A <phrasebook.include.bb2@329>       Case @"LAN$" : str_Write{&*pb\langNameE,file_GetTagString{}}
0001BC8C <phrasebook.include.bb2@330>       Case @"NAT$" : str_Write{&*pb\langName ,file_GetTagString{}}
0001BCA0 <phrasebook.include.bb2@331>       Case @"PTBL"
0001BCB0 <phrasebook.include.bb2@332>         *pb\pft = pft_Read{fid}
0001BCB6 <phrasebook.include.bb2@333>       Default
0001BCB8 <phrasebook.include.bb2@335>     End Select
0001BCBE <phrasebook.include.bb2@336>   Wend
0001BCC8 <phrasebook.include.bb2@338> file_Close{fid}
0001BCD2 <phrasebook.include.bb2@339> Function Return *pb
0001BCEC <phrasebook.include.bb2@340> End Function
0001BD16 <phrasebook.include.bb2@379> Function.l pb_GetFromLocale{appName.s}
0001BD2C <phrasebook.include.bb2@380> *locale.Locale = OpenLocale_(#NULL)
0001BD36 <phrasebook.include.bb2@381> If *locale
0001BDAE <phrasebook.include.bb2@382>   lang.s = Replace$(Peek.s(*locale\loc_LanguageName),".language","")
0001BDEA <phrasebook.include.bb2@383>   lang.s = Peek.s(*locale\loc_PrefLanguages[0])
0001BDFA <phrasebook.include.bb2@384>   CloseLocale_ *locale
0001BE1A <phrasebook.include.bb2@385>   buffPtr.l = AllocVec_(4096,#MEMF_ANY)
0001BE3A <phrasebook.include.bb2@386>   *fibTex.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
0001BE5A <phrasebook.include.bb2@387>   *fibBin.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
0001BE90 <phrasebook.include.bb2@388>   If buffPtr><#NULL AND *fibTex><#NULL AND *fibBin><#NULL
0001BEB8 <phrasebook.include.bb2@389>     realfile.s = ""
0001BEF0 <phrasebook.include.bb2@390>     If realfile=""
0001BF54 <phrasebook.include.bb2@391>       pbfile.s = appName+"."+lang
0001BF74 <phrasebook.include.bb2@392>       lock.l = Lock_ (&pbfile,#ACCESS_READ)
0001BFF0 <phrasebook.include.bb2@393>       If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
0001C028 <phrasebook.include.bb2@396>     If realfile=""
0001C09E <phrasebook.include.bb2@397>       pbfile.s = "Locale/PhraseBooks/"+appName+"."+lang
0001C0BE <phrasebook.include.bb2@398>       lock.l = Lock_ (&pbfile,#ACCESS_READ)
0001C13A <phrasebook.include.bb2@399>       If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
0001C172 <phrasebook.include.bb2@402>     If realfile=""
0001C1E8 <phrasebook.include.bb2@403>       pbfile.s = "Locale:PhraseBooks/"+appName+"."+lang
0001C208 <phrasebook.include.bb2@404>       lock.l = Lock_ (&pbfile,#ACCESS_READ)
0001C284 <phrasebook.include.bb2@405>       If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
0001C2B0 <phrasebook.include.bb2@408>     If realfile
0001C2B8 <phrasebook.include.bb2@409>       *pb.phrasebook = #NULL
0001C2FE <phrasebook.include.bb2@410>       binfile.s = realfile+".bin"
0001C31E <phrasebook.include.bb2@411>       lock.l = Lock_ (&binfile,#ACCESS_READ)
0001C328 <phrasebook.include.bb2@412>       If lock
0001C340 <phrasebook.include.bb2@413>         Examine_ lock,*fibBin
0001C350 <phrasebook.include.bb2@414>         UnLock_ lock
0001C388 <phrasebook.include.bb2@415>         If CompareDates_(*fibTex\fib_Date,*fibBin\fib_Date)>0 ; Bin is later than Text
0001C3BA <phrasebook.include.bb2@416>           *pb = pb_LoadBin{binfile}
0001C3CC <phrasebook.include.bb2@419>       If *pb = #NULL
0001C44E <phrasebook.include.bb2@420>         *pb = pb_Create{appName,lang,lang}
0001C458 <phrasebook.include.bb2@421>         If *pb
0001C48A <phrasebook.include.bb2@422>           pb_LoadText{*pb,realfile}
0001C4BC <phrasebook.include.bb2@423>           pb_SaveBin{*pb,binfile}
0001C4E8 <phrasebook.include.bb2@428>   If *fibTex Then FreeDosObject_ #DOS_FIB,*fibTex : *fibTex = #NULL
0001C514 <phrasebook.include.bb2@429>   If *fibBin Then FreeDosObject_ #DOS_FIB,*fibBin : *fibBin = #NULL
0001C536 <phrasebook.include.bb2@430>   If buffPtr Then FreeVec_ buffPtr : buffPtr = #NULL
0001C540 <phrasebook.include.bb2@432> Function Return *pb
0001C55A <phrasebook.include.bb2@433> End Function
0001C55A <translation.include.bb2@31> XINCLUDE "useful.include.bb2"
0001C570 <translation.include.bb2@43> Statement trans_Free{}
0001C58C <translation.include.bb2@44> If *__pb__ Then pb_Free{*__pb__} : *__pb__ = #NULL
0001C58E <translation.include.bb2@45> End Statement
0001C5BC <translation.include.bb2@46> !autoexit{trans_Free}
0001C5BC <PED.ab2@87> CEND
0001C5C8 <PED.ab2@103> optimize 5
0001C5C8 <wizard_Table.include.bb2@1> XINCLUDE "PE/wizard_Table.include.bb2"
0001C5D4 <wizard_Table.include.bb2@73> optimize 5
0001C5F6 <wizard_Table.include.bb2@78> If ((Maximum GTList) < 25) OR ((Maximum File)<10)
0001C652 <wizard_Table.include.bb2@79>   dummy.l = RTEZRequest("","Object Maximum too small\\nIncrease Objectsize for GTList to >25\\nand Objectsize for Files to >10","Exit")
0001C658 <wizard_Table.include.bb2@80> End
0001C658 <wizard_Tools.include.bb2@1> XINCLUDE "PE/wizard_Tools.include.bb2"
0001C658 <PE_Tools.include.bb2@1> XINCLUDE "PE/PE_Tools.include.bb2"
0001C67C <PE_Tools.include.bb2@67> Dim monate$(12)
0001C684 <PE_Tools.include.bb2@76> Restore monate
0001C6B2 <PE_Tools.include.bb2@77> For kal.b = 1 To 12
0001C6E0 <PE_Tools.include.bb2@78>   Read monate$(kal.b)
0001C750 <PE_Tools.include.bb2@79>   monatestr$ + monate$(kal) + "\\0a"
0001C75E <PE_Tools.include.bb2@80> Next kal
0001C7AE <PE_Tools.include.bb2@81> monatestr$ = StripTrail$(monatestr$,10)
0001C7D0 <PE_Tools.include.bb2@213> Function.l MulDiv_{a.l,b.l,c.l}
0001C7E8 <PE_Tools.include.bb2@214>   Function Return (a*b)/c
0001C7EE <PE_Tools.include.bb2@215> End Function
0001C80C <PE_Tools.include.bb2@378> Function.s DateAsString{value.l,@mode.b}
0001C830 <PE_Tools.include.bb2@380>   Format ""
0001C864 <PE_Tools.include.bb2@381>   d$  = Str$(value)
0001C8B6 <PE_Tools.include.bb2@382>   j$  = Left$(d$,4)
0001C90E <PE_Tools.include.bb2@383>   m$  = Mid$(d$,5,2)
0001C960 <PE_Tools.include.bb2@384>   t$  = Right$(d$,2)
0001C96C <PE_Tools.include.bb2@386>   Select mode
0001C97C <PE_Tools.include.bb2@387>   Case #DATUM_TTMM
0001C9F2 <PE_Tools.include.bb2@388>     datum$ = t$ + "." + m$ + "."
0001CA08 <PE_Tools.include.bb2@389>   Case #DATUM_JJMMTT
0001CA9C <PE_Tools.include.bb2@390>     datum$ = j$ + "." + m$ + "."  + t$
0001CAB2 <PE_Tools.include.bb2@391>   Case #DATUM_TTMMJJ
0001CB6E <PE_Tools.include.bb2@392>     datum$ = t$ + "." + m$ + "."  + Right$(j$,2)
0001CB84 <PE_Tools.include.bb2@393>   Case #DATUM_TTMMJJJJ
0001CC18 <PE_Tools.include.bb2@394>     datum$ = t$ + "." + m$ + "."  + j$
0001CC1E <PE_Tools.include.bb2@395>   Default
0001CCB2 <PE_Tools.include.bb2@396>     datum$ = t$ + "." + m$ + "."  + j$
0001CCB4 <PE_Tools.include.bb2@397>   End Select
0001CCDE <PE_Tools.include.bb2@398>   Function Return datum$
0001CCF6 <PE_Tools.include.bb2@399> End Function
0001CD24 <PE_Tools.include.bb2@408> Function.l DateAsLong{d$,@mode.l}
0001CD68 <PE_Tools.include.bb2@412>   If Vallong(d$)>1000
0001CE70 <PE_Tools.include.bb2@413>     d$ = Right$(d$,2)+"."+Mid$(d$,6,2)+"."+Left$(d$,4)
0001CE94 <PE_Tools.include.bb2@416>   Dim zlong.l(2)
0001CEC0 <PE_Tools.include.bb2@417>   Format "" : found.l = 0
0001CECA <PE_Tools.include.bb2@418>   CaseSense Off
0001CEF4 <PE_Tools.include.bb2@419>   For i.l = 1 To 12
0001CF8C <PE_Tools.include.bb2@420>     If Instr(d$, Left$(monate$(i),3)) > 0
0001CF92 <PE_Tools.include.bb2@421>       found = i
0001CFA2 <PE_Tools.include.bb2@423>   Next i
0001CFA8 <PE_Tools.include.bb2@425>   Select found
0001CFB6 <PE_Tools.include.bb2@426>   Case 0
0001CFEE <PE_Tools.include.bb2@427>     l.l  = Len(d$) : quit.b= False
0001CFFE <PE_Tools.include.bb2@428>     i.l = 0 : y.l = 0
0001D016 <PE_Tools.include.bb2@429>     While quit = False
0001D0B4 <PE_Tools.include.bb2@430>       a$ = Mid$(d$,Len(d$)-i,1) : i + 1
0001D16C <PE_Tools.include.bb2@431>       If ( (a$ = ".") OR (a$="-") OR (a$="/")) AND (y < 2)
0001D1CC <PE_Tools.include.bb2@432>         zlong(y) = Vallong(Right$(d$,i-1))
0001D256 <PE_Tools.include.bb2@433>         d$ = Left$(d$,Len(d$)-i)
0001D26C <PE_Tools.include.bb2@434>         i = 0 : y + 1
0001D272 <PE_Tools.include.bb2@435>       Else
0001D284 <PE_Tools.include.bb2@436>         If (y = 2)
0001D2C2 <PE_Tools.include.bb2@437>           zlong(y) = Vallong(d$)
0001D2C8 <PE_Tools.include.bb2@438>           quit = True
0001D2CE <PE_Tools.include.bb2@439>         Else
0001D2EC <PE_Tools.include.bb2@440>           If (i>20) Then Function Return 0
0001D2F2 <PE_Tools.include.bb2@443>     Wend
0001D304 <PE_Tools.include.bb2@445>     If mode = #DATUM_MTJ
0001D318 <PE_Tools.include.bb2@446>       swap_.l= zlong(1)
0001D338 <PE_Tools.include.bb2@447>       zlong(1) = zlong(2)
0001D34C <PE_Tools.include.bb2@448>       zlong(2) = swap_
0001D38E <PE_Tools.include.bb2@451>     If (zlong(0)>70) AND (zlong(0)<100)
0001D3B6 <PE_Tools.include.bb2@452>       zlong(0)=1900 + zlong(0)
0001D3BC <PE_Tools.include.bb2@453>     Else
0001D402 <PE_Tools.include.bb2@454>       If zlong(0)<70 Then zlong(0)=2000 + zlong(0)
0001D4C8 <PE_Tools.include.bb2@457>     If (zlong(0)<1900) OR (zlong(0)>2200) OR (zlong(1)=0) OR (zlong(1)>12) OR (zlong(2)=0) OR (zlong(2)>32) Then Function Return 0
0001D4CE <PE_Tools.include.bb2@459>   Default
0001D4E2 <PE_Tools.include.bb2@461>     zlong(1) = found
0001D56A <PE_Tools.include.bb2@462>     If Val(StrRight(StripTrail$(d$,32),4)) > 1000
0001D5D0 <PE_Tools.include.bb2@463>       zlong(0) = Val(StrRight(d$,4))
0001D5D6 <PE_Tools.include.bb2@464>     Else
0001D63C <PE_Tools.include.bb2@465>       zlong(0) = Val(StrRight(d$,2))
0001D6AC <PE_Tools.include.bb2@466>       If zlong(0)<70 Then zlong(0)+2000 Else zlong(0)+1900
0001D712 <PE_Tools.include.bb2@468>     zlong(2) = Val(StrLeft(d$,2))
0001D714 <PE_Tools.include.bb2@469>   End Select
0001D71A <PE_Tools.include.bb2@471>   Select mode
0001D728 <PE_Tools.include.bb2@472>   Case #DATUM_DAYS
0001D73E <PE_Tools.include.bb2@473>     Function Return zlong(2)
0001D752 <PE_Tools.include.bb2@474>   Case #DATUM_MONTHS
0001D768 <PE_Tools.include.bb2@475>     Function Return zlong(1)
0001D77C <PE_Tools.include.bb2@476>   Case #DATUM_YEARS
0001D792 <PE_Tools.include.bb2@477>     Function Return zlong(0)
0001D798 <PE_Tools.include.bb2@478>   Default
0001D7AC <PE_Tools.include.bb2@479>     datum.l = zlong(0)
0001D7BC <PE_Tools.include.bb2@480>     datum = datum * 10000
0001D7F0 <PE_Tools.include.bb2@481>     datum = datum + zlong(1) * 100 + zlong(2)
0001D7FA <PE_Tools.include.bb2@482>     Function Return datum
0001D7FC <PE_Tools.include.bb2@483>   End Select
0001D816 <PE_Tools.include.bb2@484> End Function
0001D838 <PE_Tools.include.bb2@669> Function.l GetBestPenRGB{r.l,g.l,b.l}
0001D852 <PE_Tools.include.bb2@670>   If r < 0 Then r=0
0001D86C <PE_Tools.include.bb2@671>   If r > 255 Then r=255
0001D886 <PE_Tools.include.bb2@672>   If g < 0 Then g=0
0001D8A0 <PE_Tools.include.bb2@673>   If g > 255 Then g=255
0001D8BA <PE_Tools.include.bb2@674>   If b < 0 Then b=0
0001D8D4 <PE_Tools.include.bb2@675>   If b > 255 Then b=255
0001D8E4 <PE_Tools.include.bb2@677>   r = r LSL 24 ;

0001D8F4 <PE_Tools.include.bb2@678>   g = g LSL 24 ; adjust to "32-bit left justified long value"
0001D904 <PE_Tools.include.bb2@679>   b = b LSL 24 ;

0001D912 <PE_Tools.include.bb2@680>   *scrn.Screen = ActiveScreen ;Peek.l(Addr Screen (Used Screen))
0001D920 <PE_Tools.include.bb2@681>   *view.ViewPort = *scrn\ViewPort
0001D92E <PE_Tools.include.bb2@682>   *cmap.ColorMap = *view\ColorMap
0001D97E <PE_Tools.include.bb2@683>   pen.l = ObtainBestPenA_(*cmap,r,g,b,Tags(#OBP_Precision,#PRECISION_GUI))
0001D988 <PE_Tools.include.bb2@686>   Function Return pen
0001D98E <PE_Tools.include.bb2@687> End Function
0001D9A8 <PE_Tools.include.bb2@690> Function.l GetBestPen{_rgb.l}
0001D9B8 <PE_Tools.include.bb2@691>   r.l = _rgb LSR 16
0001D9D0 <PE_Tools.include.bb2@692>   g.l = (_rgb LSL 16) LSR 24
0001D9E8 <PE_Tools.include.bb2@693>   b.l = (_rgb LSL 24) LSR 24
0001DA00 <PE_Tools.include.bb2@695>   Function Return GetBestPenRGB{r,g,b}
0001DA06 <PE_Tools.include.bb2@696> End Function
0001DA06 <wizard_Tools.include.bb2@23> Syntax 0
0001DA2E <wizard_Tools.include.bb2@47> Dim List parent.parentstruct(0)
0001DA48 <wizard_Tools.include.bb2@49> Statement HIERARCHY_Clear{liste.l}
0001DA52 <wizard_Tools.include.bb2@51>   ResetList parent()
0001DA64 <wizard_Tools.include.bb2@52>   While LastItem(parent())
0001DA7A <wizard_Tools.include.bb2@53>     WZListRemove parent()\childlist
0001DA84 <wizard_Tools.include.bb2@54>     KillItem parent()
0001DA8A <wizard_Tools.include.bb2@55>   Wend
0001DA9C <wizard_Tools.include.bb2@56>   If LastItem(parent())
0001DAF6 <wizard_Tools.include.bb2@57>     Request "","List","Ok"
0001DB00 <wizard_Tools.include.bb2@59>   WZListRemove liste
0001DB04 <wizard_Tools.include.bb2@60> End Statement
0001DB36 <wizard_Tools.include.bb2@62> Function.b HIERARCHY_AddParent{liste.l,p$,@gruppe.l}
0001DB48 <wizard_Tools.include.bb2@64>   If AddLast(parent())
0001DB5E <wizard_Tools.include.bb2@65>     WZListRemove parent()\childlist
0001DBBC <wizard_Tools.include.bb2@66>     parent()\_handle = WZListAddTree(liste,p$,0,-1,parent()\childlist,gruppe)
0001DBFA <wizard_Tools.include.bb2@67>     parent()\name = p$
0001DC14 <wizard_Tools.include.bb2@69> End Function
0001DC3E <wizard_Tools.include.bb2@71> Function.l HIERARCHY_GetParentID{main$}
0001DC48 <wizard_Tools.include.bb2@73>   ResetList parent()
0001DC5A <wizard_Tools.include.bb2@74>   While NextItem(parent())
0001DCC0 <wizard_Tools.include.bb2@75>     If parent()\name = main$ Then Function Return parent()\_handle
0001DCC6 <wizard_Tools.include.bb2@76>   Wend
0001DCE0 <wizard_Tools.include.bb2@77> End Function
0001DD12 <wizard_Tools.include.bb2@79> Function.b HIERARCHY_AddChild{parenthandle.l,child$,@gruppe.l}
0001DD1C <wizard_Tools.include.bb2@81>   ResetList parent()
0001DD2E <wizard_Tools.include.bb2@82>   While NextItem(parent())
0001DD9E <wizard_Tools.include.bb2@83>     If parent()\_handle = parenthandle Then WZListAddTree parent()\childlist,child$,parent()\_handle,-1,0,gruppe
0001DDA4 <wizard_Tools.include.bb2@84>   Wend
0001DDBE <wizard_Tools.include.bb2@85> End Function
0001DDE8 <wizard_Tools.include.bb2@106> Function.b WZ_CheckOpen{w$}
0001DE60 <wizard_Tools.include.bb2@108>   If Peek.l(Addr Window(WZID(w$))) = 0 Then Function Return False Else Function Return True
0001DE7A <wizard_Tools.include.bb2@110> End Function
0001DEA8 <wizard_Tools.include.bb2@114> Statement WZ_SetFont{winid$,@Style.b}
0001DEFA <wizard_Tools.include.bb2@115>  *win.Window = Peek.l(Addr Window( WZID(winid$) ) )
0001DF0C <wizard_Tools.include.bb2@116>  If (*win <> 0)
0001DF52 <wizard_Tools.include.bb2@117>    Use Window WZID(winid$)
0001DF60 <wizard_Tools.include.bb2@118>    *han.WizardWindowHandle = WZHandlenocheck
0001DF72 <wizard_Tools.include.bb2@119>    If (*han <> 0)
0001DFA8 <wizard_Tools.include.bb2@121>      foname$ = Peek.s(*han\DrawInfo\dri_Font\tf_Message\mn_Node\ln_Name)
0001DFB6 <wizard_Tools.include.bb2@122>      fosize.w = WZYFontsize
0001DFBC <wizard_Tools.include.bb2@125>    Else
0001DFD4 <wizard_Tools.include.bb2@126>     *scr.Screen = Peek.l(Addr Screen(0))
0001E002 <wizard_Tools.include.bb2@127>     foname$ = Peek.s(*scr\Font\ta_Name)
0001E014 <wizard_Tools.include.bb2@128>     fosize.w = *scr\Font\ta_YSize
0001E062 <wizard_Tools.include.bb2@131>    If Exists("fonts:"+ fonname$)
0001E0B0 <wizard_Tools.include.bb2@132>      LoadFont 0,foname$,fosize
0001E0CA <wizard_Tools.include.bb2@133>      If Style=-1 Then Style = 0
0001E0EE <wizard_Tools.include.bb2@134>      WindowFont 0,Style
0001E106 <wizard_Tools.include.bb2@137> End Statement
0001E134 <wizard_Tools.include.bb2@140> Statement WZ_SetPopUpMenu{menu$,@sorted.b}
0001E13C <wizard_Tools.include.bb2@141>  entries.l = 0
0001E148 <wizard_Tools.include.bb2@142>  WZListRemove popupliste
0001E1C0 <wizard_Tools.include.bb2@143>  While (menu$<>"") AND (menu$<>Chr$(10))
0001E1CE <wizard_Tools.include.bb2@144>    z.l = 0 : quit.b = 0
0001E1E4 <wizard_Tools.include.bb2@145>    While quit = 0
0001E1F2 <wizard_Tools.include.bb2@146>      z + 1
0001E2AC <wizard_Tools.include.bb2@147>      If (z=Len(menu$)) OR (Mid$(menu$,z,1)=Chr$(10)) Then quit = 1
0001E2B2 <wizard_Tools.include.bb2@148>    Wend
0001E2C4 <wizard_Tools.include.bb2@149>    If z > 1
0001E2D2 <wizard_Tools.include.bb2@150>      entries + 1
0001E358 <wizard_Tools.include.bb2@151>      entry$ = StrPack(Left$(menu$,z),Chr$(10))
0001E3A4 <wizard_Tools.include.bb2@153>      search.l = Instr(entry$,"%%")
0001E3B6 <wizard_Tools.include.bb2@154>      If search > 0
0001E414 <wizard_Tools.include.bb2@155>        Select Mid$(entry$,search + 1,1)
0001E438 <wizard_Tools.include.bb2@156>        Case "5"
0001E47C <wizard_Tools.include.bb2@157>          WZTags #WENTRYA_TextPen,screen_GetPen{$EE,$EE,$EE},#WENTRYA_TextStyle,#FSF_TAGGED
0001E4A6 <wizard_Tools.include.bb2@158>        Case "4"
0001E4D8 <wizard_Tools.include.bb2@159>          WZTags #WENTRYA_TextPen,screen_GetPen{$00,$00,$AA}
0001E502 <wizard_Tools.include.bb2@160>        Case "2"
0001E534 <wizard_Tools.include.bb2@161>          WZTags #WENTRYA_TextPen,screen_GetPen{$AA,$00,$00}
0001E55E <wizard_Tools.include.bb2@162>        Case "1"
0001E590 <wizard_Tools.include.bb2@163>          WZTags #WENTRYA_TextPen,screen_GetPen{$00,$AA,$00}
0001E596 <wizard_Tools.include.bb2@164>        Default
0001E5B6 <wizard_Tools.include.bb2@165>          WZTags #WENTRYA_TextStyle,#FSF_BOLD
0001E5C4 <wizard_Tools.include.bb2@166>        End Select
0001E64E <wizard_Tools.include.bb2@167>        entry$ = Right$(entry$,Len(entry$)-3)
0001E662 <wizard_Tools.include.bb2@170>      If sorted = -1
0001E69C <wizard_Tools.include.bb2@171>        WZListAdd popupliste, entry$,-2
0001E6A2 <wizard_Tools.include.bb2@172>      Else
0001E6DC <wizard_Tools.include.bb2@173>        WZListAdd popupliste, entry$,-1
0001E766 <wizard_Tools.include.bb2@175>      menu$= Right$(menu$,Len(menu$)-z)
0001E76C <wizard_Tools.include.bb2@177>  Wend
0001E784 <wizard_Tools.include.bb2@178> End Statement
0001E79A <wizard_Tools.include.bb2@180> Function.b WZ_GetPopUpMenu{}
0001E7AA <wizard_Tools.include.bb2@181>   Function Return popupdata\selected_entry
0001E7AE <wizard_Tools.include.bb2@182> End Function
0001E7C8 <wizard_Tools.include.bb2@185> Function.s WZ_GetPopUpEntry{entry.l}
0001E804 <wizard_Tools.include.bb2@187>  If (entry > -1) AND (entry<=WZListItems(popupliste))
0001E832 <wizard_Tools.include.bb2@188>    Function Return WZListString(popupliste,entry - 1,1)  ; achtung mode beachten
0001E838 <wizard_Tools.include.bb2@189>  Else
0001E856 <wizard_Tools.include.bb2@190>    Function Return ""
0001E860 <wizard_Tools.include.bb2@192> End Function
0001E87A <wizard_Tools.include.bb2@194> Statement WZ_SetPopUpEntry{entry.l}
0001E8B6 <wizard_Tools.include.bb2@196>  If (entry > -1) AND (entry<WZListItems(popupliste))
0001E8D0 <wizard_Tools.include.bb2@197>    win_use.l = Used Window
0001E908 <wizard_Tools.include.bb2@198>    WZPrint "POPUP_PAGE",_page
0001E976 <wizard_Tools.include.bb2@199>    WZPrint "POPUPMENU"+Str$(_page),entry,&popupliste
0001E982 <wizard_Tools.include.bb2@200>    popupdata\selected_entry = entry
0001E998 <wizard_Tools.include.bb2@201>    Use Window win_use
0001E99C <wizard_Tools.include.bb2@203> End Statement
0001E9C2 <wizard_Tools.include.bb2@205> Statement WZ_PopUp_Nonmodal{x.w,y.w,@w.w,@h.w}
0001E9DC <wizard_Tools.include.bb2@206>   win_use.l = Used Window
0001E9EC <wizard_Tools.include.bb2@207>   entries.w = WZListItems(popupliste)
0001E9F2 <wizard_Tools.include.bb2@208>   width.w = 0
0001EA00 <wizard_Tools.include.bb2@209>   If entries > 0
0001EA2E <wizard_Tools.include.bb2@210>     For i.w = 1 To entries
0001EA6A <wizard_Tools.include.bb2@211>       entry$ = WZListString(popupliste,i-1,-1)
0001EB1A <wizard_Tools.include.bb2@212>       width.w = Max(width,TextLength_(RastPort(WZID("WIN_LABELS")),entry$,FLen(entry$)))
0001EB28 <wizard_Tools.include.bb2@213>     Next i
0001EB4C <wizard_Tools.include.bb2@214>     height.w = (WZYFontsize+2) * entries + 2
0001EB6C <wizard_Tools.include.bb2@215>     If w = -1 Then w = width + 8
0001EB92 <wizard_Tools.include.bb2@216>     If (h = -1) OR (h > height)
0001EB9A <wizard_Tools.include.bb2@217>       h = height
0001EBC2 <wizard_Tools.include.bb2@220>     mos_screenw.w = screen_GetWidth{}/1.5
0001EBEA <wizard_Tools.include.bb2@221>     mos_screenh.w = screen_GetHeight{}/1.5
0001EC00 <wizard_Tools.include.bb2@222>     If h > mos_screenh Then h = mos_screenh
0001EC14 <wizard_Tools.include.bb2@223>     If h < 32 Then h = 32
0001EC2A <wizard_Tools.include.bb2@224>     If w > mos_screenw Then w = mos_screenw
0001EC3E <wizard_Tools.include.bb2@225>     If w < 32 Then w = 32
0001EC7A <wizard_Tools.include.bb2@226>     If (x + w) > screen_GetWidth{} Then x = (screen_GetWidth{} - w)
0001ECB6 <wizard_Tools.include.bb2@227>     If (y + h) > screen_GetHeight{} Then y = (screen_GetHeight{} - h)
0001ECCA <wizard_Tools.include.bb2@228>     If x < 0 Then x = 0
0001ECDE <wizard_Tools.include.bb2@229>     If y < 0 Then y = 0
0001ECEC <wizard_Tools.include.bb2@231>     If height > h
0001ECF2 <wizard_Tools.include.bb2@232>       _page.b = 0
0001ECF8 <wizard_Tools.include.bb2@233>     Else
0001ECFE <wizard_Tools.include.bb2@234>       _page = 1
0001ED2A <wizard_Tools.include.bb2@237>     If WZ_CheckOpen{"WIN_POPUP"}
0001ED64 <wizard_Tools.include.bb2@238>       Use Window WZID("WIN_POPUP")
0001EDAA <wizard_Tools.include.bb2@239>       If (h <> WindowHeight) OR (w<>WindowWidth)
0001EDF4 <wizard_Tools.include.bb2@240>         ChangeWindowBox_ WZWindowAddr,WindowX,WindowY,w,h
0001EDFA <wizard_Tools.include.bb2@242>     Else
0001EE9E <wizard_Tools.include.bb2@243>       WZWindow WZID("WIN_POPUP"),?wzgui,64,x,y,w,h,WZID("WIN_POPUP")
0001EEB8 <wizard_Tools.include.bb2@245>     ClearType popupdata
0001EEF2 <wizard_Tools.include.bb2@246>     WZPrint "POPUP_PAGE",_page
0001EF62 <wizard_Tools.include.bb2@247>     WZPrint "POPUPMENU"+Str$(_page),0,&popupliste
0001EF74 <wizard_Tools.include.bb2@249> End Statement
0001EF9A <wizard_Tools.include.bb2@251> Function.l WZ_PopUp{x.w,y.w,@w.w,@h.w}
0001EFAA <wizard_Tools.include.bb2@252>  entries.w = WZListItems(popupliste)
0001EFB2 <wizard_Tools.include.bb2@253>  width.l = 0
0001EFC0 <wizard_Tools.include.bb2@254>  If entries > 0
0001EFEA <wizard_Tools.include.bb2@255>    For i.l = 1 To entries
0001F024 <wizard_Tools.include.bb2@256>      entry$ = WZListString(popupliste,i-1,-1)
0001F08A <wizard_Tools.include.bb2@257>      width.l = Max(width,(WZXFontsize+2) * Len(entry$))
0001F09A <wizard_Tools.include.bb2@258>    Next i
0001F0C0 <wizard_Tools.include.bb2@259>    height.l = (WZYFontsize+2) * entries + 2
0001F0E0 <wizard_Tools.include.bb2@261>    If w = -1 Then w = width + 2
0001F10A <wizard_Tools.include.bb2@262>    If (h = -1) OR (h > height)
0001F112 <wizard_Tools.include.bb2@263>      h = height
0001F126 <wizard_Tools.include.bb2@265>    If h<32 Then h= 32
0001F162 <wizard_Tools.include.bb2@266>    If x + w > screen_GetWidth{} Then x = screen_GetWidth{} - w
0001F19E <wizard_Tools.include.bb2@267>    If y + h > screen_GetHeight{} Then y = screen_GetHeight{} - h
0001F1B2 <wizard_Tools.include.bb2@268>    If x < 0 Then x = 0
0001F1C6 <wizard_Tools.include.bb2@269>    If y < 0 Then y = 0
0001F1D8 <wizard_Tools.include.bb2@270>    If height > h
0001F1DE <wizard_Tools.include.bb2@271>      _page.b = 0
0001F1E4 <wizard_Tools.include.bb2@272>    Else
0001F1EA <wizard_Tools.include.bb2@273>      _page = 1
0001F204 <wizard_Tools.include.bb2@276>    win_use.l = Used Window
0001F2A8 <wizard_Tools.include.bb2@278>    WZWindow WZID("WIN_POPUP"),?wzgui,64,x,y,w,h,WZID("WIN_POPUP")
0001F2E2 <wizard_Tools.include.bb2@279>    WZPrint "POPUP_PAGE",_page
0001F354 <wizard_Tools.include.bb2@280>    WZPrint "POPUPMENU"+Str$(_page),-1,&popupliste
0001F36E <wizard_Tools.include.bb2@281>    exit.l = 0 : selected.l = -1 : FlushEvents
0001F378 <wizard_Tools.include.bb2@283>      popev.l = WaitEvent
0001F3C0 <wizard_Tools.include.bb2@284>      If EventWindow = WZID("WIN_POPUP")
0001F3C6 <wizard_Tools.include.bb2@285>        Select popev
0001F3D4 <wizard_Tools.include.bb2@286>        Case #IDCMP_IDCMPUPDATE
0001F42E <wizard_Tools.include.bb2@287>          If WZGadName = "POPUPMENU" + Str$(_page)
0001F43E <wizard_Tools.include.bb2@288>            selected = WZInput + 1
0001F444 <wizard_Tools.include.bb2@289>            exit = True
0001F458 <wizard_Tools.include.bb2@291>        Case #IDCMP_MOUSEBUTTONS
0001F462 <wizard_Tools.include.bb2@292>          mb.b = MButtons
0001F488 <wizard_Tools.include.bb2@293>          If (mb = 1) OR (mb=2)
0001F48E <wizard_Tools.include.bb2@294>            FlushEvents
0001F494 <wizard_Tools.include.bb2@295>            exit = True
0001F496 <wizard_Tools.include.bb2@297>        End Select
0001F49C <wizard_Tools.include.bb2@298>      Else
0001F4A2 <wizard_Tools.include.bb2@299>        exit = True
0001F4AC <wizard_Tools.include.bb2@301>    Until exit
0001F4E4 <wizard_Tools.include.bb2@302>    WZCloseWindow WZID("WIN_POPUP")
0001F50E <wizard_Tools.include.bb2@303>    If win_use<>-1 Then Use Window win_use
0001F51A <wizard_Tools.include.bb2@305>    popupdata\selected_entry = selected
0001F524 <wizard_Tools.include.bb2@306>    Function Return selected
0001F538 <wizard_Tools.include.bb2@308> End Function
0001F54E <wizard_Tools.include.bb2@371> Statement WZ_ShowHelp{}
0001F572 <wizard_Tools.include.bb2@372>   Dim hilfe$(7)
0001F57E <wizard_Tools.include.bb2@373>   ew.l = EventWindow
0001F594 <wizard_Tools.include.bb2@374>   Use Window ew
0001F59E <wizard_Tools.include.bb2@375>   *g.Gadget = EventiAddress
0001F5B0 <wizard_Tools.include.bb2@376>   If *g<>0
0001F5C4 <wizard_Tools.include.bb2@380>     If *g\GadgetID > 0
0001F5EA <wizard_Tools.include.bb2@381>       t$ = WZGadHelp
0001F61C <wizard_Tools.include.bb2@382>       tlen.l = Len(t$)
0001F62E <wizard_Tools.include.bb2@383>       If tlen > 0
0001F644 <wizard_Tools.include.bb2@384>         x.l = SMouseX + 8
0001F65A <wizard_Tools.include.bb2@385>         y.l = SMouseY + 8
0001F6EC <wizard_Tools.include.bb2@386>         If Peek.l(Addr Window(WZID("WIN_HELP")))>0 Then CloseWindow WZID("WIN_HELP")
0001F6F8 <wizard_Tools.include.bb2@388>         AddIDCMP #IDCMP_NEWSIZE|#IDCMP_INTUITICKS|#IDCMP_DELTAMOVE
0001F782 <wizard_Tools.include.bb2@389>         Window WZID("WIN_HELP"),0,0,1,1,#WFLG_BORDERLESS,"",0,1
0001F7AA <wizard_Tools.include.bb2@390>         WZ_SetFont{"WIN_HELP"}
0001F7E4 <wizard_Tools.include.bb2@391>         Use Window WZID("WIN_HELP")
0001F82A <wizard_Tools.include.bb2@392>         *win.Window = Peek.l(Addr Window(WZID("WIN_HELP")))
0001F842 <wizard_Tools.include.bb2@393>         *scr.Screen = Peek.l(Addr Screen(0))
0001F85A <wizard_Tools.include.bb2@396>         lines.l = 1 : longest.l = 1 : anz.l = 0
0001F866 <wizard_Tools.include.bb2@397>         found.b = True : tl.l = tlen
0001F87E <wizard_Tools.include.bb2@398>         While found = True
0001F890 <wizard_Tools.include.bb2@400>           If p > 0
0001F8EE <wizard_Tools.include.bb2@401>             hilfe$(lines) = StrLeft(t$,p - 2)
0001F8FC <wizard_Tools.include.bb2@402>             lines + 1
0001F958 <wizard_Tools.include.bb2@403>             t$ = StrRight(t$,tl - p + 1)
0001F96C <wizard_Tools.include.bb2@404>             tl - p + 1
0001F972 <wizard_Tools.include.bb2@405>           Else
0001F978 <wizard_Tools.include.bb2@406>             found = False
0001F97E <wizard_Tools.include.bb2@408>         Wend
0001F9BA <wizard_Tools.include.bb2@409>         hilfe$(lines) = t$
0001F9E2 <wizard_Tools.include.bb2@410>         For i.l = 1 To lines
0001F9F2 <wizard_Tools.include.bb2@412>         Next i
0001FA04 <wizard_Tools.include.bb2@414>         If (breite > 4)
0001FA0A <wizard_Tools.include.bb2@415>           lgth.l = tlen
0001FA18 <wizard_Tools.include.bb2@416>           ww.l = breite + 12
0001FA34 <wizard_Tools.include.bb2@417>           wh.l = WZYFontsize * lines + 6
0001FA74 <wizard_Tools.include.bb2@419>           If (x + ww) > *scr\Width Then wx = *scr\Width - ww Else wx = x
0001FAB4 <wizard_Tools.include.bb2@420>           If (y + wh) > *scr\Height Then wy = *scr\Height - wh Else wy = y
0001FACE <wizard_Tools.include.bb2@421>           If (wy < 0) Then wy = 0
0001FAE8 <wizard_Tools.include.bb2@422>           If (wx < 0) Then wx = 0
0001FB10 <wizard_Tools.include.bb2@423>           If ww > *scr\Width Then ww = *scr\Width
0001FB38 <wizard_Tools.include.bb2@424>           If wh > *scr\Height Then wh = *scr\Height
0001FB58 <wizard_Tools.include.bb2@425>           MoveWindow_ *win,wx,wy
0001FB78 <wizard_Tools.include.bb2@426>           SizeWindow_ *win,ww,wh
0001FBA4 <wizard_Tools.include.bb2@427>           Repeat : Delay_ 2 : Until Event = #IDCMP_NEWSIZE
0001FBAA <wizard_Tools.include.bb2@428>           FlushEvents
0001FBBC <wizard_Tools.include.bb2@430>           If wzbubblehelpbackground = 0
0001FBCC <wizard_Tools.include.bb2@432>             wzbubblehelpbackground = screen_GetPenRGB{#WZHELP_BACKGROUND}
0001FBE6 <wizard_Tools.include.bb2@433>             If wzbubblehelpbackground = 1 Then wzbubblehelpbackground = 0
0001FC00 <wizard_Tools.include.bb2@434>             If wzbubblehelpbackground = 0 Then wzbubblehelpbackground = 2
0001FC28 <wizard_Tools.include.bb2@439>           For i = 1 To lines
0001FC38 <wizard_Tools.include.bb2@441>           Next i
0001FC4E <wizard_Tools.include.bb2@442>           Use Window ew
0001FC60 <wizard_Tools.include.bb2@447> End Statement
0001FC7A <wizard_Tools.include.bb2@450> Statement WZ_HideHelp{@test.l}
0001FCB0 <wizard_Tools.include.bb2@452>   helpwin_addr.l = Addr Window( WZID("WIN_HELP") )
0001FCBA <wizard_Tools.include.bb2@454>   If helpwin_addr
0001FCC8 <wizard_Tools.include.bb2@456>     *win.Window = Peek.l(helpwin_addr)
0001FCDA <wizard_Tools.include.bb2@457>     If (*win <> 0)
0001FD16 <wizard_Tools.include.bb2@458>      CloseWindow WZID("WIN_HELP")
0001FD2E <wizard_Tools.include.bb2@459>      Use Window EventWindow
0001FD32 <wizard_Tools.include.bb2@463> End Statement
0001FD60 <wizard_Tools.include.bb2@498> Statement WZ_ShowMessage{smt$,@mode.l}
0001FD7A <wizard_Tools.include.bb2@500>   win_use = Used Window
0001FDA2 <wizard_Tools.include.bb2@501>   n$=""
0001FDCC <wizard_Tools.include.bb2@502>   If mode = -1 Then mode = 1 Else mode = 0
0001FE06 <wizard_Tools.include.bb2@503>   Use Window WZID("WIN_PROGRESS")
0001FE44 <wizard_Tools.include.bb2@504>   If Peek.l(Addr Window(Used Window)) = 0
0001FEEE <wizard_Tools.include.bb2@505>     WZWindow WZID("WIN_PROGRESS"),gui,16,-2,-2,-2,-2,WZID("WIN_PROGRESS")
0001FF28 <wizard_Tools.include.bb2@507>   Use Window WZID("WIN_PROGRESS")
0001FF60 <wizard_Tools.include.bb2@508>   WZPrint "PROGRESS_PAGE",mode
0001FFEC <wizard_Tools.include.bb2@510>   WZPrint "FORTSCHRITT"+Str$(mode),smt$
0002003C <wizard_Tools.include.bb2@511>   WZPrint "GAUGE",0,100,&n$
00020066 <wizard_Tools.include.bb2@512>   If win_use<>-1 Then Use Window win_use
0002007E <wizard_Tools.include.bb2@514> End Statement
00020094 <wizard_Tools.include.bb2@516> Statement WZ_HideMessage{}
000200AE <wizard_Tools.include.bb2@518>   win_use = Used Window
000200E8 <wizard_Tools.include.bb2@519>   Use Window WZID("WIN_PROGRESS")
00020126 <wizard_Tools.include.bb2@520>   If Peek.l(Addr Window(Used Window)) <> 0
0002015E <wizard_Tools.include.bb2@521>     WZCloseWindow WZID("WIN_PROGRESS")
00020188 <wizard_Tools.include.bb2@523>   If win_use<>-1 Then Use Window win_use
0002018C <wizard_Tools.include.bb2@525> End Statement
000201B6 <wizard_Tools.include.bb2@558> Function.s WZ_GetStringField{wzgadid$}
000201EA <wizard_Tools.include.bb2@559>    straddr.l = WZInput(wzgadid$)
000201FC <wizard_Tools.include.bb2@560>    If straddr<>0
0002021A <wizard_Tools.include.bb2@561>      Function Return Peek$(straddr)
00020220 <wizard_Tools.include.bb2@562>    Else
0002023E <wizard_Tools.include.bb2@563>      Function Return ""
0002025C <wizard_Tools.include.bb2@565> End Function
00020286 <wizard_Tools.include.bb2@568> Statement WZ_LockWindow{id$}
000202A0 <wizard_Tools.include.bb2@569>   usedwin.l = Used Window
000202E6 <wizard_Tools.include.bb2@570>   Use Window WZID(id$)
000202FC <wizard_Tools.include.bb2@571>   WZ_LockWindow_ WZHandle
00020326 <wizard_Tools.include.bb2@572>   If usedwin<>-1 Then Use Window usedwin
0002033E <wizard_Tools.include.bb2@573> End Statement
00020368 <wizard_Tools.include.bb2@575> Statement WZ_UnlockWindow{id$}
00020382 <wizard_Tools.include.bb2@576>   usedwin.l = Used Window
000203C8 <wizard_Tools.include.bb2@577>   Use Window WZID(id$)
000203DE <wizard_Tools.include.bb2@578>   WZ_UnlockWindow_ WZHandle
00020408 <wizard_Tools.include.bb2@579>   If usedwin<>-1 Then Use Window usedwin
00020420 <wizard_Tools.include.bb2@580> End Statement
00020420 <wizard_Table.include.bb2@84> XINCLUDE "screen.include.bb2"
00020448 <wizard_Table.include.bb2@158> Dim List wzrow.wzrow(0)
00020470 <wizard_Table.include.bb2@159> Dim List wzimage.wzimage(0)
000204B2 <wizard_Table.include.bb2@335> Statement WZ_DrawImage{gadgetid$,image_name$,wx.l,wy.l}
000204CC <wizard_Table.include.bb2@359> End Statement
000204F6 <wizard_Table.include.bb2@361> Statement WZ_KillImages{gadgetid$}
0002050E <wizard_Table.include.bb2@370> End Statement
00020538 <wizard_Table.include.bb2@390> Function.l WZ_ImageHeight{image_name$}
00020552 <wizard_Table.include.bb2@398> End Function
0002057C <wizard_Table.include.bb2@400> Function.l WZ_ImageWidth{image_name$}
00020596 <wizard_Table.include.bb2@408> End Function
000205C0 <wizard_Table.include.bb2@442> Statement RestoreTable{gadgetid$}
000205E8 <wizard_Table.include.bb2@444>   dir$ = "RAM:T/"
00020634 <wizard_Table.include.bb2@445>   ClearType wztabledata
0002063E <wizard_Table.include.bb2@446>   ClearList wzrow()
000206AA <wizard_Table.include.bb2@448>   If Exists(dir$+gadgetid$+".data")
00020724 <wizard_Table.include.bb2@449>     If OpenFile(10,dir$ + gadgetid$ + ".data")
00020782 <wizard_Table.include.bb2@450>       ReadType 10,wztabledata
0002079A <wizard_Table.include.bb2@451>       CloseFile 10
00020814 <wizard_Table.include.bb2@453>     If OpenFile(10,dir$ + gadgetid$ + ".content")
00020830 <wizard_Table.include.bb2@454>       lf.l = Lof(10)
00020854 <wizard_Table.include.bb2@455>       While Loc(10)<>lf
00020866 <wizard_Table.include.bb2@456>         If AddLast(wzrow())
000208C2 <wizard_Table.include.bb2@457>           ReadType 10,wzrow()
000208C8 <wizard_Table.include.bb2@459>       Wend
000208E0 <wizard_Table.include.bb2@460>       CloseFile 10
000208F8 <wizard_Table.include.bb2@464> End Statement
00020922 <wizard_Table.include.bb2@467> Statement SaveTable{gadgetid$}
0002094A <wizard_Table.include.bb2@469>   dir$ = "RAM:T/"
000209AC <wizard_Table.include.bb2@470>   DeleteFile_ dir$ + gadgetid$ + ".data"
00020A0E <wizard_Table.include.bb2@471>   DeleteFile_ dir$ + gadgetid$ + ".content"
00020A88 <wizard_Table.include.bb2@473>   If OpenFile(10,dir$ + gadgetid$ + ".data")
00020A92 <wizard_Table.include.bb2@474>     wztabledata\changed = False
00020AF0 <wizard_Table.include.bb2@475>     WriteType 10,wztabledata
00020B08 <wizard_Table.include.bb2@476>     CloseFile 10
00020B82 <wizard_Table.include.bb2@478>   If OpenFile(10,dir$ + gadgetid$ + ".content")
00020B8C <wizard_Table.include.bb2@479>     ResetList wzrow()
00020B9E <wizard_Table.include.bb2@480>     While NextItemFast(wzrow())
00020BFA <wizard_Table.include.bb2@481>       WriteType 10,wzrow()
00020C00 <wizard_Table.include.bb2@482>     Wend
00020C18 <wizard_Table.include.bb2@483>     CloseFile 10
00020C1E <wizard_Table.include.bb2@487>   DefaultOutput
00020C6A <wizard_Table.include.bb2@488>   ClearType wztabledata
00020C74 <wizard_Table.include.bb2@489>   ClearList wzrow()
00020C8C <wizard_Table.include.bb2@490> End Statement
00020CB6 <wizard_Table.include.bb2@494> Statement SetActualTable{gadgetid$}
00020CFE <wizard_Table.include.bb2@497>   If (gadgetid$<>wztabledata\id)
00020D3A <wizard_Table.include.bb2@498>     If (wztabledata\id<>"")
00020D5A <wizard_Table.include.bb2@499>       If (wztabledata\edit_ = True)
00020D8E <wizard_Table.include.bb2@500>         *g.Gadget = WZGadAddr(gadgetid$ )
00020DA0 <wizard_Table.include.bb2@501>         If *g<>0
00020DB0 <wizard_Table.include.bb2@502>           id.l = *g\GadgetID
00020DE2 <wizard_Table.include.bb2@503>           If GTGadPtr(wztabledata\GTListID,0) <> 0
00020E06 <wizard_Table.include.bb2@504>             zeile.l  =  wztabledata\aktuelle_zeile + (wztabledata\erste_zeile-1)
00020E16 <wizard_Table.include.bb2@505>             spalte.l =  wztabledata\aktuelle_spalte
00020E50 <wizard_Table.include.bb2@506>             text$ = GTGetString(wztabledata\GTListID,0)
00020E5A <wizard_Table.include.bb2@512>             ResetList wzrow()
00020E6C <wizard_Table.include.bb2@513>             While NextItemFast(wzrow())
00020E8C <wizard_Table.include.bb2@514>               If Index(wzrow())-1 = zeile
00020EE2 <wizard_Table.include.bb2@515>                 If wzrow()\cell[spalte] <> text$
00020F28 <wizard_Table.include.bb2@516>                   wzrow()\cell[spalte] = text$
00020F3A <wizard_Table.include.bb2@517>                   wzrow()\changed = True
00020F44 <wizard_Table.include.bb2@518>                   wztabledata\changed = True
00020F4A <wizard_Table.include.bb2@521>             Wend
00020F54 <wizard_Table.include.bb2@522>             wztabledata\edit_ = False
00020F72 <wizard_Table.include.bb2@523>             DetachGTList wztabledata\GTListID
00020F8A <wizard_Table.include.bb2@524>             Free GTList wztabledata\GTListID
00020F90 <wizard_Table.include.bb2@526>         Else
0002101C <wizard_Table.include.bb2@527>           dummy = RTEZRequest("","The designated table "+gadgetid$+" does not exist.","_Ok")
0002106E <wizard_Table.include.bb2@530>       If (wztabledata\changed = True) Then SaveTable{wztabledata\id}
0002109C <wizard_Table.include.bb2@532>     RestoreTable{gadgetid$}
000210BA <wizard_Table.include.bb2@534>   Use Window wztabledata\window_
000210D2 <wizard_Table.include.bb2@535> End Statement
00021194 <wizard_Table.include.bb2@549> Statement WZ_AddRow{gadgetid$,@n1$,@n2$,@n3$,@n4$,@n5$,@n6$,@n7$,@n8$,@n9$}
000211C2 <wizard_Table.include.bb2@552>   SetActualTable{gadgetid$}
000211D4 <wizard_Table.include.bb2@554>   Select wztabledata\order
000211F2 <wizard_Table.include.bb2@555>   Case 0 : dummy.l = AddLast(wzrow())
00021216 <wizard_Table.include.bb2@556>   Case 1 : dummy = AddFirst(wzrow())
00021218 <wizard_Table.include.bb2@557>   End Select
0002122C <wizard_Table.include.bb2@559>   If dummy = True
00021278 <wizard_Table.include.bb2@560>     wzrow()\cell[1] = n1$
000212C4 <wizard_Table.include.bb2@561>     wzrow()\cell[2] = n2$
00021310 <wizard_Table.include.bb2@562>     wzrow()\cell[3] = n3$
0002135C <wizard_Table.include.bb2@563>     wzrow()\cell[4] = n4$
000213A8 <wizard_Table.include.bb2@564>     wzrow()\cell[5] = n5$
000213F4 <wizard_Table.include.bb2@565>     wzrow()\cell[6] = n6$
00021440 <wizard_Table.include.bb2@566>     wzrow()\cell[7] = n7$
0002148C <wizard_Table.include.bb2@567>     wzrow()\cell[8] = n8$
000214D8 <wizard_Table.include.bb2@568>     wzrow()\cell[9] = n9$
00021502 <wizard_Table.include.bb2@570>     For i.l = 1 To #MAX_SPALTEN - 1
00021524 <wizard_Table.include.bb2@571>       wzrow()\FrontPen[i] = wztabledata\FrontPen
00021546 <wizard_Table.include.bb2@572>       wzrow()\BackPen[i] = wztabledata\BackPen
00021556 <wizard_Table.include.bb2@573>     Next i
0002156E <wizard_Table.include.bb2@574>     wztabledata\maxzeilen + 1
00021578 <wizard_Table.include.bb2@575>     wztabledata\changed = True
00021592 <wizard_Table.include.bb2@578> End Statement
000215BC <wizard_Table.include.bb2@606> Statement WZ_ClearTable{gadgetid$}
000215EA <wizard_Table.include.bb2@609>   SetActualTable{gadgetid$}
000215F4 <wizard_Table.include.bb2@611>   ClearList wzrow()
00021600 <wizard_Table.include.bb2@612>   wztabledata\maxzeilen = 0
0002160A <wizard_Table.include.bb2@613>   wztabledata\changed = True
00021616 <wizard_Table.include.bb2@614>   wztabledata\erste_zeile = 1
00021622 <wizard_Table.include.bb2@615>   wztabledata\aktuelle_zeile = 0
0002163A <wizard_Table.include.bb2@616> End Statement
0002167C <wizard_Table.include.bb2@620> Statement WZ_InitTable{winid$,gadgetid$,spalten.w,@order.w}
000216D2 <wizard_Table.include.bb2@629>   DeleteFile_ "ram:t/" + gadgetid$ + ".data"
00021728 <wizard_Table.include.bb2@630>   DeleteFile_ "ram:t/" + gadgetid$ + ".content"
00021756 <wizard_Table.include.bb2@631>   SetActualTable{gadgetid$}
00021792 <wizard_Table.include.bb2@633>   wztabledata\window_ = WZID(winid$)
000217CE <wizard_Table.include.bb2@634>   wztabledata\GTListID= WZID(winid$)
00021806 <wizard_Table.include.bb2@635>   wztabledata\id = gadgetid$
00021810 <wizard_Table.include.bb2@636>   wztabledata\readonly = False
0002181A <wizard_Table.include.bb2@637>   wztabledata\sortable = True
00021824 <wizard_Table.include.bb2@638>   wztabledata\hlines = False
0002182E <wizard_Table.include.bb2@639>   wztabledata\vlines = True
0002183C <wizard_Table.include.bb2@641>   wztabledata\spalten = spalten
00021848 <wizard_Table.include.bb2@643>   wztabledata\erste_zeile = 1
00021854 <wizard_Table.include.bb2@644>   wztabledata\aktuelle_zeile=  0
00021862 <wizard_Table.include.bb2@646>   wztabledata\FrontPen = 1;#WZRD_TEXTPEN
00021870 <wizard_Table.include.bb2@647>   wztabledata\BackPen =  0;#WZRD_BACKGROUNDPEN
0002187E <wizard_Table.include.bb2@648>   wztabledata\TitlePen = 2;#WZRD_BARDETAILPEN
0002188C <wizard_Table.include.bb2@649>   wztabledata\TitleBack = 3;#WZRD_BARBLOCKPEN
0002189A <wizard_Table.include.bb2@650>   wztabledata\Highlight = 3;#WZRD_FILLPEN
000218B2 <wizard_Table.include.bb2@652>   If order = -1 Then order = 0
000218BE <wizard_Table.include.bb2@653>   wztabledata\order = order
000218C8 <wizard_Table.include.bb2@655>   wztabledata\changed = True
000218F6 <wizard_Table.include.bb2@656>   For i.w = 1 To spalten.w
00021914 <wizard_Table.include.bb2@657>     wztabledata\priority[i] = 1
0002192E <wizard_Table.include.bb2@658>     wztabledata\editable_[i] = False
00021968 <wizard_Table.include.bb2@659>     wztabledata\title[i] = ""
00021986 <wizard_Table.include.bb2@660>     wztabledata\entrytype[i] = #WNE_TEXT
00021994 <wizard_Table.include.bb2@661>   Next i
000219AE <wizard_Table.include.bb2@662> End Statement
000219D8 <wizard_Table.include.bb2@664> Statement WZ_KillTable{gadgetid$}
00021A06 <wizard_Table.include.bb2@667>   SetActualTable{gadgetid$}
00021A5C <wizard_Table.include.bb2@668>   DeleteFile_ "ram:t/" + gadgetid$ + ".data"
00021AB2 <wizard_Table.include.bb2@669>   DeleteFile_ "ram:t/" + gadgetid$ + ".content"
00021AE0 <wizard_Table.include.bb2@670>   WZ_KillImages{gadgetid$}
00021B2C <wizard_Table.include.bb2@671>   ClearType wztabledata
00021B36 <wizard_Table.include.bb2@672>   ClearList wzrow()
00021B4E <wizard_Table.include.bb2@673> End Statement
00021B8C <wizard_Table.include.bb2@682> Statement WZ_SetTableColors{gadgetid$,fp.l,bp.l,@tp.w,@tb.w,@hl.w}
00021BBA <wizard_Table.include.bb2@684>   SetActualTable{gadgetid$}
00021BC6 <wizard_Table.include.bb2@685>   wztabledata\FrontPen = fp
00021BD2 <wizard_Table.include.bb2@686>   wztabledata\BackPen = bp
00021BF2 <wizard_Table.include.bb2@687>   If tp<>-1 Then  wztabledata\TitlePen = tp
00021C12 <wizard_Table.include.bb2@688>   If tb<>-1 Then  wztabledata\TitleBack = tb
00021C32 <wizard_Table.include.bb2@689>   If hl<>-1 Then  wztabledata\Highlight = hl
00021C3C <wizard_Table.include.bb2@690>   wztabledata\changed = True
00021C54 <wizard_Table.include.bb2@691> End Statement
00021D16 <wizard_Table.include.bb2@725> Statement WZ_SetTableTitle{gadgetid$,@n1$,@n2$,@n3$,@n4$,@n5$,@n6$,@n7$,@n8$,@n9$}
00021D44 <wizard_Table.include.bb2@728>   SetActualTable{gadgetid$}
00021D8A <wizard_Table.include.bb2@729>   wztabledata\title[1] = n1$
00021DD0 <wizard_Table.include.bb2@730>   wztabledata\title[2] = n2$
00021E16 <wizard_Table.include.bb2@731>   wztabledata\title[3] = n3$
00021E5C <wizard_Table.include.bb2@732>   wztabledata\title[4] = n4$
00021EA2 <wizard_Table.include.bb2@733>   wztabledata\title[5] = n5$
00021EE8 <wizard_Table.include.bb2@734>   wztabledata\title[6] = n6$
00021F2E <wizard_Table.include.bb2@735>   wztabledata\title[7] = n7$
00021F74 <wizard_Table.include.bb2@736>   wztabledata\title[8] = n8$
00021F8E <wizard_Table.include.bb2@737> End Statement
00021FBC <wizard_Table.include.bb2@746> Statement WZ_SetSortable{gadgetid$,mode.b}
00021FEA <wizard_Table.include.bb2@748>   SetActualTable{gadgetid$}
00021FF8 <wizard_Table.include.bb2@749>   wztabledata\sortable = mode
00022010 <wizard_Table.include.bb2@750> End Statement
0002206E <wizard_Table.include.bb2@752> Statement WZ_SetPriority{gadgetid$,@n1.w,@n2.w,@n3.w,@n4.w,@n5.w,@n6.w,@n7.w,@n8.w,@n9.w}
0002209C <wizard_Table.include.bb2@755>   SetActualTable{gadgetid$}
000220CC <wizard_Table.include.bb2@757>   If n1<>-1 Then  wztabledata\priority[1] = n1
000220FC <wizard_Table.include.bb2@758>   If n2<>-1 Then  wztabledata\priority[2] = n2
0002212C <wizard_Table.include.bb2@759>   If n3<>-1 Then  wztabledata\priority[3] = n3
0002215C <wizard_Table.include.bb2@760>   If n4<>-1 Then  wztabledata\priority[4] = n4
0002218C <wizard_Table.include.bb2@761>   If n5<>-1 Then  wztabledata\priority[5] = n5
000221BC <wizard_Table.include.bb2@762>   If n6<>-1 Then  wztabledata\priority[6] = n6
000221EC <wizard_Table.include.bb2@763>   If n7<>-1 Then  wztabledata\priority[7] = n7
0002221C <wizard_Table.include.bb2@764>   If n8<>-1 Then  wztabledata\priority[8] = n8
0002224C <wizard_Table.include.bb2@765>   If n9<>-1 Then  wztabledata\priority[9] = n9
00022264 <wizard_Table.include.bb2@767> End Statement
00022296 <wizard_Table.include.bb2@793> Function.s WZ_GetCell{gadgetid$,zeile.l,spalte.l}
000222C0 <wizard_Table.include.bb2@796>   If (zeile>0) AND (spalte>0)
000222EE <wizard_Table.include.bb2@797>     SetActualTable{gadgetid$}
000222F8 <wizard_Table.include.bb2@798>     ResetList wzrow()
0002230A <wizard_Table.include.bb2@799>     While NextItemFast(wzrow())
0002232A <wizard_Table.include.bb2@800>       If Index(wzrow())-1 = zeile
00022370 <wizard_Table.include.bb2@801>         r$ = wzrow()\cell[spalte]
0002239A <wizard_Table.include.bb2@802>         Function Return r$
000223A0 <wizard_Table.include.bb2@804>     Wend
000223BE <wizard_Table.include.bb2@806> End Function
00022400 <wizard_Table.include.bb2@809> Function.b WZ_SetCell{gadgetid$,zeile.l,spalte.l,wert$}
0002242E <wizard_Table.include.bb2@812>   SetActualTable{gadgetid$}
00022438 <wizard_Table.include.bb2@813>   ResetList wzrow()
0002244A <wizard_Table.include.bb2@814>   While NextItemFast(wzrow())
0002246A <wizard_Table.include.bb2@815>     If Index(wzrow())-1 = zeile
000224C0 <wizard_Table.include.bb2@816>       If wzrow()\cell[spalte] <> wert$
00022506 <wizard_Table.include.bb2@817>         wzrow()\cell[spalte] = wert$
00022518 <wizard_Table.include.bb2@818>         wzrow()\changed = True
00022522 <wizard_Table.include.bb2@819>         wztabledata\changed = True
0002252A <wizard_Table.include.bb2@820>         Function Return True
00022530 <wizard_Table.include.bb2@823>   Wend
0002254C <wizard_Table.include.bb2@824> End Function
00022576 <wizard_Table.include.bb2@828> Statement WZ_EditExit{gadgetid$}
000225A4 <wizard_Table.include.bb2@831>   SetActualTable{gadgetid$}
000225C4 <wizard_Table.include.bb2@832>   If wztabledata\edit_ = True
000225F8 <wizard_Table.include.bb2@833>     *g.Gadget = WZGadAddr(gadgetid$)
00022606 <wizard_Table.include.bb2@834>     *w.Window = WZWindowAddr
00022618 <wizard_Table.include.bb2@835>     If *g<>0
00022628 <wizard_Table.include.bb2@836>       id.l = *g\GadgetID
00022636 <wizard_Table.include.bb2@837>       zeile.w  =  wztabledata\aktuelle_zeile
00022644 <wizard_Table.include.bb2@838>       spalte.w =  wztabledata\aktuelle_spalte
0002267E <wizard_Table.include.bb2@839>       text$ = GTGetString(wztabledata\GTListID,0)
000226E6 <wizard_Table.include.bb2@845>       z.b = WZ_SetCell{gadgetid$,zeile,spalte,text$}
000226F0 <wizard_Table.include.bb2@846>       wztabledata\edit_ = False
0002270E <wizard_Table.include.bb2@847>       DetachGTList wztabledata\GTListID
00022726 <wizard_Table.include.bb2@848>       Free GTList wztabledata\GTListID
0002273E <wizard_Table.include.bb2@851> End Statement
0002276C <wizard_Table.include.bb2@854> Statement WZ_SetActiveRow{gadgetid$,zeile.l}
0002279A <wizard_Table.include.bb2@856>   SetActualTable{gadgetid$}
000227A6 <wizard_Table.include.bb2@866>   wztabledata\aktuelle_zeile = zeile
000227BE <wizard_Table.include.bb2@867> End Statement
000227EC <wizard_Table.include.bb2@869> Statement WZ_SetActiveColumn{gadgetid$,spalte.l}
0002281A <wizard_Table.include.bb2@871>   SetActualTable{gadgetid$}
00022826 <wizard_Table.include.bb2@873>   wztabledata\aktuelle_spalte = spalte
0002283E <wizard_Table.include.bb2@874> End Statement
00022868 <wizard_Table.include.bb2@889> Function.w WZ_Row{gadgetid$}
00022896 <wizard_Table.include.bb2@892>   SetActualTable{gadgetid$}
000228C0 <wizard_Table.include.bb2@893>   If (wztabledata\aktuelle_zeile>0) AND (NOT wztabledata\readonly)
000228D0 <wizard_Table.include.bb2@894>     l.l = wztabledata\aktuelle_zeile
000228F0 <wizard_Table.include.bb2@895>     If l > wztabledata\maxzeilen Then l = 0
000228FA <wizard_Table.include.bb2@896>     Function Return l
00022900 <wizard_Table.include.bb2@897>   Else
0002290A <wizard_Table.include.bb2@898>     Function Return 0
00022924 <wizard_Table.include.bb2@900> End Function
0002294E <wizard_Table.include.bb2@902> Function.w WZ_Column{gadgetid$}
0002297C <wizard_Table.include.bb2@905>   SetActualTable{gadgetid$}
00022990 <wizard_Table.include.bb2@906>   If NOT wztabledata\readonly
000229A0 <wizard_Table.include.bb2@907>     Function Return wztabledata\aktuelle_spalte
000229BA <wizard_Table.include.bb2@909> End Function
000229EC <wizard_Table.include.bb2@926> Function.w WZ_MouseRow{gadgetid$,mx.w,my.w}
00022A1A <wizard_Table.include.bb2@929>   SetActualTable{gadgetid$}
00022A4E <wizard_Table.include.bb2@930>   *gad.Gadget = WZGadAddr(gadgetid$)
00022A60 <wizard_Table.include.bb2@931>   If *gad<>0
00022A6A <wizard_Table.include.bb2@932>     wx.w = wztabledata\LeftEdge
00022A78 <wizard_Table.include.bb2@933>     wy.w = wztabledata\TopEdge
00022A86 <wizard_Table.include.bb2@934>     ww.w = wztabledata\Width
00022A94 <wizard_Table.include.bb2@935>     wh.w = wztabledata\Height
00022AEA <wizard_Table.include.bb2@936>     If (mx > wx) AND (mx<(wx + ww)) AND (my>wy) AND (my<(wy+wh))
00022AF8 <wizard_Table.include.bb2@937>       gh.w = wztabledata\columnheight
00022B28 <wizard_Table.include.bb2@938>       If my < (wy + WZYFontsize)
00022B2E <wizard_Table.include.bb2@939>         row.w = 0
00022B34 <wizard_Table.include.bb2@940>       Else
00022BAA <wizard_Table.include.bb2@941>         row.w = (wztabledata\erste_zeile-1) + Int( (my - (wy+WZYFontsize))) / gh + 1
00022BB4 <wizard_Table.include.bb2@943>       Function Return row
00022BBA <wizard_Table.include.bb2@944>     Else
00022BC4 <wizard_Table.include.bb2@945>       Function Return 0
00022BCA <wizard_Table.include.bb2@947>   Else
00022BD4 <wizard_Table.include.bb2@948>     Function Return 0
00022BEE <wizard_Table.include.bb2@950> End Function
00022C20 <wizard_Table.include.bb2@952> Function.w WZ_MouseColumn{gadgetid$,mx.w,my.w}
00022C4E <wizard_Table.include.bb2@955>   SetActualTable{gadgetid$}
00022C82 <wizard_Table.include.bb2@956>   *gad.Gadget = WZGadAddr(gadgetid$)
00022C94 <wizard_Table.include.bb2@957>   If *gad<>0
00022C9E <wizard_Table.include.bb2@958>     wx.l = wztabledata\LeftEdge
00022CAC <wizard_Table.include.bb2@959>     wy.l = wztabledata\TopEdge
00022CBA <wizard_Table.include.bb2@960>     ww.l = wztabledata\Width
00022CC8 <wizard_Table.include.bb2@961>     wh.l = wztabledata\Height
00022CCE <wizard_Table.include.bb2@962>     x.l = wx
00022D28 <wizard_Table.include.bb2@963>     If (mx > wx) AND (mx<(wx+ww)) AND (my>wy) AND (my<(wy+wh))
00022D5C <wizard_Table.include.bb2@964>       For j.w = 1 To wztabledata\spalten
00022D80 <wizard_Table.include.bb2@965>         x + wztabledata\breite[j]
00022D9C <wizard_Table.include.bb2@966>         If (mx < x) Then Function Return j
00022DAA <wizard_Table.include.bb2@967>       Next j
00022DB0 <wizard_Table.include.bb2@968>     Else
00022DBA <wizard_Table.include.bb2@969>       Function Return 0
00022DC0 <wizard_Table.include.bb2@971>   Else
00022DCA <wizard_Table.include.bb2@972>     Function Return 0
00022DE4 <wizard_Table.include.bb2@974> End Function
00022E0E <wizard_Table.include.bb2@993> Statement WZ_DrawTable{gadgetid$}
00022E3C <wizard_Table.include.bb2@996>   SetActualTable{gadgetid$}
00022E4E <wizard_Table.include.bb2@998>   If FirstItem(wzimage())
00022E98 <wizard_Table.include.bb2@1000>       If wzimage()\table = gadgetid$
00022ED8 <wizard_Table.include.bb2@1001>         If wztabledata\columnheight < wzimage()\Height Then wztabledata\columnheight = wzimage()\Height + 2
00022EEC <wizard_Table.include.bb2@1003>     Until NOT NextItemFast(wzimage())
00022F0A <wizard_Table.include.bb2@1005>   If wztabledata\scale_images = Off
00022F58 <wizard_Table.include.bb2@1006>     If wztabledata\columnheight < WZYFontsize + 2 Then wztabledata\columnheight = WZYFontsize + 2
00022F5E <wizard_Table.include.bb2@1007>   Else
00022F78 <wizard_Table.include.bb2@1008>     wztabledata\columnheight = WZYFontsize + 2
00022F96 <wizard_Table.include.bb2@1011>   Use Window wztabledata\window_
00022FCA <wizard_Table.include.bb2@1012>   *g.Gadget = WZGadAddr(gadgetid$)
00022FDC <wizard_Table.include.bb2@1013>   If *g<>0
00022FF4 <wizard_Table.include.bb2@1014>     wztabledata\LeftEdge = *g\LeftEdge + 1
0002300E <wizard_Table.include.bb2@1015>     wztabledata\TopEdge  = *g\TopEdge + 1
00023028 <wizard_Table.include.bb2@1016>     wztabledata\Width    = *g\Width  - 3
00023042 <wizard_Table.include.bb2@1017>     wztabledata\Height   = *g\Height - 1
00023056 <wizard_Table.include.bb2@1018>     wztabledata\GadgetID = *g\GadgetID
0002307C <wizard_Table.include.bb2@1019>     *tablewin.Window = WZWindowAddr : DrPort *tablewin\RPort
0002308C <wizard_Table.include.bb2@1020>     zeilenhoehe.l = WZYFontsize
0002309E <wizard_Table.include.bb2@1021>     If zeilenhoehe > 72
000230B2 <wizard_Table.include.bb2@1022>       zeilenhoehe = *tablewin\IFont\tf_YSize
000230E0 <wizard_Table.include.bb2@1023>       error{"There was a problem with WZYFontSize.\\nThis problem is related to AFA_OS.\\nApplication may fail."}
0002310E <wizard_Table.include.bb2@1026>     WZ_EditExit{gadgetid$} ; sichern evtl. gemachter Eingaben im Gadget
00023126 <wizard_Table.include.bb2@1028>     If wztabledata\columnheight <> 0
0002314C <wizard_Table.include.bb2@1029>       wztabledata\zeilen = (wztabledata\Height - zeilenhoehe) / (wztabledata\columnheight)
00023152 <wizard_Table.include.bb2@1030>     Else
00023180 <wizard_Table.include.bb2@1031>       error{"There has been an error while processing WZ_DrawTable(). columnheight is 0."}
00023186 <wizard_Table.include.bb2@1032>       Statement Return
0002318E <wizard_Table.include.bb2@1037>     gesamtp.l = 0
000231C2 <wizard_Table.include.bb2@1038>     For p.w = 1 To wztabledata\spalten
0002320A <wizard_Table.include.bb2@1039>       If wztabledata\entrytype[p] = #WNE_TEXT Then gesamtp + wztabledata\priority[p]
00023218 <wizard_Table.include.bb2@1040>     Next p
0002324C <wizard_Table.include.bb2@1042>     For p = 1 To wztabledata\spalten
00023272 <wizard_Table.include.bb2@1043>       If wztabledata\entrytype[p] = #WNE_IMAGE
00023284 <wizard_Table.include.bb2@1044>         If FirstItem( wzimage())
0002328C <wizard_Table.include.bb2@1045>           image_width.l = 0
000232BC <wizard_Table.include.bb2@1047>             If image_width < wzimage()\Width Then image_width = wzimage()\Width
000232D0 <wizard_Table.include.bb2@1048>           Until NOT NextItemFast(wzimage())
000232DE <wizard_Table.include.bb2@1050>         image_width + 2
000232FA <wizard_Table.include.bb2@1051>         wztabledata\breite[p] = image_width
00023308 <wizard_Table.include.bb2@1054>     Next p
0002331C <wizard_Table.include.bb2@1056>     table_width.l = wztabledata\Width - image_width
0002332E <wizard_Table.include.bb2@1057>     If gesamtp>0
00023362 <wizard_Table.include.bb2@1058>       For p = 1 To wztabledata\spalten
00023388 <wizard_Table.include.bb2@1059>         If wztabledata\entrytype[p] = #WNE_TEXT
000233B6 <wizard_Table.include.bb2@1060>           anteil.q = wztabledata\priority[p] / gesamtp
000233F4 <wizard_Table.include.bb2@1061>           wztabledata\breite[p] = Int(anteil * table_width)
00023402 <wizard_Table.include.bb2@1063>       Next p
00023454 <wizard_Table.include.bb2@1066>     DrBoxf  wztabledata\LeftEdge,wztabledata\TopEdge     ,wztabledata\LeftEdge+wztabledata\Width,wztabledata\TopEdge+wztabledata\Height-2,wztabledata\BackPen
0002349A <wizard_Table.include.bb2@1067>     DrBoxf  wztabledata\LeftEdge,wztabledata\TopEdge     ,wztabledata\LeftEdge+wztabledata\Width,wztabledata\TopEdge + zeilenhoehe,wztabledata\TitleBack
000234F2 <wizard_Table.include.bb2@1068>     DrLine wztabledata\LeftEdge,wztabledata\TopEdge+zeilenhoehe,wztabledata\LeftEdge+wztabledata\Width,wztabledata\TopEdge + zeilenhoehe,1
000234FC <wizard_Table.include.bb2@1069>     GTGZZPosition On
00023506 <wizard_Table.include.bb2@1070>     WJam 0
0002350C <wizard_Table.include.bb2@1071>     sx.w = 0
00023540 <wizard_Table.include.bb2@1073>     For x.w = 1 To wztabledata\spalten
00023562 <wizard_Table.include.bb2@1074>       If wztabledata\breite[x]>0
000235A8 <wizard_Table.include.bb2@1075>         a$ = wztabledata\title[x]
000235C4 <wizard_Table.include.bb2@1076>         sbreite.w = wztabledata\breite[x]
000235D4 <wizard_Table.include.bb2@1079>         DrMode 0
000235E8 <wizard_Table.include.bb2@1080>         If wztabledata\sorted_by = x
0002360E <wizard_Table.include.bb2@1081>           If wztabledata\align[x] = #ALIGN_LEFT
00023614 <wizard_Table.include.bb2@1082>             lw.w = 8
00023634 <wizard_Table.include.bb2@1083>             lx.w = wztabledata\LeftEdge + sx + sbreite - 8
0002363A <wizard_Table.include.bb2@1084>           Else
00023640 <wizard_Table.include.bb2@1085>             lw.w = 8
00023658 <wizard_Table.include.bb2@1086>             lx.w = wztabledata\LeftEdge + sx + 4
0002367E <wizard_Table.include.bb2@1088>           ly.w = 1 + wztabledata\TopEdge + zeilenhoehe * zeile.w
0002368C <wizard_Table.include.bb2@1089>           lh.w = zeilenhoehe - 3
000236BE <wizard_Table.include.bb2@1090>           DrBoxf lx-1,ly, lx+lw,ly+lh,0
0002372A <wizard_Table.include.bb2@1091>           DrLine lx-1,ly,  lx+(lw/2)-1,ly+lh, lx-1+lw,ly,  2
00023788 <wizard_Table.include.bb2@1092>           DrLine lx  ,ly,  lx+(lw/2)  ,ly+lh, lx  +lw,ly, 1
00023898 <wizard_Table.include.bb2@1096>         !WZ_CutCell {a$, sbreite}
000238CA <wizard_Table.include.bb2@1097>         SetSoftStyle_ DrPort,2,AskSoftStyle_(DrPort)
000238E4 <wizard_Table.include.bb2@1098>         Select wztabledata\align[x]
000238F2 <wizard_Table.include.bb2@1099>         Case #ALIGN_LEFT
0002395E <wizard_Table.include.bb2@1100>           DrText a$, wztabledata\LeftEdge + sx + 4, wztabledata\TopEdge + zeilenhoehe * zeile.w , wztabledata\TitlePen
0002396E <wizard_Table.include.bb2@1101>           sx + sbreite
00023982 <wizard_Table.include.bb2@1102>         Case #ALIGN_RIGHT
000239D2 <wizard_Table.include.bb2@1103>           sx + sbreite : tl.l = DrTextLen(a$) + 4
00023A3E <wizard_Table.include.bb2@1104>           DrText a$, wztabledata\LeftEdge + sx - tl , wztabledata\TopEdge + zeilenhoehe * zeile,wztabledata\TitlePen
00023A52 <wizard_Table.include.bb2@1105>         Case #ALIGN_CENTER
00023AA8 <wizard_Table.include.bb2@1106>           tl.l = (sbreite - DrTextLen(a$)) / 2
00023B14 <wizard_Table.include.bb2@1107>           DrText a$, wztabledata\LeftEdge + sx + tl , wztabledata\TopEdge + zeilenhoehe * zeile,wztabledata\TitlePen
00023B24 <wizard_Table.include.bb2@1108>           sx + sbreite
00023B26 <wizard_Table.include.bb2@1109>         End Select
00023B3E <wizard_Table.include.bb2@1111>         If x<wztabledata\spalten
00023B94 <wizard_Table.include.bb2@1112>           DrLine wztabledata\LeftEdge + sx    , wztabledata\TopEdge, wztabledata\LeftEdge + sx    , wztabledata\TopEdge+zeilenhoehe,1
00023BF6 <wizard_Table.include.bb2@1113>           DrLine wztabledata\LeftEdge + sx + 1, wztabledata\TopEdge, wztabledata\LeftEdge + sx + 1, wztabledata\TopEdge+zeilenhoehe,2
00023C04 <wizard_Table.include.bb2@1116>     Next x
00023C36 <wizard_Table.include.bb2@1117>     SetSoftStyle_ DrPort,0,AskSoftStyle_(DrPort)
00023C40 <wizard_Table.include.bb2@1118>     WJam 1
00023C82 <wizard_Table.include.bb2@1119>     If wztabledata\vlines = False Then linesh.l = zeilenhoehe+ 1 Else linesh = wztabledata\Height
00023C9E <wizard_Table.include.bb2@1120>     sx = wztabledata\breite[1]
00023CD2 <wizard_Table.include.bb2@1121>     For x = 2 To wztabledata\spalten
00023CF4 <wizard_Table.include.bb2@1122>       If wztabledata\breite[x]>0
00023D10 <wizard_Table.include.bb2@1123>         sbreite = wztabledata\breite[x]
00023D56 <wizard_Table.include.bb2@1124>         !SetDrMd{*tablewin\RPort,%0101010101010101}                   ;+ zeilenhoehe
00023DB8 <wizard_Table.include.bb2@1125>         DrLine wztabledata\LeftEdge + sx    , wztabledata\TopEdge + zeilenhoehe, wztabledata\LeftEdge + sx    , wztabledata\TopEdge+linesh - 2,1
00023E00 <wizard_Table.include.bb2@1126>         !SetDrMd{*tablewin\RPort,-1}
00023E10 <wizard_Table.include.bb2@1127>         sx + sbreite
00023E1E <wizard_Table.include.bb2@1129>     Next x
00023E28 <wizard_Table.include.bb2@1131>     wztabledata\is_open = True
00023E40 <wizard_Table.include.bb2@1133> End Statement
00023E6E <wizard_Table.include.bb2@1139> Statement WZ_HighlightRow{gadgetid$,zeile.w}
00023EA2 <wizard_Table.include.bb2@1142>   *bgad.Gadget = WZGadAddr(gadgetid$)
00023EB4 <wizard_Table.include.bb2@1143>   If *bgad> 0
00023ED2 <wizard_Table.include.bb2@1144>     Use Window wztabledata\window_
00023EDC <wizard_Table.include.bb2@1145>     wx.w = wztabledata\LeftEdge
00023EEA <wizard_Table.include.bb2@1146>     wy.w = wztabledata\TopEdge
00023EF8 <wizard_Table.include.bb2@1147>     ww.w = wztabledata\Width
00023F06 <wizard_Table.include.bb2@1148>     wh.w = wztabledata\Height
00023F14 <wizard_Table.include.bb2@1149>     gh.w = wztabledata\columnheight
00023F22 <wizard_Table.include.bb2@1151>     *tablewin.Window = WZWindowAddr
00023F3A <wizard_Table.include.bb2@1152>     DrPort *tablewin\RPort
00023F52 <wizard_Table.include.bb2@1154>     zeile = zeile - (wztabledata\erste_zeile-1)
00023FA6 <wizard_Table.include.bb2@1155>     If (zeile > 0) AND (zeile <= wztabledata\zeilen) AND (zeile<=wztabledata\maxzeilen) AND (wztabledata\readonly = False)
00023FE4 <wizard_Table.include.bb2@1156>       gy.q = WZYFontsize + (zeile-1) * gh
00024042 <wizard_Table.include.bb2@1158>       DrBoxf wx,wy + gy + 1 ,wx + ww,wy+gy + gh-1,wztabledata\Highlight
00024062 <wizard_Table.include.bb2@1160>       If wztabledata\vlines = True
0002407E <wizard_Table.include.bb2@1161>         sx  = wztabledata\breite[1]
000240B2 <wizard_Table.include.bb2@1162>         For j = 2 To wztabledata\spalten
000240D4 <wizard_Table.include.bb2@1163>           If wztabledata\breite[j]>0
000240F0 <wizard_Table.include.bb2@1164>             sbreite = wztabledata\breite[j]
00024136 <wizard_Table.include.bb2@1165>             !SetDrMd{*tablewin\RPort,%0101010101010101}
0002419C <wizard_Table.include.bb2@1166>             DrLine wx + sx  ,wy + gy, wx + sx  ,wy + gy + gh,1
000241E4 <wizard_Table.include.bb2@1168>             !SetDrMd{*tablewin\RPort,-1}
000241F4 <wizard_Table.include.bb2@1169>             sx + sbreite
00024202 <wizard_Table.include.bb2@1171>         Next j
00024228 <wizard_Table.include.bb2@1174>       wy + WZYFontsize + 2 ; direkt unter der Titelzeile anfangen
00024232 <wizard_Table.include.bb2@1175>       ResetList wzrow()
00024244 <wizard_Table.include.bb2@1176>       While NextItemFast(wzrow())
00024270 <wizard_Table.include.bb2@1177>         If (Index(wzrow())) = (wztabledata\erste_zeile + zeile)
00024E20 <wizard_Table.include.bb2@1178>           !WZ_DrawRow
00024E26 <wizard_Table.include.bb2@1179>           Pop While : Goto uquit
00024E2C <wizard_Table.include.bb2@1181>       Wend
00024E44 <wizard_Table.include.bb2@1185> End Statement
00024E6E <wizard_Table.include.bb2@1190> Statement WZ_UpdateTable{gadgetid$}
00024EBA <wizard_Table.include.bb2@1193>   SetActualTable{gadgetid$} : Use Window wztabledata\window_
00024EEE <wizard_Table.include.bb2@1195>   *g.Gadget = WZGadAddr(gadgetid$)
00024F00 <wizard_Table.include.bb2@1196>   If (*g <> 0) ;AND (Index(wzrow())>0)
00024F26 <wizard_Table.include.bb2@1197>     *tablewin.Window = WZWindowAddr : DrPort *tablewin\RPort
00024F96 <wizard_Table.include.bb2@1199>     WZPrint gadgetid$+"_SCROLLER",wztabledata\erste_zeile - 1,wztabledata\zeilen  ; ,wztabledata\maxzeilen-1
00024FAA <wizard_Table.include.bb2@1200>     If wztabledata\maxzeilen = 0
00025038 <wizard_Table.include.bb2@1201>       dummy.b = SetGadgetAttrsA_(WZGadAddr(gadgetid$+"_SCROLLER"),WZWindowAddr,0,Tags(#WSCROLLERA_Total,1))
0002503E <wizard_Table.include.bb2@1202>     Else
000250D2 <wizard_Table.include.bb2@1203>       dummy = SetGadgetAttrsA_(WZGadAddr(gadgetid$+"_SCROLLER"),WZWindowAddr,0,Tags(#WSCROLLERA_Total,wztabledata\maxzeilen))
00025148 <wizard_Table.include.bb2@1206>     DrBoxf wztabledata\LeftEdge,wztabledata\TopEdge + WZYFontsize + 1,wztabledata\LeftEdge + wztabledata\Width-1,wztabledata\TopEdge+wztabledata\Height-2, wztabledata\BackPen
00025150 <wizard_Table.include.bb2@1208>     hline_color.l = 1 ; GetBestPen{ GetRGBValue{wztabledata\BackPen} * 2 }
00025170 <wizard_Table.include.bb2@1209>     If wztabledata\hlines = True
000251A4 <wizard_Table.include.bb2@1210>       For y.w = 1 To wztabledata\zeilen
000251EA <wizard_Table.include.bb2@1211>         !SetDrMd{*tablewin\RPort,%0101010101010101}
00025292 <wizard_Table.include.bb2@1212>         DrLine wztabledata\LeftEdge, wztabledata\TopEdge + WZYFontsize + y * wztabledata\columnheight, wztabledata\LeftEdge+wztabledata\Width,wztabledata\TopEdge+WZYFontsize + y*wztabledata\columnheight,hline_color
000252DA <wizard_Table.include.bb2@1213>         !SetDrMd{*tablewin\RPort,-1}
000252E8 <wizard_Table.include.bb2@1214>       Next y
00025308 <wizard_Table.include.bb2@1216>     If wztabledata\vlines = True
00025324 <wizard_Table.include.bb2@1217>       sx.w = wztabledata\breite[1]
00025358 <wizard_Table.include.bb2@1218>       For x.w = 2 To wztabledata\spalten
0002537A <wizard_Table.include.bb2@1219>         If wztabledata\breite[x]>0
00025396 <wizard_Table.include.bb2@1220>           sbreite.w = wztabledata\breite[x]
000253DC <wizard_Table.include.bb2@1221>        !SetDrMd{*tablewin\RPort,%0101010101010101}
0002543E <wizard_Table.include.bb2@1222>           DrLine wztabledata\LeftEdge + sx    , wztabledata\TopEdge, wztabledata\LeftEdge + sx    , wztabledata\TopEdge+wztabledata\Height-1,1
00025486 <wizard_Table.include.bb2@1224>       !SetDrMd{*tablewin\RPort,-1}
00025496 <wizard_Table.include.bb2@1225>           sx + sbreite
000254A4 <wizard_Table.include.bb2@1227>       Next x
000254AE <wizard_Table.include.bb2@1231>     ResetList wzrow()
000254BC <wizard_Table.include.bb2@1233>       dummy = NextItemFast(wzrow())
000254FA <wizard_Table.include.bb2@1234>     Until (Index(wzrow())-1 = wztabledata\erste_zeile) OR (dummy = False)
00025500 <wizard_Table.include.bb2@1237>     zeile.w = 1
00025506 <wizard_Table.include.bb2@1239>       sx = 0
0002604A <wizard_Table.include.bb2@1240>       !WZ_DrawRow
00026076 <wizard_Table.include.bb2@1241>       If zeile+wztabledata\erste_zeile-1 = wztabledata\aktuelle_zeile
00026080 <wizard_Table.include.bb2@1242>         PushItem wzrow()
000260C6 <wizard_Table.include.bb2@1243>         WZ_HighlightRow{gadgetid$,zeile+wztabledata\erste_zeile-1}
000260D0 <wizard_Table.include.bb2@1244>         PopItem wzrow()
000260DE <wizard_Table.include.bb2@1246>       zeile + 1
000260EC <wizard_Table.include.bb2@1247>       dummy.b = NextItemFast(wzrow())
0002611C <wizard_Table.include.bb2@1248>     Until (zeile > wztabledata\zeilen) OR (dummy = False)
00026134 <wizard_Table.include.bb2@1251> End Statement
00026166 <wizard_Table.include.bb2@1259> Statement WZ_EditCell{gadgetid$,zeile.l,spalte.l}
000261A6 <wizard_Table.include.bb2@1262>   If (zeile>0) AND (zeile<=wztabledata\maxzeilen) AND (NOT wztabledata\readonly);  AND (NOT wztabledata\edit_)
000261DA <wizard_Table.include.bb2@1263>     *bgad.Gadget = WZGadAddr(gadgetid$)
000261EC <wizard_Table.include.bb2@1264>     If *bgad > 0
0002620A <wizard_Table.include.bb2@1265>       Use Window wztabledata\window_
00026234 <wizard_Table.include.bb2@1266>       DrPort RastPort(wztabledata\window_)
0002623E <wizard_Table.include.bb2@1267>       wx = wztabledata\LeftEdge
0002624C <wizard_Table.include.bb2@1268>       wy = wztabledata\TopEdge
0002625A <wizard_Table.include.bb2@1269>       ww = wztabledata\Width
00026268 <wizard_Table.include.bb2@1270>       wh = wztabledata\Height
00026276 <wizard_Table.include.bb2@1271>       gh.l = wztabledata\columnheight
00026284 <wizard_Table.include.bb2@1272>       id.l = wztabledata\GadgetID
00026296 <wizard_Table.include.bb2@1274>       If (zeile > 0)
000262C4 <wizard_Table.include.bb2@1275>         For j = 1 To spalte - 1
000262E2 <wizard_Table.include.bb2@1276>           sx + wztabledata\breite[j]
000262F2 <wizard_Table.include.bb2@1277>         Next j
00026352 <wizard_Table.include.bb2@1278>         gn$ = WZ_GetCell{gadgetid$,zeile,spalte}
00026368 <wizard_Table.include.bb2@1279>         breite = ww / wztabledata\spalten
000263A4 <wizard_Table.include.bb2@1280>         wypos.l = wy + WZYFontsize + gh * (zeile-wztabledata\erste_zeile)
000263B0 <wizard_Table.include.bb2@1281>         gapx = -2
00026468 <wizard_Table.include.bb2@1282>         *gad.Gadget = GTString(wztabledata\GTListID,0,wx + sx + gapx, wypos ,wztabledata\breite[spalte]+6,gh+1,"",0,64,gn$)
0002647A <wizard_Table.include.bb2@1283>         If *gad<>0
00026484 <wizard_Table.include.bb2@1284>           *gad\GadgetRender = False
000264B8 <wizard_Table.include.bb2@1285>           AttachGTList wztabledata\GTListID,wztabledata\window_
000264D2 <wizard_Table.include.bb2@1287>           If (KickVersion > 40)
00026536 <wizard_Table.include.bb2@1288>             DrBoxf wx + sx + 2, wypos+1,wztabledata\breite[spalte]+wx+sx - 1,wypos + gh-1,wztabledata\BackPen
00026558 <wizard_Table.include.bb2@1290>           GTActivateGadget wztabledata\GTListID,0
00026562 <wizard_Table.include.bb2@1291>           wztabledata\edit_ = True
0002656E <wizard_Table.include.bb2@1292>           wztabledata\aktuelle_spalte = spalte
0002657A <wizard_Table.include.bb2@1293>           wztabledata\aktuelle_zeile = zeile
00026592 <wizard_Table.include.bb2@1298> End Statement
000265C0 <wizard_Table.include.bb2@1301> Statement WZ_TableSort{gadgetid$,column.w}
000265EE <wizard_Table.include.bb2@1303>   SetActualTable{gadgetid$}
0002660E <wizard_Table.include.bb2@1305>   StringSort wzrow(),SizeOf.wzrow,6 + column*4
00026626 <wizard_Table.include.bb2@1312> End Statement
00026644 <wizard_Table.include.bb2@1316> Function.l WZ_CheckTableEvent{ev.l,@ev_win.l}
00026664 <wizard_Table.include.bb2@1319>   If ev_win = -1 Then ev_win = EventWindow
00026682 <wizard_Table.include.bb2@1320>   If ev_win<0 Then Function Return 0
00026698 <wizard_Table.include.bb2@1321>   Use Window ev_win
0002669E <wizard_Table.include.bb2@1324>     found = False
000266D2 <wizard_Table.include.bb2@1325>     If (EventWindow <> wztabledata\window_) AND (ev<>#IDCMP_GADGETHELP)
000266FC <wizard_Table.include.bb2@1326>       ChDir "ram:T" : found = False
00026724 <wizard_Table.include.bb2@1327>       While (MoreEntries = True) AND (found = False)
00026746 <wizard_Table.include.bb2@1328>         gadgetid$ = EntryName$
000267A2 <wizard_Table.include.bb2@1329>         If Right$(gadgetid$,8) = ".content"
00026820 <wizard_Table.include.bb2@1330>           gadgetid$ = StrChg(gadgetid$,".content","")
0002684E <wizard_Table.include.bb2@1331>           SetActualTable{gadgetid$}
00026876 <wizard_Table.include.bb2@1332>           If EventWindow = wztabledata\window_ Then found = True
0002687C <wizard_Table.include.bb2@1334>       Wend
00026882 <wizard_Table.include.bb2@1335>     Else
00026888 <wizard_Table.include.bb2@1336>       found = True
000268C0 <wizard_Table.include.bb2@1337>       gadgetid$ = wztabledata\id
000268E8 <wizard_Table.include.bb2@1346>   If found AND (wztabledata\window_>0)
000268F4 <wizard_Table.include.bb2@1347>     mb = MButtons
000268FA <wizard_Table.include.bb2@1348>     Select ev
00026908 <wizard_Table.include.bb2@1349>     Case #IDCMP_NEWSIZE
0002693A <wizard_Table.include.bb2@1350>       WZ_DrawTable{wztabledata\id}
0002696C <wizard_Table.include.bb2@1351>       WZ_UpdateTable{wztabledata\id}
00026976 <wizard_Table.include.bb2@1355>       Function Return ev
0002698A <wizard_Table.include.bb2@1356>     Case #IDCMP_RAWKEY
00026998 <wizard_Table.include.bb2@1357>         *w.Window = WZWindowAddr
000269AA <wizard_Table.include.bb2@1358>         v.w = *w\MessageKey\Code
000269C6 <wizard_Table.include.bb2@1359>         v2.w = *w\MessageKey\Qualifier + 32768
000269EE <wizard_Table.include.bb2@1360>         If (v2 = #IEQUALIFIER_LSHIFT) OR (v2 = #IEQUALIFIER_RSHIFT) Then shift = True
000269FC <wizard_Table.include.bb2@1363>         row.w = wztabledata\aktuelle_zeile
00026A0A <wizard_Table.include.bb2@1364>         col.w= wztabledata\aktuelle_spalte
00026A18 <wizard_Table.include.bb2@1365>         zei.w = wztabledata\erste_zeile
00026A1E <wizard_Table.include.bb2@1366>         Select v
00026A2A <wizard_Table.include.bb2@1367>         Case #CURSORUP
00026A38 <wizard_Table.include.bb2@1368>           If NOT shift
00026A4E <wizard_Table.include.bb2@1369>             If row > (wztabledata\erste_zeile)
00026A5A <wizard_Table.include.bb2@1370>               row - 1
00026A60 <wizard_Table.include.bb2@1371>             Else
00026A74 <wizard_Table.include.bb2@1372>               If wztabledata\erste_zeile > 1
00026A8A <wizard_Table.include.bb2@1373>                 wztabledata\erste_zeile - 1
00026A96 <wizard_Table.include.bb2@1374>                 row - 1
00026A9C <wizard_Table.include.bb2@1377>           Else
00026AA8 <wizard_Table.include.bb2@1378>             wztabledata\erste_zeile = 1
00026AAE <wizard_Table.include.bb2@1379>             row = 1
00026AC0 <wizard_Table.include.bb2@1386>         Case #CURSORDOWN
00026ACE <wizard_Table.include.bb2@1387>           If NOT shift
00026C3A <wizard_Table.include.bb2@1388>             !WZ_VerifyVisibility{row}
00026C40 <wizard_Table.include.bb2@1389>           Else
00026C64 <wizard_Table.include.bb2@1390>             wztabledata\erste_zeile = wztabledata\maxzeilen - wztabledata\zeilen + 1
00026C72 <wizard_Table.include.bb2@1391>             row = wztabledata\maxzeilen
00026C74 <wizard_Table.include.bb2@1393>         End Select
00026CB6 <wizard_Table.include.bb2@1394>         If (wztabledata\aktuelle_zeile <> row) OR (wztabledata\aktuelle_spalte <> col) OR (wztabledata\erste_zeile <> zei)
00026CEA <wizard_Table.include.bb2@1395>           WZ_SetActiveRow{gadgetid$,row}
00026D1E <wizard_Table.include.bb2@1396>           WZ_SetActiveColumn{gadgetid$,col}
00026D4C <wizard_Table.include.bb2@1397>           WZ_UpdateTable{gadgetid$}
00026D58 <wizard_Table.include.bb2@1398>           Function Return #WZTABLEEVENT_CELLSELECTED
00026D6C <wizard_Table.include.bb2@1401>     Case #IDCMP_VANILLAKEY
00026D7A <wizard_Table.include.bb2@1402>       row.w = wztabledata\aktuelle_zeile
00026D88 <wizard_Table.include.bb2@1403>       col.w= wztabledata\aktuelle_spalte
00026D96 <wizard_Table.include.bb2@1404>       zei.w = wztabledata\erste_zeile
00026DBC <wizard_Table.include.bb2@1406>       tabkey$ = Chr$(EventCode)
00026DC6 <wizard_Table.include.bb2@1407>       ResetList wzrow()
00026E06 <wizard_Table.include.bb2@1408>       While NextItemFast(wzrow()) AND Index(wzrow())-1<wztabledata\aktuelle_zeile
00026E0C <wizard_Table.include.bb2@1409>       Wend
00026E1E <wizard_Table.include.bb2@1410>       While NextItemFast(wzrow())
00026E6A <wizard_Table.include.bb2@1411>         r$ = wzrow()\cell[1]
00026ED2 <wizard_Table.include.bb2@1412>         If Left$(r$,1) = tabkey$
00026EE6 <wizard_Table.include.bb2@1413>           row = Index(wzrow()) - 1
00026F08 <wizard_Table.include.bb2@1414>           If row - wztabledata\erste_zeile => wztabledata\zeilen
00026F26 <wizard_Table.include.bb2@1415>             wztabledata\erste_zeile = row - wztabledata\zeilen + 1
00026F2C <wizard_Table.include.bb2@1417>           Goto exit_vanilla
00026F32 <wizard_Table.include.bb2@1419>       Wend
00026F74 <wizard_Table.include.bb2@1421>       If (wztabledata\aktuelle_zeile <> row) OR (wztabledata\aktuelle_spalte <> col) OR (wztabledata\erste_zeile <> zei)
00026FA8 <wizard_Table.include.bb2@1422>         WZ_SetActiveRow{gadgetid$,row}
00026FDC <wizard_Table.include.bb2@1423>         WZ_SetActiveColumn{gadgetid$,col}
0002700A <wizard_Table.include.bb2@1424>         WZ_UpdateTable{gadgetid$}
00027016 <wizard_Table.include.bb2@1425>         Function Return #WZTABLEEVENT_CELLSELECTED
0002702A <wizard_Table.include.bb2@1430>     Case #IDCMP_IDCMPUPDATE
00027070 <wizard_Table.include.bb2@1431>       If (WZGadHit<>-1) AND (WZGadHit<>255) AND (ev<>#IDCMP_GADGETHELP)
000270BE <wizard_Table.include.bb2@1432>         If WZGadName = gadgetid$ + "_SCROLLER"
000270EC <wizard_Table.include.bb2@1433>           WZ_EditExit{gadgetid$}
00027102 <wizard_Table.include.bb2@1435>             ev2.l = Wait : VWait
0002712C <wizard_Table.include.bb2@1436>           Until (ev2 <> #IDCMP_DELTAMOVE) AND (ev2<>#IDCMP_MOUSEMOVE)
00027132 <wizard_Table.include.bb2@1437>           FlushEvents
00027152 <wizard_Table.include.bb2@1440>           If WZInput <= wztabledata\maxzeilen
0002718C <wizard_Table.include.bb2@1441>             If (WZInput + 1) <>  wztabledata\erste_zeile Then wztabledata\erste_zeile = WZInput + 1
000271C6 <wizard_Table.include.bb2@1442>             WZ_SetActiveRow{gadgetid$,wztabledata\erste_zeile}
000271F4 <wizard_Table.include.bb2@1443>             WZ_UpdateTable{gadgetid$}
00027200 <wizard_Table.include.bb2@1445>             Function Return #WZTABLEEVENT_CELLSELECTED
00027206 <wizard_Table.include.bb2@1447>         Else
00027226 <wizard_Table.include.bb2@1449>           If wztabledata\edit_ = True
00027254 <wizard_Table.include.bb2@1450>             For i = 1 To wztabledata\spalten
00027270 <wizard_Table.include.bb2@1451>               j + wztabledata\editable_[i]
00027280 <wizard_Table.include.bb2@1452>             Next i
00027292 <wizard_Table.include.bb2@1453>             If j = 0
000272C0 <wizard_Table.include.bb2@1454>               WZ_EditExit{gadgetid$}
000272EE <wizard_Table.include.bb2@1455>               WZ_UpdateTable{gadgetid$}
000272FA <wizard_Table.include.bb2@1457>               Function Return #WZTABLEEVENT_CELLSELECTED
0002730E <wizard_Table.include.bb2@1462>     Case #IDCMP_GADGETUP ; pruefen welches Ereignis das GTString beendet hat: TAB oder ENTER, ..
00027336 <wizard_Table.include.bb2@1463>       If (GadgetHit = 0) AND (ev<>#IDCMP_GADGETHELP)    ; GTString-gadget
00027364 <wizard_Table.include.bb2@1464>         WZ_EditExit{gadgetid$}
00027372 <wizard_Table.include.bb2@1465>         *w.Window = WZWindowAddr
00027384 <wizard_Table.include.bb2@1466>         v.w = *w\MessageKey\Code
00027396 <wizard_Table.include.bb2@1467>         w.w = *w\MessageKey\Qualifier
000273A4 <wizard_Table.include.bb2@1468>         row = wztabledata\aktuelle_zeile
000273B2 <wizard_Table.include.bb2@1469>         col = wztabledata\aktuelle_spalte
000273B8 <wizard_Table.include.bb2@1471>         Select v
000273C4 <wizard_Table.include.bb2@1472>         Case $9 ; TAB
000273CA <wizard_Table.include.bb2@1473>           found = False
000273D8 <wizard_Table.include.bb2@1476>               col + 1
00027418 <wizard_Table.include.bb2@1477>             Until (wztabledata\editable_[col] = True) OR (col>wztabledata\spalten)
00027458 <wizard_Table.include.bb2@1479>             If (wztabledata\editable_[col] = False) OR (col>wztabledata\spalten)
00027470 <wizard_Table.include.bb2@1480>               If col => wztabledata\spalten
00027486 <wizard_Table.include.bb2@1481>                 If row = wztabledata\zeilen
0002749C <wizard_Table.include.bb2@1482>                   If row = wztabledata\maxzeilen
000274A2 <wizard_Table.include.bb2@1483>                     row = 1
000274A8 <wizard_Table.include.bb2@1484>                     col = 0
000274B4 <wizard_Table.include.bb2@1485>                     wztabledata\erste_zeile = 1
000274BA <wizard_Table.include.bb2@1486>                   Else
000274C0 <wizard_Table.include.bb2@1487>                     col = 0
000274D8 <wizard_Table.include.bb2@1488>                     wztabledata\erste_zeile + 1
000274DE <wizard_Table.include.bb2@1490>                 Else
000274F4 <wizard_Table.include.bb2@1491>                   If row = wztabledata\maxzeilen
000274FA <wizard_Table.include.bb2@1492>                     row = 1
00027500 <wizard_Table.include.bb2@1493>                     col = 0
0002750C <wizard_Table.include.bb2@1494>                     wztabledata\erste_zeile = 1
00027512 <wizard_Table.include.bb2@1495>                   Else
00027520 <wizard_Table.include.bb2@1496>                     row + 1
00027526 <wizard_Table.include.bb2@1497>                     col = 0
0002752C <wizard_Table.include.bb2@1501>             Else
00027532 <wizard_Table.include.bb2@1502>               found = True
00027546 <wizard_Table.include.bb2@1504>           Until found = True
00027574 <wizard_Table.include.bb2@1506>           WZ_UpdateTable{gadgetid$}
00027580 <wizard_Table.include.bb2@1507>           wztabledata\aktuelle_zeile = row
0002758C <wizard_Table.include.bb2@1508>           wztabledata\aktuelle_spalte = col
00027592 <wizard_Table.include.bb2@1511>         Default
000275C0 <wizard_Table.include.bb2@1512>           WZ_UpdateTable{gadgetid$}
000275CC <wizard_Table.include.bb2@1513>           wztabledata\aktuelle_zeile = 0;row
000275D8 <wizard_Table.include.bb2@1514>           wztabledata\aktuelle_spalte = 0;col
000275DA <wizard_Table.include.bb2@1515>         End Select
000275E6 <wizard_Table.include.bb2@1516>         Function Return #WZTABLEEVENT_CELLSELECTED
000275FA <wizard_Table.include.bb2@1519>     Case #IDCMP_MOUSEBUTTONS
0002761A <wizard_Table.include.bb2@1521>       mx = WMouseX : my = WMouseY
00027654 <wizard_Table.include.bb2@1522>       row = WZ_MouseRow{gadgetid$,mx,my}
00027690 <wizard_Table.include.bb2@1523>       column = WZ_MouseColumn{gadgetid$,mx,my}
000276CC <wizard_Table.include.bb2@1524>       If (row > 0) AND (column>0) AND (row <= wztabledata\maxzeilen)
000276EC <wizard_Table.include.bb2@1526>         If wztabledata\edit_=True
000276F6 <wizard_Table.include.bb2@1528>           wztabledata\edit_ = False
00027714 <wizard_Table.include.bb2@1529>           DetachGTList wztabledata\GTListID
0002772C <wizard_Table.include.bb2@1530>           Free GTList wztabledata\GTListID
0002775E <wizard_Table.include.bb2@1532>         If (wztabledata\aktuelle_spalte<>column) OR (wztabledata\aktuelle_zeile<>row)
00027792 <wizard_Table.include.bb2@1533>           WZ_SetActiveRow{gadgetid$,row}
000277C4 <wizard_Table.include.bb2@1534>           WZ_SetActiveColumn{gadgetid$,column}
000277F2 <wizard_Table.include.bb2@1535>           WZ_UpdateTable{gadgetid$}
00027814 <wizard_Table.include.bb2@1538>           If wztabledata\editable_[column] = True
0002784C <wizard_Table.include.bb2@1539>             WZ_EditCell{gadgetid$,row,column}
00027852 <wizard_Table.include.bb2@1541>           FlushEvents
00027858 <wizard_Table.include.bb2@1543>         Else
0002785E <wizard_Table.include.bb2@1545>           Select mb
0002786C <wizard_Table.include.bb2@1546>           Case 6 ; Right, up
00027888 <wizard_Table.include.bb2@1547>             If NOT wztabledata\editable_[column]
0002789E <wizard_Table.include.bb2@1548>               If row = wztabledata\aktuelle_zeile
000278CC <wizard_Table.include.bb2@1549>                 WZ_EditExit{gadgetid$}
00027908 <wizard_Table.include.bb2@1550>                 a.b = WZ_PopUp{SMouseX-4,SMouseY-8}
00027918 <wizard_Table.include.bb2@1551>                 If a = 0
00027926 <wizard_Table.include.bb2@1552>                   wztabledata\selected_popup = 0
0002792E <wizard_Table.include.bb2@1553>                   Function Return False
00027934 <wizard_Table.include.bb2@1554>                 Else
00027944 <wizard_Table.include.bb2@1555>                   wztabledata\selected_popup = a
00027950 <wizard_Table.include.bb2@1556>                   Function Return #WZTABLEEVENT_POPUPMENU
00027956 <wizard_Table.include.bb2@1558>               Else
0002795E <wizard_Table.include.bb2@1559>                 Function Return False
00027964 <wizard_Table.include.bb2@1562>           Default
000279AC <wizard_Table.include.bb2@1563>             If wztabledata\editable_[column] Then WZ_EditExit{gadgetid$}
000279AE <wizard_Table.include.bb2@1564>           End Select
000279BC <wizard_Table.include.bb2@1567>         If EventDoubleclick
000279CE <wizard_Table.include.bb2@1568>           If wzold_row = row
000279DA <wizard_Table.include.bb2@1569>             Function Return #WZTABLEEVENT_DOUBLECLICK
000279E0 <wizard_Table.include.bb2@1571>         Else
000279F8 <wizard_Table.include.bb2@1572>           If row < > 0 Then wzold_row = row
00027A04 <wizard_Table.include.bb2@1573>           Function Return #WZTABLEEVENT_CELLSELECTED
00027A0A <wizard_Table.include.bb2@1576>       Else
00027A38 <wizard_Table.include.bb2@1577>         If (row = 0) AND (wztabledata\sortable = True)
00027A44 <wizard_Table.include.bb2@1578>           wztabledata\sorted_by = column
00027A76 <wizard_Table.include.bb2@1579>           WZ_TableSort{gadgetid$,column}
00027AA4 <wizard_Table.include.bb2@1580>           WZ_DrawTable{gadgetid$}
00027AD2 <wizard_Table.include.bb2@1581>           WZ_UpdateTable{gadgetid$}
00027AD4 <wizard_Table.include.bb2@1584>     End Select
00027ADC <wizard_Table.include.bb2@1586>   Function Return False
00027AEE <wizard_Table.include.bb2@1587> End Statement
00027AEE <PED.ab2@106> 
00027AEE <wizard_ColorWheel.include.bb2@1> XINCLUDE "PE/wizard_ColorWheel.include.bb2"
00027B12 <wizard_ColorWheel.include.bb2@23> Dim pens.w(#MAXGRADPENS)
00027B3C <wizard_ColorWheel.include.bb2@24> For i = 0 To #MAXGRADPENS
00027B50 <wizard_ColorWheel.include.bb2@25>   pens(i)=-1
00027B60 <wizard_ColorWheel.include.bb2@26> Next i
00027B7E <wizard_ColorWheel.include.bb2@29> Statement ConvertRGBtoHSB{ptr_rgb.l,ptr_hsb.l}
00027B84 <wizard_ColorWheel.include.bb2@33>   *my_rgb = ptr_rgb
00027B8A <wizard_ColorWheel.include.bb2@34>   *my_hsb = ptr_hsb
00027B9C <wizard_ColorWheel.include.bb2@36>  r.f = *my_rgb\cw_Red
00027BB2 <wizard_ColorWheel.include.bb2@37>  g.f = *my_rgb\cw_Green
00027BC8 <wizard_ColorWheel.include.bb2@38>  b.f = *my_rgb\cw_Blue
00027BF8 <wizard_ColorWheel.include.bb2@39>  my_min.f = Min(r,g)
00027C28 <wizard_ColorWheel.include.bb2@40>  my_max.f = Max(r,g)
00027C58 <wizard_ColorWheel.include.bb2@41>  my_min.f = Min(my_min,b)
00027C88 <wizard_ColorWheel.include.bb2@42>  my_max.f = Max(my_max,b)
00027C9C <wizard_ColorWheel.include.bb2@43>  delta.f = (my_max - my_min)
00027CB8 <wizard_ColorWheel.include.bb2@44>  If my_max<>0
00027CCC <wizard_ColorWheel.include.bb2@45>   sat.f = delta / my_max
00027CE2 <wizard_ColorWheel.include.bb2@46>   lumin.f = my_max / 255.0
00027CFE <wizard_ColorWheel.include.bb2@47>   If delta<>0
00027D18 <wizard_ColorWheel.include.bb2@48>    If r=my_max
00027D38 <wizard_ColorWheel.include.bb2@49>     hue=(g-b)/delta
00027D3E <wizard_ColorWheel.include.bb2@50>     Goto okii
00027D58 <wizard_ColorWheel.include.bb2@52>    If g=my_max
00027DAA <wizard_ColorWheel.include.bb2@53>     hue=2+((b-r)/delta)
00027DB0 <wizard_ColorWheel.include.bb2@54>     Goto okii
00027E02 <wizard_ColorWheel.include.bb2@56>    hue=4+((r-g)/delta)
00027E28 <wizard_ColorWheel.include.bb2@60>  hue=hue*60.0
00027E60 <wizard_ColorWheel.include.bb2@61>  If hue<0 Then hue=hue+360.0
00027E9E <wizard_ColorWheel.include.bb2@63>  *my_hsb\cw_Hue = Int((hue /360) * 255.0)
00027EC8 <wizard_ColorWheel.include.bb2@64>  *my_hsb\cw_Saturation = Int(sat * 255.0)
00027EF2 <wizard_ColorWheel.include.bb2@65>  *my_hsb\cw_Brightness = Int(lumin * 255.0)
00027EF6 <wizard_ColorWheel.include.bb2@66> End Statement
00027F10 <wizard_ColorWheel.include.bb2@69> Function.l ConvertHSBtoRGB{ptr_hsb.l} ; takes hue(0 to 360), saturation (0 to 1.0) and luminance (0 to 1.0)
00027F16 <wizard_ColorWheel.include.bb2@76>   *hsb = ptr_hsb
00027F20 <wizard_ColorWheel.include.bb2@77>   Hue.l = *hsb\cw_Hue ;LSR 24
00027F2E <wizard_ColorWheel.include.bb2@78>   Saturation.l = *hsb\cw_Saturation ;LSR 24
00027F3C <wizard_ColorWheel.include.bb2@79>   Brightness.l =  *hsb\cw_Brightness ;LSR 24
00027F60 <wizard_ColorWheel.include.bb2@81>   h = (Hue / 256.0) * 360.0
00027F7A <wizard_ColorWheel.include.bb2@82>   s = Saturation / 256.0
00027F94 <wizard_ColorWheel.include.bb2@83>   l = Brightness / 256.0
00027FB0 <wizard_ColorWheel.include.bb2@84>   If s=0
00027FCA <wizard_ColorWheel.include.bb2@85>     _Red   = l * 255.0
00027FE4 <wizard_ColorWheel.include.bb2@86>     _Green = l * 255.0
00027FFE <wizard_ColorWheel.include.bb2@87>     _Blue  = l * 255.0
00028004 <wizard_ColorWheel.include.bb2@88>   Else
0002801A <wizard_ColorWheel.include.bb2@89>     h = h / 60.0
0002803A <wizard_ColorWheel.include.bb2@90>     i = Int(h)
0002804E <wizard_ColorWheel.include.bb2@91>     f = h - i
0002807A <wizard_ColorWheel.include.bb2@92>     p = l*(1.0-s)
000280BC <wizard_ColorWheel.include.bb2@93>     q = l*(1.0-s*f)
00028116 <wizard_ColorWheel.include.bb2@94>     t = l*(1.0-s*(1.0-f))
0002811C <wizard_ColorWheel.include.bb2@95>     Select i
0002813C <wizard_ColorWheel.include.bb2@96>     Case 0 : r = l : g = t : b = p
00028162 <wizard_ColorWheel.include.bb2@97>     Case 1 : r = q : g = l : b = p
00028188 <wizard_ColorWheel.include.bb2@98>     Case 2 : r = p : g = l : b = t
000281AE <wizard_ColorWheel.include.bb2@99>     Case 3 : r = p : b = l : g = q
000281D4 <wizard_ColorWheel.include.bb2@100>     Case 4 : r = t : b = l : g = p
000281DA <wizard_ColorWheel.include.bb2@101>     Default
000281EC <wizard_ColorWheel.include.bb2@102>     r = l : g = p : b = q
000281EE <wizard_ColorWheel.include.bb2@103>     End Select
00028208 <wizard_ColorWheel.include.bb2@104>     _Red   = r * 255.0
00028222 <wizard_ColorWheel.include.bb2@105>     _Green = g * 255.0
0002823C <wizard_ColorWheel.include.bb2@106>     _Blue  = b * 255.0
00028256 <wizard_ColorWheel.include.bb2@108>   If _Red<0 Then _Red=0
00028270 <wizard_ColorWheel.include.bb2@109>   If _Red>255 Then _Red=255
0002828A <wizard_ColorWheel.include.bb2@110>   If _Green<0 Then _Green=0
000282A4 <wizard_ColorWheel.include.bb2@111>   If _Green>255 Then _Green=255
000282BE <wizard_ColorWheel.include.bb2@112>   If _Blue<0 Then _Blue=0
000282D8 <wizard_ColorWheel.include.bb2@113>   If _Blue>255 Then _Blue=255
000282FC <wizard_ColorWheel.include.bb2@114>   _RGB.l = (_Red LSL 16) + (_Green LSL 8) + (_Blue)
00028306 <wizard_ColorWheel.include.bb2@115>   Function Return _RGB
0002830C <wizard_ColorWheel.include.bb2@116> End Function
00028326 <wizard_ColorWheel.include.bb2@118> Statement WZ_SetColorGradientSlider{_RGB.l}
00028338 <wizard_ColorWheel.include.bb2@121>   If *gs_gadget<>0
0002835C <wizard_ColorWheel.include.bb2@124>     GetAttr_ #WHEEL_HSB,*cw_gadget,&act_hsb
00028370 <wizard_ColorWheel.include.bb2@125>     act_hsb\cw_Hue = act_hsb\cw_Hue LSR 24
0002838A <wizard_ColorWheel.include.bb2@126>     act_hsb\cw_Saturation = act_hsb\cw_Saturation LSR 24
00028398 <wizard_ColorWheel.include.bb2@127>     act_hsb\cw_Brightness = 255
000283A8 <wizard_ColorWheel.include.bb2@128>     temp_RGB.l = ConvertHSBtoRGB{act_hsb}
000283C2 <wizard_ColorWheel.include.bb2@129>     act_rgb\cw_Red   = ((temp_RGB LSR 16))       LSL 24
000283E6 <wizard_ColorWheel.include.bb2@130>     act_rgb\cw_Green = ((temp_RGB LSR 8) AND $ff)LSL 24
00028402 <wizard_ColorWheel.include.bb2@131>     act_rgb\cw_Blue  = (temp_RGB AND $FF)        LSL 24
0002842E <wizard_ColorWheel.include.bb2@132>     RefreshGList_ *gs_gadget,*cw_win,0,1
0002844E <wizard_ColorWheel.include.bb2@133>     SetAPen_ *cw_win\RPort,#TEXTPEN
000284AE <wizard_ColorWheel.include.bb2@134>     Move_ *cw_win\RPort,cw_x+1,*cw_win\BorderTop+cw_y+cw_h-*cw_win\IFont\tf_YSize-7
0002851A <wizard_ColorWheel.include.bb2@135>     Text_ *cw_win\RPort,Right$(Hex$(_RGB),6)+" ",7
00028538 <wizard_ColorWheel.include.bb2@136>     If pens(0)<>-1
0002858A <wizard_ColorWheel.include.bb2@137>       SetRGB32_ *cw_scr\ViewPort,pens(0),act_rgb\cw_Red,act_rgb\cw_Green,act_rgb\cw_Blue
00028590 <wizard_ColorWheel.include.bb2@141>   Else
000285EA <wizard_ColorWheel.include.bb2@142>     Request "","error accessing gradientslider gadget","Ok"
0002860C <wizard_ColorWheel.include.bb2@144> End Statement
00028626 <wizard_ColorWheel.include.bb2@149> Statement WZ_SetColorWheelRGB{_RGB.l}
00028638 <wizard_ColorWheel.include.bb2@154>   my_rgb\cw_Red   = (_RGB LSR 16)
00028654 <wizard_ColorWheel.include.bb2@155>   my_rgb\cw_Green = ((_RGB LSR 8) AND $ff)
00028668 <wizard_ColorWheel.include.bb2@156>   my_rgb\cw_Blue  = (_RGB AND $FF)
0002867A <wizard_ColorWheel.include.bb2@157>   ConvertRGBtoHSB{my_rgb,my_hsb}
0002868E <wizard_ColorWheel.include.bb2@160>   my_rgb\cw_Red   = my_rgb\cw_Red LSL 24
000286A8 <wizard_ColorWheel.include.bb2@161>   my_rgb\cw_Green = my_rgb\cw_Green LSL 24
000286C2 <wizard_ColorWheel.include.bb2@162>   my_rgb\cw_Blue  = my_rgb\cw_Blue LSL 24
000286D4 <wizard_ColorWheel.include.bb2@164>   If *gs_gadget<>0
00028714 <wizard_ColorWheel.include.bb2@165>     SetAttrsA_ *gs_gadget,Tags(#GRAD_CurVal,my_hsb\cw_Brightness*255)
00028748 <wizard_ColorWheel.include.bb2@166>     SetAttrsA_ *cw_gadget,Tags(#WHEEL_RGB,&my_rgb)
00028752 <wizard_ColorWheel.include.bb2@168>     WZ_SetColorGradientSlider{_RGB}
0002877E <wizard_ColorWheel.include.bb2@169>     RefreshGList_ *cw_gadget,*cw_win,0,1
0002879E <wizard_ColorWheel.include.bb2@170>     SetAPen_ *cw_win\RPort,#TEXTPEN
000287FE <wizard_ColorWheel.include.bb2@171>     Move_ *cw_win\RPort,cw_x + 1,*cw_win\BorderTop+cw_y+cw_h-*cw_win\IFont\tf_YSize-7
0002886A <wizard_ColorWheel.include.bb2@172>     Text_ *cw_win\RPort,Right$(Hex$(_RGB),6)+" ",7
00028870 <wizard_ColorWheel.include.bb2@173>   Else
000288CA <wizard_ColorWheel.include.bb2@174>     Request "","error accessing gadgets.","Ok"
000288EC <wizard_ColorWheel.include.bb2@176> End Statement
00028902 <wizard_ColorWheel.include.bb2@179> Function.l WZ_GetColorWheelRGB{}
00028926 <wizard_ColorWheel.include.bb2@183>   GetAttr_ #WHEEL_RGB,*cw_gadget,&my_rgb
00028940 <wizard_ColorWheel.include.bb2@184>   _RGB.l = (my_rgb\cw_Red LSR 24) LSL 16
00028964 <wizard_ColorWheel.include.bb2@185>   _RGB   + (my_rgb\cw_Green LSR 24) LSL 8
00028980 <wizard_ColorWheel.include.bb2@186>   _RGB   + (my_rgb\cw_Blue LSR 24)
0002898A <wizard_ColorWheel.include.bb2@187>   Function Return _RGB
000289AE <wizard_ColorWheel.include.bb2@188> End Function
000289D4 <wizard_ColorWheel.include.bb2@192> Function.b WZ_DrawColorWheel{cx,cy,cw,ch}
000289DC <wizard_ColorWheel.include.bb2@197>   cw_x = cx
000289E4 <wizard_ColorWheel.include.bb2@198>   cw_y = cy
000289EC <wizard_ColorWheel.include.bb2@199>   cw_w = cw
000289F4 <wizard_ColorWheel.include.bb2@200>   cw_h = ch
00028A28 <wizard_ColorWheel.include.bb2@201>   *lib_colorwheel.Library = OpenLibrary_("sys:classes/gadgets/colorwheel.gadget",0)
00028A5C <wizard_ColorWheel.include.bb2@202>   *lib_gradientslider.Library = OpenLibrary_("sys:classes/gadgets/gradientslider.gadget",0)
00028A82 <wizard_ColorWheel.include.bb2@203>   If *lib_colorwheel = 0 OR (*lib_gradientslider=0)
00028ADC <wizard_ColorWheel.include.bb2@204>    Request "Error","Colorwheel.Gadget not found !","Ok"
00028AE6 <wizard_ColorWheel.include.bb2@205>    Function Return 0
00028AEC <wizard_ColorWheel.include.bb2@206>   Else
00028AFA <wizard_ColorWheel.include.bb2@208>     *cw_scr.Screen = ActiveScreen
00028B0E <wizard_ColorWheel.include.bb2@209>     *cw_dri.DrawInfo = GetScreenDrawInfo_(*cw_scr)
00028B2E <wizard_ColorWheel.include.bb2@210>     If *cw_win = 0 Then *cw_win = ActiveWindow
00028B38 <wizard_ColorWheel.include.bb2@212>     If *cw_win
00028B6C <wizard_ColorWheel.include.bb2@217>       GetRGB32_ *cw_scr\ViewPort\ColorMap,0,1,&my_table
00028B78 <wizard_ColorWheel.include.bb2@218>       a\cw_Red   = $FF ;my_table\R LSR 24
00028B86 <wizard_ColorWheel.include.bb2@219>       a\cw_Green = $FF ;my_table\G LSR 24
00028B94 <wizard_ColorWheel.include.bb2@220>       a\cw_Blue  = $FF ;my_table\B LSR 24
00028BA2 <wizard_ColorWheel.include.bb2@223>       *cmap.ColorMap = *cw_scr\ViewPort\ColorMap
00028BB4 <wizard_ColorWheel.include.bb2@224>       If *cmap<>0
00028C08 <wizard_ColorWheel.include.bb2@225>         pens(0) = ObtainPen_(*cmap,-1,$FF LSL 24,$FF LSL 24,$FF LSL 24,#PEN_EXCLUSIVE)
00028C5C <wizard_ColorWheel.include.bb2@226>         pens(1) = ObtainPen_(*cmap,-1,0,0,0,#PEN_EXCLUSIVE)
00028C72 <wizard_ColorWheel.include.bb2@227>         pens(2) = -1
00028C7A <wizard_ColorWheel.include.bb2@233>       sliderwidth = 16
00028C8E <wizard_ColorWheel.include.bb2@234>       sx = cx+cw-sliderwidth
00028C94 <wizard_ColorWheel.include.bb2@235>       sy = cy
00028C9A <wizard_ColorWheel.include.bb2@236>       sw = sliderwidth
00028CA0 <wizard_ColorWheel.include.bb2@237>       sh = ch
00028D50 <wizard_ColorWheel.include.bb2@238>       my_tags.l = Tags(#GA_Left,sx,#GA_Top,sy,#GA_Width,sw,#GA_Height,sh,#GA_FollowMouse,True,#PGA_Freedom,#LORIENT_VERT,#GRAD_PenArray,&pens(0),#GRAD_CurVal,b\cw_Brightness*255,#GRAD_KnobPixels,8)
00028D8C <wizard_ColorWheel.include.bb2@239>       *gs_gadget.Gadget = NewObjectA_(0,"gradientslider.gadget",my_tags)
00028D92 <wizard_ColorWheel.include.bb2@241>       _sw.l = sliderwidth
00028D98 <wizard_ColorWheel.include.bb2@242>       as.l = *cw_scr
00028DAA <wizard_ColorWheel.include.bb2@243>       ir.l = a\cw_Red LSL 24
00028DC0 <wizard_ColorWheel.include.bb2@244>       ig.l = a\cw_Green LSL 24
00028DD6 <wizard_ColorWheel.include.bb2@245>       ib.l = a\cw_Blue LSL 24
00028EAE <wizard_ColorWheel.include.bb2@246> my_tags = Tags(#GA_Left,cx,#GA_Top,cy,#GA_Width,cw-_sw,#GA_Height,ch,#GA_RelVerify,1,#GA_DrawInfo,*cw_dri,#GA_Previous,*gs_gadget,#GA_FollowMouse,-1,#WHEEL_Screen,as,#WHEEL_GradientSlider,*gs_gadget,#WHEEL_Red,ir,#WHEEL_Green,ig,#WHEEL_Blue,ib)
00028EEA <wizard_ColorWheel.include.bb2@247>       *cw_gadget.Gadget = NewObjectA_(0,"colorwheel.gadget",my_tags)
00028F14 <wizard_ColorWheel.include.bb2@249>       If (*cw_gadget<>0) AND (*gs_gadget<>0)
00028F4E <wizard_ColorWheel.include.bb2@250>         AddGList_ *cw_win,*gs_gadget,-1,-1,0
00028F56 <wizard_ColorWheel.include.bb2@251>         Function Return True
00028F5C <wizard_ColorWheel.include.bb2@252>       Else
00028FB6 <wizard_ColorWheel.include.bb2@253>         Request "","Could not initiate ColorWheel.","OK"
00028FBC <wizard_ColorWheel.include.bb2@255>     Else
00029016 <wizard_ColorWheel.include.bb2@256>       Request "","unable to access window.","Ok"
0002903A <wizard_ColorWheel.include.bb2@259> End Function
00029050 <wizard_ColorWheel.include.bb2@261> Statement WZ_KillColorWheel{}
0002905E <wizard_ColorWheel.include.bb2@266>   *cmap.ColorMap = *cw_scr\ViewPort\ColorMap
00029088 <wizard_ColorWheel.include.bb2@267>   For i = 0 To #MAXGRADPENS
000290C8 <wizard_ColorWheel.include.bb2@268>     If pens(i)>-1 Then ReleasePen_ *cmap, pens(i)
000290DC <wizard_ColorWheel.include.bb2@269>      pens(i)=-1 ; WB color trash fix?
000290EC <wizard_ColorWheel.include.bb2@270>   Next i
00029104 <wizard_ColorWheel.include.bb2@271>   RemoveGadget_ *cw_win,*cw_gadget
0002911C <wizard_ColorWheel.include.bb2@272>   RemoveGadget_ *cw_win,*gs_gadget
00029134 <wizard_ColorWheel.include.bb2@273>   DisposeObject_ *gs_gadget : *cw_gadget = 0
0002914C <wizard_ColorWheel.include.bb2@274>   DisposeObject_ *cw_gadget : *gs_gadget = 0
00029164 <wizard_ColorWheel.include.bb2@276>   CloseLibrary_ *lib_colorwheel    : *lib_colorwheel = 0
0002917C <wizard_ColorWheel.include.bb2@277>   CloseLibrary_ *lib_gradientslider : *lib_gradientslider = 0
00029184 <wizard_ColorWheel.include.bb2@279>   *cw_win = 0
00029188 <wizard_ColorWheel.include.bb2@280> End Statement
00029188 <PED.ab2@107> CEND
00029194 <PED.ab2@108> optimize 5
000291C8 <PED.ab2@137> Dim tempproject$(#MAX_SOURCEFILES,1)
000291F0 <PED.ab2@222> Dim List dirs.dirs(0)
00029218 <PED.ab2@223> Dim List custommenu.custommenu(0)
00029240 <PED.ab2@224> Dim List templates.templates(0)
00029264 <PED.ab2@225> Dim wpref.winprefs(3)
00029288 <PED.ab2@226> Dim help$(400)
00029290 <PED.ab2@228> diag_x.l = 0
00029298 <PED.ab2@229> diag_y.l = 180
000292A0 <PED.ab2@230> diag_w.l = 600
000292A8 <PED.ab2@231> diag_h.l = 80
000292CC <PED.ab2@233> Dim diag_lab$(15)
000292F0 <PED.ab2@234> Dim diag_val$(15)
00029314 <PED.ab2@235> Dim cmap.rgbval(256)
00029338 <PED.ab2@255> Dim AB3Pen.w(24)
0002935C <PED.ab2@256> Dim AB3RGB.l(24)
00029380 <PED.ab2@257> Dim AB3RGB_temp.l(24)
000293A4 <PED.ab2@260> Dim operators$(32)        ; Feld zum ablegen der Zeichen, die strukturiert werden sollen
000293AC <PED.ab2@262> Restore key_chars
000293CE <PED.ab2@264>   Read key_char$
00029406 <PED.ab2@265>   If key_char$<>""
00029446 <PED.ab2@266>     operators$(num_operators) = key_char$
00029454 <PED.ab2@267>     num_operators + 1
00029492 <PED.ab2@269> Until key_char$ = ""
000294B6 <PED.ab2@274> Dim chartab.b(129)
000294E0 <PED.ab2@275> For i = 1 To 127
00029504 <PED.ab2@276>   a$ = Chr$(i)
00029550 <PED.ab2@277>   a$ = LCase$(a$)
0002958C <PED.ab2@278>   chartab(i) = Asc(a$)
0002959C <PED.ab2@279> Next
000295B6 <PED.ab2@280> Poke.l ?comparetab,&chartab(0) ; make it basic!
000295C6 <PED.ab2@281> Poke.b ?casemode,1
000295D0 <PED.ab2@282> CaseSense Off
000295D8 <PED.ab2@284> browse_macros.l           = Off
000295E0 <PED.ab2@285> browse_instructions.l     = On
000295E8 <PED.ab2@286> browse_includes.l         = On
00029654 <PED.ab2@288> Dim *nt2(15),pos2(15),pos$(15)
0002966A <PED.ab2@289> MaxLen tmp$               = 512
00029680 <PED.ab2@291> MaxLen sourcename$        = 96
00029696 <PED.ab2@292> MaxLen exepathname$       = 96
000296AC <PED.ab2@293> MaxLen exefilename$       = 96
000296C2 <PED.ab2@295> MaxLen a$                 = 300      ;need for read .xtra
000296D8 <PED.ab2@296> MaxLen aslpath$           = 250
000296EE <PED.ab2@297> MaxLen aslfile$           = 250
0002978E <PED.ab2@298> aslpath$ = "" : aslfile$ = "" : a$ = "" : ptn$ = "#?"
000297A4 <PED.ab2@300> MaxLen tsourcedir$        = 192
000297BA <PED.ab2@301> MaxLen tincludedir$       = 192
000297D0 <PED.ab2@302> MaxLen thepdir$           = 192
000297E6 <PED.ab2@303> MaxLen tautodocdir$       = 192
000297FC <PED.ab2@304> MaxLen templatefilename$  =  96      ; fuer laden von templates
00029812 <PED.ab2@305> MaxLen temp_filename$     = 144      ; fuer laden von "jump_onclick"
00029828 <PED.ab2@307> MaxLen changelog$         = 1024
0002984E <PED.ab2@310> WZListAdd lst.List         ," "
00029874 <PED.ab2@311> WZListAdd lst2.List        ," "
0002989A <PED.ab2@312> WZListAdd list_labels.List ," "
000298C2 <PED.ab2@313> oldfindstr$                = ""
000298EA <PED.ab2@314> oldreplacestr$             = ""
00029900 <PED.ab2@315> MaxLen screentitle$        = 96
00029924 <PED.ab2@316> Dim autodoc_nodes$(255)
00029958 <PED.ab2@317> Dim lib_mapping$(255,1)
0002997C <PED.ab2@318> Dim lib_check.b(255)
000299A6 <PED.ab2@319> For i = 0 To 255
00029A1E <PED.ab2@320>   lib_mapping$(i,0) = "* unused ID"+Str$(i)+" *"
00029A5C <PED.ab2@321>   lib_mapping$(i,1) = ""
00029A6C <PED.ab2@322> Next i
00029AAC <PED.ab2@323> lib_mapping$(0,0) = "system1.lib"
00029AEC <PED.ab2@324> lib_mapping$(0,1) = "ABCD"
00029B10 <PED.ab2@325> Dim tokentable.b(65536)
00029B1C <PED.ab2@333> optimize 5
00029B66 <PED.ab2@403> Statement Show_Helpfile{libname$,node$,pubscreen$}
00029BDA <PED.ab2@405>   commandline.s = dos_AddPart{my_maindir$,"Tools/AB3HelpViewer"}
00029C40 <PED.ab2@406>   If node$="" Then node$ = "main"
00029CA4 <PED.ab2@407>   commandline.s + " -q -t " + node$
00029D74 <PED.ab2@408>   If libname$<>"" Then commandline.s + " -l " + dos_RemExt{libname$}
00029E16 <PED.ab2@409>   If helpdir$<>"" Then commandline.s + " -d " + helpdir$
00029E78 <PED.ab2@411>   If pubscreen$<>"" AND Peek.b(?use_wbscreen)=0
00029EDC <PED.ab2@412>     commandline.s + " -s " + Peek$(?str_defaultpubscreen)
00029EE2 <PED.ab2@413>   Else
00029F28 <PED.ab2@414>     commandline.s + " -s Workbench"
00029F70 <PED.ab2@416>   dos_RunCli{commandline.s,0,8192,False}
00029F8A <PED.ab2@417> End Statement
00029FB4 <PED.ab2@434> Statement PrintScreenTitle{text$}
00029FC2 <PED.ab2@436>   winaddr.l = ActiveWindow
00029FCC <PED.ab2@437>   If winaddr
0002A000 <PED.ab2@438>     screentitle$ = text$
0002A016 <PED.ab2@439>     If Peek.b(&screentitle$)
0002A03C <PED.ab2@440>       SetWindowTitles_ winaddr,-1,&screentitle$
0002A054 <PED.ab2@443> End Statement
0002A06E <PED.ab2@446> Function.s TED_GetLibname{libnum.w}
0002A0B0 <PED.ab2@448>   Function Return lib_mapping$(libnum,0)
0002A0BA <PED.ab2@449> End Function
0002A0D8 <PED.ab2@458> Function.s TED_GetTokenName{*tokeninfo.tokeninfo,tnumber.w}
0002A0E2 <PED.ab2@459>   While *tokeninfo
0002A11A <PED.ab2@460>     If *tokeninfo\number = tnumber Then Function Return Peek.s(&*tokeninfo\dat)
0002A124 <PED.ab2@461>     *tokeninfo = *tokeninfo\next_token
0002A12A <PED.ab2@462>   Wend
0002A148 <PED.ab2@463>   Function Return "" ; token not found
0002A152 <PED.ab2@464> End Function
0002A180 <PED.ab2@467> Function.w TED_GetTokenID{*tokeninfo.tokeninfo,tname$}
0002A1CC <PED.ab2@468>   lname$ = LCase$(tname$)
0002A1D6 <PED.ab2@469>   While *tokeninfo
0002A242 <PED.ab2@470>     If LCase$(Peek.s(&*tokeninfo\dat)) = lname$ Then Function Return *tokeninfo\number
0002A24C <PED.ab2@471>     *tokeninfo = *tokeninfo\next_token
0002A252 <PED.ab2@472>   Wend
0002A25E <PED.ab2@473>   Function Return -1 ; token not found
0002A278 <PED.ab2@474> End Function
0002A2A6 <PED.ab2@477> Function.w TED_GetTokenLibnum{*tokeninfo.tokeninfo,tname$}
0002A2DC <PED.ab2@478>   number.w = TED_GetTokenID{*tokeninfo.tokeninfo,tname$}
0002A300 <PED.ab2@479>   If number><-1 Then Function Return (number LSR 7)
0002A30C <PED.ab2@480>   Function Return -1 ; token not found
0002A326 <PED.ab2@481> End Function
0002A354 <PED.ab2@484> Function.s TED_GetTokenHelp{*tokeninfo.tokeninfo,tname$}
0002A3A0 <PED.ab2@485>   lname$ = LCase$(tname$)
0002A3AA <PED.ab2@486>   While *tokeninfo
0002A406 <PED.ab2@487>     If LCase$(Peek.s(&*tokeninfo\dat)) = lname$
0002A44C <PED.ab2@489>       Function Return Peek.s(&*tokeninfo\dat+FLen(tname$)+1)
0002A456 <PED.ab2@491>     *tokeninfo = *tokeninfo\next_token
0002A45C <PED.ab2@492>   Wend
0002A47A <PED.ab2@493>   Function Return "" ; token not found
0002A498 <PED.ab2@494> End Function
0002A4C0 <PED.ab2@503> Dim List HelpIndexCache.HelpIndexCacheItem(0)
0002A4EA <PED.ab2@506> Statement TED_LoadHelpIndexFile{HelpIndexFile$}
0002A52E <PED.ab2@509>   fid.l = file_Open{HelpIndexFile$,#file_read}
0002A542 <PED.ab2@510>   If fid<>-1
0002A54C <PED.ab2@511>     ClearList HelpIndexCache()
0002A568 <PED.ab2@513>     While file_EOF{fid}=False
0002A59C <PED.ab2@514>       zeile$ = file_ReadLine{fid}
0002A5EE <PED.ab2@516>       pos_name.l  = Instr(zeile$,"\\09",1)
0002A61A <PED.ab2@517>       If pos_name=0 Then pos_name=FLen(zeile$)+1
0002A670 <PED.ab2@519>       pos_desc.l  = Instr(zeile$,"\\09",pos_name+1)
0002A69C <PED.ab2@520>       If pos_desc=0 Then pos_desc=FLen(zeile$)+1
0002A6F8 <PED.ab2@522>       typ$  = Mid$(zeile$,1,pos_name-1)
0002A75E <PED.ab2@523>       name$ = Mid$(zeile$,pos_name+1,pos_desc-pos_name-1)
0002A7B4 <PED.ab2@524>       help$ = Mid$(zeile$,pos_desc+1)
0002A7EC <PED.ab2@527>       If typ$><""
0002A824 <PED.ab2@528>       If typ$ = "FILE"
0002A858 <PED.ab2@529>         filename$ = name$
0002A85E <PED.ab2@530>       Else
0002A8AA <PED.ab2@532>         lname$ = LCase$(name$)
0002A8E2 <PED.ab2@533>         If name$><""
0002A91A <PED.ab2@534>           If help$=""
0002A950 <PED.ab2@535>             Select typ$
0002A99C <PED.ab2@536>               Case "FUNC" : help$ = "{...} ; Function"
0002A9EE <PED.ab2@537>               Case "MACR" : help$ = "{...} ; Macro"
0002AA40 <PED.ab2@538>               Case "STAT" : help$ = "{...} ; Statement"
0002AA46 <PED.ab2@539>               Default
0002AA7A <PED.ab2@540>                 help$ = typ$
0002AA88 <PED.ab2@541>             End Select
0002AA9A <PED.ab2@543>           If AddItem(HelpIndexCache())
0002AAD4 <PED.ab2@544>             HelpIndexCache()\name  = name$
0002AB12 <PED.ab2@545>             HelpIndexCache()\lname = lname$
0002AB50 <PED.ab2@546>             HelpIndexCache()\help  = help$
0002AB8E <PED.ab2@547>             HelpIndexCache()\includefile = filename$
0002AB94 <PED.ab2@552>     Wend
0002AB9E <PED.ab2@553>     file_Close{fid}
0002ABB6 <PED.ab2@557> End Statement
0002ABE0 <PED.ab2@560> Statement TED_WriteHelpIndexCache{HelpIndexCacheFile$}
0002AC2A <PED.ab2@563>   If OpenFile(1,HelpIndexCacheFile$)
0002AC34 <PED.ab2@564>     ResetList HelpIndexCache()
0002AC46 <PED.ab2@565>     While NextItem(HelpIndexCache())
0002AC8A <PED.ab2@566>       WriteType 1,HelpIndexCache()
0002AC90 <PED.ab2@567>     Wend
0002ACA8 <PED.ab2@568>     CloseFile 1
0002ACC0 <PED.ab2@570> End Statement
0002ACEA <PED.ab2@573> Statement TED_ReadHelpIndexCache{HelpIndexCacheFile$}
0002AD34 <PED.ab2@577>   If OpenFile(1,HelpIndexCacheFile$)
0002AD3E <PED.ab2@578>     ClearList HelpIndexCache()
0002AD5A <PED.ab2@579>     _lof.l = Lof(1)
0002AD8A <PED.ab2@580>     While _lof>Loc(1)
0002AD9C <PED.ab2@581>       If AddLast(HelpIndexCache())
0002ADE0 <PED.ab2@582>         ReadType 1,HelpIndexCache()
0002ADE6 <PED.ab2@586>       Else
0002AE3C <PED.ab2@587>         error{!TRANS{"Could not build index cache."}}
0002AE42 <PED.ab2@588>         Pop While: Goto exit_while
0002AE48 <PED.ab2@590>     Wend
0002AE60 <PED.ab2@592>     CloseFile 1
0002AE66 <PED.ab2@593>   Else
0002AEF6 <PED.ab2@594>     error{HelpIndexCacheFile$ + " "+!TRANS{"not found."}}
0002AF0E <PED.ab2@599> End Statement
0002AF38 <PED.ab2@602> Function.s TED_GetIncludeHelp{tname$}
0002AF84 <PED.ab2@604>   lname$ = LCase$(tname$)
0002AF8E <PED.ab2@605>   ResetList HelpIndexCache()
0002AFD6 <PED.ab2@606>   If NextItemFast(HelpIndexCache()) = False Then TED_ReadHelpIndexCache{HelpIndexCacheFile$}
0002AFE0 <PED.ab2@607>   ResetList HelpIndexCache()
0002AFF2 <PED.ab2@608>   While NextItemFast(HelpIndexCache())
0002B040 <PED.ab2@609>     If HelpIndexCache()\lname = lname$
0002B074 <PED.ab2@610>       Function Return HelpIndexCache()\help
0002B07A <PED.ab2@612>   Wend
0002B098 <PED.ab2@613>   Function Return ""                 ; function not found
0002B0B6 <PED.ab2@614> End Function
0002B0E0 <PED.ab2@617> Function.s TED_GetIncludeFunction{tname$}
0002B12C <PED.ab2@619>   lname$ = LCase$(tname$)
0002B136 <PED.ab2@620>   ResetList HelpIndexCache()
0002B17E <PED.ab2@621>   If NextItemFast(HelpIndexCache()) = False Then TED_ReadHelpIndexCache{HelpIndexCacheFile$}
0002B188 <PED.ab2@622>   ResetList HelpIndexCache()
0002B19A <PED.ab2@623>   While NextItemFast(HelpIndexCache())
0002B1E8 <PED.ab2@624>     If HelpIndexCache()\lname = lname$
0002B218 <PED.ab2@625>       Function Return HelpIndexCache()\name
0002B21E <PED.ab2@627>   Wend
0002B23C <PED.ab2@628>   Function Return ""                 ; function not found
0002B25A <PED.ab2@629> End Function
0002B284 <PED.ab2@632> Function.s TED_GetIncludeName{tname$}
0002B2D0 <PED.ab2@634>   lname$ = LCase$(tname$)
0002B2DA <PED.ab2@635>   ResetList HelpIndexCache()
0002B322 <PED.ab2@636>   If NextItemFast(HelpIndexCache()) = False Then TED_ReadHelpIndexCache{HelpIndexCacheFile$}
0002B32C <PED.ab2@637>   ResetList HelpIndexCache()
0002B33E <PED.ab2@638>   While NextItemFast(HelpIndexCache())
0002B38C <PED.ab2@639>     If HelpIndexCache()\lname = lname$
0002B3C0 <PED.ab2@640>       Function Return HelpIndexCache()\includefile
0002B3C6 <PED.ab2@642>   Wend
0002B3E4 <PED.ab2@643>   Function Return "" ; function not found
0002B402 <PED.ab2@644> End Function
0002B430 <PED.ab2@647> Function.s TED_GetMacroHelp{macrobase.l,mname$}
0002B4DA <PED.ab2@648>   *mpointer.b = macrobase : mfound.b = False : mcounter.l = 0 : mname$ = StripLead$(StrLower(mname$),Asc("!"))
0002B508 <PED.ab2@651>     b$ = Peek$(*mpointer + 13)
0002B56E <PED.ab2@652>     If StrLower(b$) = mname$
0002B584 <PED.ab2@653>       i.l = Peek.w(*mpointer + 8)
0002B59E <PED.ab2@654>       If i > 90 Then i = 90
0002B5B2 <PED.ab2@655>       macroP.l = Peek.l(*mpointer + 4)
0002B600 <PED.ab2@656>       If macroP Then help.s = StripLead$(Peek.s(macroP),32)
0002B652 <PED.ab2@657>       help = StripLead$(help,@";")
0002B67C <PED.ab2@658>       Function Return help
0002B68A <PED.ab2@660>     *mpointer = Peek.l(*mpointer)
0002B6A2 <PED.ab2@661>   Until *mpointer = 0
0002B6C0 <PED.ab2@662>   Function Return ""
0002B6DE <PED.ab2@663> End Function
0002B70C <PED.ab2@666> Function.s TED_GetMacroName{macrobase.l,mname$}
0002B7B6 <PED.ab2@667>   *mpointer.b = macrobase : mfound.b = False : mcounter.l = 0 : mname$ = StripLead$(StrLower(mname$),Asc("!"))
0002B7E4 <PED.ab2@670>     b$ = Peek$(*mpointer + 13)
0002B84A <PED.ab2@671>     If StrLower(b$) = mname$
0002B874 <PED.ab2@672>       Function Return b$
0002B882 <PED.ab2@674>     *mpointer = Peek.l(*mpointer)
0002B89A <PED.ab2@675>   Until *mpointer = 0
0002B8B8 <PED.ab2@676>   Function Return ""
0002B8D6 <PED.ab2@677> End Function
0002B908 <PED.ab2@680> Statement move_cursor {a$,lst.l,pos.l}
0002B920 <PED.ab2@694> End Statement
0002B94A <PED.ab2@696> Statement activategadget{ag$}  ;ag$ = gadget
0002B99E <PED.ab2@697>   ActivateGadget_ WZGadAddr (ag$),WZWindowAddr,0
0002B9B6 <PED.ab2@698> End Statement
0002BA20 <PED.ab2@702> Statement window_welcome{txt0$,@txt1$,@txt2$,@txt3$,@txt4$}
0002BA2C <PED.ab2@704>   pngimage.l = -1
0002BAD6 <PED.ab2@707>   WZWindow WZID("WIN_WELCOME"),0,128,-2,-2,-2,-2,WZID("WIN_WELCOME")
0002BAFE <PED.ab2@708>   *imagegad.Gadget = WZGadAddr("WELCOME_IMAGE")
0002BB0C <PED.ab2@709>   *win.Window = WZWindowAddr
0002BB44 <PED.ab2@718>   If (txt0$<>"")
0002BB90 <PED.ab2@719>     sharp.b = Instr(txt0$,"#")
0002BBC2 <PED.ab2@720>     vlen.b = Len(txt0$)
0002BC1C <PED.ab2@721>     pv$ = Left$(txt0$,sharp - 1)
0002BC7A <PED.ab2@722>     cv$ = Right$(txt0$,vlen - sharp)
0002BCB4 <PED.ab2@723>     WZPrint "PED",&pv$
0002BCEE <PED.ab2@724>     WZPrint "COMPILER",&cv$
0002BD60 <PED.ab2@726>   If (txt1$<>"") AND (txt2$<>"")
0002BD9A <PED.ab2@727>     WZPrint "TEXT1",&txt1$
0002BDD4 <PED.ab2@728>     WZPrint "TEXT2",&txt2$
0002BE0E <PED.ab2@730>   WZPrint "ACIDLIBS_TEXT",&txt3$
0002BE48 <PED.ab2@731>   WZPrint "DEFLIBS_TEXT",&txt4$
0002BE96 <PED.ab2@747>   If WZ_CheckOpen{"WIN_LABELS"}             Then WZ_LockWindow{"WIN_LABELS"}
0002BEE4 <PED.ab2@748>   If WZ_CheckOpen{"WIN_NEWTYPE"}            Then WZ_LockWindow{"WIN_NEWTYPE"}
0002BF32 <PED.ab2@749>   If WZ_CheckOpen{"WIN_INSTRUCTIONBROWSER"} Then WZ_LockWindow{"WIN_INSTRUCTIONBROWSER"}
0002BF3C <PED.ab2@751>     !ev_WaitEvent
0002BF4E <PED.ab2@752>     If (ev = #IDCMP_IDCMPUPDATE)
0002BF7E <PED.ab2@753>       If WZGadName = "WELCOME_OK"
0002BF84 <PED.ab2@754>         welcome_Exit.b = True
0002BF92 <PED.ab2@757>   Until welcome_Exit
0002BFCA <PED.ab2@758>   WZCloseWindow WZID("WIN_WELCOME")
0002C018 <PED.ab2@760>   If WZ_CheckOpen{"WIN_LABELS"}             Then WZ_UnlockWindow{"WIN_LABELS"}
0002C066 <PED.ab2@761>   If WZ_CheckOpen{"WIN_NEWTYPE"}            Then WZ_UnlockWindow{"WIN_NEWTYPE"}
0002C0B4 <PED.ab2@762>   If WZ_CheckOpen{"WIN_INSTRUCTIONBROWSER"} Then WZ_UnlockWindow{"WIN_INSTRUCTIONBROWSER"}
0002C0BA <PED.ab2@763>   FlushEvents
0002C0D4 <PED.ab2@764> End Statement
0002C0EE <PED.ab2@768> Function.s check_constructs{currentline.l}
0002C116 <PED.ab2@770>     a$ = ""
0002C124 <PED.ab2@771>     *sourceline = Peek.l(currentline)
0002C12E <PED.ab2@772>     *sourceline = *sourceline\NextLine
0002C148 <PED.ab2@775>     testaddr.l = Peek.l(*sourceline + 9) : bytecount.w = 0
0002C168 <PED.ab2@776>     While (testaddr LSR 16) <> $0000
0002C184 <PED.ab2@777>       testaddr = Peek.l(*sourceline + 9 + bytecount)
0002C194 <PED.ab2@778>       actword.w = testaddr LSR 16
0002C19A <PED.ab2@782>       Select actword
0002C1D0 <PED.ab2@783>       Case $8021 : a$ = ""              ; THEN
0002C20C <PED.ab2@784>       Case $8008 : a$ = "End Statement"
0002C248 <PED.ab2@785>       Case $8009 : a$ = "End Function"
0002C284 <PED.ab2@786>       Case $800B : a$ = "EndIf"
0002C2C0 <PED.ab2@787>       Case $800C : a$ = "Wend"
0002C2FC <PED.ab2@788>       Case $800D : a$ = "End Macro"
0002C338 <PED.ab2@789>       Case $800E : a$ = "End Select"
0002C374 <PED.ab2@790>       Case $80BB : a$ = "Until"
0002C3B0 <PED.ab2@791>       Case $8016 : a$ = "Next"
0002C3B2 <PED.ab2@792>       End Select
0002C3C0 <PED.ab2@793>       bytecount + 1
0002C3C6 <PED.ab2@794>     Wend
0002C3F0 <PED.ab2@795>     Function Return a$
0002C408 <PED.ab2@796> End Function
0002C42E <PED.ab2@799> Function.w preparseline{columnpos.w,lineaddr.l,auto_format.b,correct_funcnames.b}
0002C5F6 <PED.ab2@804>   If (lineaddr & $1) <> 0 Then !cout{"alert: odd address " + Hex$(lineaddr)}
0002C5FE <PED.ab2@805>   nostring.l = 0
0002C62A <PED.ab2@806>   For i.l = lineaddr To lineaddr + #MAX_Columns
0002C63C <PED.ab2@807>     If nostring.l = 0
0002C662 <PED.ab2@808>       Poke.b i,Peek.b(i) AND $7f
0002C668 <PED.ab2@809>     Else
0002C68C <PED.ab2@810>       If Peek.b(i) = $22 Then nostring = 0
0002C6B0 <PED.ab2@812>     If Peek.b(i) = $22 Then nostring = 1
0002C6DA <PED.ab2@817>     If Peek.b(i) = 0 Then Poke.b i,32
0002C6EA <PED.ab2@818>   Next
0002C716 <PED.ab2@820>   strg$ = Peeks$(lineaddr,#MAX_Columns) ; check this, was Peeks$$ before!
0002C768 <PED.ab2@824>   test_semi$ = StripLead$(strg$,@" ")
0002C7B4 <PED.ab2@825>   kommata.w = Instr(test_semi$,";")
0002C7D6 <PED.ab2@826>   If kommata AND (kommata < columnpos) Then Function Return columnpos
0002C830 <PED.ab2@828>   len_strg.w = StrLen( StripTrail$(strg$,@" "))
0002C836 <PED.ab2@829>   line_changed.b = False
0002C844 <PED.ab2@833>   If correct_funcnames
0002C896 <PED.ab2@834>     klammer.w = Instr(strg$,"{") - 1
0002C8A4 <PED.ab2@835>     If klammer > 0
0002C8B0 <PED.ab2@836>       run_left.l = -1
0002C8BE <PED.ab2@839>         run_left + 1
0002C91E <PED.ab2@840>         char.l = Asc( Mid$(strg$,klammer - run_left,1) )
0002C9B4 <PED.ab2@841>       Until ( ((char<65) AND (char<>33) AND ((char<48) OR (char>57))) OR (char > 122) OR (char > 90 AND char < 95)) OR (run_left >= klammer)
0002CA0E <PED.ab2@842>       If char = Asc(" ") AND run_left = 0 Then Goto again:
0002CA70 <PED.ab2@846>       funcname$ = StrSub(strg$,klammer - run_left + 1,run_left)
0002CAEE <PED.ab2@847>       funcname$ = StrChg(funcname$," ","")
0002CB46 <PED.ab2@848>       newfuncname$ = TED_GetIncludeFunction{funcname$}
0002CB7E <PED.ab2@849>       If newfuncname$<>""
0002CC14 <PED.ab2@850>         strg$ = StrChg(strg$,funcname$,newfuncname$)
0002CC1A <PED.ab2@851>         line_changed = True
0002CC28 <PED.ab2@857>   If auto_format
0002CC50 <PED.ab2@858>     neustrg$ = ""
0002CC56 <PED.ab2@859>     make_struct.b = On
0002CC84 <PED.ab2@860>     For j.w = 1 To len_strg
0002CC8A <PED.ab2@861>       double_operator.b = False
0002CC90 <PED.ab2@862>       temp_disabled.b = Off
0002CC96 <PED.ab2@863>       no_pre_pad.b = Off
0002CC9C <PED.ab2@864>       no_post_pad.b = Off
0002CCA2 <PED.ab2@865>       comment_mode.b = Off
0002CCFA <PED.ab2@867>       char$ = Mid$(strg$,j,1)
0002CD32 <PED.ab2@868>       If char$<>" "
0002CD66 <PED.ab2@869>         For k.w = 0 To num_operators-1
0002CDB4 <PED.ab2@870>           If char$ = operators$(k)
0002CDE8 <PED.ab2@871>             For l.w = 0 To num_operators - 1
0002CE42 <PED.ab2@872>               If last_op$ = operators$(l) Then double_operator = True
0002CE50 <PED.ab2@873>             Next
0002CE60 <PED.ab2@874>             If NOT double_operator
0002CE66 <PED.ab2@875>               op_found.b = True
0002CE68 <PED.ab2@876>               Pop For
0002CE6E <PED.ab2@877>               Goto exit_for
0002CE74 <PED.ab2@879>           Else
0002CE7A <PED.ab2@880>             op_found = False
0002CE88 <PED.ab2@882>         Next k
0002CF10 <PED.ab2@884>         If char$ = Chr$(34) Then make_struct = -1 + Abs(make_struct)
0002CF62 <PED.ab2@886>         If (op_found = True) AND (last_op$ <> "=")
0002CF96 <PED.ab2@887>           last_op$ = char$
0002CFCC <PED.ab2@889>           Select char$
0002CFF0 <PED.ab2@890>             Case ";"      ; innerhalb von Kommentaren nicht strukturieren
0002CFF6 <PED.ab2@891>               comment_mode = On
0002D020 <PED.ab2@893>             Case "-"      ; eine Zuweisung mit neg. Wert nicht formatieren
0002D0F0 <PED.ab2@894>               If Mid$(strg$,j - 2,2) = "= " OR Mid$(strg$,j - 1,1) = "="
0002D0F6 <PED.ab2@895>                 temp_disabled = On
0002D120 <PED.ab2@898>             Case "<"
0002D1F0 <PED.ab2@899>               If Mid$(strg$,j-2,2) = "> " OR Mid$(strg$,j-1,1)=">"
0002D1F6 <PED.ab2@900>                 no_pre_pad = On
0002D2C6 <PED.ab2@902>               If Mid$(strg$,j+2,2) = "> " OR Mid$(strg$,j+1,1)=">"
0002D2CC <PED.ab2@903>                 no_post_pad = On
0002D2F6 <PED.ab2@906>             Case ">"
0002D3C6 <PED.ab2@907>               If Mid$(strg$,j-2,2) = "< " OR Mid$(strg$,j-1,1)="<"
0002D3CC <PED.ab2@908>                 no_pre_pad = On
0002D49C <PED.ab2@910>               If Mid$(strg$,j+2,2) = "< " OR Mid$(strg$,j+1,1)="<"
0002D4A2 <PED.ab2@911>                 no_post_pad = On
0002D4B0 <PED.ab2@914>           End Select
0002D4E8 <PED.ab2@916>           If make_struct AND (j > 1) AND (NOT temp_disabled) AND (NOT comment_mode = On)
0002D538 <PED.ab2@917>             pad_pre$ = "" : pad_post$ =""
0002D5D6 <PED.ab2@918>             If Mid$(strg$,j - 1,1) <>" " Then pad_pre$  = " " : columnpos + 1
0002D674 <PED.ab2@919>             If Mid$(strg$,j + 1,1) <>" " Then pad_post$ = " " : columnpos + 1
0002D6B6 <PED.ab2@920>             If no_pre_pad                Then pad_pre$  = ""   : columnpos - 1
0002D6F8 <PED.ab2@921>             If no_post_pad               Then pad_post$ = ""   : columnpos - 1
0002D768 <PED.ab2@922>             char$ = pad_pre$ + char$ + pad_post$
0002D76E <PED.ab2@923>             line_changed = True
0002D774 <PED.ab2@925>         Else
0002D79C <PED.ab2@926>           last_op$ = ""
0002D7EE <PED.ab2@929>       neustrg$ + char$
0002D7FC <PED.ab2@930>     Next j
0002D830 <PED.ab2@931>     strg$ = neustrg$
0002D83E <PED.ab2@935>   If line_changed
0002D894 <PED.ab2@936>     strg$ = StrLeft(strg$,#MAX_Columns,32)
0002D8C2 <PED.ab2@937>     For i.l = lineaddr To lineaddr + (#MAX_Columns - 6)
0002D924 <PED.ab2@938>       achar.b = Asc(Mid$(strg$,i + 1 - lineaddr,1))
0002D934 <PED.ab2@939>       Poke.b i,achar
0002D944 <PED.ab2@940>     Next
0002D94E <PED.ab2@944>   Function Return columnpos
0002D962 <PED.ab2@945> End Function
0002D980 <PED.ab2@948> Statement savewinpref{num.l,@sourcewin.l}
0002D99A <PED.ab2@951>   used_win.l = Used Window
0002DA5A <PED.ab2@952>   ret.l = RTEZRequest("",!TRANS{"The window settings have been saved.\\nPress appropriate FN-Key (F4-F6) to set window configuration."},!TRANS{"_Ok"})
0002DA66 <PED.ab2@955>   \lbrowser_on = 0
0002DA72 <PED.ab2@956>   \ibrowser_on = 0
0002DA7E <PED.ab2@957>   \type_on = 0
0002DA8A <PED.ab2@958>   \diag_on = 0
0002DA96 <PED.ab2@959>   \click_on = 0
0002DAA2 <PED.ab2@960>   \short_on = 0
0002DAAE <PED.ab2@968>     \activewin = 0
0002DADA <PED.ab2@971>   If WZ_CheckOpen{"WIN_LIBRARYBROWSER"}
0002DB14 <PED.ab2@972>      Use Window WZID("WIN_LIBRARYBROWSER")
0002DB26 <PED.ab2@973>      \lbrowser_x  = WindowX
0002DB38 <PED.ab2@974>      \lbrowser_y  = WindowY
0002DB4A <PED.ab2@975>      \lbrowser_w  = WindowWidth
0002DB5C <PED.ab2@976>      \lbrowser_h  = WindowHeight
0002DB68 <PED.ab2@977>      \lbrowser_on = 1
0002DB94 <PED.ab2@979>   If WZ_CheckOpen{"WIN_INSTRUCTIONBROWSER"}
0002DBCE <PED.ab2@980>      Use Window WZID("WIN_INSTRUCTIONBROWSER")
0002DBE0 <PED.ab2@981>      \ibrowser_x  = WindowX
0002DBF2 <PED.ab2@982>      \ibrowser_y  = WindowY
0002DC04 <PED.ab2@983>      \ibrowser_w  = WindowWidth
0002DC16 <PED.ab2@984>      \ibrowser_h  = WindowHeight
0002DC22 <PED.ab2@985>      \ibrowser_on = 1
0002DC4E <PED.ab2@987>   If WZ_CheckOpen{"WIN_NEWTYPE"}
0002DC88 <PED.ab2@988>      Use Window WZID("WIN_NEWTYPE")
0002DC9A <PED.ab2@989>      \type_x  = WindowX
0002DCAC <PED.ab2@990>      \type_y  = WindowY
0002DCBE <PED.ab2@991>      \type_w  = WindowWidth
0002DCD0 <PED.ab2@992>      \type_h  = WindowHeight
0002DCDC <PED.ab2@993>      \type_on = 1
0002DD08 <PED.ab2@995>   If WZ_CheckOpen{"WIN_HELPDIAG"}
0002DD42 <PED.ab2@996>      Use Window WZID("WIN_HELPDIAG")
0002DD52 <PED.ab2@997>      \diag_x  = WindowX
0002DD64 <PED.ab2@998>      \diag_y  = WindowY
0002DD76 <PED.ab2@999>      \diag_w  = WindowWidth
0002DD88 <PED.ab2@1000>      \diag_h  = WindowHeight
0002DD94 <PED.ab2@1001>      \diag_on = 1
0002DDC0 <PED.ab2@1003>   If WZ_CheckOpen{"WIN_LABELS"}
0002DDFA <PED.ab2@1004>      Use Window WZID("WIN_LABELS")
0002DE0C <PED.ab2@1005>      \click_x  = WindowX
0002DE1E <PED.ab2@1006>      \click_y  = WindowY
0002DE30 <PED.ab2@1007>      \click_w  = WindowWidth
0002DE42 <PED.ab2@1008>      \click_h  = WindowHeight
0002DE4E <PED.ab2@1009>      \click_on = 1
0002DE7A <PED.ab2@1011>   If WZ_CheckOpen{"WIN_SHORTCUTS"}
0002DEB4 <PED.ab2@1012>      Use Window WZID("WIN_SHORTCUTS")
0002DEC6 <PED.ab2@1013>      \short_x  = WindowX
0002DED8 <PED.ab2@1014>      \short_y  = WindowY
0002DEEA <PED.ab2@1015>      \short_w  = WindowWidth
0002DEFC <PED.ab2@1016>      \short_h  = WindowHeight
0002DF08 <PED.ab2@1017>      \short_on = 1
0002DF1A <PED.ab2@1020>   If sourcewin > 0
0002DF28 <PED.ab2@1021>     *swin.Window = Peek.l(sourcewin)
0002DF3A <PED.ab2@1022>     \source_x = *swin\LeftEdge
0002DF4C <PED.ab2@1023>     \source_y = *swin\TopEdge
0002DF5E <PED.ab2@1024>     \source_w = *swin\Width
0002DF70 <PED.ab2@1025>     \source_h = *swin\Height
0002DF88 <PED.ab2@1029>   *thisscreen.Screen = Peek.l(Addr Screen(0))
0002DF96 <PED.ab2@1030>   *conwin.Window = *thisscreen\FirstWindow
0002DF9E <PED.ab2@1032>   security.l=0
0002DFA8 <PED.ab2@1033>   If *conwin
0002DFC0 <PED.ab2@1034>     While (*conwin<>0)
0002E004 <PED.ab2@1035>       If Peek$(*conwin\Title)<>console_title$
0002E032 <PED.ab2@1036>         If Peek.l(*conwin) Then *conwin = Peek.l(*conwin) Else *conwin = 0
0002E038 <PED.ab2@1037>       Else
0002E03E <PED.ab2@1039>         Goto exit_consearch
0002E04C <PED.ab2@1042>       security + 1
0002E066 <PED.ab2@1043>       If security > 30 Then *conwin = 0
0002E06C <PED.ab2@1044>     Wend
0002E076 <PED.ab2@1047>   If *conwin
0002E088 <PED.ab2@1048>     \console_x = *conwin\LeftEdge
0002E09A <PED.ab2@1049>     \console_y = *conwin\TopEdge
0002E0AC <PED.ab2@1050>     \console_w = *conwin\Width
0002E0BE <PED.ab2@1051>     \console_h = *conwin\Height
0002E0D4 <PED.ab2@1053>   Use Window used_win
0002E108 <PED.ab2@1054>   CopyMem_ &wtemp,&wpref(num),SizeOf .winprefs
0002E10C <PED.ab2@1055> End Statement
0002E136 <PED.ab2@1058> Statement read_libmapping{_file.s}
0002E16A <PED.ab2@1062>   Dim templist$(255,1)
0002E1AE <PED.ab2@1065>   fid.l = file_Open{_file,#file_read}
0002E1C2 <PED.ab2@1066>   If fid<>-1
0002E1CC <PED.ab2@1067>     file_Cache{fid}
0002E200 <PED.ab2@1069>       zeile$ = file_ReadLine{fid}
0002E24C <PED.ab2@1070>       qpos.w = Instr(zeile$,";")
0002E256 <PED.ab2@1071>       If qpos
0002E2AE <PED.ab2@1072>         lstring$ = Left$(zeile$,qpos-1)
0002E31C <PED.ab2@1073>         rstring$ = Right$(zeile$,FLen(zeile$)-qpos)
0002E3B2 <PED.ab2@1076>         templist$(libcounter,0) = StrChg(lstring$," ","")
0002E448 <PED.ab2@1077>         templist$(libcounter,1) = StrChg(rstring$," ","")
0002E456 <PED.ab2@1078>         libcounter + 1
0002E468 <PED.ab2@1080>     Until file_EOF{fid}
0002E472 <PED.ab2@1081>     file_Close{fid}
0002E486 <PED.ab2@1082>     If libcounter = 0 Then Statement Return
0002E48C <PED.ab2@1084>     *tpointer.l = tokenbase
0002E496 <PED.ab2@1085>     If *tpointer
0002E4A4 <PED.ab2@1087>         token_next.l   = Peek.l(*tpointer)
0002E4D2 <PED.ab2@1088>         token_name$    = Peek$(*tpointer+6)
0002E4EE <PED.ab2@1089>         libnum.w = Peek.w(*tpointer+4) LSR 7
0002E51C <PED.ab2@1091>         For i = 0 To libcounter
0002E578 <PED.ab2@1092>           If templist$(i,1) = token_name$
0002E586 <PED.ab2@1093>             If libnum > 0
0002E5D2 <PED.ab2@1094>               libname$ = templist$(i,0)
0002E61E <PED.ab2@1095>               firsttoken$ =  templist$(i,1)
0002E692 <PED.ab2@1096>               If (Instr(lib_mapping$(libnum,0),"unused")=0)
0002E6E2 <PED.ab2@1097>                 message$= !TRANS{"Library clash!\\n" }
0002E79C <PED.ab2@1098>                 message$+ !TRANS{"The dynamic added lib"}+" \\22"+libname$+"\\22\\n"
0002E8C4 <PED.ab2@1099>                 message$+ !TRANS{"has overwritten"}+" \\22"+lib_mapping$(libnum,0)+"\\22 "+!TRANS{"stored in acidlibs/deflibs"}+".\\n"
0002E988 <PED.ab2@1100>                 message$+ !TRANS{"Both libs have the same Lib-ID"}+" "+ Str$(libnum)+".\\n\\n"
0002EA9E <PED.ab2@1101>                 message$+ !TRANS{"Sourcecode that uses"}+" "+ lib_mapping$(libnum,0) + " "+!TRANS{"might not work,\\n"}
0002EB58 <PED.ab2@1102>                 message$+ !TRANS{"because these functions are now mapped to"}+" "+libname$+".\\n\\n"
0002EBD0 <PED.ab2@1103>                 message$+ !TRANS{"You should remove the appropriate library from userlibs-directory,\\nor change the Lib-ID to a free one."}
0002EC6A <PED.ab2@1104>                 dummy.l = RTEZRequest("",message$,!TRANS{ "_Ok"})
0002ED66 <PED.ab2@1105>                 lib_mapping$(libnum,0) = libname$ + " ("+!TRANS{ "clashing with"}+" "+lib_mapping$(libnum,0)+")"
0002ED6C <PED.ab2@1106>               Else
0002EDB8 <PED.ab2@1107>                 lib_mapping$(libnum,0) = libname$
0002EE04 <PED.ab2@1109>               lib_mapping$(libnum,1) = firsttoken$
0002EE0C <PED.ab2@1110>               Pop If : Pop If : Pop For : Goto exit_this_loop
0002EE1A <PED.ab2@1113>         Next i
0002EE20 <PED.ab2@1116>         *tpointer.l = token_next
0002EE38 <PED.ab2@1117>       Until (*tpointer = 0)
0002EE50 <PED.ab2@1120> End Statement
0002EE6E <PED.ab2@1123> Function.l AutoLayout{*wprefs.winprefs,mode.l}
0002EE86 <PED.ab2@1126>   *scr.Screen = Peek.l(Addr Screen(0))
0002EEA0 <PED.ab2@1127>   If *scr=0 Then Function Return False
0002EED8 <PED.ab2@1128>   WZCloseWindow WZID("WIN_INSTRUCTIONBROWSER")
0002EEF6 <PED.ab2@1129>   top.l    = *scr\BarHeight +1 + al_topspace
0002EF12 <PED.ab2@1130>   bottom.l = *scr\Height-1     - al_bottomspace
0002EF22 <PED.ab2@1131>   left.l   = 0                 + al_leftspace
0002EF3E <PED.ab2@1132>   right.l  = *scr\Width-1      - al_rightspace
0002EF54 <PED.ab2@1134>   lock.l = LockIBase_ (0)
0002EF62 <PED.ab2@1135>     *myWindow.Window = *scr\FirstWindow
0002EF6C <PED.ab2@1137>     While *myWindow
0002EF8C <PED.ab2@1138>       rx.l = *myWindow\Width/*myWindow\Height
0002EFAC <PED.ab2@1139>       ry.l = *myWindow\Height/*myWindow\Width
0002EFDC <PED.ab2@1141>       If *myWindow\Flags&#WFLG_BORDERLESS = 0 Then rx=1 : ry=1
0002EFEE <PED.ab2@1142>       If rx>2
0002F016 <PED.ab2@1143>         If *myWindow\TopEdge+*myWindow\Height-1 >= bottom
0002F036 <PED.ab2@1144>           bottom = Min(bottom,*myWindow\TopEdge-1)
0002F056 <PED.ab2@1146>         If *myWindow\TopEdge<*scr\BarHeight
0002F07E <PED.ab2@1147>           top    = Max(top,*myWindow\TopEdge+*myWindow\Height)
0002F090 <PED.ab2@1151>       If ry>2
0002F0B8 <PED.ab2@1152>         If *myWindow\LeftEdge+*myWindow\Width-1 >= right
0002F0D8 <PED.ab2@1153>           right = Min(right,*myWindow\LeftEdge-1)
0002F0EC <PED.ab2@1155>         If *myWindow\LeftEdge<=0
0002F114 <PED.ab2@1156>           left  = Max(left,*myWindow\LeftEdge+*myWindow\Width)
0002F11E <PED.ab2@1159>       *myWindow = *myWindow\NextWindow
0002F124 <PED.ab2@1160>     Wend
0002F134 <PED.ab2@1162>   UnlockIBase_ lock
0002F148 <PED.ab2@1164>   width.l  = right-left+1
0002F15C <PED.ab2@1165>   height.l = bottom-top+1
0002F162 <PED.ab2@1168>   Select mode
0002F170 <PED.ab2@1169>     Case 0    ; Layout A
0002F190 <PED.ab2@1170>       splitpointY.l  = (bottom-top) * 3/4
0002F1B0 <PED.ab2@1171>       splitpointX.l  = (right-left) * 3/4
0002F1C8 <PED.ab2@1173>       If splitpointY<700              Then splitpointY=height
0002F1FA <PED.ab2@1174>       If (right-left)-splitpointX<250 Then splitpointX=right-left-250
0002F226 <PED.ab2@1177>       \source_x    = left,top,splitpointX,splitpointY
0002F23C <PED.ab2@1178>       Poke.w ?win_TopLeft,\source_x
0002F252 <PED.ab2@1179>       Poke.w ?win_TopEdge,\source_y
0002F268 <PED.ab2@1180>       Poke.w ?win_Width  ,\source_w
0002F27E <PED.ab2@1181>       Poke.w ?win_Height ,\source_h
0002F29A <PED.ab2@1182>       If (splitpointY<bottom-top+1)
0002F2AC <PED.ab2@1183>         If (splitpointX>1024)
0002F2B6 <PED.ab2@1184>           \ibrowser_on = True        ; Instruction Browser
0002F304 <PED.ab2@1185>           \ibrowser_x  = left,(top+splitpointY),(splitpointX/2),bottom-(top+splitpointY)+1
0002F30E <PED.ab2@1186>           \lbrowser_on = True
0002F38E <PED.ab2@1187>           \lbrowser_x  = left+splitpointX/2,(top+splitpointY),splitpointX-(splitpointX/2),bottom-(top+splitpointY)+1
0002F394 <PED.ab2@1188>         Else
0002F39E <PED.ab2@1189>           \ibrowser_on = True        ; Instruction Browser
0002F3E2 <PED.ab2@1190>           \ibrowser_x  = left,(top+splitpointY),(splitpointX),bottom-(top+splitpointY)+1
0002F3EC <PED.ab2@1191>           \lbrowser_on = False
0002F3F2 <PED.ab2@1193>       Else
0002F3FC <PED.ab2@1194>         \lbrowser_on = False
0002F406 <PED.ab2@1195>         \ibrowser_on = False
0002F410 <PED.ab2@1197>       \click_on    = True            ; Source Browser
0002F45A <PED.ab2@1198>       \click_x     = (left+splitpointX),top,width-splitpointX,height*3/5
0002F464 <PED.ab2@1199>       \type_on     = True            ; Definition Browser
0002F4F4 <PED.ab2@1200>       \type_x      = (left+splitpointX),(top+height*3/5),width-splitpointX,bottom-((height)*3/5)+1-top
0002F502 <PED.ab2@1202>       If splitpointY<height
0002F53A <PED.ab2@1203>         \console_x   = left,(top+splitpointY),splitpointX,height-splitpointY
0002F540 <PED.ab2@1204>       Else
0002F56C <PED.ab2@1205>         \console_x   = left,(top),splitpointX,height
0002F580 <PED.ab2@1208>     Case 1    ; Layout B
0002F5B4 <PED.ab2@1209>       splitpointX1.l  = (width)  * 1/4 : If splitpointX1<400       Then splitpointX1=400
0002F5F4 <PED.ab2@1210>       splitpointX2.l  = (width)  * 3/4 : If width-splitpointX2<250 Then splitpointX2=width-250
0002F60E <PED.ab2@1211>       splitpointY.l   = (height) * 3/5
0002F62E <PED.ab2@1213>       If splitpointX2-splitpointX1<320 Then splitpointX1=0 ;: splitpointX2.l  = (right-left) * 1/3
0002F648 <PED.ab2@1214>       If splitpointY <400              Then splitpointY=0
0002F680 <PED.ab2@1217>       \source_x    = left+splitpointX1,top,splitpointX2-splitpointX1,height
0002F696 <PED.ab2@1218>       Poke.w ?win_TopLeft,\source_x
0002F6AC <PED.ab2@1219>       Poke.w ?win_TopEdge,\source_y
0002F6C2 <PED.ab2@1220>       Poke.w ?win_Width  ,\source_w
0002F6D8 <PED.ab2@1221>       Poke.w ?win_Height ,\source_h
0002F6EA <PED.ab2@1223>       If (splitpointX1>0)
0002F6FC <PED.ab2@1224>         If (splitpointY>0)
0002F706 <PED.ab2@1225>           \ibrowser_on = True ; Instruction Browser
0002F732 <PED.ab2@1226>           \ibrowser_x  = left,top,splitpointX1,splitpointY
0002F73C <PED.ab2@1227>           \lbrowser_on = True
0002F774 <PED.ab2@1228>           \lbrowser_x  = left,top+splitpointY,splitpointX1,height-splitpointY
0002F77A <PED.ab2@1229>         Else
0002F784 <PED.ab2@1230>           \ibrowser_on = True ; Instruction Browser
0002F7B0 <PED.ab2@1231>           \ibrowser_x  = left,top,splitpointX1,height
0002F7BA <PED.ab2@1232>           \lbrowser_on = False
0002F7C0 <PED.ab2@1234>       Else
0002F7CA <PED.ab2@1235>         \lbrowser_on = False
0002F7D4 <PED.ab2@1236>         \ibrowser_on = False
0002F7E6 <PED.ab2@1238>       If (splitpointY>0)
0002F7F0 <PED.ab2@1239>         \click_on    = True ; Source Browser
0002F828 <PED.ab2@1240>         \click_x     = left+splitpointX2 ,top,width-splitpointX2,splitpointY
0002F832 <PED.ab2@1241>         \type_on     = True ; Definition Browser
0002F876 <PED.ab2@1242>         \type_x      = left+splitpointX2 ,top+splitpointY,width-splitpointX2,height-splitpointY
0002F87C <PED.ab2@1243>       Else
0002F886 <PED.ab2@1244>         \click_on    = True ; Source Browser
0002F8BE <PED.ab2@1245>         \click_x     = left+splitpointX2,top,width-splitpointX2,height
0002F8C8 <PED.ab2@1246>         \type_on     = False ; Definition Browser
0002F900 <PED.ab2@1248>       \console_x    = left,(top+splitpointY),width,height-splitpointY
0002F914 <PED.ab2@1250>     Case 2    ; Layout C
0002F954 <PED.ab2@1251>       splitpointX.l  = (width) * 3/4 : If width-splitpointX<250 Then splitpointX=width-250
0002F96E <PED.ab2@1252>       splitpointY.l  = (height) * 3/5
0002F988 <PED.ab2@1253>       If splitpointY <400 Then splitpointY=0
0002F9B4 <PED.ab2@1256>       \source_x    = left,top,splitpointX,height
0002F9CA <PED.ab2@1257>       Poke.w ?win_TopLeft,\source_x
0002F9E0 <PED.ab2@1258>       Poke.w ?win_TopEdge,\source_y
0002F9F6 <PED.ab2@1259>       Poke.w ?win_Width  ,\source_w
0002FA0C <PED.ab2@1260>       Poke.w ?win_Height ,\source_h
0002FA16 <PED.ab2@1262>       \lbrowser_on = False
0002FA20 <PED.ab2@1263>       \ibrowser_on = False
0002FA32 <PED.ab2@1265>       If (splitpointY>0)
0002FA3C <PED.ab2@1266>         \click_on    = True ; Source Browser
0002FA74 <PED.ab2@1267>         \click_x     = left+splitpointX ,top,width-splitpointX,splitpointY
0002FA7E <PED.ab2@1268>         \type_on     = True ; Definition Browser
0002FAC2 <PED.ab2@1269>         \type_x      = left+splitpointX ,top+splitpointY,width-splitpointX,height-splitpointY
0002FAC8 <PED.ab2@1270>       Else
0002FAD2 <PED.ab2@1271>         \click_on    = True ; Source Browser
0002FB0A <PED.ab2@1272>         \click_x     = left+splitpointX,top,width-splitpointX,height
0002FB14 <PED.ab2@1273>         \type_on     = False ; Definition Browser
0002FB4C <PED.ab2@1275>       \console_x   = left,(top+splitpointY),width,height-splitpointY
0002FB4E <PED.ab2@1278>   End Select
0002FB56 <PED.ab2@1280>   Function Return True
0002FB5C <PED.ab2@1281> End Function
0002FB78 <PED.ab2@1293> FindScreen 0
0002FB96 <PED.ab2@1295> !asm
0002FB9C <PED.ab2@1300> CMP.l #"TEDY",D1
0002FBA0 <PED.ab2@1301> BEQ 'no_exit
0002FBCA <PED.ab2@1302>   !basic
0002FBF8 <PED.ab2@1303>   error{"PED is not a standalone editor anymore.\\nPlease start the AmiBlitz3-IDE via Compiler."}
0002FBFE <PED.ab2@1304>   Goto abnormal_exit
0002FC28 <PED.ab2@1306> !basic
0002FC4E <PED.ab2@1308> !TRANS_INIT{"AmiBlitz3"}
0002FC82 <PED.ab2@1312> !ComData_LEA{comFunc_OpenWindow             ,A0}                : MOVE.l #comwin_open                 ,(A0)
0002FCB6 <PED.ab2@1313> !ComData_LEA{comFunc_CloseWindow            ,A0}                : MOVE.l #comwin_close                ,(A0) ;$04
0002FCEA <PED.ab2@1314> !ComData_LEA{comFunc_MessageLoop            ,A0}                : MOVE.l #general_message_loop        ,(A0) ;$08
0002FD1E <PED.ab2@1315> !ComData_LEA{comFunc_ErrorRequest           ,A0}                : MOVE.l #show_errorrequester         ,(A0) ;$0C
0002FD52 <PED.ab2@1316> !ComData_LEA{comFunc_DetokenizeSource       ,A0}                : MOVE.l #DetokenizeSource            ,(A0) ;$10
0002FD86 <PED.ab2@1317> !ComData_LEA{comFunc_TokenizeSource         ,A0}                : MOVE.l #TokenizeSource              ,(A0) ;$14
0002FDBA <PED.ab2@1318> !ComData_LEA{comFunc_ASLFileRequest         ,A0}                : MOVE.l #show_aslfilerequest         ,(A0) ;$18
0002FDEE <PED.ab2@1319> !ComData_LEA{comFunc_RefreshGadList         ,A0}                : MOVE.l #comwin_refreshglist         ,(A0) ;$1c
0002FE22 <PED.ab2@1320> !ComData_LEA{comFunc_CheckEvents            ,A0}                : MOVE.l #check_events                ,(A0) ;$20
0002FE56 <PED.ab2@1321> !ComData_LEA{comFunc_SetStoredColors        ,A0}                : MOVE.l #set_storedcolors            ,(A0) ;$30
0002FE8A <PED.ab2@1322> !ComData_LEA{comFunc_SetStoredColors2       ,A0}                : MOVE.l #set_storedcolors            ,(A0) ;$34
0002FEBE <PED.ab2@1323> !ComData_LEA{comFunc_DebugTrap              ,A0}                : MOVE.l #com_0_44E2                  ,(A0) ;$38
0002FEF2 <PED.ab2@1324> !ComData_LEA{comFunc_OpenConsole            ,A0}                : MOVE.l #console_open                ,(A0) ;$3C
0002FF26 <PED.ab2@1325> !ComData_LEA{comFunc_CloseConsole           ,A0}                : MOVE.l #console_close               ,(A0) ;$40
0002FF5A <PED.ab2@1326> !ComData_LEA{comFunc_ActivateGadCompilerWin ,A0}                : MOVE.l #activate_gad_in_compilerwin ,(A0) ;$44
0002FF8E <PED.ab2@1327> !ComData_LEA{comFunc_SetNormalPointer       ,A0}                : MOVE.l #set_pointernormal           ,(A0) ;$48
0002FFC2 <PED.ab2@1328> !ComData_LEA{comFunc_SetBusyPointer         ,A0}                : MOVE.l #set_pointerbusy             ,(A0) ;$4C     4c 4d 4e 4f
0002FFF6 <PED.ab2@1329> !ComData_LEA{comFunc_CloseCompilerWin       ,A0}                : MOVE.l #old_CloseCompilerWin        ,(A0) ;$58     58 59 5a 5b
0003002A <PED.ab2@1330> !ComData_LEA{comFunc_DetokenizeLine         ,A0}                : MOVE.l #detokenize_line             ,(A0) ;$64
0003005E <PED.ab2@1331> !ComData_LEA{comPtr_CurrentDir              ,A0}                : MOVE.l #comStr_CurrentDir           ,(A0) ;$68
00030092 <PED.ab2@1332> !ComData_LEA{comPtr_SourceName              ,A0}                : MOVE.l #comStr_SourceName           ,(A0) ;$6C
000300C6 <PED.ab2@1333> !ComData_LEA{comFunc_AL_0_852E              ,A0}                : MOVE.l #AL_0_8BD2                   ,(A0) ;$70
000300FA <PED.ab2@1334> !ComData_LEA{comFunc_AL_0_8532              ,A0}                : MOVE.l #AL_0_8BD6                   ,(A0)
0003012C <PED.ab2@1335> !ComData_LEA{comWord_MaxColumns             ,A0}                : MOVE.w #MAX_Columns                 ,(A0)
00030160 <PED.ab2@1336> !ComData_LEA{comFunc_OpenCompilerWindow     ,A0}                : MOVE.l #compiler_openwindow         ,(A0)
00030198 <PED.ab2@1337> !ComData_SetL{comFunc_CloseGUI              ,#close_gui}
000301D0 <PED.ab2@1338> !ComData_SetL{comFunc_CreateGUI             ,#create_whole_gui}
00030208 <PED.ab2@1339> !ComData_SetL{comData_Magic                 ,#$7E3A3A7E}        ;#"~::~"}  ;
00030236 <PED.ab2@1340> !ComData_LEA{comArray_KeyTable              ,A0}
0003023E <PED.ab2@1341> MOVE.l #key_cursorup                        ,02(A0)
00030246 <PED.ab2@1342> MOVE.l #key_cursordown                      ,08(A0)
0003024E <PED.ab2@1343> MOVE.l #insertreturn                        ,14(A0)
00030256 <PED.ab2@1344> MOVE.l #menu_helpgeneral                    ,20(A0)
0003025E <PED.ab2@1345> MOVE.l #menu_helpincludesguide              ,26(A0)
00030266 <PED.ab2@1346> MOVE.l #menu_helpblitzlibs                  ,32(A0)
0003026E <PED.ab2@1347> MOVE.l #menu_dublicate                      ,38(A0)
00030276 <PED.ab2@1348> MOVE.l #menu_previousfile                   ,44(A0)
0003027E <PED.ab2@1349> MOVE.l #menu_nextfile                       ,50(A0)
00030286 <PED.ab2@1350> MOVE.l #event_helpkey                       ,56(A0)
0003028E <PED.ab2@1351> MOVE.l #event_vertscroller                  ,62(A0)
00030296 <PED.ab2@1352> MOVE.l #event_shortcut                      ,68(A0)
0003029E <PED.ab2@1353> MOVE.l #event_leftmousebutton               ,74(A0)
000302A6 <PED.ab2@1354> MOVE.l #AJL_0_7FCC                          ,80(A0)
000302CE <PED.ab2@1357> errorout.s = ""      ; for the error text
000302D4 <PED.ab2@1358> ende.b     = False   ; abort indicater
0003030C <PED.ab2@1360> If dos_CheckLib{"wizard.library",42} = False        ; needed for Compiler, PED and REDDebugger
00030352 <PED.ab2@1361>   errorout + "Missing wizard.library:\\nThis library is required in version 42 by this IDE.\\n\\n"
00030358 <PED.ab2@1362>   ende = True
00030390 <PED.ab2@1365> If dos_CheckLib{"reqtools.library",39} = False      ; needed for PED and REDDebugger
000303D6 <PED.ab2@1366>   errorout + "Missing reqtools.library:\\nThis library is required in version 39 by the IDE.\\n\\n"
000303DC <PED.ab2@1367>   ende = True
00030414 <PED.ab2@1370> If dos_CheckLib{"ted.library",1} = False           ; needed for PED and REDDebugger
0003045A <PED.ab2@1371>   errorout + "Missing ted.library:\\nThis library is required in version 1 by the IDE.\\n\\n"
00030460 <PED.ab2@1372>   ende = True
00030498 <PED.ab2@1375> If dos_CheckLib{"disassembler.library",40} = False ; only needed for REDDebugger
000304DE <PED.ab2@1376>   errorout + "Missing disassembler.library:\\nThis library is required in version 40 for REDDebugger.\\nASM debugging won't work.\\n\\n"
00030516 <PED.ab2@1379> If errorout <> ""     ; check if somthing to show
0003055C <PED.ab2@1380>    errorout = "Please reinstall AmiBlitz3 or install the librarys in LIBS:\\n\\n" + errorout
0003056A <PED.ab2@1381>    If ende
000305B0 <PED.ab2@1382>      errorout + "...that the PED can start!" ; for abort
000305B6 <PED.ab2@1383>    Else
000305FC <PED.ab2@1384>      errorout + "...for a full working IDE!" ; for limited start
0003065E <PED.ab2@1386>    error{!TRANS{errorout}}
00030672 <PED.ab2@1390> If ende Then Goto abnormal_exit
000306B0 <PED.ab2@1392> *MyCatalog.l=OpenCatalogA_(0,"PED.catalog",0)
000306BA <PED.ab2@1394> If *MyCatalog
000306FA <PED.ab2@1395>    WZTags #SFH_Catalog,*MyCatalog,#TAG_DONE,0,#TAG_END,0
00030710 <PED.ab2@1398> WZLoadGUI ?wzgui
00030760 <PED.ab2@1402> WZ_ShowMessage{!TRANS{"Initiating AmiBlitz3 Environment..."}}
000307A6 <PED.ab2@1406> *win.Window = Peek.l(Addr Window(WZID("WIN_PROGRESS")))      ;get window pointer  tomsmart1
000307E0 <PED.ab2@1407> newwintitle.s="Amiblitz3 V" + !versions                      ;new window title tomsmart1
00030826 <PED.ab2@1408> SetWindowTitles_ *win,newwintitle,-1                         ;show new window title  tomsmart1
00030884 <PED.ab2@1416> Poke.s ?warningtitle,!TRANS{"!!!PROGRAM IS RUNNING: ONLY SAVE/NAVIGATION/HELP WILL WORK..."}
000308D0 <PED.ab2@1417> a$ = dos_GetProgIcon{"Blitz3:AmiBlitz3"}
00030902 <PED.ab2@1420>   disk_object.l = dos_OpenToolTypes{a$}
0003090C <PED.ab2@1421>   If disk_object
00030970 <PED.ab2@1422>     If dos_GetToolState{"no_welcome"}         = -1 Then Poke.b ?no_welcome         ,1 : Else Poke.b ?no_welcome         ,0
000309D4 <PED.ab2@1423>     If dos_GetToolState{"standardeditmode"}   = -1 Then Poke.b ?new_editmode       ,1 : Else Poke.b ?new_editmode       ,0
00030A38 <PED.ab2@1424>     If dos_GetToolState{"oldsearch"}          = -1 Then Poke.w ?oldsearch          ,1 : Else Poke.w ?oldsearch          ,0
00030A9C <PED.ab2@1425>     If dos_GetToolState{"nodisplaybeep"}      = -1 Then Poke.b ?nodisplaybeep      ,1 : Else Poke.b ?nodisplaybeep      ,0
00030B00 <PED.ab2@1427>     If dos_GetToolState{"auto_format"}        = -1 Then Poke.b ?auto_format        ,1 : Else Poke.b ?auto_format        ,0
00030B64 <PED.ab2@1428>     If dos_GetToolState{"USE_INTELLISENSE"}   = -1 Then Poke.b ?use_intellisense   ,1 : Else Poke.b ?use_intellisense   ,0
00030BC8 <PED.ab2@1429>     If dos_GetToolState{"AUTO_CONSTRUCTS"}    = -1 Then Poke.b ?auto_constructs    ,1 : Else Poke.b ?auto_constructs    ,0
00030C2C <PED.ab2@1430>     If dos_GetToolState{"correct_functions"}  = -1 Then Poke.b ?correct_functions  ,1 : Else Poke.b ?correct_functions  ,0
00030C90 <PED.ab2@1431>     If dos_GetToolState{"smart_tokenization"} = -1 Then Poke.w ?smart_tokenization ,1 : Else Poke.w ?smart_tokenization ,0
00030CF4 <PED.ab2@1433>     If dos_GetToolState{"tokenbold"}          = -1 Then Poke.w ?bold_tokens        ,1 : Else Poke.w ?bold_tokens        ,0
00030D58 <PED.ab2@1434>     If dos_GetToolState{"italic_remarks"}     = -1 Then Poke.w ?italic_remarks     ,1 : Else Poke.w ?italic_remarks     ,0
00030DBC <PED.ab2@1435>     If dos_GetToolState{"onlinehelp"}         = -1 Then Poke.b ?onlinehelp         ,1 : Else Poke.b ?onlinehelp         ,0
00030E20 <PED.ab2@1437>     If dos_GetToolState{"use_asldims"}        = -1 Then Poke.w ?use_asldims        ,1 : Else Poke.w ?use_asldims        ,0
00030E84 <PED.ab2@1438>     If dos_GetToolState{"SOURCE_HISTORY"}     = -1 Then Poke.w ?remember_saved     ,1 : Else Poke.w ?remember_saved     ,0
00030EE8 <PED.ab2@1439>     If dos_GetToolState{"load_last_source"}   = -1 Then Poke.b ?load_last_source   ,1 : Else Poke.b ?load_last_source   ,0
00030F38 <PED.ab2@1441>     If dos_GetToolState{"sort_labels"}        = -1 Then sort_labels.l  = True : Else sort_labels  = False
00030F88 <PED.ab2@1442>     If dos_GetToolState{"CON_ONWB"}           = -1 Then console_wb.l   = True : Else console_wb   = False
00030FD8 <PED.ab2@1443>     If dos_GetToolState{"CON_WAIT"}           = -1 Then console_wait.l = True : Else console_wait = False
00031016 <PED.ab2@1445>     If dos_GetToolState{"clone_wbscreen"}   = True
00031026 <PED.ab2@1446>       Poke.b ?clone_wbscreen,1
00031036 <PED.ab2@1447>       Poke.b ?use_wbscreen  ,0         ; for the case that both tooltypes are set we use cloneWB
0003103C <PED.ab2@1448>     Else
0003107A <PED.ab2@1449>       If dos_GetToolState{"use_wbscreen"}   = True
0003108A <PED.ab2@1450>         Poke.b ?use_wbscreen  ,1
0003109A <PED.ab2@1451>         Poke.b ?clone_wbscreen,0
000310D8 <PED.ab2@1455>     If dos_GetToolState{"defaultpubscreen"} = True
000310E8 <PED.ab2@1456>       Poke.w ?use_default_pubscreen,1
000310EE <PED.ab2@1457>     Else
000310FE <PED.ab2@1458>       Poke.w ?use_default_pubscreen,0
0003113C <PED.ab2@1461>     If dos_GetToolState{"use_wbfont"}       = True
00031142 <PED.ab2@1462>       use_wbfont.b = True
00031148 <PED.ab2@1465>   Else
00031150 <PED.ab2@1466>     MOVE.w #1,bold_tokens
00031158 <PED.ab2@1467>     MOVE.b #1,onlinehelp
00031160 <PED.ab2@1468>     MOVE.b #1,new_editmode
00031168 <PED.ab2@1469>     MOVE.b #1,use_wbscreen
00031170 <PED.ab2@1470>     MOVE.b #0,clone_wbscreen
00031178 <PED.ab2@1471>     MOVE.w #0,use_default_pubscreen
0003117E <PED.ab2@1472>     use_wbfont.b = True
000311B8 <PED.ab2@1475>   autolayout.l     = dos_GetToolValue{"autolayout"      ,-1}
000311F0 <PED.ab2@1476>   al_leftspace.l   = dos_GetToolValue{"autolayout_left"  ,0}
00031228 <PED.ab2@1477>   al_topspace.l    = dos_GetToolValue{"autolayout_top"   ,0}
00031260 <PED.ab2@1478>   al_rightspace.l  = dos_GetToolValue{"autolayout_right" ,0}
00031298 <PED.ab2@1479>   al_bottomspace.l = dos_GetToolValue{"autolayout_bottom",0}
0003130C <PED.ab2@1481>   console_device$ = dos_GetToolString{"CON_DEVICE","CON:"}
00031380 <PED.ab2@1482>   console_font$   = dos_GetToolString{"CON_FONT",""}
000313D0 <PED.ab2@1483>   console_title$  = !TRANS{"AmiBlitz3 Console Output"}
00031408 <PED.ab2@1485>   scroll_rate.l = dos_GetToolValue{"scrollrate",0}
0003141A <PED.ab2@1486>   If scroll_rate<>0
00031444 <PED.ab2@1487>     If vvblank_SetFreq {scroll_rate}=False Then MOVE.b #1,old_scrolling
0003144A <PED.ab2@1488>   Else
00031452 <PED.ab2@1489>     MOVE.b #1,old_scrolling
0003149C <PED.ab2@1491>   Poke.b ?blinkrate, dos_GetToolValue{"cursorblinkrate",5}
000314E6 <PED.ab2@1494>   Poke.l ?aslreq_x      ,dos_GetToolValue{"ASLREQ_X" ,20}
00031530 <PED.ab2@1495>   Poke.l ?aslreq_y      ,dos_GetToolValue{"ASLREQ_Y" ,20}
0003157A <PED.ab2@1496>   Poke.l ?aslreq_width  ,dos_GetToolValue{"ASLREQ_W",320}
000315C4 <PED.ab2@1497>   Poke.l ?aslreq_height ,dos_GetToolValue{"ASLREQ_H",200}
00031646 <PED.ab2@1498>   Poke.s ?comStr_FilePattern,dos_GetToolString{"ASLREQ_Pattern","#?.(bb2|ab2|ab3|asc|txt)"}
00031662 <PED.ab2@1500>   If Peek.w(?use_asldims) <> 0
000316B6 <PED.ab2@1501>     asl_SetRequesterDims{Peek.l(?aslreq_x),Peek.l(?aslreq_y),Peek.l(?aslreq_width),Peek.l(?aslreq_height)}
000316BC <PED.ab2@1502>   Else
000316E2 <PED.ab2@1503>     asl_SetRequesterDims{-1,-1,-1,-1}
00031726 <PED.ab2@1507>   AB3RGB(#AB3_ctoken)            = dos_GetToolValue{"tokencolor"      ,$646bd7} ;: Poke.b ?tokencolor,AB3RGB(#AB3_ctoken
0003176A <PED.ab2@1508>   AB3RGB(#AB3_cfunction)         = dos_GetToolValue{"functioncolor"   ,$396635} ;: Poke.l ?functioncolor,AB3RGB(#AB3_cfunction
000317AE <PED.ab2@1509>   AB3RGB(#AB3_cconstant)         = dos_GetToolValue{"constantcolor"   ,$8C338A} ;: Poke.l ?constantcolor,AB3RGB(#AB3_cconstant
000317F2 <PED.ab2@1510>   AB3RGB(#AB3_cnewtype)          = dos_GetToolValue{"newtypecolor"    ,$153492} ;: Poke.l ?newtypecolor,AB3RGB(#AB3_cnewtype
00031836 <PED.ab2@1511>   AB3RGB(#AB3_cstring)           = dos_GetToolValue{"stringcolor"     ,$7D8A83} ;: Poke.w ?stringcolor,AB3RGB(#AB3_cstring
0003187A <PED.ab2@1512>   AB3RGB(#AB3_cmacro)            = dos_GetToolValue{"macrocolor"      ,$CB3817} ;: Poke.l ?macrocolor,AB3RGB(#AB3_cmacro
000318BE <PED.ab2@1513>   AB3RGB(#AB3_cother)            = dos_GetToolValue{"othercolor"      ,$000000} ;: Poke.w ?othercolor,AB3RGB(#AB3_cother
00031902 <PED.ab2@1514>   AB3RGB(#AB3_cremarkforeground) = dos_GetToolValue{"remarkforg"      ,$6a9a66} ;: Poke.b ?remarkcolor,AB3RGB(#AB3_cremarkforg
00031946 <PED.ab2@1515>   AB3RGB(#AB3_cremarkbackground) = dos_GetToolValue{"remarkbackg"     ,$f9f9f9} ;: Poke.b ?remarkbgcolor,AB3RGB(#AB3_cremarkbackg
0003198A <PED.ab2@1516>   AB3RGB(#AB3_ctokenbackground)  = dos_GetToolValue{"tokenbackpen"    ,$ffffff} ;: Poke.b ?tokenbackground,AB3RGB(#AB3_ctokenbackground
000319CE <PED.ab2@1517>   AB3RGB(#AB3_cbackground)       = dos_GetToolValue{"backgroundcolor" ,$ffffff} ;: Poke.l ?backgroundcolor,AB3RGB(#AB3_cbackgroundcolor
00031A12 <PED.ab2@1518>   AB3RGB(#AB3_cclassic)          = dos_GetToolValue{"classiccolor"    ,$ff0500} ;: Poke.w ?classiccolor,AB3RGB(#AB3_cclassic
00031A56 <PED.ab2@1519>   AB3RGB(#AB3_screenback)        = dos_GetToolValue{"screenbackcolor" ,$c8c8c8} ;: Poke.w ?classiccolor,AB3RGB(#AB3_cclassic
00031A9A <PED.ab2@1520>   AB3RGB(#AB3_screentext)        = dos_GetToolValue{"screentextcolor" ,$000000} ;: Poke.w ?classiccolor,AB3RGB(#AB3_cclassic
00031ADE <PED.ab2@1521>   AB3RGB(#AB3_screenshine)       = dos_GetToolValue{"screenshinecolor",$FFFFFF} ;: Poke.w ?classiccolor,AB3RGB(#AB3_cclassic
00031B22 <PED.ab2@1522>   AB3RGB(#AB3_screenfill)        = dos_GetToolValue{"screenfillcolor" ,$6e94e2} ;: Poke.w ?classiccolor,AB3RGB(#AB3_cclassic
00031B6A <PED.ab2@1525>   myscreen_modeid.l  = dos_GetToolValue{"SCREEN_ID"     ,0} : Poke.l ?ownscreen_modeid ,myscreen_modeid
00031BB2 <PED.ab2@1526>   myscreen_Width.l   = dos_GetToolValue{"SCREEN_WIDTH"  ,0} : Poke.w ?ownscreen_width  ,myscreen_Width
00031BFA <PED.ab2@1527>   myscreen_Height.l  = dos_GetToolValue{"SCREEN_HEIGHT" ,0} : Poke.w ?ownscreen_height ,myscreen_Height
00031C42 <PED.ab2@1528>   myscreen_Depth.l   = dos_GetToolValue{"SCREEN_DEPTH"  ,0} : Poke.w ?ownscreen_depth  ,myscreen_Depth
00031C96 <PED.ab2@1531>   If Peek.b(?clone_wbscreen)=0 AND Peek.b(?use_wbscreen )=0 AND myscreen_modeid.l=0
00031CA6 <PED.ab2@1532>      Poke.b ?use_wbscreen,1          ; we use WBScreen if no Screen Tooltype is set
00031CBC <PED.ab2@1535>   MaxLen str2$   = 4096   ; this is important since Honitos used some string pointers, that might be empty
00031CD2 <PED.ab2@1536>   MaxLen cstr$   = 4096   ; pointers to empty string might be NULL, that's why!
00031CE8 <PED.ab2@1537>   MaxLen cstr2$  = 4096   ; pointers to empty string might be NULL, that's why!
00031CFE <PED.ab2@1538>   MaxLen str2b$  = 4096
00031D26 <PED.ab2@1539>   str2$          = ""
00031D4E <PED.ab2@1540>   cstr$          = ""
00031D76 <PED.ab2@1541>   cstr2$         = ""
00031D9E <PED.ab2@1542>   str2b$         = ""
00031DC6 <PED.ab2@1543>   changelog$     = ""
00031DEE <PED.ab2@1544>   oldfindstr$    = ""
00031E16 <PED.ab2@1545>   oldreplacestr$ = ""
00031E30 <PED.ab2@1548>   If use_wbfont = False
00031EA4 <PED.ab2@1550>     str_guifont$    = dos_GetToolString{"guifont",""}       ; no predefine Font use WB fonts instead
00031F18 <PED.ab2@1551>     str_sourcefont$ = dos_GetToolString{"sourcefont",""}
00031F8A <PED.ab2@1553>     If str_guifont$<>"" OR str_sourcefont$<>""
00031FC2 <PED.ab2@1555>       If str_guifont$<>""
00031FEE <PED.ab2@1556>         InitArgParse str_guifont$
00032016 <PED.ab2@1557>         guifont$ = NextArgChar$(@",")
00032038 <PED.ab2@1558>         a$ = NextArg$
0003206C <PED.ab2@1559>         guifontsize.w = Vallong(a$)
000320A4 <PED.ab2@1562>       If str_sourcefont$<>""
000320D0 <PED.ab2@1563>         InitArgParse str_sourcefont$
000320F8 <PED.ab2@1564>         sourcefont$ = NextArgChar$(@",")
0003211A <PED.ab2@1565>         a$ = NextArg$
0003214E <PED.ab2@1566>         sourcefont_size.w = Vallong(a$)
000321F6 <PED.ab2@1568>         Poke.s ?str_sourcefontname ,sourcefont$ + StrClone(Chr$(0),79 - Len(sourcefont$))
00032206 <PED.ab2@1569>         Poke.w ?sourcefontsize     ,sourcefont_size
00032216 <PED.ab2@1570>         Poke.b ?sourcefontstyle    ,sourcefont_style.w
0003221C <PED.ab2@1572>     Else
00032222 <PED.ab2@1574>       use_wbfont.b = True
000322A2 <PED.ab2@1579>   my_maindir$      = dos_GetToolString{"ASSIGN",default_assign$}
00032314 <PED.ab2@1580>   If my_maindir$ = "" Then my_maindir$ = default_assign$ ; in case someone sets assign to ""
00032388 <PED.ab2@1581>   my_systemdir$    = dos_AddPart{my_maindir$,"System"}
000323FC <PED.ab2@1582>   my_blitzlibsdir$ = dos_AddPart{my_maindir$,"Blitzlibs"}
00032470 <PED.ab2@1583>   last_source$     = dos_GetToolString{"last_source",""}
0003254C <PED.ab2@1585>   includedir$      = dos_GetToolString{"INCLUDEDIR" ,dos_AddPart{my_maindir$,"Sourcecodes/Includes"}} : Poke.l ?ptr_incdirname,&includedir$
00032616 <PED.ab2@1586>   helpdir$         = dos_GetToolString{"HELPDIR"    ,dos_AddPart{my_maindir$,"Docs"}}
000326E0 <PED.ab2@1587>   autodocdir$      = dos_GetToolString{"AUTODOCDIR" ,dos_AddPart{my_maindir$,"Docs"}}
000327BC <PED.ab2@1588>   sourcedir$       = dos_GetToolString{"SOURCEDIR"  ,dos_AddPart{my_maindir$,"Sourcecodes"}} : Poke.l ?ptr_source_dir,&sourcedir$
00032898 <PED.ab2@1589>   addonprefs$      = dos_GetToolString{"WINDOWPREFS",dos_AddPart{my_maindir$,"System/ped_addon.prefs"}} : Poke.l ?ptr_source_dir,&sourcedir$
0003289E <PED.ab2@1591>   CLR.l ptr_deflibsfilename
0003297A <PED.ab2@1592>   deflibfile$      = dos_GetToolString{"LIBFILE",dos_AddPart{my_blitzlibsdir$,"DefLibs"}} : Poke.l ?ptr_deflibsfilename,&deflibfile$
000329B0 <PED.ab2@1594>   If dos_Exist{deflibfile$}
00032A08 <PED.ab2@1595>     deflibdate$ = dos_GetFileDate{deflibfile$}
00032A0E <PED.ab2@1596>   Else
00032AF6 <PED.ab2@1597>     dummy.l= RTEZRequest(!TRANS{"Libsfile not found!"},!TRANS{"Libsfile not found, using deflibs"},!TRANS{"Ok"})
00032B8E <PED.ab2@1598>     deflibdate$ = dos_GetFileDate{dos_AddPart{my_blitzlibsdir$,"DefLibs"}}
00032C0C <PED.ab2@1600>   deflibdate$  = StrChg(deflibdate$,"/",".")
00032CEE <PED.ab2@1601>   acidlibdate$ = StrChg(dos_GetFileDate{dos_AddPart{my_blitzlibsdir$,"AcidLibs"}},"/",".")
00032D26 <PED.ab2@1602>   Poke$ ?blitzname,my_maindir$
00032DA8 <PED.ab2@1603>   Poke$ ?str_pedpalfile,dos_AddPart{my_systemdir$,"PED.pal"}
00032E2A <PED.ab2@1604>   Poke$ ?str_tedhistory_env,dos_AddPart{my_systemdir$,"PED.history"}
00032E9E <PED.ab2@1606>   tedmenufile$ = dos_AddPart{my_systemdir$,"PED.menus"}
00032EEE <PED.ab2@1612> WZ_ShowMessage{!TRANS{"Building Helpindex for Includes..."}}
00032F62 <PED.ab2@1613> HelpIndexFile$             = dos_AddPart{my_systemdir$,"HelpIndex.txt"}
00032FD6 <PED.ab2@1614> HelpIndexCacheFile$        = dos_AddPart{my_systemdir$,"HelpIndexCache.bin"}
0003304A <PED.ab2@1617> TokenHashMapFile.s         = dos_AddPart{my_systemdir$,"TokenList.hashmap"}
00033054 <PED.ab2@1618> *PreProcessor.preprocessor = preproc_Create{}
00033064 <PED.ab2@1619> Poke.l ?comPtr_PreProcessor,*PreProcessor
00033096 <PED.ab2@1620> preproc_LoadTokens{*PreProcessor,TokenHashMapFile}
000330B6 <PED.ab2@1622> *rc_fib.FileInfoBlock = AllocDosObject_ (#DOS_FIB,0)
000330EC <PED.ab2@1624> If dos_Exist{HelpIndexCacheFile$}
0003311A <PED.ab2@1625>   TED_ReadHelpIndexCache{HelpIndexCacheFile$}
00033120 <PED.ab2@1626> Else
00033126 <PED.ab2@1627>   Gosub build_HelpIndexFile
00033170 <PED.ab2@1631> If ReadFile (0,addonprefs$)
000331AC <PED.ab2@1632>   ReadType 0,wpref(0)
000331E8 <PED.ab2@1633>   ReadType 0,wpref(1)
00033224 <PED.ab2@1634>   ReadType 0,wpref(2)
0003323C <PED.ab2@1635>   CloseFile 0
00033244 <PED.ab2@1639> newtype_mode.l = 0
00033294 <PED.ab2@1642> WZ_ShowMessage{!TRANS{"Starting IDE..."} }
000332B2 <PED.ab2@1644> !asm
000332B8 <PED.ab2@1646>   MOVE.l A1,comLong_AB3IsAvailable   ; A1 is teddata of compiler
000332BE <PED.ab2@1650>   MOVEA.l #comPtr_TokenBase,A0       ;teddata for compiler
000332C0 <PED.ab2@1651>   MOVEQ.l #$11,D0
000332C2 <PED.ab2@1653>     MOVE.w (A1)+,(A0)+
000332C6 <PED.ab2@1654>   DBF D0,JL_0_1E
000332CE <PED.ab2@1656>   MOVE.l -8(a1),newted
000332D4 <PED.ab2@1657>   MOVE.l (a1),constantbase
000332DC <PED.ab2@1658>   MOVE.l ptr_deflibsfilename,4(a1)
000332E4 <PED.ab2@1659>   MOVE.l ptr_incdirname,8(a1)
000332E8 <PED.ab2@1661>   MOVE.l -4(a1),d0
000332EC <PED.ab2@1662>   BEQ 'l10
000332EE <PED.ab2@1663>     MOVE.l d0,a0
000332F0 <PED.ab2@1664>     MOVEQ #6,d1
000332F2 <PED.ab2@1666>       MOVE.l (a0),a0
000332F6 <PED.ab2@1667>     DBF d1,'l11
000332FC <PED.ab2@1668>     MOVE.l a0,newtypebase
00033302 <PED.ab2@1671>   JSR open_doslibrary
00033306 <PED.ab2@1672>   BEQ.w exit_ped
00033308 <PED.ab2@1677>   MOVEQ #127,d0                      ; clear char-table
0003330E <PED.ab2@1678>   LEA chartab,a0
00033314 <PED.ab2@1680>     MOVE.b #1,128(a0)
00033316 <PED.ab2@1681>     CLR.b (a0)+
0003331A <PED.ab2@1682>   DBF d0,'l12
00033320 <PED.ab2@1684>   LEA chartab,a0                     ; init char-table
00033324 <PED.ab2@1685>   MOVE.b #1,(a0)
0003332A <PED.ab2@1686>   MOVE.b #1,","(a0)
00033330 <PED.ab2@1687>   MOVE.b #1,";"(a0)
00033336 <PED.ab2@1688>   MOVE.b #1,":"(a0)
0003333C <PED.ab2@1689>   MOVE.b #1,"("(a0)
00033342 <PED.ab2@1690>   MOVE.b #1,")"(a0)
00033348 <PED.ab2@1691>   MOVE.b #1,"="(a0)
0003334E <PED.ab2@1692>   MOVE.b #1,"+"(a0)
00033354 <PED.ab2@1693>   MOVE.b #1,"-"(a0)
0003335A <PED.ab2@1694>   MOVE.b #1,"*"(a0)
00033360 <PED.ab2@1695>   MOVE.b #1,"/"(a0)
00033366 <PED.ab2@1696>   MOVE.b #1,"$"(a0)
0003336C <PED.ab2@1697>   MOVE.b #1,"%"(a0)
00033372 <PED.ab2@1698>   MOVE.b #1,"."(a0)
00033378 <PED.ab2@1699>   MOVE.b #1,"["(a0)
0003337E <PED.ab2@1700>   MOVE.b #1,"]"(a0)
00033384 <PED.ab2@1701>   MOVE.b #1,"{"(a0)
0003338A <PED.ab2@1702>   MOVE.b #1,"}"(a0)
00033390 <PED.ab2@1703>   MOVE.b #1,"\"(a0)
00033396 <PED.ab2@1704>   MOVE.b #1,">"(a0)
0003339C <PED.ab2@1705>   MOVE.b #1,"<"(a0)
000333A2 <PED.ab2@1706>   MOVE.b #1,"&"(a0)
000333A8 <PED.ab2@1707>   MOVE.b #1,"|"(a0)
000333AE <PED.ab2@1708>   MOVE.b #1,"^"(a0)
000333B4 <PED.ab2@1709>   MOVE.w #0101,1(a0)
000333BA <PED.ab2@1710>   MOVE.b #1,$20(a0)
000333E4 <PED.ab2@1712>   !basic
00033420 <PED.ab2@1713>   Poke.l ?comPtr_MemPool, CreatePool_(#MEMF_CLEAR,40000,40000)
00033440 <PED.ab2@1714>   If Peek.l(?comPtr_MemPool) = 0
00033548 <PED.ab2@1715>     !cout{"Could not allocate enough memory. PED closes down now."}
00033566 <PED.ab2@1716>     !asm
00033574 <PED.ab2@1717>     !exitasm
00033576 <PED.ab2@1718>     RTS
000335BC <PED.ab2@1720>   Poke.l ?_graphicsbase, OpenLibrary_("graphics.library",0)
000335FE <PED.ab2@1721>   If Peek.l(?_graphicsbase) = 0 Then !asm : BRA.w close_libraries2
00033644 <PED.ab2@1722>   Poke.l ?_intuibase, OpenLibrary_("intuition.library",0)
00033686 <PED.ab2@1723>   If Peek.l(?_intuibase)    = 0 Then !asm : BRA.w close_libraries2
000336A8 <PED.ab2@1724>   Poke.l ?comPtr_IntuiBase,Peek.l(?_intuibase)
000336EE <PED.ab2@1725>   Poke.l ?_gadtoolsbase, OpenLibrary_("gadtools.library",0)
00033730 <PED.ab2@1726>   If Peek.l(?_gadtoolsbase) = 0 Then !asm : BRA.w close_libraries2
00033744 <PED.ab2@1728>   If ted_OpenLib{0}
00033750 <PED.ab2@1729>     TEDSetJumpTable  {?COMDATABASE}
0003375C <PED.ab2@1730>     TEDSetFirstLine  {?comPtr_FirstSourceLine}
00033768 <PED.ab2@1731>     TEDSetCurrentLine{?comPtr_CurrentSourceLine}
0003376E <PED.ab2@1732>   Else
000337C4 <PED.ab2@1733>     error {!TRANS{"Unable to open ted.library !\\nThe IDE will crash."}}
000337E2 <PED.ab2@1735>   !asm
000337E8 <PED.ab2@1737>   JSR init_arexxport
000337EE <PED.ab2@1738>   JSR init_clipboard ; for copy only, paste is done by clipboard.include
000337F2 <PED.ab2@1739>   BNE.w clipboard_ok
000337F8 <PED.ab2@1740>     MOVEA.l #str_no_clipboard_device,A0
000337FE <PED.ab2@1741>     JSR show_errorrequester
00033804 <PED.ab2@1744>   JSR make_MsgPort
00033808 <PED.ab2@1746>   MOVEA.w #$2000,A0
0003380E <PED.ab2@1747>   ADDA.w comWord_MaxColumns,A0
00033814 <PED.ab2@1748>   ADDA.w comWord_MaxColumns,A0
0003381A <PED.ab2@1749>   ADDA.w comWord_MaxColumns,A0
0003381C <PED.ab2@1750>   ADDQ.w #6,A0
0003381E <PED.ab2@1751>   MOVE.l A0,D0
00033820 <PED.ab2@1752>   MOVEQ.l #$01,D1
00033842 <PED.ab2@1754>   !newalloc;JSR _AllocVec(A6)
00033848 <PED.ab2@1755>   MOVE.l D0,comPtr_DosBuffer
0003384C <PED.ab2@1756>   BEQ.w close_libraries2
0003384E <PED.ab2@1758>   MOVEA.l D0,A0
00033852 <PED.ab2@1759>   LEA $2000(A0),A0
00033860 <PED.ab2@1760>   MOVE.l A0,comPtr_Temp_TokenString1 : ADDA.w comWord_MaxColumns,A0 : ADDQ.w #2,A0
0003386E <PED.ab2@1761>   MOVE.l A0,comPtr_Temp_TokenString2 : ADDA.w comWord_MaxColumns,A0 : ADDQ.w #2,A0
0003387C <PED.ab2@1762>   MOVE.l A0,comPtr_Temp_TokenString3 : ADDA.w comWord_MaxColumns,A0 : ADDQ.w #2,A0
00033882 <PED.ab2@1763>   MOVE.l A0,comPtr_Temp_TokenStringObsolete
00033888 <PED.ab2@1765>   MOVE.l #$2F60+1000,D0
0003388E <PED.ab2@1766>   MOVE.l #$10000,D1
000338B0 <PED.ab2@1767>   !newalloc ;JSR _AllocVec(A6)
000338B6 <PED.ab2@1768>   MOVE.l D0,AL_0_5B9A
000338B8 <PED.ab2@1769>   MOVEA.l D0,A0
000338BE <PED.ab2@1770>   MOVE.l A0,AL_0_5B9E
000338CA <PED.ab2@1771>   ADD.l #MAX_Columns+4,a0 : MOVE.l A0,AL_0_5BA2
000338D6 <PED.ab2@1772>   ADD.l #MAX_Columns+4,a0 : MOVE.l A0,AL_0_5BA6
000338E2 <PED.ab2@1773>   ADD.l #MAX_Columns+4,a0 : MOVE.l A0,AL_0_5BAA
000338EE <PED.ab2@1774>   ADD.l #MAX_Columns+4,a0 : MOVE.l A0,expandstore
000338FA <PED.ab2@1775>   ADD.l #MAX_Columns+4,a0 : MOVE.l A0,AL_0_5BB2
00033900 <PED.ab2@1776>   ADD.l #MAX_Columns+4,a0
0003390A <PED.ab2@1781>   LEA $C0(A0)  ,A0 : MOVE.l A0,struct_textfont
00033914 <PED.ab2@1783>   LEA $1000(A0),A0 : MOVE.l A0,str_windowtitle
0003391A <PED.ab2@1786>   LEA str_screentitle,A1
0003391C <PED.ab2@1787>   MOVE.l A0,-(A7)
0003391E <PED.ab2@1789>     MOVE.b (A1)+,(A0)+
00033922 <PED.ab2@1790>   BNE.b JL_0_2CA
00033924 <PED.ab2@1791>   MOVEA.l (A7)+,A0
0003392A <PED.ab2@1794>   JSR set_oldpreferences
00033930 <PED.ab2@1796>   CLR.w comWord_PrefsWrittenState
00033936 <PED.ab2@1800>   MOVE.l comLong_AB3IsAvailable,D0
0003393A <PED.ab2@1801>   BEQ.w start_up_without_compiler
00033940 <PED.ab2@1802>     LEA compiler_jumps_here,A0
00033946 <PED.ab2@1803>     MOVEA.l comdata,A1               ; its now indirect, was moveA.l #comdata before
0003394E <PED.ab2@1804>     MOVE.w #$FFFF,comWord_PEDIsAvailable
00033950 <PED.ab2@1805>     RTS                              ; <-- return to compiler
00033956 <PED.ab2@1808>   LEA str_tempfilename,A0
00033958 <PED.ab2@1810>   MOVE.l A0,-(A7)
00033982 <PED.ab2@1811>   !basic
00033984 <PED.ab2@1812>   MOVE.l (a7)+,d0
00033988 <PED.ab2@1813>   tempD0.l = PutD0
00033992 <PED.ab2@1814>   If tempD0
000339BA <PED.ab2@1815>     compiler_source$ = Peek$(tempD0)
000339C0 <PED.ab2@1816>   Else
000339EE <PED.ab2@1817>     error{"NULL Pointer in compiler_source$!"}
00033A3E <PED.ab2@1823>   WZ_ShowMessage{!TRANS{"Building Token Index..."}}
00033A4E <PED.ab2@1824>   tokenbase = Peek.l(?comPtr_TokenBase)
00033ABC <PED.ab2@1825>   read_libmapping{dos_AddPart{my_systemdir$,"token_mapping_libs.txt"}}
00033B2A <PED.ab2@1826>   read_libmapping{dos_AddPart{my_systemdir$,"token_mapping_userlibs.txt"}}
00033B3E <PED.ab2@1828>   If *PreProcessor\tokens=#NULL     ; we have no hashmap loaded, create it!
00033B8E <PED.ab2@1829>     WZ_ShowMessage{!TRANS{"Creating Hashmaps..."}}
00033B98 <PED.ab2@1830>     preproc_QueryTokens{*PreProcessor}
00033BCA <PED.ab2@1831>     preproc_SaveTokens{*PreProcessor,TokenHashMapFile}
00033BD0 <PED.ab2@1834>   WZ_HideMessage{}
00033BEE <PED.ab2@1835>   !asm
00033BF4 <PED.ab2@1838>   JSR open_gui
00033BF8 <PED.ab2@1839>    BMI.w close_libraries
00033BFE <PED.ab2@1841>   JSR cursor_off
00033C04 <PED.ab2@1842>   JSR menu_opennew
00033C0A <PED.ab2@1843>   JSR cursor_on
00033C10 <PED.ab2@1844>   JSR update_statusline
00033C16 <PED.ab2@1848>   JSR get_currentdir
00033C1C <PED.ab2@1849>   TST.l ptr_source_dir
00033C20 <PED.ab2@1850>    BEQ 'l2
00033C26 <PED.ab2@1851>   MOVE.l #comStr_CurrentDir,a1
00033C2C <PED.ab2@1852>   MOVE.l ptr_source_dir,a0
00033C2E <PED.ab2@1853>   MOVEQ #100,d0
00033C30 <PED.ab2@1855>     MOVE.b (a0)+,(a1)+
00033C34 <PED.ab2@1856>   BNE 'l3
00033C38 <PED.ab2@1857>   BRA 'l1
00033C3E <PED.ab2@1859>   MOVE.l #comStr_CurrentDir,D0
00033C44 <PED.ab2@1860>   JSR set_currentdir
00033C4E <PED.ab2@1862>   MOVE.l lock_currentdir,lock_defaultdirectory
00033C54 <PED.ab2@1863>   CLR.l lock_currentdir
00033C7E <PED.ab2@1872>   !basic
00033CD4 <PED.ab2@1873>   If Peek.b(?load_last_source)<>0 OR compiler_source$<>""
00033D46 <PED.ab2@1874>     If compiler_source$<>"" Then last_source$ = compiler_source$
00033D7E <PED.ab2@1875>     If last_source$<>""
00033DD6 <PED.ab2@1876>       currentdir$ = dos_PathPart{last_source$}
00033E78 <PED.ab2@1877>       If Right$(currentdir$,1)<>":" Then currentdir$ + "/" ; dirty hack, but better than editing ASM
00033EDE <PED.ab2@1878>       Poke$ ?comStr_SourceName,dos_FilePart{last_source$}
00033F16 <PED.ab2@1879>       Poke$ ?comStr_CurrentDir,currentdir$
00033F34 <PED.ab2@1882>   !asm
00033F3A <PED.ab2@1887>   MOVE.b comStr_SourceName,D0
00033F3E <PED.ab2@1888>    BEQ.w skip_autoload
00033F44 <PED.ab2@1889>   LEA comStr_CurrentDir,A0
00033F4A <PED.ab2@1890>   MOVEA.l comPtr_Temp_TokenString1,A1
00033F4C <PED.ab2@1891>   MOVE.l A1,D7
00033F4E <PED.ab2@1893>     MOVE.b (A0)+,(A1)+
00033F52 <PED.ab2@1894>   BNE.b JL_0_40E
00033F54 <PED.ab2@1895>   SUBQ.w #1,A1
00033F5A <PED.ab2@1896>   LEA comStr_SourceName,A0
00033F5C <PED.ab2@1898>     MOVE.b (A0)+,(A1)+
00033F60 <PED.ab2@1899>   BNE.b JL_0_41A
00033F66 <PED.ab2@1900>   JSR cursor_off
00033F6C <PED.ab2@1901>   JSR load_source
00033F72 <PED.ab2@1902>   JSR update_vertscroller
00033F78 <PED.ab2@1903>   JSR update_statusline
00033F7E <PED.ab2@1904>   JSR update_labelstuff
00033F84 <PED.ab2@1905>   JSR cursor_on_force
00033F8A <PED.ab2@1911>   TST.b no_welcome
00033F8E <PED.ab2@1912>   BNE 'skip_welcome
00033F94 <PED.ab2@1913>     JSR menu_about
00033F9A <PED.ab2@1917>   JSR main_loop
00033FA0 <PED.ab2@1924>   CLR.w comWord_PEDIsAvailable
00033FA6 <PED.ab2@1925>   JSR close_gui
00033FD0 <PED.ab2@1928>   !basic
00033FD6 <PED.ab2@1930>   Gosub close_sourcefont
00033FF4 <PED.ab2@1934>   !asm
00033FFA <PED.ab2@1936>   MOVEA.l comPtr_DosBuffer,A1
00033FFC <PED.ab2@1937>   MOVE.l A0,D0
0003400E <PED.ab2@1939>   !newfree                           ;a0: poolHeader, a1:memory, d0:memSize
00034014 <PED.ab2@1942>   JSR close_arexxport
0003401A <PED.ab2@1943>   JSR close_clipboard   ; paste is done by clipboard.include
00034044 <PED.ab2@1945>   !basic
0003405E <PED.ab2@1946>   If *MyCatalog             Then CloseCatalog_ *MyCatalog ; If we used a Catalog so close it
00034090 <PED.ab2@1948>   If Peek.l(?_gadtoolsbase) Then CloseLibrary_ Peek.l(?_gadtoolsbase)  : CLR.l _gadtoolsbase
000340BC <PED.ab2@1950>   If Peek.l(?_intuibase)    Then CloseLibrary_ Peek.l(?_intuibase)                      ; is in use by compiler
000340E8 <PED.ab2@1951>   If Peek.l(?_graphicsbase) Then CloseLibrary_ Peek.l(?_graphicsbase)                   ; is in use by compiler
00034114 <PED.ab2@1952>   If Peek.l(?_dosbase)      Then CloseLibrary_ Peek.l(?_dosbase)                        ; is in use by compiler
0003411A <PED.ab2@1954>   ted_CloseLib{}
00034138 <PED.ab2@1955>   !asm
0003413E <PED.ab2@1957>   MOVEA.l _execbase,A6
00034144 <PED.ab2@1958>   JSR free_historyfilelist
0003414A <PED.ab2@1960>   TST.l AL_0_5B9A
0003414E <PED.ab2@1961>    BEQ.w JL_0_584
00034154 <PED.ab2@1962>   MOVEA.l AL_0_5B9A,A2
00034156 <PED.ab2@1963>   NOP
0003415C <PED.ab2@1966>   JSR kill_MsgPort
00034162 <PED.ab2@1968>   MOVE.l lock_defaultdirectory,D1
00034168 <PED.ab2@1969>   MOVEA.l _dosbase,A6
0003416C <PED.ab2@1970>   JSR _CurrentDir(A6)
00034172 <PED.ab2@1972>   MOVE.l lock_currentdir,D1
00034176 <PED.ab2@1973>   BEQ.w JL_0_5BE
0003417A <PED.ab2@1974>   JSR _UnLock(A6)
00034180 <PED.ab2@1977>   MOVE.w comWord_PEDIsAvailable,D0
00034182 <PED.ab2@1978>   EXT.l D0
00034188 <PED.ab2@1981>   MOVEA.l _execbase,A6
0003418E <PED.ab2@1982>   MOVE.l comPtr_MemPool,a0
00034192 <PED.ab2@1983>   JSR _DeletePool(a6)
000341BC <PED.ab2@1994>   !basic
000341C2 <PED.ab2@1998>   Gosub coutclose
000341D4 <PED.ab2@2005>   preproc_Free{*PreProcessor} : *PreProcessor=#NULL
00034200 <PED.ab2@2006>   If *rc_fib Then FreeDosObject_ #DOS_FIB,*rc_fib  : *rc_fib=#NULL
00034210 <PED.ab2@2007>   rc_cacheptr.l = Peek.l(?readcache_cacheptr)
0003421A <PED.ab2@2008>   If rc_cacheptr
0003422A <PED.ab2@2009>     FreeVec_ rc_cacheptr
0003423C <PED.ab2@2010>     Poke.l ?readcache_cacheptr,#NULL
0003424E <PED.ab2@2011>     Poke.l ?readcache_cachelen,0
00034260 <PED.ab2@2012>     Poke.l ?readcache_readlen ,0
0003427E <PED.ab2@2014>   !asm
0003428C <PED.ab2@2015>   !exitasm ; exitasm jumps into basic mode
00034292 <PED.ab2@2016> End
000342B0 <PED.ab2@2022>   !asm
000342B6 <PED.ab2@2023>   CLR.w comWord_PEDIsAvailable
000342BC <PED.ab2@2024>   MOVEA.l comdata,A1                 ; its now indirect, was #comdata before
000342CA <PED.ab2@2025>   !exitasm ; exitasm jumps into basic mode
000342D0 <PED.ab2@2026> End
000342D6 <PED.ab2@2041>   CLR.w comWord_LabelListChanged
000342DC <PED.ab2@2042>   CLR.w comWord__AL_0_86C0
000342E2 <PED.ab2@2043>   JSR PED_events
000342E8 <PED.ab2@2044>   MOVEA.l comPtr_CurrentSourceLine,A4
000342EE <PED.ab2@2047>   TST.b comByte_RunningFlag
000342F2 <PED.ab2@2048>   BEQ 'l1
000342F8 <PED.ab2@2049>     TST.w comWord_KeyBeforeReturn
000342FC <PED.ab2@2050>     BEQ 'l1
00034302 <PED.ab2@2051>       JSR _redraw
00034308 <PED.ab2@2052>       CLR.w comWord_KeyBeforeReturn
0003430E <PED.ab2@2055>   MOVE.w comWord_KeyBeforeReturn,D0
00034312 <PED.ab2@2056>   BEQ.w JL_0_CC6
0003433C <PED.ab2@2057>     !basic
00034342 <PED.ab2@2059>     MOVE.l comLong_DisplayLine,D1
00034348 <PED.ab2@2060>     ADD.l comLong_DisplayLineOffset,D1
0003434E <PED.ab2@2061>     MOVE.l d1,lastedited_line
00034354 <PED.ab2@2062>     MOVE.w comWord_KeyBeforeReturn,D0
0003435A <PED.ab2@2063>     MOVE.w D0,comWord_SourceChanged
0003435C <PED.ab2@2065>     MOVEQ #0,D0
00034362 <PED.ab2@2066>     MOVEA.l textbufferaddr,A2
00034368 <PED.ab2@2067>     ADDA.w comWord_TextBufferOffset,A2
0003436E <PED.ab2@2068>     MOVE.l a2,d0 : lineaddr.l = PutD0
00034370 <PED.ab2@2071>     MOVEQ #0,D0
00034376 <PED.ab2@2072>     MOVE.w comWord_Column,D0
0003437C <PED.ab2@2073>     ADD.w comWord_ColumnsOffset,D0
00034380 <PED.ab2@2074>     columnpos.w = PutD0
000343C2 <PED.ab2@2077>     newcolumnpos.w = preparseline{columnpos,lineaddr,Peek.b(?auto_format),Peek.b(?correct_functions)}
000343C8 <PED.ab2@2078>     GetD0 newcolumnpos
000343CE <PED.ab2@2079>     SUB.w comWord_ColumnsOffset,D0
000343D4 <PED.ab2@2080>     MOVE.w D0,comWord_Column
000343FC <PED.ab2@2081>     old_search_label$ = "|"
0003441A <PED.ab2@2082>     !asm
00034420 <PED.ab2@2085>     JSR parse_line
00034426 <PED.ab2@2088>     SF comByte_StateBlockMark
0003442C <PED.ab2@2089>     TST.l comLong_BlockEndY
00034430 <PED.ab2@2090>     BMI.w exit_updateblock
00034434 <PED.ab2@2091>       MOVEM.l D0-D3/A0-A2,-(A7)
0003443A <PED.ab2@2092>       MOVE.l comLong_DisplayLine,D1
00034440 <PED.ab2@2093>       ADD.l comLong_DisplayLineOffset,D1
00034446 <PED.ab2@2094>       CMP.l comLong_BlockStartY,D1
0003444A <PED.ab2@2095>        BLT.w JL_0_C66
00034450 <PED.ab2@2096>       CMP.l comLong_BlockEndY,D1
00034454 <PED.ab2@2097>        BGT.w JL_0_C66
0003445A <PED.ab2@2098>       MOVE.w comLong_BlockStartX,D0
00034460 <PED.ab2@2099>       MOVE.l comLong_BlockStartY,D1
00034466 <PED.ab2@2100>       MOVE.w comLong_BlockEndX,D2
0003446C <PED.ab2@2101>       MOVE.l comLong_BlockEndY,D3
0003446E <PED.ab2@2102>       CMP.l D1,D3
00034472 <PED.ab2@2103>        BNE.w JL_0_C50
00034474 <PED.ab2@2104>       CMP.w D0,D2
00034478 <PED.ab2@2105>        BNE.w JL_0_C50
0003447E <PED.ab2@2106>       MOVE.w visiblecolumns,D2
00034484 <PED.ab2@2109>       SUB.l comLong_DisplayLineOffset,D3
0003448A <PED.ab2@2110>       SUB.l comLong_DisplayLineOffset,D1
00034490 <PED.ab2@2111>       JSR JL_0_59BC
00034496 <PED.ab2@2112>       ST comByte_StateBlockMark
0003449A <PED.ab2@2115>       MOVEM.l (A7)+,D0-D3/A0-A2
000344A0 <PED.ab2@2118>     JSR JL_0_55AA
000344A6 <PED.ab2@2120>     MOVE.w comWord_DoTokenize,D0
000344AA <PED.ab2@2121>     BEQ.w JL_0_CC6
000344B0 <PED.ab2@2122>       JSR print_current_sourceline
000344B6 <PED.ab2@2124>       TST.b comByte_StateBlockMark
000344BA <PED.ab2@2125>       BEQ.w JL_0_CC6
000344BE <PED.ab2@2126>         MOVEM.l D0-D3/D7/A0-A2,-(A7)
000344C4 <PED.ab2@2127>         MOVE.w comLong_BlockStartX,D0
000344CA <PED.ab2@2128>         MOVE.l comLong_BlockStartY,D1
000344D0 <PED.ab2@2129>         MOVE.w comLong_BlockEndX,D2
000344D6 <PED.ab2@2130>         MOVE.l comLong_BlockEndY,D3
000344D8 <PED.ab2@2131>         CMP.l D1,D3
000344DC <PED.ab2@2132>          BNE.w JL_0_CB2
000344DE <PED.ab2@2133>         CMP.w D0,D2
000344E2 <PED.ab2@2134>          BNE.w JL_0_CB2
000344E8 <PED.ab2@2135>         MOVE.w visiblecolumns,D2
000344EE <PED.ab2@2138>         SUB.l comLong_DisplayLineOffset,D3
000344F4 <PED.ab2@2139>         SUB.l comLong_DisplayLineOffset,D1
000344FA <PED.ab2@2140>         JSR JL_0_59BC
000344FE <PED.ab2@2141>         MOVEM.l (A7)+,D0-D3/D7/A0-A2
00034504 <PED.ab2@2145>   LEA comArray_KeyTable,A0
00034506 <PED.ab2@2148>     MOVE.b (A0)+,D0
0003450A <PED.ab2@2149>      BEQ.w main_loop                 ; Tabelle zu Ende
0003450C <PED.ab2@2150>     CMP.b D0,D7
00034510 <PED.ab2@2151>      BEQ.w JL_0_CDC
00034512 <PED.ab2@2152>     ADDQ.w #5,A0
00034516 <PED.ab2@2153> BRA.b JL_0_CCC
00034518 <PED.ab2@2156>   MOVE.b (A0)+,-(A7)                 ; entsprechenden Wert aus keytable auslesen und auf stack packen
0003451A <PED.ab2@2157>   MOVEA.l (A0)+,A0                   ; pointer zur entsprechenden Funktion nach A0
00034520 <PED.ab2@2161>   TST.b comByte_RunningFlag
00034524 <PED.ab2@2162>   BEQ no_running_exe
00034528 <PED.ab2@2163>   CMP.w #$1c,d7   ;crsr              ;runtask allows
0003452C <PED.ab2@2164>   BEQ no_running_exe
00034530 <PED.ab2@2165>   CMP.w #$1d,d7   ;crsr
00034534 <PED.ab2@2166>   BEQ no_running_exe
00034538 <PED.ab2@2167>   CMP.w ##MENU_SAVEAS,d6             ;save as
0003453C <PED.ab2@2168>   BEQ no_running_exe
00034540 <PED.ab2@2169>   CMP.w ##MENU_CUSTOM,d6             ;custom menu
00034544 <PED.ab2@2170>   BGE no_running_exe
00034548 <PED.ab2@2171>   CMP.w #$fffd,d7 ;mouseclick
0003454C <PED.ab2@2172>   BEQ no_running_exe
00034550 <PED.ab2@2173>   CMP.w #$8b,d7   ;help key
00034554 <PED.ab2@2174>   BEQ no_running_exe
00034558 <PED.ab2@2175>     BRA check_panic
0003455E <PED.ab2@2179>   CLR.b redraw_ped
00034562 <PED.ab2@2180>   CMP.w #$fffd,d7                    ; mouseclick ?
00034566 <PED.ab2@2181>   BNE 'n1a
0003456E <PED.ab2@2182>     MOVE.b #1,redraw_ped
00034570 <PED.ab2@2185>   JSR (a0)
00034574 <PED.ab2@2189>   !regs2stack
0003459E <PED.ab2@2190>   !basic
000345B4 <PED.ab2@2191>   If Peek.b(?auto_constructs)
000345C6 <PED.ab2@2192>     If last_key.l = $D
000345FC <PED.ab2@2193>       a$ = check_constructs{?comPtr_CurrentSourceLine}
00034634 <PED.ab2@2194>       If a$<>""
0003465E <PED.ab2@2195>         !basic
00034664 <PED.ab2@2196>         Gosub insertstring
00034682 <PED.ab2@2197>         !asm
00034688 <PED.ab2@2198>         Gosub insertreturn
0003468E <PED.ab2@2199>         JSR movelineup
00034694 <PED.ab2@2200>         JSR insertreturn
0003469A <PED.ab2@2201>         JSR movelineup
000346C4 <PED.ab2@2202>         !basic
000346C8 <PED.ab2@2206>   !stack2regs
000346E6 <PED.ab2@2207>   !asm
000346EC <PED.ab2@2209>   TST.b redraw_ped
000346F0 <PED.ab2@2210>   BNE 'n2a
000346F4 <PED.ab2@2211>     CMP.w #$fffd,d7                  ;mouseclick
000346F8 <PED.ab2@2212>     BNE 'l1_a
000346FA <PED.ab2@2215>       MOVE.l a0,-(a7)
00034700 <PED.ab2@2216>       JSR _redraw
00034702 <PED.ab2@2217>       MOVE.l (a7)+,a0
00034706 <PED.ab2@2220>   CMP.w #$fffc,d7
0003470A <PED.ab2@2221>   BNE 'n1
00034734 <PED.ab2@2222>     !basic
0003473A <PED.ab2@2223>     Gosub diag_redraw
00034758 <PED.ab2@2224>     !asm
0003475E <PED.ab2@2229>   MOVE.w comWord_LabelListChanged,D0
00034762 <PED.ab2@2230>   BEQ.w JL_0_CFA
00034768 <PED.ab2@2231>     JSR update_labelstuff
0003476A <PED.ab2@2234>   MOVE.b (A7)+,D0
0003476C <PED.ab2@2235>   TST.b D0
00034770 <PED.ab2@2236>    BEQ.w main_loop
00034776 <PED.ab2@2238>   JSR update_vertscroller
0003477A <PED.ab2@2239> BRA.w main_loop
000347A4 <PED.ab2@2245>   !basic
000347AC <PED.ab2@2246>   *task.Task = 0
000347E8 <PED.ab2@2249>   If *task=0 Then *task = FindTask_("Blitz ][ Program Proc")
000347F8 <PED.ab2@2250>   Poke.l ?taskaddr,*task
000348B8 <PED.ab2@2252>   dummy.l= RTEZRequest("",!TRANS{"This action is not allowed while executing a program\\nShould PED do a PANIC program kill?"},!TRANS{"OK|CANCEL"})
000348D6 <PED.ab2@2253>   !asm
000348D8 <PED.ab2@2254>   TST.l d0
000348DC <PED.ab2@2255>   BEQ 'lexit
000348DE <PED.ab2@2257>     MOVE.l a0,-(a7)
000348E4 <PED.ab2@2259>     MOVE.l taskaddr,D0
000348E8 <PED.ab2@2260>     BEQ 'exit
000348EA <PED.ab2@2262>       MOVEA.l D0,A1
000348F0 <PED.ab2@2263>       MOVEA.l _execbase,A6
000348F4 <PED.ab2@2264>       JSR _Forbid(a6)
000348FA <PED.ab2@2265>       MOVE.l taskaddr,a1
00034900 <PED.ab2@2266>       CLR.l ptr_exescreen
00034906 <PED.ab2@2267>       MOVE.l _intuibase,a6
0003490A <PED.ab2@2268>       MOVEM.l a2/a3,-(a7)
0003490E <PED.ab2@2269>       MOVE.l $3c(a6),d0              ;Intuibase\Firstscreen
00034910 <PED.ab2@2272>         MOVE.l d0,a0
00034914 <PED.ab2@2273>         MOVE.l $4(a0),d0             ;FirstScreen\Firstwindow
00034918 <PED.ab2@2274>         BEQ 'l1
0003491A <PED.ab2@2277>         MOVE.l d0,a2
0003491E <PED.ab2@2278>         MOVE.l $56(a2),a3            ;FirstWindow\UserPort
00034922 <PED.ab2@2279>         CMP.l $10(a3),a1             ;UserPort\*mp_SigTask = taskaddr ??
00034926 <PED.ab2@2280>         BNE 'l2
0003492C <PED.ab2@2282>         MOVE.l a0,ptr_exescreen
00034930 <PED.ab2@2283>         MOVEM.l a0/a1,-(a7)
00034934 <PED.ab2@2284>         CLR.l $56(a2)
0003493A <PED.ab2@2285>         MOVE.l _intuibase,a6
0003493C <PED.ab2@2286>         MOVE.l a2,a0
00034940 <PED.ab2@2287>         JSR _CloseWindow(a6)         ; Close the window
00034944 <PED.ab2@2288>         MOVEM.l (a7)+,a0/a1
00034946 <PED.ab2@2289>         MOVE.l a0,d0
0003494A <PED.ab2@2290>         BNE 'l4
0003494C <PED.ab2@2293>         MOVE.l (a2),d0
00034950 <PED.ab2@2294>       BNE 'l3
00034952 <PED.ab2@2297>       MOVE.l (a0),d0
00034956 <PED.ab2@2298>       BNE 'l4
0003495C <PED.ab2@2299>       MOVE.l ptr_exescreen,d0
00034960 <PED.ab2@2300>       BEQ 'l10
0003498A <PED.ab2@2301>         !basic
000349A2 <PED.ab2@2302>         CloseScreen_ Peek.l(?ptr_exescreen)
000349C0 <PED.ab2@2303>         !asm
000349C4 <PED.ab2@2306>       MOVEM.l (a7)+,a2/a3
000349CA <PED.ab2@2307>       MOVE.l _execbase,A6
000349D0 <PED.ab2@2308>       MOVE.l taskaddr,D0
000349D4 <PED.ab2@2309>       BEQ 'exit
000349D6 <PED.ab2@2310>       MOVEA.l D0,A1              ; remove the executable task
000349DA <PED.ab2@2311>       JSR _RemTask(A6)
000349DE <PED.ab2@2312>       JSR _Permit(a6)
000349E4 <PED.ab2@2313>       CLR.b comByte_RunningFlag
000349E6 <PED.ab2@2316>     MOVE.l (a7)+,a0
000349EA <PED.ab2@2317> BRA check_panic_exit
000349EE <PED.ab2@2320> BRA JL_0_CE2
000349F2 <PED.ab2@2329> _graphicsbase:           Dc.l 0
000349F6 <PED.ab2@2330> _intuibase:              Dc.l 0
000349FA <PED.ab2@2332> _gadtoolsbase:           Dc.l 0
00034A06 <PED.ab2@2333> str_libname_dos:         Dc.b "dos.library",0 : Even
00034A0A <PED.ab2@2334> _dosbase:                Dc.l 0
00034A1C <PED.ab2@2335> str_libname_workb:       Dc.b "workbench.library",0 : Even
00034A20 <PED.ab2@2336> _workbenchbase:          Dc.l 0
00034A24 <PED.ab2@2337> ptr_sourcefont:          Dc.l 0
00034A28 <PED.ab2@2338> ptr_sourcefonti:         Dc.l 0
00034A2C <PED.ab2@2339> ptr_sourcefontb:         Dc.l 0
00034A3E <PED.ab2@2340> str_libname_diskfont:    Dc.b "diskfont.library",0 : Even
00034A42 <PED.ab2@2341> _diskfontbase:           Dc.l 0
00034A46 <PED.ab2@2343> ptr_AppMenuItem:         Ds.l 1
00034A4A <PED.ab2@2344> ptr_thisTask:            Ds.l 1
00034C4A <PED.ab2@2346> str_tempfilename:        Ds.b #MAX_STRINGSIZE
00034CC0 <PED.ab2@2347> AL_0_766:                Ds.w 59
00034CE2 <PED.ab2@2349> str_pedname:             Dc.b "PED ",!versions,0: Even
00034EE2 <PED.ab2@2350>                          Ds.b #MAX_STRINGSIZE
000350E2 <PED.ab2@2352> str_screentitle:         Ds.b #MAX_STRINGSIZE  ;"AmiBlitz3 - PED V",!versions," (\\__DATE_GER__)",0
000350EC <PED.ab2@2355>                          Dc.b "SCR1_0_AB",0
000351B4 <PED.ab2@2356>                          Ds.b 200
000351DB <PED.ab2@2358> str_version:             Dc.b "$VER: PED ",!versions,0
000351DC <PED.ab2@2359> Even
000351E0 <PED.ab2@2364> ptr_msgport_clipboard:   Ds.l 1
000351E4 <PED.ab2@2365> AL_0_B90:                Ds.l 1
000351E8 <PED.ab2@2366> ptr_iorequest_clipboard: Ds.l 1
000351FA <PED.ab2@2367> str_devname_clipboard:   Dc.b "clipboard.device",0 : Even
00035202 <PED.ab2@2368>                          Ds.l 2
00035206 <PED.ab2@2369> AL_0_802:                Dc.l AL_0_822
0003520A <PED.ab2@2370> AL_0_806:                Dc.l str_defaultpubscreen
0003520E <PED.ab2@2371> AL_0_80A:                Dc.l AL_0_838
00035212 <PED.ab2@2372> AL_0_80E:                Dc.l str_Arexx_PortName
00035216 <PED.ab2@2373> AL_0_812:                Dc.l AL_0_82C
0003521A <PED.ab2@2374> AL_0_816:                Dc.l str_defaultpubscreen
00035222 <PED.ab2@2375>                          Ds.l 2
0003522C <PED.ab2@2376> AL_0_822:                Dc.b "TEDSCREEN",0
00035238 <PED.ab2@2377> AL_0_82C:                Dc.b "TEDSSCREEN",0 : Even
00035242 <PED.ab2@2378> AL_0_838:                Dc.b "TEDSPORT",0 : Even
00035246 <PED.ab2@2379>                          Ds.l 1
0003524C <PED.ab2@2383>   MOVEA.l _execbase,A6
00035252 <PED.ab2@2384>   LEA str_libname_dos,A1
00035256 <PED.ab2@2385>   JSR _OldOpenLibrary(A6)
0003525C <PED.ab2@2386>   MOVE.l D0,_dosbase
0003525E <PED.ab2@2387> RTS
00035264 <PED.ab2@2393>   MOVEA.l _execbase,A6
00035268 <PED.ab2@2394>   JSR _CreateMsgPortA(A6)
0003526E <PED.ab2@2396>   MOVE.l D0,ptr_msgport_clipboard
00035270 <PED.ab2@2397>   MOVEA.l D0,A0
00035272 <PED.ab2@2398>   MOVEQ.l #$34,D0
00035276 <PED.ab2@2399>   JSR _CreateIORequest(A6)
0003527C <PED.ab2@2401>   MOVE.l D0,ptr_iorequest_clipboard
00035282 <PED.ab2@2402>   LEA str_devname_clipboard,A0
00035284 <PED.ab2@2403>   MOVEQ.l #$00,D0
0003528A <PED.ab2@2404>   MOVEA.l ptr_iorequest_clipboard,A1
0003528C <PED.ab2@2405>   MOVEQ.l #$00,D1
00035290 <PED.ab2@2406>   JSR _OpenDevice(A6)
00035292 <PED.ab2@2408>   TST.l D0
00035296 <PED.ab2@2409>   BEQ.w JL_0_9DA
00035298 <PED.ab2@2410>   MOVEQ.l #$00,D0
0003529A <PED.ab2@2411>   RTS
000352A0 <PED.ab2@2414>   ST AL_0_B90
000352A2 <PED.ab2@2415>   MOVEQ.l #-$01,D0
000352A4 <PED.ab2@2416>   TST.w D0
000352A6 <PED.ab2@2417> RTS
000352AC <PED.ab2@2420>   TST.l ptr_iorequest_clipboard
000352B0 <PED.ab2@2421>    BEQ.w exit_closeclipboard
000352B6 <PED.ab2@2422>   MOVEA.l _execbase,A6
000352BC <PED.ab2@2423>   MOVEA.l ptr_iorequest_clipboard,A1
000352C0 <PED.ab2@2424>   JSR _CloseDevice(A6)
000352C6 <PED.ab2@2426>   MOVEA.l ptr_msgport_clipboard,A0
000352CA <PED.ab2@2427>   JSR _DeleteMsgPort(A6)
000352D0 <PED.ab2@2429>   CLR.l ptr_msgport_clipboard
000352D6 <PED.ab2@2430>   MOVEA.l ptr_iorequest_clipboard,A0
000352DA <PED.ab2@2431>   JSR _DeleteIORequest(A6)
000352E0 <PED.ab2@2433>   CLR.l ptr_iorequest_clipboard
000352E2 <PED.ab2@2435> RTS
000352E8 <PED.ab2@2438>   MOVEA.l #str_unable_screen,A0
000352EE <PED.ab2@2439>   JSR show_errorrequester
000352F0 <PED.ab2@2440> RTS
000352F6 <PED.ab2@2443>   MOVEA.l #str_unable_window,A0
000352FC <PED.ab2@2444>   JSR show_errorrequester
000352FE <PED.ab2@2445> RTS
00035304 <PED.ab2@2448>   MOVEA.l _execbase,A6
0003530A <PED.ab2@2449>   LEA str_libname_workb,A1
0003530C <PED.ab2@2450>   MOVEQ.l #$24,D0
00035310 <PED.ab2@2451>   JSR _OpenLibrary(A6)
00035316 <PED.ab2@2452>   MOVE.l D0,_workbenchbase
0003531A <PED.ab2@2454>   JSR _CreateMsgPortA(A6)
00035320 <PED.ab2@2455>   MOVE.l D0,struct_MsgPort
00035322 <PED.ab2@2456> RTS
00035328 <PED.ab2@2459>   TST.l _workbenchbase
0003532C <PED.ab2@2460>   BEQ.w JL_0_A80
00035332 <PED.ab2@2462>   MOVEA.l _execbase,A6
00035338 <PED.ab2@2463>   MOVEA.l _workbenchbase,A1
0003533C <PED.ab2@2464>   JSR _CloseLibrary(A6)
00035342 <PED.ab2@2466>   CLR.l _workbenchbase
00035348 <PED.ab2@2467>   MOVEA.l struct_MsgPort,A0
0003534C <PED.ab2@2468>   JSR _DeleteMsgPort(A6)
0003534E <PED.ab2@2470> RTS
00035378 <PED.ab2@2475>  !basic
00035392 <PED.ab2@2476>  used_win.l = Used Window
0003543E <PED.ab2@2478>  WZWindow WZID("WIN_SETTINGS"),?wzgui,255,-2,-2,-2,-2,WZID("WIN_SETTINGS")
00035478 <PED.ab2@2479>  Use Window WZID("WIN_SETTINGS")
000354B0 <PED.ab2@2481>  WZPrint "SET_PAGES",0
000354DA <PED.ab2@2484>  For i = 0 To 24
000354F6 <PED.ab2@2485>   AB3RGB_temp(i) = AB3RGB(i)
00035506 <PED.ab2@2486>  Next i
00035554 <PED.ab2@2489>  If Peek.b(?auto_format)           Then WZPrint "SET_AUTO_FORMAT"        ,On
000355A2 <PED.ab2@2490>  If Peek.b(?auto_constructs)       Then WZPrint "SET_COMPLETE_CONSTRUCTS",On
000355F0 <PED.ab2@2491>  If Peek.b(?use_intellisense)      Then WZPrint "SET_INTELLISENSE"       ,On
0003563E <PED.ab2@2492>  If Peek.b(?correct_functions)     Then WZPrint "SET_CORRECT_FUNCTIONS"  ,On
0003568A <PED.ab2@2493>  If Peek.w(?smart_tokenization)    Then WZPrint "SET_SMART_TOKENIZATION" ,On
000356D8 <PED.ab2@2494>  If Peek.b(?new_editmode)          Then WZPrint "SET_STANDARD_EDITMODE"  ,On
00035726 <PED.ab2@2495>  If Peek.b(?no_welcome)            Then WZPrint "SET_WELCOME"            ,On
00035774 <PED.ab2@2497>  If Peek.b(?onlinehelp)            Then WZPrint "SET_ONLINEHELP"         ,On
000357C0 <PED.ab2@2498>  If Peek.w(?bold_tokens)           Then WZPrint "SET_BOLDTOKENS"         ,On
0003580C <PED.ab2@2499>  If Peek.w(?italic_remarks)        Then WZPrint "SET_ITALICREMARKS"      ,On
00035858 <PED.ab2@2500>  If Peek.w(?remember_saved)        Then WZPrint "SET_REMEMBER_SAVED"     ,On
000358A6 <PED.ab2@2501>  If Peek.b(?load_last_source)      Then WZPrint "SET_LAST_SOURCE"        ,On
000358F2 <PED.ab2@2503>  If Peek.w(?use_pubscreen)         Then WZPrint "SET_PUBSCREEN"          ,On
0003593E <PED.ab2@2504>  If Peek.w(?use_default_pubscreen) Then WZPrint "SET_DEFAULTPUBSCREEN"   ,On
0003598A <PED.ab2@2505>  If Peek.w(?use_filepattern)       Then WZPrint "SET_FILEPATTERN"        ,On
000359D6 <PED.ab2@2506>  If Peek.w(?auto_indent)           Then WZPrint "SET_AUTO_INDENT"        ,On
00035A22 <PED.ab2@2507>  If Peek.l(?nodisplaybeep)         Then  WZPrint "SET_NO_DISPLAYBEEP"    ,On
00035A76 <PED.ab2@2508>  If Peek.w(?oldsearch)= 1          Then WZPrint "SET_OLDSEARCH"          ,On
00035AEE <PED.ab2@2510>  If console_device$ <>""           Then WZPrint "SET_CONSOLE_DEVICE"     ,&console_device$
00035B38 <PED.ab2@2511>  If console_wb = True              Then WZPrint "SET_CONSOLE_ON_WB"      ,True
00035B82 <PED.ab2@2512>  If console_wait = True            Then WZPrint "SET_CONSOLE_WAIT"       ,True
00035BBA <PED.ab2@2515>  WZPrint "SET_SORTLABELS",sort_labels
00035BD2 <PED.ab2@2517>  If NOT Peek.b(?old_scrolling)
00035BF6 <PED.ab2@2518>    WZDisable "SET_SCROLLRATE"
00035BFC <PED.ab2@2519>  Else
00035C34 <PED.ab2@2520>    WZPrint "SET_SCROLLRATE",scroll_rate
00035C7E <PED.ab2@2523>  WZPrint "SET_TAB_SIZE"       ,Peek.w(?tab_size)
00035CCA <PED.ab2@2524>  WZPrint "SET_CURSORBLINKRATE",Peek.b(?blinkrate)
00035CFE <PED.ab2@2526>  tsourcedir$  =sourcedir$
00035D32 <PED.ab2@2527>  tdeflibfile$ =deflibfile$
00035D66 <PED.ab2@2528>  tincludedir$ =includedir$
00035D9A <PED.ab2@2529>  tautodocdir$ =autodocdir$
00035DCE <PED.ab2@2530>  thelpdir$    =helpdir$
00035E08 <PED.ab2@2532>  WZPrint "SET_SOURCEDIR"  ,&tsourcedir$
00035E42 <PED.ab2@2533>  WZPrint "SET_DEFLIBS"    ,&tdeflibfile$
00035E7C <PED.ab2@2534>  WZPrint "SET_INCDIR"     ,&tincludedir$
00035EB6 <PED.ab2@2535>  WZPrint "SET_AUTODOCDIR" ,&tautodocdir$
00035EF0 <PED.ab2@2536>  WZPrint "SET_HELPDIR"    ,&thelpdir$
00035F00 <PED.ab2@2539>  temp_id.l     = Peek.l(?ownscreen_modeid)
00035F10 <PED.ab2@2540>  temp_width.w  = Peek.w(?ownscreen_width)
00035F20 <PED.ab2@2541>  temp_height.w = Peek.w(?ownscreen_height)
00035F30 <PED.ab2@2542>  temp_depth.w  = Peek.w(?ownscreen_depth)
00035F64 <PED.ab2@2544>  temp_scr$ = screen_GetModeName{temp_id}
00035F9C <PED.ab2@2546>  If temp_scr$ = "unknown"
00035FB8 <PED.ab2@2547>    temp_id.l = screen_GetBestModeID{temp_width,temp_height,temp_depth}
00035FEC <PED.ab2@2548>    temp_scr$ = screen_GetModeName{temp_id}
00036008 <PED.ab2@2551>  screen_SetASLInitialDims{temp_id,temp_width,temp_height,temp_depth}
00036042 <PED.ab2@2552>  WZPrint "SET_SCREENNAME",&temp_scr$
0003606C <PED.ab2@2555>  newsourcefont$      = Peek.s(?str_sourcefontname)
0003607E <PED.ab2@2556>  newsourcefontsize.l = Peek.w(?sourcefontsize)
000360B2 <PED.ab2@2557>  newguifont$         = guifont$
000360BC <PED.ab2@2558>  newguifontsize.l    = guifontsize
0003613C <PED.ab2@2559>  tempstr$            = newsourcefont$ + " ("+Str$(newsourcefontsize)+")"
00036176 <PED.ab2@2560>  WZPrint "SET_SOURCEFONTNAME",&tempstr$
000361F6 <PED.ab2@2561>  tempstr2$           = guifont$+" ("+Str$(guifontsize)+")"
00036230 <PED.ab2@2562>  WZPrint "SET_GUIFONTNAME",&tempstr2$
0003623A <PED.ab2@2563>  olduse_wbfont.b     = use_wbfont               ; temp variables to check former stat
0003624C <PED.ab2@2564>  olduse_wbscreen.b   = Peek.b(?use_wbscreen)
0003626A <PED.ab2@2567>  If Peek.b(?use_wbscreen)<>0
000362A2 <PED.ab2@2568>    WZPrint "SET_USEWB"  ,On
000362DA <PED.ab2@2569>    WZPrint "SET_CLONEWB",Off
000362FE <PED.ab2@2570>    WZDisable "SET_SCREENNAME"
00036322 <PED.ab2@2571>    WZDisable "SET_SCREEN"
0003634C <PED.ab2@2572>    For i = 0 To 3
00036398 <PED.ab2@2573>     WZDisable "SET_SCREENCOL"+Str$(i)   ; disable Screencolors
000363A8 <PED.ab2@2574>    Next i
000363AE <PED.ab2@2575>    usewbscreen_tmp.b = True             ; temporay variable for prefs window
000363B4 <PED.ab2@2576>  Else
000363DE <PED.ab2@2577>    For i = 0 To 3
0003642A <PED.ab2@2578>     WZEnable "SET_SCREENCOL"+Str$(i)    ; enable Screencolors
0003643A <PED.ab2@2579>    Next i
00036440 <PED.ab2@2580>    usewbscreen_tmp.b = False
0003645E <PED.ab2@2583>  If Peek.b(?clone_wbscreen)<>0
00036496 <PED.ab2@2584>    WZPrint "SET_USEWB"  ,Off
000364CE <PED.ab2@2585>    WZPrint "SET_CLONEWB",On
000364F2 <PED.ab2@2586>    WZDisable "SET_SCREENNAME"
00036516 <PED.ab2@2587>    WZDisable "SET_SCREEN"
0003651C <PED.ab2@2588>    usewbscreen_tmp.b = False
00036536 <PED.ab2@2591>  If use_wbfont = True                   ;<>0
0003656E <PED.ab2@2592>    WZPrint "SET_USEWBFONT",On
00036592 <PED.ab2@2593>    WZDisable "SET_SOURCEFONT"
000365B6 <PED.ab2@2594>    WZDisable "SET_SOURCEFONTNAME"
000365DA <PED.ab2@2595>    WZDisable "SET_GUIFONT"
000365FE <PED.ab2@2596>    WZDisable "SET_GUIFONTNAME"
00036604 <PED.ab2@2597>    usewbfont_tmp.b = True               ; temporay variable for prefs window
0003660A <PED.ab2@2598>  Else
00036642 <PED.ab2@2599>    WZPrint "SET_USEWBFONT",Off
00036666 <PED.ab2@2600>    WZEnable "SET_SOURCEFONT"
0003668A <PED.ab2@2601>    WZEnable "SET_SOURCEFONTNAME"
00036690 <PED.ab2@2602>    usewbfont_tmp.b = False
000366AA <PED.ab2@2603>    If usewbscreen_tmp.b = True          ; only active GuiFontsettings if we don't use WBscreen
000366CE <PED.ab2@2604>      WZDisable "SET_GUIFONT"
000366F2 <PED.ab2@2605>      WZDisable "SET_GUIFONTNAME"
000366F8 <PED.ab2@2606>    Else
0003671C <PED.ab2@2607>      WZEnable "SET_GUIFONTNAME"
00036740 <PED.ab2@2608>      WZEnable "SET_GUIFONT"
0003678C <PED.ab2@2614>  If Peek.w(?use_asldims) Then WZPrint "SET_asl_DIMENSIONS",On
000367D6 <PED.ab2@2615>  WZPrint "SET_ASLX",Peek.l(?aslreq_x)
00036820 <PED.ab2@2616>  WZPrint "SET_ASLY",Peek.l(?aslreq_y)
0003686A <PED.ab2@2617>  WZPrint "SET_ASLW",Peek.l(?aslreq_width)
000368B4 <PED.ab2@2618>  WZPrint "SET_ASLH",Peek.l(?aslreq_height)
000368DC <PED.ab2@2620>  *cw_gad.Gadget = WZGadAddr("SET_COLORWHEEL")
000368E2 <PED.ab2@2621>  cw_open.l          = False
000368EC <PED.ab2@2622>  colnum.w           = -1
000368F2 <PED.ab2@2623>  rebuild_gui.b      = False
000368F8 <PED.ab2@2624>  rebuild_menu.b     = False
000368FE <PED.ab2@2627>   exit_settings.b   = False
00036904 <PED.ab2@2628>   save_settings.b   = False
0003690A <PED.ab2@2629>   use_settings.b    = False
00036910 <PED.ab2@2630>   reopen_settings.b = False
00036916 <PED.ab2@2631>   update_colors.b   = False
00036920 <PED.ab2@2635>    !ev_WaitEvent
0003693E <PED.ab2@2637>    If Peek.b(?onlinehelp)<>0
0003698C <PED.ab2@2638>       If (ev<>#IDCMP_INTUITICKS) AND (ev<>#IDCMP_ACTIVEWINDOW) AND (ev<>#IDCMP_GADGETHELP)  AND (ev<>#IDCMP_CHANGEWINDOW)
0003699A <PED.ab2@2639>         WZ_HideHelp{}
000369B2 <PED.ab2@2641>       If ev = #IDCMP_GADGETHELP Then WZ_ShowHelp{}
000369B8 <PED.ab2@2644>    Select ev
000369C6 <PED.ab2@2645>    Case #IDCMP_MOUSEMOVE
00036A0C <PED.ab2@2646>      If (WZInput("SET_PAGES") = 2) AND (cw_open = True)
00036A16 <PED.ab2@2648>        _RGB.l = WZ_GetColorWheelRGB{}
00036A24 <PED.ab2@2649>        If _RGB <> old_RGB.l
00036A2E <PED.ab2@2650>          WZ_SetColorGradientSlider{_RGB}
00036A34 <PED.ab2@2651>          old_RGB = _RGB
00036A3A <PED.ab2@2652>          update_colors.b = True
00036A4C <PED.ab2@2653>          If colnum<>-1
00036A60 <PED.ab2@2654>            AB3RGB_temp(colnum)= _RGB
00036A66 <PED.ab2@2655>            Gosub update_colorboxes
00036A7A <PED.ab2@2660>    Case #IDCMP_VANILLAKEY
00036A82 <PED.ab2@2661>      Select EventCode
00036A96 <PED.ab2@2662>      Case $1B: exit_settings = True
00036A98 <PED.ab2@2663>      End Select
00036AAC <PED.ab2@2665>    Case #IDCMP_REFRESHWINDOW
00036AB2 <PED.ab2@2666>      Gosub update_colorwheel
00036AB8 <PED.ab2@2667>      Gosub update_colorboxes
00036ACC <PED.ab2@2669>    Case #IDCMP_CLOSEWINDOW
00036AD2 <PED.ab2@2670>      exit_settings = True
00036AE6 <PED.ab2@2672>    Case #IDCMP_IDCMPUPDATE
00036B34 <PED.ab2@2674>      If Left$(WZGadName,9) = "SET_COLOR"
00036BA4 <PED.ab2@2675>        colnum = Vallong(StrChg(WZGadName,"SET_COLOR",""))
00036BAA <PED.ab2@2676>        update_colors = True
00036BB0 <PED.ab2@2677>        Gosub update_colorboxes
00036BC6 <PED.ab2@2678>        WZ_SetColorWheelRGB{AB3RGB_temp(colnum)}
00036BCC <PED.ab2@2679>      Else
00036C1A <PED.ab2@2680>        If Left$(WZGadName,13) = "SET_SCREENCOL"
00036C90 <PED.ab2@2681>          colnum.w = Vallong(StrChg(WZGadName,"SET_SCREENCOL","")) + 20
00036C96 <PED.ab2@2682>          update_colors = True
00036C9C <PED.ab2@2683>          rebuild_gui   = True
00036CA2 <PED.ab2@2684>          Gosub update_colorboxes
00036CB8 <PED.ab2@2685>          WZ_SetColorWheelRGB{AB3RGB_temp(colnum)}
00036CE0 <PED.ab2@2690>      Select WZGadName
00036D04 <PED.ab2@2691>      Case "SET_PAGES"
00036D0A <PED.ab2@2692>        Gosub update_colorwheel
00036D10 <PED.ab2@2693>        Gosub update_colorboxes
00036D3A <PED.ab2@2695>      Case "SET_SOURCEDIR"
00036D5C <PED.ab2@2696>        tsourcedir$ = WZInputstr
00036D96 <PED.ab2@2697>        WZPrint "SET_SOURCEDIR",&tsourcedir$
00036DC0 <PED.ab2@2699>      Case "BUTTON_SOURCEDIR"
00036E52 <PED.ab2@2700>        aslfr_SetRequesterTitle {0,!TRANS{ "Please select source directory:"},"",""}
00036EC4 <PED.ab2@2701>        aslfr_SetPath{0,tsourcedir$,"",""}
00036EEA <PED.ab2@2702>        If aslfr_Request{0,False,False,True}
00036F1A <PED.ab2@2703>          tsourcedir$ = aslfr_GetNextFile{}
00036F54 <PED.ab2@2704>          WZPrint "SET_SOURCEDIR",&tsourcedir$
00036F7E <PED.ab2@2707>      Case "SET_INCDIR"
00036FA0 <PED.ab2@2708>        tincludedir$ = WZInputstr
00036FDA <PED.ab2@2709>        WZPrint "SET_INCDIR",&tincludedir$
00037004 <PED.ab2@2711>      Case "BUTTON_INCDIR"
00037096 <PED.ab2@2712>        aslfr_SetRequesterTitle {0,!TRANS{"Please select includes directory:"},"",""}
00037108 <PED.ab2@2713>        aslfr_SetPath{0,tincludedir$,"",""}
0003712E <PED.ab2@2714>        If aslfr_Request{0,False,False,True}
0003715E <PED.ab2@2715>          tincludedir$ = aslfr_GetNextFile{}
00037198 <PED.ab2@2716>          WZPrint "SET_INCDIR",&tincludedir$
000371C2 <PED.ab2@2719>      Case "SET_HELPDIR"
000371E4 <PED.ab2@2720>        thelpdir$ = WZInputstr
0003721E <PED.ab2@2721>        WZPrint "SET_HELPDIR",&thelpdir$
00037248 <PED.ab2@2723>      Case "BUTTON_HELPDIR"
000372DA <PED.ab2@2724>        aslfr_SetRequesterTitle {0,!TRANS{"Please select help directory:"},"",""}
0003734C <PED.ab2@2725>        aslfr_SetPath{0,thelpdir$,"",""}
00037372 <PED.ab2@2726>        If aslfr_Request{0,False,False,True}
000373A2 <PED.ab2@2727>          thelpdir$ = aslfr_GetNextFile{};ASLPathRequest$("Select doc directory:",thelpdir$);,aslx,asly,aslw,aslh)
000373DC <PED.ab2@2728>          WZPrint "SET_HELPDIR",&thelpdir$
00037406 <PED.ab2@2731>      Case "SET_AUTODOCDIR"
00037428 <PED.ab2@2732>        tautodocdir$ = WZInputstr
00037462 <PED.ab2@2733>        WZPrint "SET_AUTODOCDIR",&tautodocdir$
0003748C <PED.ab2@2735>      Case "BUTTON_AUTODOCDIR"
0003751E <PED.ab2@2736>        aslfr_SetRequesterTitle {0,!TRANS{ "Please select AutoDocs directory:"},"",""}
00037590 <PED.ab2@2737>        aslfr_SetPath{0,tautodocdir$,"",""}
000375B6 <PED.ab2@2738>        If aslfr_Request{0,False,False,True}
000375E6 <PED.ab2@2739>          tautodocdir$ = aslfr_GetNextFile{} ;ASLPathRequest$("Select autodoc directory:",tautodocdir$);,aslx,asly,aslw,aslh)
00037620 <PED.ab2@2740>          WZPrint "SET_AUTODOCDIR",&tautodocdir$
0003764A <PED.ab2@2743>      Case "BUTTON_DEFLIBS"
000376DC <PED.ab2@2744>        aslfr_SetRequesterTitle {0,!TRANS{"Please select standard DefLibs file:"},"",""}
000377B6 <PED.ab2@2745>        aslfr_SetPath{0,dos_PathPart{tdeflibfile$},dos_FilePart{tdeflibfile$},"#?"}
000377DC <PED.ab2@2746>        If aslfr_Request{0,False,False,False}
0003780C <PED.ab2@2747>          tdeflibfile$ = aslfr_GetNextFile{} ; tdeflibs$ = ASLFileRequest$("Select deflibs file:",aslpath$,aslfile$,"",aslx,asly,aslw,aslh)
00037846 <PED.ab2@2748>          WZPrint "SET_DEFLIBS",&tdeflibfile$
00037870 <PED.ab2@2751>      Case "SET_asl_DIMENSIONS"
0003788A <PED.ab2@2752>        If WZInput = 0
000378AE <PED.ab2@2753>          WZDisable "SET_ASLX"
000378D2 <PED.ab2@2754>          WZDisable "SET_ASLY"
000378F6 <PED.ab2@2755>          WZDisable "SET_ASLW"
0003791A <PED.ab2@2756>          WZDisable "SET_ASLH"
00037920 <PED.ab2@2757>        Else
00037944 <PED.ab2@2758>          WZEnable "SET_ASLX"
00037968 <PED.ab2@2759>          WZEnable "SET_ASLY"
0003798C <PED.ab2@2760>          WZEnable "SET_ASLW"
000379B0 <PED.ab2@2761>          WZEnable "SET_ASLH"
000379DA <PED.ab2@2764>      Case "SET_PUBSCREEN"
000379F4 <PED.ab2@2765>        If WZInput = 0
00037A50 <PED.ab2@2766>          WZPrint "SET_DEFAULTPUBSCREEN",Off : WZDisable "SET_DEFAULTPUBSCREEN"
00037A56 <PED.ab2@2767>        Else
00037A7A <PED.ab2@2768>          WZEnable "SET_DEFAULTPUBSCREEN"
00037A80 <PED.ab2@2770>        rebuild_gui = True
00037AAA <PED.ab2@2772>      Case "SET_DEFAULTPUBSCREEN"
00037AB0 <PED.ab2@2773>        rebuild_gui = True
00037ADA <PED.ab2@2775>      Case "SET_REMEMBER_SAVED"
00037AE0 <PED.ab2@2776>        rebuild_menu = True
00037B0A <PED.ab2@2778>      Case "SET_CLONEWB"
00037B18 <PED.ab2@2779>        If WZInput
00037B3C <PED.ab2@2780>          WZDisable "SET_SCREENNAME"
00037B60 <PED.ab2@2781>          WZDisable "SET_SCREEN"
00037B98 <PED.ab2@2782>          WZPrint   "SET_USEWB",Off
00037B9E <PED.ab2@2783>          usewbscreen_tmp.b = False
00037BB8 <PED.ab2@2784>          If usewbfont_tmp.b = False     ;only actived GUIfontsetting if we don't use WBFonts
00037BDC <PED.ab2@2785>            WZEnable "SET_GUIFONTNAME"
00037C00 <PED.ab2@2786>            WZEnable "SET_GUIFONT"
00037C06 <PED.ab2@2788>        Else
00037C2A <PED.ab2@2789>          WZEnable "SET_SCREENNAME"
00037C4E <PED.ab2@2790>          WZEnable "SET_SCREEN"
00037C54 <PED.ab2@2792>        rebuild_gui = True
00037C7E <PED.ab2@2794>      Case "SET_USEWB"
00037C8C <PED.ab2@2795>        If WZInput
00037CB6 <PED.ab2@2796>          For i = 0 To 3
00037D02 <PED.ab2@2797>           WZDisable "SET_SCREENCOL"+Str$(i)
00037D12 <PED.ab2@2798>          Next i
00037D36 <PED.ab2@2799>          WZDisable "SET_SCREENNAME"
00037D5A <PED.ab2@2800>          WZDisable "SET_SCREEN"
00037D92 <PED.ab2@2801>          WZPrint   "SET_CLONEWB",Off
00037D98 <PED.ab2@2802>          usewbscreen_tmp.b = True       ; deactived GUIFontsettings we use WBScreen
00037DBC <PED.ab2@2803>          WZDisable "SET_GUIFONT"
00037DE0 <PED.ab2@2804>          WZDisable "SET_GUIFONTNAME"
00037DE6 <PED.ab2@2805>        Else
00037E10 <PED.ab2@2806>          For i = 0 To 3
00037E5C <PED.ab2@2807>           WZEnable "SET_SCREENCOL"+Str$(i)
00037E6C <PED.ab2@2808>          Next i
00037E90 <PED.ab2@2809>          WZEnable "SET_SCREENNAME"
00037EB4 <PED.ab2@2810>          WZEnable "SET_SCREEN"
00037EBA <PED.ab2@2811>          usewbscreen_tmp.b = False
00037ED4 <PED.ab2@2812>            If usewbfont_tmp.b = False    ;only actived GUIfontsetting if we don't use WBFonts
00037EF8 <PED.ab2@2813>              WZEnable "SET_GUIFONTNAME"
00037F1C <PED.ab2@2814>              WZEnable "SET_GUIFONT"
00037F22 <PED.ab2@2817>        rebuild_gui = True
00037F4C <PED.ab2@2819>      Case "SET_SCREEN"
00038032 <PED.ab2@2820>        aslsm_SetRequesterTitle {!TRANS{"Please select screenmode:"},!TRANS{ "Ok"},!TRANS{ "Cancel"}}
00038068 <PED.ab2@2821>        If aslsm_Request{}
00038072 <PED.ab2@2822>           temp_id.l     = screen_GetASLModeID{}
0003807C <PED.ab2@2823>           temp_width.w  = screen_GetASLWidth{}
00038086 <PED.ab2@2824>           temp_height.w = screen_GetASLHeight{}
00038090 <PED.ab2@2825>           temp_depth.w  = screen_GetASLDepth{}
000380C0 <PED.ab2@2826>           temp_scr$     = screen_GetASLModeName{}
000380FA <PED.ab2@2827>           WZPrint "SET_SCREENNAME",&temp_scr$
00038100 <PED.ab2@2828>           rebuild_gui   = True
0003812A <PED.ab2@2831>      Case "SET_GUIFONT"
00038210 <PED.ab2@2832>        aslfo_SetRequesterTitle {!TRANS{"Please select GUI-Font:"},!TRANS{"Ok"},!TRANS{ "Cancel"}}
00038242 <PED.ab2@2833>        aslfo_SetInitialFont{newguifont$,newguifontsize}
00038258 <PED.ab2@2834>        If aslfo_Request{True}
00038288 <PED.ab2@2835>          newguifont$      = aslfo_GetFontName{}
00038292 <PED.ab2@2836>          newguifontsize   = aslfo_GetFontSize{}
00038312 <PED.ab2@2838>          tempstr2$= newguifont$ + " ("+Str$(newguifontsize)+")"
0003834C <PED.ab2@2839>          WZPrint "SET_GUIFONTNAME",&tempstr2$
00038376 <PED.ab2@2842>      Case "SET_USEWBFONT"
00038384 <PED.ab2@2843>        If WZInput
0003838A <PED.ab2@2844>          usewbfont_tmp.b = True
000383AE <PED.ab2@2845>          WZDisable "SET_GUIFONT"
000383D2 <PED.ab2@2846>          WZDisable "SET_GUIFONTNAME"
000383F6 <PED.ab2@2847>          WZDisable "SET_SOURCEFONT"
0003841A <PED.ab2@2848>          WZDisable "SET_SOURCEFONTNAME"
00038420 <PED.ab2@2849>        Else
00038426 <PED.ab2@2850>          usewbfont_tmp.b = False
0003844A <PED.ab2@2851>          WZEnable "SET_SOURCEFONTNAME"
0003846E <PED.ab2@2852>          WZEnable "SET_SOURCEFONT"
00038488 <PED.ab2@2853>          If usewbscreen_tmp.b = False     ; make GUIfont selectable only if way don't use wbscreen
000384AC <PED.ab2@2854>            WZEnable "SET_GUIFONT"
000384D0 <PED.ab2@2855>            WZEnable "SET_GUIFONTNAME"
000384D6 <PED.ab2@2858>        rebuild_gui = True
00038500 <PED.ab2@2860>      Case "SET_SOURCEFONT"
000385E6 <PED.ab2@2861>        aslfo_SetRequesterTitle {!TRANS{"Please select Source-Font:"},!TRANS{"Ok"},!TRANS{"Cancel"}}
00038618 <PED.ab2@2862>        aslfo_SetInitialFont{newsourcefont$,newsourcefontsize}
0003862E <PED.ab2@2863>        If aslfo_Request{False}
0003865E <PED.ab2@2864>          newsourcefont$     = aslfo_GetFontName{}
00038668 <PED.ab2@2865>          newsourcefontsize  = aslfo_GetFontSize{}
000386E8 <PED.ab2@2867>          tempstr$= newsourcefont$ + " ("+Str$(newsourcefontsize)+")"
00038722 <PED.ab2@2868>          WZPrint "SET_SOURCEFONTNAME",&tempstr$
0003874C <PED.ab2@2871>      Case "SET_F4"
00038764 <PED.ab2@2872>        savewinpref{0,?ptr_sourcewindow} : JSR write_newprefs
0003878E <PED.ab2@2873>      Case "SET_F5"
000387A6 <PED.ab2@2874>        savewinpref{1,?ptr_sourcewindow} : JSR write_newprefs
000387D0 <PED.ab2@2875>      Case "SET_F6"
000387E8 <PED.ab2@2876>        savewinpref{2,?ptr_sourcewindow} : JSR write_newprefs
00038812 <PED.ab2@2879>      Case "SET_SAVE"
00038818 <PED.ab2@2880>        save_settings   = True
0003881E <PED.ab2@2881>        use_settings    = True
00038824 <PED.ab2@2882>        exit_settings   = True
0003884E <PED.ab2@2883>      Case "SET_USEEXIT"
00038854 <PED.ab2@2884>        use_settings    = True
0003885A <PED.ab2@2885>        exit_settings   = True
00038884 <PED.ab2@2886>      Case "SET_USE"
0003888A <PED.ab2@2887>        use_settings    = True
00038890 <PED.ab2@2888>        exit_settings   = True
00038896 <PED.ab2@2889>        reopen_settings = True
000388C0 <PED.ab2@2890>      Case "SET_CANCEL"
000388C6 <PED.ab2@2891>        use_settings    = False
000388CC <PED.ab2@2892>        reopen_settings = False
000388D2 <PED.ab2@2893>        exit_settings   = True
000388E0 <PED.ab2@2894>      End Select
000388E2 <PED.ab2@2896>    End Select
000388FC <PED.ab2@2900>  Until exit_settings = True
00038916 <PED.ab2@2902>  If use_settings = True
00038938 <PED.ab2@2904>    WZ_LockWindow{"WIN_SETTINGS"}
00038972 <PED.ab2@2905>    Poke.b ?auto_format,           WZInput("SET_AUTO_FORMAT")
000389AC <PED.ab2@2906>    Poke.b ?auto_constructs,       WZInput("SET_COMPLETE_CONSTRUCTS")
000389E6 <PED.ab2@2907>    Poke.b ?use_intellisense,      WZInput("SET_INTELLISENSE")
00038A20 <PED.ab2@2908>    Poke.b ?correct_functions,     WZInput("SET_CORRECT_FUNCTIONS")
00038A80 <PED.ab2@2909>    Poke.w ?smart_tokenization,    Abs(WZInput("SET_SMART_TOKENIZATION"))
00038ABA <PED.ab2@2910>    Poke.b ?new_editmode,          WZInput("SET_STANDARD_EDITMODE")
00038AF4 <PED.ab2@2911>    Poke.b ?no_welcome,            WZInput("SET_WELCOME")
00038B2E <PED.ab2@2912>    Poke.b ?onlinehelp,            WZInput("SET_ONLINEHELP")
00038B68 <PED.ab2@2913>    Poke.w ?bold_tokens,           WZInput("SET_BOLDTOKENS")
00038BA2 <PED.ab2@2914>    Poke.w ?italic_remarks,        WZInput("SET_ITALICREMARKS")
00038BB2 <PED.ab2@2915>    Poke.w ?use_wbcolors,          Off
00038BEC <PED.ab2@2916>    Poke.w ?remember_saved,        WZInput("SET_REMEMBER_SAVED")
00038C26 <PED.ab2@2917>    Poke.b ?load_last_source,      WZInput("SET_LAST_SOURCE")
00038C60 <PED.ab2@2918>    Poke.w ?use_asldims,           WZInput("SET_asl_DIMENSIONS")
00038C9A <PED.ab2@2919>    Poke.w ?use_pubscreen,         WZInput("SET_PUBSCREEN")
00038CD4 <PED.ab2@2920>    Poke.w ?use_default_pubscreen, WZInput("SET_DEFAULTPUBSCREEN")
00038D0E <PED.ab2@2921>    Poke.w ?use_filepattern,       WZInput("SET_FILEPATTERN")
00038D48 <PED.ab2@2922>    Poke.b ?use_wbscreen,          WZInput("SET_USEWB")
00038D82 <PED.ab2@2923>    Poke.b ?clone_wbscreen,        WZInput("SET_CLONEWB")
00038DAC <PED.ab2@2924>    use_wbfont =                   -WZInput("SET_USEWBFONT")
00038DE6 <PED.ab2@2925>    Poke.w ?auto_indent,           WZInput("SET_AUTO_INDENT")
00038E20 <PED.ab2@2926>    Poke.w ?oldsearch,             WZInput("SET_OLDSEARCH")
00038E5A <PED.ab2@2927>    Poke.b ?nodisplaybeep,         WZInput("SET_NO_DISPLAYBEEP")
00038EA8 <PED.ab2@2929>    console_device$  = WZGetString("SET_CONSOLE_DEVICE")
00038ED2 <PED.ab2@2930>    console_wb       = -WZInput("SET_CONSOLE_ON_WB")
00038EFC <PED.ab2@2931>    console_wait     = -WZInput("SET_CONSOLE_WAIT")
00038F26 <PED.ab2@2934>    sort_labels = -WZInput("SET_SORTLABELS")
00038F4E <PED.ab2@2935>    scroll_rate = WZInput("SET_SCROLLRATE")
00038F70 <PED.ab2@2936>    If scroll_rate = 0 Then Poke.b ?old_scrolling,1 ;Else vvset_blank{scroll_rate}
00038FAA <PED.ab2@2937>    Poke.w ?tab_size      ,WZInput("SET_TAB_SIZE")
00038FE4 <PED.ab2@2938>    Poke.b ?blinkrate     ,WZInput("SET_CURSORBLINKRATE")
0003901E <PED.ab2@2940>    Poke.l ?aslreq_x      ,WZInput("SET_ASLX")
00039058 <PED.ab2@2941>    Poke.l ?aslreq_y      ,WZInput("SET_ASLY")
00039092 <PED.ab2@2942>    Poke.l ?aslreq_width  ,WZInput("SET_ASLW")
000390CC <PED.ab2@2943>    Poke.l ?aslreq_height ,WZInput("SET_ASLH")
000390EA <PED.ab2@2944>    If Peek.w(?use_asldims) = True
0003913E <PED.ab2@2945>      asl_SetRequesterDims{Peek.l(?aslreq_x),Peek.l(?aslreq_y),Peek.l(?aslreq_width),Peek.l(?aslreq_height)}
00039144 <PED.ab2@2946>    Else
0003916A <PED.ab2@2947>      asl_SetRequesterDims{-1,-1,-1,-1}
0003919E <PED.ab2@2951>    sourcedir$=  tsourcedir$
000391D2 <PED.ab2@2952>    deflibfile$= tdeflibfile$
00039206 <PED.ab2@2953>    includedir$= tincludedir$
0003923A <PED.ab2@2954>    autodocdir$= tautodocdir$
0003926E <PED.ab2@2955>    helpdir$=    thelpdir$
00039280 <PED.ab2@2956>    Poke.l ?ptr_source_dir      ,&sourcedir$
000392B8 <PED.ab2@2957>    Poke$ ?comStr_CurrentDir    ,sourcedir$
000392CA <PED.ab2@2958>    Poke.l ?ptr_incdirname      ,&includedir$
000392DC <PED.ab2@2959>    Poke.l ?ptr_deflibsfilename ,&deflibfile$
00039304 <PED.ab2@2961>    If temp_id<>Peek.l(?ownscreen_modeid)
00039314 <PED.ab2@2962>      Poke.l ?ownscreen_modeid ,temp_id
00039324 <PED.ab2@2963>      Poke.w ?ownscreen_height ,temp_height
00039334 <PED.ab2@2964>      Poke.w ?ownscreen_width  ,temp_width
00039344 <PED.ab2@2965>      Poke.w ?ownscreen_depth  ,temp_depth
000393D0 <PED.ab2@2968>    If ( (newguifont$<>guifont$) OR (newguifontsize<>guifontsize) ) AND ( (NOT use_wbfont) AND (Peek.b(?use_wbscreen)=0) )
00039404 <PED.ab2@2969>      guifont$       = newguifont$
0003940C <PED.ab2@2970>      guifontsize    = newguifontsize
00039412 <PED.ab2@2971>      guifontstyle.l = newguifontstyle.l
00039418 <PED.ab2@2972>      rebuild_gui    = True
0003941E <PED.ab2@2973>    Else
0003948A <PED.ab2@2974>     If ( (use_wbfont AND (NOT olduse_wbfont) ) AND olduse_wbscreen=0 ) OR ( ( (Peek.b(?use_wbscreen)<>0) AND (olduse_wbscreen=0) ) AND (NOT olduse_wbfont) )
00039490 <PED.ab2@2975>       Gosub SetGuiFontToWBScreenFont
00039496 <PED.ab2@2976>       rebuild_gui = True
000394B0 <PED.ab2@2981>    If update_colors = True
000394DA <PED.ab2@2982>      For i = 0 To 24
000394F6 <PED.ab2@2983>        AB3RGB(i) = AB3RGB_temp(i)
00039506 <PED.ab2@2984>      Next i
00039520 <PED.ab2@2985>      If rebuild_gui = False          ; update screencolors only if GUI not rebuild else we trash maybe the Wbscreencolors
00039526 <PED.ab2@2986>        Gosub set_storedcolors
0003952C <PED.ab2@2987>        update_colors.b = False
000395A6 <PED.ab2@2991>    If ( (newsourcefont$<>Peek.s(?str_sourcefontname)) OR (newsourcefontsize<>Peek.w(?sourcefontsize)) ) AND (NOT use_wbfont)
000395DA <PED.ab2@2992>      sourcefont$      = newsourcefont$
000395E2 <PED.ab2@2993>      sourcefont_size  = newsourcefontsize
000395EA <PED.ab2@2994>      sourcefont_style = newsourcefontstyle.l
00039622 <PED.ab2@2996>      Poke.s ?str_sourcefontname,sourcefont$  ; + StrClone(Chr$(0), 16 - Len(newsourcefont$) )
00039632 <PED.ab2@2997>      Poke.w ?sourcefontsize    ,sourcefont_size
00039642 <PED.ab2@2998>      Poke.b ?sourcefontstyle   ,sourcefont_style
0003965C <PED.ab2@2999>      If rebuild_gui =False              ; check if we only need to update the source window  tomsmart1
0003967A <PED.ab2@3000>        !asm
00039680 <PED.ab2@3001>        JSR close_sourcewindow
00039686 <PED.ab2@3002>        JSR change_sourcefont
0003968C <PED.ab2@3003>        JSR open_sourcewindow
000396B6 <PED.ab2@3004>        !basic
000396BC <PED.ab2@3006>    Else
000396D4 <PED.ab2@3007>      If use_wbfont AND (NOT olduse_wbfont)
000396FC <PED.ab2@3009>        sourcefont$=""     ;that change_sourcefont get the WBfont
00039734 <PED.ab2@3010>        Poke.s ?str_sourcefontname,sourcefont$
0003974E <PED.ab2@3011>        If rebuild_gui =False            ; check if we only need to update the source window  tomsmart1
0003976C <PED.ab2@3012>          !asm
00039772 <PED.ab2@3013>          JSR close_sourcewindow
00039778 <PED.ab2@3014>          JSR change_sourcefont
0003977E <PED.ab2@3015>          JSR open_sourcewindow
000397A8 <PED.ab2@3016>          !basic
000397C6 <PED.ab2@3021>    !asm
000397CC <PED.ab2@3022>    JSR _redraw
000397F6 <PED.ab2@3023>    !basic
00039818 <PED.ab2@3024>    WZ_UnlockWindow{"WIN_SETTINGS"}
0003982C <PED.ab2@3027>  If reopen_settings Then Goto settings_loop
0003983A <PED.ab2@3029>  If save_settings
0003985C <PED.ab2@3030>    WZ_LockWindow{"WIN_SETTINGS"}
00039862 <PED.ab2@3031>    Gosub write_newprefs
00039868 <PED.ab2@3033>    Gosub set_tooltypes
0003988A <PED.ab2@3034>    WZ_UnlockWindow{"WIN_SETTINGS"}
000398A0 <PED.ab2@3037>  If cw_open Then WZ_KillColorWheel{} : cw_open = False
000398D8 <PED.ab2@3038>  WZCloseWindow WZID("WIN_SETTINGS")
000398EE <PED.ab2@3039>  Use Window used_win
000398FC <PED.ab2@3040>  If rebuild_gui
0003991A <PED.ab2@3041>    !asm
00039920 <PED.ab2@3042>    JSR close_gui
00039926 <PED.ab2@3043>    JSR change_sourcefont
0003992C <PED.ab2@3044>    JSR open_gui
00039956 <PED.ab2@3045>    !basic
00039964 <PED.ab2@3047>  If rebuild_menu
0003996A <PED.ab2@3048>    Gosub init_menus
00039970 <PED.ab2@3051>  JSR activatesource
0003998E <PED.ab2@3052>  !asm
00039990 <PED.ab2@3053> RTS
000399C8 <PED.ab2@3056>    If WZInput("SET_PAGES") = 2
00039A0E <PED.ab2@3057>      *win.Window = Peek.l(Addr Window(WZID("WIN_SETTINGS")))
00039A26 <PED.ab2@3058>      DrPort *win\RPort
00039A50 <PED.ab2@3059>      For ii.l = 1 To 12
00039A74 <PED.ab2@3060>        If ii = colnum Then boxpen.w = 2 Else boxpen = 1
00039AC4 <PED.ab2@3061>        *gad.Gadget = WZGadAddr("SET_COLOR"+Str$(ii))
00039ACE <PED.ab2@3062>        If *gad
00039AF2 <PED.ab2@3063>          boxx.l = *gad\LeftEdge + *gad\Width + 16
00039B00 <PED.ab2@3064>          boxw.l = boxx + 24
00039B10 <PED.ab2@3065>          boxy.l = *gad\TopEdge
00039B26 <PED.ab2@3066>          boxh.l = boxy + *gad\Height
00039B76 <PED.ab2@3067>          DrBoxf boxx+1,boxy+1,boxw-1,boxh-1,GetBestPen{AB3RGB_temp(ii)}
00039B94 <PED.ab2@3068>          DrBox  boxx,boxy,boxw,boxh,boxpen
00039BA4 <PED.ab2@3070>      Next ii
00039BCE <PED.ab2@3071>      For ii = 0 To 3
00039BFA <PED.ab2@3072>        If 20+ii = colnum Then boxpen.w = 2 Else boxpen = 1
00039C4A <PED.ab2@3073>        *gad.Gadget = WZGadAddr("SET_SCREENCOL"+Str$(ii))
00039C54 <PED.ab2@3074>        If *gad
00039C78 <PED.ab2@3075>          boxx = *gad\LeftEdge + *gad\Width + 16
00039C86 <PED.ab2@3076>          boxw = boxx + 24
00039C96 <PED.ab2@3077>          boxy = *gad\TopEdge
00039CAC <PED.ab2@3078>          boxh = boxy + *gad\Height
00039D04 <PED.ab2@3079>          DrBoxf boxx+1,boxy+1,boxw-1,boxh-1,GetBestPen{AB3RGB_temp(20+ii)}
00039D22 <PED.ab2@3080>          DrBox  boxx,boxy,boxw,boxh,boxpen
00039D32 <PED.ab2@3082>      Next ii
00039D34 <PED.ab2@3084> Return
00039D6C <PED.ab2@3087>   If WZInput("SET_PAGES") = 2
00039D76 <PED.ab2@3088>     If cw_open
00039D7C <PED.ab2@3089>       WZ_KillColorWheel{}
00039DCA <PED.ab2@3090>       RefreshWindowFrame_ Peek.l(Addr Window(WZID("WIN_SETTINGS")))
00039DD0 <PED.ab2@3091>       cw_open = False
00039E0E <PED.ab2@3098>     cw_open = WZ_DrawColorWheel{*cw_gad\LeftEdge,*cw_gad\TopEdge,*cw_gad\Width,*cw_gad\Height}
00039E18 <PED.ab2@3099>     If cw_open
00039E2A <PED.ab2@3100>       If colnum <> -1
00039E40 <PED.ab2@3101>         WZ_SetColorWheelRGB{AB3RGB_temp(colnum)}
00039E46 <PED.ab2@3102>       Else
00039E52 <PED.ab2@3103>         WZ_SetColorWheelRGB{$FFFFFF}
00039E58 <PED.ab2@3105>     Else
00039F18 <PED.ab2@3106>       dummy.l= RTEZRequest( "",!TRANS{"error creating colorwheel"},!TRANS{"Ok"})
00039F1E <PED.ab2@3108>   Else
00039F28 <PED.ab2@3109>     If cw_open
00039F2E <PED.ab2@3110>       WZ_KillColorWheel{}
00039F34 <PED.ab2@3111>       cw_open = False
00039F36 <PED.ab2@3114> Return
00039F40 <PED.ab2@3118>    If disk_object
00039F8C <PED.ab2@3119>        mypath$ = dos_GetProgDir{""}
0003A002 <PED.ab2@3121>        dos_SetToolString{"FUNCTIONCOLOR"   ,"$"+Hex$(AB3RGB(#AB3_cfunction))}
0003A078 <PED.ab2@3122>        dos_SetToolString{"MACROCOLOR"      ,"$"+Hex$(AB3RGB(#AB3_cmacro))}
0003A0EE <PED.ab2@3123>        dos_SetToolString{"STRINGCOLOR"     ,"$"+Hex$(AB3RGB(#AB3_cstring))}
0003A164 <PED.ab2@3124>        dos_SetToolString{"NEWTYPECOLOR"    ,"$"+Hex$(AB3RGB(#AB3_cnewtype))}
0003A1DA <PED.ab2@3125>        dos_SetToolString{"CONSTANTCOLOR"   ,"$"+Hex$(AB3RGB(#AB3_cconstant))}
0003A250 <PED.ab2@3126>        dos_SetToolString{"REMARKFORG"      ,"$"+Hex$(AB3RGB(#AB3_cremarkforeground))}
0003A2C6 <PED.ab2@3127>        dos_SetToolString{"REMARKBACKG"     ,"$"+Hex$(AB3RGB(#AB3_cremarkbackground))}
0003A33C <PED.ab2@3128>        dos_SetToolString{"TOKENCOLOR"      ,"$"+Hex$(AB3RGB(#AB3_ctoken))}
0003A3B2 <PED.ab2@3129>        dos_SetToolString{"TOKENBACKPEN"    ,"$"+Hex$(AB3RGB(#AB3_ctokenbackground))}
0003A428 <PED.ab2@3130>        dos_SetToolString{"BACKGROUNDCOLOR" ,"$"+Hex$(AB3RGB(#AB3_cbackground))}
0003A49E <PED.ab2@3131>        dos_SetToolString{"OTHERCOLOR"      ,"$"+Hex$(AB3RGB(#AB3_cother))}
0003A514 <PED.ab2@3132>        dos_SetToolString{"CLASSICCOLOR"    ,"$"+Hex$(AB3RGB(#AB3_cclassic))}
0003A58A <PED.ab2@3133>        dos_SetToolString{"screenbackcolor" ,"$"+Hex$(AB3RGB(#AB3_screenback))}
0003A600 <PED.ab2@3134>        dos_SetToolString{"screentextcolor" ,"$"+Hex$(AB3RGB(#AB3_screentext))}
0003A676 <PED.ab2@3135>        dos_SetToolString{"screenshinecolor","$"+Hex$(AB3RGB(#AB3_screenshine))}
0003A6EC <PED.ab2@3136>        dos_SetToolString{"screenfillcolor" ,"$"+Hex$(AB3RGB(#AB3_screenfill))}
0003A74A <PED.ab2@3139>        dos_SetToolSwitch{"USE_WBSCREEN"    ,-WZInput("SET_USEWB")}
0003A7A8 <PED.ab2@3140>        dos_SetToolSwitch{"CLONE_WBSCREEN"  ,-WZInput("SET_CLONEWB")}
0003A806 <PED.ab2@3141>        dos_SetToolSwitch{"DEFAULTPUBSCREEN",-WZInput("SET_DEFAULTPUBSCREEN")}
0003A84A <PED.ab2@3143>        dos_SetToolValue{"SCREEN_ID"        ,Peek.l(?ownscreen_modeid)}
0003A890 <PED.ab2@3144>        dos_SetToolValue{"SCREEN_WIDTH"     ,Peek.w(?ownscreen_width)}
0003A8D6 <PED.ab2@3145>        dos_SetToolValue{"SCREEN_HEIGHT"    ,Peek.w(?ownscreen_height)}
0003A91C <PED.ab2@3146>        dos_SetToolValue{"SCREEN_DEPTH"     ,Peek.w(?ownscreen_depth)}
0003A97A <PED.ab2@3149>        dos_SetToolSwitch{"USE_WBFONT"      ,-WZInput("SET_USEWBFONT")}
0003A9AE <PED.ab2@3150>        If WZInput("SET_USEWBFONT") = False     ;

0003A9E6 <PED.ab2@3151>          If newsourcefont$ <>""
0003AA16 <PED.ab2@3152>            dos_SetToolSwitch{"SOURCEFONT"  ,True}       ; actived tooltype maybe it was deactived
0003AAAC <PED.ab2@3153>            dos_SetToolString{"SOURCEFONT"  ,newsourcefont$+","+Str$(newsourcefontsize)}
0003AAB2 <PED.ab2@3154>          Else
0003AAE2 <PED.ab2@3155>            dos_SetToolSwitch{"SOURCEFONT"  ,False}      ; deactived Sourcefont Tooltypes no font is set
0003AB58 <PED.ab2@3157>          If newguifont$ <>"" AND WZInput("SET_USEWB")=False   ;

0003AB88 <PED.ab2@3158>            dos_SetToolSwitch{"GUIFONT"     ,True}       ; actived tooltype maybe it was deactived
0003AC1E <PED.ab2@3159>            dos_SetToolString{"GUIFONT"     ,newguifont$+","+Str$(newguifontsize)}
0003AC24 <PED.ab2@3160>          Else
0003AC54 <PED.ab2@3161>            dos_SetToolSwitch{"GUIFONT"     ,False}      ; deactived GUIfont Tooltypes no font is set or we use the WBscreen
0003AC5A <PED.ab2@3163>        Else
0003AC8A <PED.ab2@3164>          dos_SetToolSwitch{"GUIFONT"       ,False}      ; deactived GUIfont Tooltypes we use WBfonts
0003ACBA <PED.ab2@3165>          dos_SetToolSwitch{"SOURCEFONT"    ,False}      ; deactived Sourcefont Tooltypes we use WBfonts
0003AD18 <PED.ab2@3169>        dos_SetToolSwitch{"NO_WELCOME"        ,-WZInput("SET_WELCOME")}
0003AD76 <PED.ab2@3170>        dos_SetToolSwitch{"STANDARDEDITMODE"  ,-WZInput("SET_STANDARD_EDITMODE")}
0003ADD4 <PED.ab2@3171>        dos_SetToolSwitch{"OLDSEARCH"         ,-WZInput("SET_OLDSEARCH")}
0003AE32 <PED.ab2@3172>        dos_SetToolSwitch{"NODISPLAYBEEP"     ,-WZInput("SET_NO_DISPLAYBEEP")}
0003AE90 <PED.ab2@3173>        dos_SetToolSwitch{"AUTO_FORMAT"       ,-WZInput("SET_AUTO_FORMAT")}
0003AEEE <PED.ab2@3174>        dos_SetToolSwitch{"AUTO_CONSTRUCTS"   ,-WZInput("SET_COMPLETE_CONSTRUCTS")}
0003AF4C <PED.ab2@3175>        dos_SetToolSwitch{"USE_INTELLISENSE"  ,-WZInput("SET_INTELLISENSE")}
0003AFAA <PED.ab2@3176>        dos_SetToolSwitch{"CORRECT_FUNCTIONS" ,-WZInput("SET_CORRECT_FUNCTIONS")}
0003B008 <PED.ab2@3177>        dos_SetToolSwitch{"SMART_TOKENIZATION",-WZInput("SET_SMART_TOKENIZATION")}
0003B04E <PED.ab2@3178>        dos_SetToolSwitch{"TOKENBOLD"         ,-Peek.w(?bold_tokens)}
0003B094 <PED.ab2@3179>        dos_SetToolSwitch{"ITALIC_REMARKS"    ,-Peek.w(?italic_remarks)}
0003B0F2 <PED.ab2@3180>        dos_SetToolSwitch{"ONLINEHELP"        ,-WZInput("SET_ONLINEHELP")}
0003B150 <PED.ab2@3182>        dos_SetToolSwitch{"SOURCE_HISTORY"    ,-WZInput("SET_REMEMBER_SAVED")}
0003B1AE <PED.ab2@3183>        dos_SetToolSwitch{"LOAD_LAST_SOURCE"  ,-WZInput("SET_LAST_SOURCE")}
0003B1E0 <PED.ab2@3184>        dos_SetToolSwitch{"SORT_LABELS"       ,sort_labels}
0003B212 <PED.ab2@3185>        dos_SetToolValue{"SCROLLRATE"         ,scroll_rate}
0003B26E <PED.ab2@3188>        dos_SetToolString{"CON_DEVICE" ,console_device$}
0003B2A0 <PED.ab2@3189>        dos_SetToolSwitch{"CON_ONWB"   ,console_wb}
0003B2D2 <PED.ab2@3190>        dos_SetToolSwitch{"CON_WAIT"   ,console_wait}
0003B330 <PED.ab2@3193>        dos_SetToolSwitch{"USE_ASLDIMS",-WZInput("SET_asl_DIMENSIONS")}
0003B374 <PED.ab2@3194>        dos_SetToolValue{"ASLREQ_X"    ,Peek.l(?aslreq_x)}
0003B3B8 <PED.ab2@3195>        dos_SetToolValue{"ASLREQ_Y"    ,Peek.l(?aslreq_y)}
0003B3FC <PED.ab2@3196>        dos_SetToolValue{"ASLREQ_W"    ,Peek.l(?aslreq_width)}
0003B440 <PED.ab2@3197>        dos_SetToolValue{"ASLREQ_H"    ,Peek.l(?aslreq_height)}
0003B4A6 <PED.ab2@3199>        If Peek.b(?blinkrate)>0 Then dos_SetToolValue{"CURSORBLINKRATE",Peek.b(?blinkrate)}
0003B502 <PED.ab2@3202>        dos_SetToolString{"HELPDIR"    ,helpdir$}
0003B55E <PED.ab2@3203>        dos_SetToolString{"AUTODOCDIR" ,autodocdir$}
0003B5BA <PED.ab2@3204>        dos_SetToolString{"SOURCEDIR"  ,sourcedir$}
0003B616 <PED.ab2@3205>        dos_SetToolString{"LIBFILE"    ,deflibfile$}
0003B672 <PED.ab2@3206>        dos_SetToolString{"INCLUDEDIR" ,includedir$}
0003B678 <PED.ab2@3209>        dos_FlushToolTypes{}
0003B67A <PED.ab2@3213> Return
0003B6A4 <PED.ab2@3223>   !basic
0003B6C2 <PED.ab2@3227>   !asm
0003B6C8 <PED.ab2@3228>   TST.l _workbenchbase
0003B6CC <PED.ab2@3229>   BEQ.w JL_0_B26
0003B6D2 <PED.ab2@3230>    JSR close_gui
0003B6D8 <PED.ab2@3231>     MOVEA.l _workbenchbase,A6
0003B6DA <PED.ab2@3232>     MOVEQ.l #$00,D0
0003B6DC <PED.ab2@3233>     MOVEQ.l #$00,D1
0003B6E2 <PED.ab2@3234>     LEA str_defaultpubscreen,A0
0003B6E8 <PED.ab2@3235>     MOVEA.l struct_MsgPort,A1
0003B6EA <PED.ab2@3236>     SUBA.l A2,A2
0003B6EE <PED.ab2@3237>     JSR _AddAppMenuItemA(A6)
0003B6F4 <PED.ab2@3238>     MOVE.l D0,ptr_AppMenuItem
0003B6FA <PED.ab2@3241>     MOVEA.l _execbase,A6
0003B700 <PED.ab2@3242>     MOVEA.l struct_MsgPort,A0
0003B704 <PED.ab2@3243>     JSR _WaitPort(A6)
0003B70A <PED.ab2@3245>     MOVEA.l struct_MsgPort,A0
0003B70E <PED.ab2@3246>     JSR _GetMsg(A6)
0003B710 <PED.ab2@3248>     MOVEA.l D0,A1
0003B714 <PED.ab2@3249>     JSR _ReplyMsg(A6)
0003B71A <PED.ab2@3251>     MOVEA.l _workbenchbase,A6
0003B720 <PED.ab2@3252>     MOVEA.l ptr_AppMenuItem,A0
0003B724 <PED.ab2@3253>     JSR _RemoveAppMenuItem(A6)       ; hier gibt es noch einen Enforcerhit
0003B72A <PED.ab2@3255>     MOVEA.l comPtr_CurrentSourceLine,A2
0003B730 <PED.ab2@3256>     JSR open_gui
0003B734 <PED.ab2@3257>     BMI.w close_libraries_longjmp
0003B736 <PED.ab2@3259> RTS
0003B73C <PED.ab2@3262> JMP close_libraries
0003B742 <PED.ab2@3265>   MOVE.l #comStr_CurrentDir,D1
0003B744 <PED.ab2@3266>   MOVEQ.l #$40,D2
0003B74A <PED.ab2@3267>   MOVEA.l _dosbase,A6
0003B74E <PED.ab2@3268>   JSR _GetCurrentDirName(A6)
0003B750 <PED.ab2@3269> RTS
0003B754 <PED.ab2@3274>   Dc.b $80,$00,$00,$98               ; #WA_BusyPointer.
0003B758 <PED.ab2@3275>   Dc.b $FF,$FF,$FF,$FF
0003B75C <PED.ab2@3276>   Ds.l 1
0003B760 <PED.ab2@3279>   Dc.b $80,$00,$00,$97               ; #WA_Pointer
0003B768 <PED.ab2@3280>   Ds.l 2
0003B76C <PED.ab2@3283>   MOVEM.l D0-D1/A0-A1/A6,-(A7)
0003B772 <PED.ab2@3285>   LEA taglist_mousepointernormal,A1
0003B778 <PED.ab2@3286>   TST.l ptr_sourcewindow
0003B77C <PED.ab2@3287>    BEQ exit_pointernormal
0003B782 <PED.ab2@3289>   MOVEA.l ptr_sourcewindow,A0
0003B788 <PED.ab2@3290>   MOVEA.l _intuibase,A6
0003B78C <PED.ab2@3291>   JSR _SetWindowPointerA(A6)
0003B790 <PED.ab2@3294>   MOVEM.l (A7)+,D0-D1/A0-A1/A6
0003B792 <PED.ab2@3295> RTS
0003B796 <PED.ab2@3298>   MOVEM.l D0-D1/A0-A1/A6,-(A7)
0003B79C <PED.ab2@3300>   LEA taglist_mousepointerbusy,A1
0003B7A2 <PED.ab2@3301>   TST.l ptr_sourcewindow
0003B7A6 <PED.ab2@3302>    BEQ exit_pointerbusy
0003B7AC <PED.ab2@3304>   MOVEA.l ptr_sourcewindow,A0
0003B7B2 <PED.ab2@3305>   MOVEA.l _intuibase,A6
0003B7B6 <PED.ab2@3306>   JSR _SetWindowPointerA(A6)
0003B7BA <PED.ab2@3309>   MOVEM.l (A7)+,D0-D1/A0-A1/A6
0003B7BC <PED.ab2@3310> RTS
0003B7C0 <PED.ab2@3313> ptr_sourcefilename:      Ds.l 1
0003B7C4 <PED.ab2@3314> ptr_sourcefileextension: Ds.l 1
0003B7CA <PED.ab2@3315> str_extentionxtra:       Dc.b ".xtra",0
0003B7D0 <PED.ab2@3316> str_extentioninfo:       Dc.b ".info",0
0003B7D6 <PED.ab2@3317> str_bakextention:        Dc.b ".bak",0,0
0003B7DC <PED.ab2@3321>   LEA str_extentioninfo,A1
0003B7E2 <PED.ab2@3322>   JSR add_extention
0003B7E4 <PED.ab2@3323>   MOVEQ.l #-$02,D2
0003B7EA <PED.ab2@3324>   MOVEA.l _dosbase,A6
0003B7EE <PED.ab2@3325>   JSR _Lock(A6)
0003B7F0 <PED.ab2@3326>   MOVE.l D0,D1
0003B7F4 <PED.ab2@3327>   BEQ.w JL_0_DEA
0003B7F8 <PED.ab2@3328>   JSR _UnLock(A6)
0003B7FC <PED.ab2@3329>   BRA.w JL_0_DFC
0003B802 <PED.ab2@3332>   MOVE.l ptr_sourcefilename,D1
0003B808 <PED.ab2@3333>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
0003B80C <PED.ab2@3334>   JSR _Open(A6)
0003B80E <PED.ab2@3335>   MOVE.l D0,D7
0003B810 <PED.ab2@3336>   RTS
0003B812 <PED.ab2@3339>   MOVEQ.l #$00,D7
0003B814 <PED.ab2@3340> RTS
0003B81A <PED.ab2@3344>   LEA str_extentionxtra,A1
0003B820 <PED.ab2@3345>   JSR add_extention
0003B826 <PED.ab2@3346>    MOVEA.l _dosbase,A6
0003B82A <PED.ab2@3347>   JSR _Open(A6)
0003B82C <PED.ab2@3348>   MOVE.l D0,D7
0003B82E <PED.ab2@3349> RTS
0003B834 <PED.ab2@3352>   MOVEA.l ptr_sourcefilename,A0
0003B836 <PED.ab2@3353>   MOVE.l A0,D1
0003B838 <PED.ab2@3356>     TST.b (A0)+
0003B83C <PED.ab2@3357>   BNE.b JL_0_E16
0003B83E <PED.ab2@3359>   SUBQ.w #1,A0
0003B844 <PED.ab2@3360>   MOVE.l A0,ptr_sourcefileextension
0003B846 <PED.ab2@3363>     MOVE.b (A1)+,(A0)+
0003B84A <PED.ab2@3364>   BNE.b JL_0_E22
0003B84C <PED.ab2@3365> RTS
0003B852 <PED.ab2@3368>   MOVEA.l ptr_sourcefileextension,A0
0003B854 <PED.ab2@3369>   CLR.b (A0)
0003B856 <PED.ab2@3370> RTS
0003B85C <PED.ab2@3376>   MOVEA.l #str_newfile_req,A0
0003B862 <PED.ab2@3377>   MOVE.l #$4C6F6164,(A0)+           ; "Load File"
0003B868 <PED.ab2@3378>   MOVE.l #$2046696C,(A0)+
0003B86C <PED.ab2@3379>   MOVE.b #"e",(A0)+
0003B870 <PED.ab2@3380>   MOVE.b #$0,(A0)+
0003B876 <PED.ab2@3381>   JSR show_newfilerequest
0003B87C <PED.ab2@3382>   MOVEA.l #str_newfile_req,A0
0003B882 <PED.ab2@3383>   MOVE.l #$4E657720,(A0)+            ; "New File"
0003B888 <PED.ab2@3384>   MOVE.l #$46696C65,(A0)+
0003B88C <PED.ab2@3385>   MOVE.b #$0,(A0)+
0003B88E <PED.ab2@3387>   TST.l D0
0003B892 <PED.ab2@3388>   BNE.w JL_0_E78
0003B894 <PED.ab2@3389>   RTS
0003B89A <PED.ab2@3392>   JSR do_aslfilerequest
0003B89C <PED.ab2@3393>   TST.l D0
0003B8A0 <PED.ab2@3394>   BNE.w load_source
0003B8A2 <PED.ab2@3395> RTS
0003B8A6 <PED.ab2@3409> lock_defaultdirectory:  Ds.l 1
0003B8AA <PED.ab2@3410> lock_currentdir:        Ds.l 1
0003B8AC <PED.ab2@3414>   MOVE.l d2,-(a7)
0003B8B2 <PED.ab2@3415>   MOVEA.l _dosbase,A6
0003B8B4 <PED.ab2@3416>   MOVEA.l D0,A0
0003B8B6 <PED.ab2@3417>   TST.b (A0)
0003B8BA <PED.ab2@3418>   BNE.w JL_0_EC2
0003B8BE <PED.ab2@3420>   MOVEM.l D0-D3/A0-A1,-(A7)
0003B8C4 <PED.ab2@3421>   JSR get_currentdir                 ;get current dir name
0003B8CA <PED.ab2@3422>   LEA blitzname,a0
0003B8CC <PED.ab2@3423>   MOVE.l a0,d0
0003B8D0 <PED.ab2@3424>   MOVEM.l (A7)+,D0-D3/A0-A1
0003B8D6 <PED.ab2@3427>   TST.l lock_currentdir
0003B8DA <PED.ab2@3428>   BEQ.w JL_0_EDA
0003B8DC <PED.ab2@3429>   MOVE.l D0,-(A7)
0003B8E2 <PED.ab2@3430>   MOVE.l lock_currentdir,D1
0003B8E8 <PED.ab2@3431>   MOVEA.l _dosbase,A6
0003B8EC <PED.ab2@3432>   JSR _UnLock(A6)
0003B8EE <PED.ab2@3433>   MOVE.l (A7)+,D0
0003B8F0 <PED.ab2@3436>   MOVE.l D0,D1
0003B8F2 <PED.ab2@3437>   MOVEQ.l #-$02,D2
0003B8F8 <PED.ab2@3438>    MOVEA.l _dosbase,A6
0003B8FC <PED.ab2@3439>   JSR _Lock(A6)
0003B902 <PED.ab2@3440>   MOVE.l D0,lock_currentdir
0003B904 <PED.ab2@3441>   MOVE.l D0,D1
0003B908 <PED.ab2@3442>   BEQ.w JL_0_EF2
0003B90E <PED.ab2@3443>    MOVEA.l _dosbase,A6
0003B912 <PED.ab2@3444>   JSR _CurrentDir(A6)
0003B914 <PED.ab2@3447>   MOVE.l (a7)+,d2
0003B916 <PED.ab2@3448> RTS
0003B918 <PED.ab2@3455>   MOVE.l A0,-(A7)
0003B91A <PED.ab2@3458>     TST.b (A0)+
0003B91E <PED.ab2@3459>   BNE.b JL_0_EFA
0003B920 <PED.ab2@3462>     MOVE.b -(A0),D0
0003B924 <PED.ab2@3463>     CMP.b #":",D0
0003B928 <PED.ab2@3464>     BEQ.w JL_0_F16
0003B92C <PED.ab2@3465>   CMP.b #$2F,D0
0003B930 <PED.ab2@3466>   BNE.b JL_0_EFE
0003B932 <PED.ab2@3468>   MOVEA.l A0,A3                      ; "/" gefunden
0003B934 <PED.ab2@3469>   ADDQ.l #1,A0
0003B938 <PED.ab2@3470>   BRA.w JL_0_F1A
0003B93A <PED.ab2@3473>   ADDQ.l #1,A0
0003B93C <PED.ab2@3474>   MOVEA.l A0,A3
0003B93E <PED.ab2@3477>     MOVE.b (A0)+,(A2)+
0003B942 <PED.ab2@3478>   BNE.b JL_0_F1A
0003B944 <PED.ab2@3480>   MOVEA.l (A7)+,A0
0003B946 <PED.ab2@3483>     MOVE.b (A0)+,(A1)+               ; nur den pfad kopieren
0003B948 <PED.ab2@3484>     CMPA.l A0,A3
0003B94C <PED.ab2@3485>   BNE.b JL_0_F20
0003B94E <PED.ab2@3486>   CLR.b (A1)
0003B950 <PED.ab2@3487> RTS
0003B956 <PED.ab2@3492>   MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
0003B95E <PED.ab2@3493>   MOVE.b #1,menuload
0003B964 <PED.ab2@3494>   MOVE.l D7,ptr_sourcefilename
0003B98E <PED.ab2@3496>   !basic
0003B99E <PED.ab2@3497>   filenameP.l = Peek.l(?ptr_sourcefilename)
0003B9A8 <PED.ab2@3498>   If filenameP
0003B9D0 <PED.ab2@3499>     filename.s = Peek.s(filenameP)
0003BA28 <PED.ab2@3500>     ex.s = dos_GetExt{filename}
0003BA2E <PED.ab2@3501>   Else
0003BA56 <PED.ab2@3502>     ex.s = "???"
0003BA60 <PED.ab2@3505>   MOVE.l #0,loading_done
0003BA98 <PED.ab2@3506>   If ex.s = "ab3"
0003BAB6 <PED.ab2@3507>     !asm
0003BABC <PED.ab2@3508>     MOVE.l ptr_sourcefilename,D0
0003BAEE <PED.ab2@3509>     !ComData_JSR{comFunc_LoadSource}
0003BB18 <PED.ab2@3510>     !basic
0003BB1E <PED.ab2@3512>     Gosub RestoreLabelAndNewtypeWin
0003BB46 <PED.ab2@3513>     changelog$ = ""
0003BB4C <PED.ab2@3514>     Gosub update_versiongadgets
0003BB6A <PED.ab2@3515>     !asm
0003BB70 <PED.ab2@3517>     MOVE.l comLong_CursorPosStore,d0
0003BB76 <PED.ab2@3518>     MOVEA.l comPtr_CurrentSourceLine,A4
0003BB7C <PED.ab2@3519>     JSR gotoline
0003BB82 <PED.ab2@3521>     MOVEA.l actualfile,A0
0003BB88 <PED.ab2@3522>     JSR delete_tempprefs
0003BB8E <PED.ab2@3523>     JSR save_tempprefs
0003BB94 <PED.ab2@3525>     JSR update_horizscroller
0003BB9A <PED.ab2@3526>     JSR update_labelstuff
0003BBA0 <PED.ab2@3527>     JSR StoreXtraData
0003BBA6 <PED.ab2@3528>     JSR _redraw
0003BBAC <PED.ab2@3529>     JSR set_pointernormal
0003BBB2 <PED.ab2@3530>     JSR analyze_loadedsource
0003BBB8 <PED.ab2@3531>     JSR update_statusline
0003BBBE <PED.ab2@3532>     CLR.b convert
0003BBC8 <PED.ab2@3533>     MOVE.l #1,loading_done
0003BBF2 <PED.ab2@3534>     !basic
0003BC10 <PED.ab2@3537>   !asm
0003BC16 <PED.ab2@3538>   TST.l loading_done
0003BC1A <PED.ab2@3539>   BEQ old_loading_routine
0003BC1C <PED.ab2@3540> RTS
0003BC22 <PED.ab2@3544> JMP clear_sourcebuffer;JL_0_6B7C
0003BC26 <PED.ab2@3546> loading_done: Dc.l 0
0003BC2C <PED.ab2@3550>   JSR open_sourcefile
0003BC32 <PED.ab2@3551>   CLR.w comWord_SourceChanged
0003BC38 <PED.ab2@3552>   JSR source_readin
0003BC3C <PED.ab2@3553>   BNE.w JL_0_F50
0003BC42 <PED.ab2@3554>   JSR close_sourcefile
0003BC46 <PED.ab2@3557>   MOVEM.l D0-D7/A0-A5,-(A7)
0003BC48 <PED.ab2@3558>   MOVE.l D7,D1  ; filehandle nach D1
0003BC4E <PED.ab2@3559>   MOVE.l #comStr_SourceFileComplete,D2
0003BC54 <PED.ab2@3560>   MOVE.l #$FE,D3; bufflength nach D3
0003BC5A <PED.ab2@3561>    MOVEA.l _dosbase,A6
0003BC5E <PED.ab2@3562>   JSR _NameFromFH(A6)
0003BC64 <PED.ab2@3563>   LEA comStr_SourceFileComplete,A0
0003BC6A <PED.ab2@3564>   TST.b convert
0003BC6E <PED.ab2@3565>   BEQ 'l1
0003BC74 <PED.ab2@3566>   LEA comStr_SourceFileComplete,A0
0003BC76 <PED.ab2@3569>   TST.b (a0)+
0003BC7A <PED.ab2@3570>   BNE 'l10
0003BC7E <PED.ab2@3571>   LEA -5(a0),a0
0003BC84 <PED.ab2@3572>   MOVE.l #".bb2",(a0)
0003BC8A <PED.ab2@3575>   LEA comStr_SourceFileComplete,A0
0003BC90 <PED.ab2@3576>   LEA comStr_CurrentDir,A1
0003BC96 <PED.ab2@3577>   LEA comStr_SourceName,A2
0003BC9A <PED.ab2@3578>   BSR.b split_filename
0003BCA0 <PED.ab2@3580>   MOVE.l #comStr_CurrentDir,D0
0003BCA6 <PED.ab2@3581>   JSR set_currentdir
0003BCAA <PED.ab2@3582>   MOVEM.l (A7)+,D0-D7/A0-A5
0003BCB0 <PED.ab2@3583>   JSR set_pointerbusy
0003BCB6 <PED.ab2@3584>   JSR JL_0_572C
0003BCBC <PED.ab2@3585>   JSR clear_actualsource
0003BCC6 <PED.ab2@3587>   MOVE.l #$0001,comLong_TotalLines
0003BCD0 <PED.ab2@3588>   MOVE.l comPtr_Temp_TokenString2,tempstore
0003BCD6 <PED.ab2@3589>   JSR JL_0_4F5A
0003BCDC <PED.ab2@3590>   JSR JL_0_4F1A
0003BCE2 <PED.ab2@3591>   MOVE.l A0,comPtr_FirstSourceLine
0003BCE8 <PED.ab2@3592>   MOVE.l A0,comPtr_CurrentSourceLine
0003BCEC <PED.ab2@3593>   CLR.l $4(A0)
0003BCF2 <PED.ab2@3594>   MOVE.l A0,comPtr_LastSourceLine
0003BCF4 <PED.ab2@3597>     MOVEA.l A0,A4
0003BCFE <PED.ab2@3598>     MOVE.l comPtr_Temp_TokenString2,tempstore
0003BD04 <PED.ab2@3599>     JSR JL_0_4F5A
0003BD08 <PED.ab2@3600>     BMI.w JL_0_FD6
0003BD0E <PED.ab2@3601>     JSR JL_0_4F1A
0003BD14 <PED.ab2@3602>     MOVE.l A0,comPtr_LastSourceLine
0003BD16 <PED.ab2@3603>     MOVE.l A0,(A4)
0003BD1C <PED.ab2@3604>     ADDQ.l #1,comLong_TotalLines
0003BD20 <PED.ab2@3605>     MOVE.l A4,$4(A0)
0003BD24 <PED.ab2@3606> BRA.b JL_0_FB4
0003BD2A <PED.ab2@3610>   JSR close_sourcefile
0003BD30 <PED.ab2@3612>   CLR.w comWord_TextBufferOffset
0003BD36 <PED.ab2@3613>   CLR.w comWord_Column        ; was .l
0003BD3C <PED.ab2@3614>   CLR.w comWord_ColumnsOffset ; was .l
0003BD42 <PED.ab2@3615>   CLR.l comLong_DisplayLineOffset
0003BD48 <PED.ab2@3616>   CLR.l comLong_DisplayLine
0003BD4E <PED.ab2@3618>   MOVE.l comFunc_ReadXtraFile,D0
0003BD52 <PED.ab2@3619>   BEQ.w JL_0_100C
0003BD58 <PED.ab2@3620>   MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2 ; read xtra
0003BD5E <PED.ab2@3621>   JSR open_xtrafile                      ; returns D7: filehandle
0003BD62 <PED.ab2@3622>   BEQ.w skip_loadingxtrafile
0003BD68 <PED.ab2@3624>   MOVE.l comFunc_ReadXtraFile,D0
0003BD6A <PED.ab2@3625>   MOVEA.l D0,A5
0003BD6C <PED.ab2@3628>   JSR (A5)
0003BD6E <PED.ab2@3630>   MOVE.l d7,d0
0003BD98 <PED.ab2@3631>   !basic
0003BD9C <PED.ab2@3632>   xtrafilehandle.l = PutD0
0003BDA2 <PED.ab2@3633>   JSR check_state_of_debuggertoggle
0003BDCE <PED.ab2@3634>   Read_ xtrafilehandle,?comDef_XtraExtendBegin,?comDef_XtraExtendEnd-?comDef_XtraExtendBegin ; xtrabuf,36
0003BDF6 <PED.ab2@3641>   exefilename$ = ""
0003BE1E <PED.ab2@3642>   exepathname$ = ""
0003BE46 <PED.ab2@3643>   tempexename$ = SPACE$(96)
0003BE6A <PED.ab2@3645>   Seek_ xtrafilehandle,$256,#OFFSET_BEGINNING
0003BE8E <PED.ab2@3646>   Read_ xtrafilehandle,&tempexename$,96
0003BE96 <PED.ab2@3647>   i = 1
0003BEEC <PED.ab2@3649>     char$ = Mid$(tempexename$,i,1)
0003BF7E <PED.ab2@3650>     If Asc(char$)<>0 Then exepathname$ + char$
0003BF8C <PED.ab2@3651>     i + 1
0003BFFC <PED.ab2@3652>   Until (i = FLen(tempexename$)) OR (Asc(char$) = 0)
0003C024 <PED.ab2@3654>   tempexename$ = SPACE$(96)
0003C048 <PED.ab2@3655>   Seek_ xtrafilehandle,$316,#OFFSET_BEGINNING
0003C06C <PED.ab2@3656>   Read_ xtrafilehandle,&tempexename$,96
0003C074 <PED.ab2@3657>   i = 1
0003C0CA <PED.ab2@3659>     char$ = Mid$(tempexename$,i,1)
0003C15C <PED.ab2@3660>     If Asc(char$)<>0 Then exefilename$ + char$
0003C16A <PED.ab2@3661>     i + 1
0003C1DA <PED.ab2@3662>   Until (i = FLen(tempexename$)) OR (Asc(char$) = 0)
0003C1E0 <PED.ab2@3669>   Gosub RestoreLabelAndNewtypeWin
0003C208 <PED.ab2@3670>   changelog$ = ""
0003C20E <PED.ab2@3671>   Gosub update_versiongadgets
0003C22C <PED.ab2@3673>   !asm
0003C22E <PED.ab2@3674>   MOVE.l D7,D1
0003C234 <PED.ab2@3675>    MOVEA.l _dosbase,A6
0003C238 <PED.ab2@3676>   JSR _Close(A6)
0003C23E <PED.ab2@3679>   MOVE.l comLong_CursorPosStore,d0
0003C244 <PED.ab2@3680>   MOVEA.l comPtr_CurrentSourceLine,A4
0003C24A <PED.ab2@3681>   JSR gotoline
0003C250 <PED.ab2@3683>   MOVEA.l actualfile,A0
0003C256 <PED.ab2@3684>   JSR delete_tempprefs
0003C25C <PED.ab2@3685>   JSR save_tempprefs
0003C262 <PED.ab2@3688>   JSR JL_0_E28
0003C268 <PED.ab2@3691>   JSR update_horizscroller
0003C26E <PED.ab2@3692>   JSR update_labelstuff
0003C274 <PED.ab2@3693>   JSR StoreXtraData
0003C27A <PED.ab2@3694>   JSR _redraw
0003C280 <PED.ab2@3695>   JSR set_pointernormal
0003C286 <PED.ab2@3696>   JSR analyze_loadedsource
0003C28C <PED.ab2@3697>   JSR update_statusline
0003C292 <PED.ab2@3698>   CLR.b convert
0003C294 <PED.ab2@3699>   MOVEQ.l #-$01,D0
0003C296 <PED.ab2@3700> RTS
0003C2C0 <PED.ab2@3705>   search_label$ = Peek$(?comStr_LabelSearchString) ; set the searchlabel_string
0003C2F4 <PED.ab2@3706>   old_search_label$ = search_label$                ; set also old searchlabel_string to prevent a unessacary reset and jump of the labellist tomsmart1
0003C2FE <PED.ab2@3707>   MOVE.l comLong_Label1VisableItemStore,comLong_Label1VisableItem          ;  move stored entry to tempbuffer manly for case of load a source  tomsmart1
0003C30E <PED.ab2@3708>   LabelList_FirstVisableItemNumber.l = Peek.l(?comLong_Label1VisableItem)  ;  set/restore the first visable entry of the labellist  tomsmart1
0003C316 <PED.ab2@3709>   LabelList_PreSelectItemNumber.l    = 0 ; set the preselected labellist entry to 0 because we done save/store it.  tomsmart1
0003C342 <PED.ab2@3711>   If WZ_CheckOpen{"WIN_LABELS"}
0003C37C <PED.ab2@3712>     Use Window WZID("WIN_LABELS")
0003C3E0 <PED.ab2@3713>     WZPrint "STRING_LABEL",search_label$
0003C42A <PED.ab2@3714>     WZPrint "rem"         ,Peek.w(?comWord_LabelRemark)
0003C474 <PED.ab2@3715>     WZPrint "all"         ,Peek.w(?comWord_LabelAll)
0003C480 <PED.ab2@3716>     WZListRemove lib_list.List
0003C4C6 <PED.ab2@3717>     WZPrint "LIBRARY_LIST",0,lib_list
0003C4F2 <PED.ab2@3719>   If WZ_CheckOpen{"WIN_NEWTYPE"}
0003C52C <PED.ab2@3720>     Use Window WZID("WIN_NEWTYPE")
0003C532 <PED.ab2@3721>     Gosub newtype_updatelist
0003C534 <PED.ab2@3723> Return
0003C53A <PED.ab2@3728>   LEA comStr_SourceName,A0
0003C540 <PED.ab2@3731>   MOVEA.l str_windowtitle,A1
0003C546 <PED.ab2@3732>   MOVE.l #$46696C65,(A1)+            ; "File - "
0003C54A <PED.ab2@3733>   MOVE.w #$202D,(A1)+
0003C54E <PED.ab2@3734>   MOVE.b #$20,(A1)+
0003C550 <PED.ab2@3737>   TST.b (A0)
0003C554 <PED.ab2@3738>    BNE.w JL_0_1074
0003C55A <PED.ab2@3740>   MOVE.l #$556E6E61,(A1)+            ; "unnamed "
0003C560 <PED.ab2@3741>   MOVE.l #$6D656420,(A1)+
0003C564 <PED.ab2@3742>   CLR.b -$1(A1)
0003C56A <PED.ab2@3743>   TST.w smart_tokenization
0003C56E <PED.ab2@3744>    BEQ 'l1
0003C576 <PED.ab2@3745>   MOVE.w #$ffff,comWord_DoTokenize
0003C57A <PED.ab2@3747>   BRA.w update_title_sourcewindow
0003C57C <PED.ab2@3751>     MOVE.b (A0)+,(A1)+
0003C580 <PED.ab2@3752>   BNE.b JL_0_1074
0003C586 <PED.ab2@3756>   JSR check_fileextension_for_tokenization
0003C58E <PED.ab2@3758>   MOVE.l #"  Di",-1(a1)
0003C590 <PED.ab2@3759>   ADDQ.l #3,a1
0003C596 <PED.ab2@3760>   MOVE.l #"r - ",(a1)+
0003C59C <PED.ab2@3763>   LEA comStr_CurrentDir,A0
0003C59E <PED.ab2@3765>     MOVE.b (A0)+,(A1)+
0003C5A2 <PED.ab2@3766>   BNE.b 'l2
0003C5A8 <PED.ab2@3769>   MOVEA.l ptr_sourcewindow,A0
0003C5AE <PED.ab2@3770>   MOVEA.l str_windowtitle,A1
0003C5B4 <PED.ab2@3771>   MOVE.l #-1,a2
0003C5BA <PED.ab2@3772>   MOVEA.l _intuibase,A6
0003C5BE <PED.ab2@3773>   JSR _SetWindowTitles(a6)
0003C5E8 <PED.ab2@3775>   !basic
0003C606 <PED.ab2@3777>   If Peek.b(?load_last_source)<>0
0003C630 <PED.ab2@3778>     last_source$ = Peek$(?comStr_SourceFileComplete)
0003C668 <PED.ab2@3779>     If last_source$<>""
0003C6D0 <PED.ab2@3780>       If Instr(last_source$,Peek$(?comStr_SourceName))<>0
0003C72C <PED.ab2@3781>         dos_SetToolString{"LAST_SOURCE",last_source$}
0003C74A <PED.ab2@3785>   !asm
0003C74C <PED.ab2@3786> RTS
0003C752 <PED.ab2@3789>   TST.w smart_tokenization
0003C756 <PED.ab2@3790>    BEQ 'rt
0003C75E <PED.ab2@3791>   CMP.l #".bb2",-5(a1)
0003C762 <PED.ab2@3792>    BEQ 'do
0003C76A <PED.ab2@3793>   CMP.l #".ab2",-5(a1)
0003C76E <PED.ab2@3794>    BEQ 'do
0003C776 <PED.ab2@3795>   CMP.l #".ab3",-5(a1)
0003C77A <PED.ab2@3796>    BEQ 'do
0003C780 <PED.ab2@3797>   CMP.w #".b",-4(a1)
0003C784 <PED.ab2@3798>    BNE 'l1
0003C78A <PED.ab2@3799>   CMP.b #"b",-2(a1)
0003C78E <PED.ab2@3800>    BEQ 'do
0003C790 <PED.ab2@3801>   RTS
0003C798 <PED.ab2@3804>   MOVE.w #$ffff,comWord_DoTokenize
0003C7A0 <PED.ab2@3805>   MOVE.w #$ffff,flag_tokenization
0003C7A2 <PED.ab2@3806>   RTS
0003C7AA <PED.ab2@3809>   CMP.l #".txt",-5(a1)
0003C7AE <PED.ab2@3810>   BEQ 'no
0003C7B6 <PED.ab2@3811>   CMP.l #".gui",-7(a1)
0003C7BA <PED.ab2@3812>   BNE 'rt
0003C7C0 <PED.ab2@3813>   CMP.w #"de",-3(a1)
0003C7C4 <PED.ab2@3814>   BNE 'rt
0003C7CC <PED.ab2@3815>   MOVE.b #1,amigaguide
0003C7D4 <PED.ab2@3818>   MOVE.w #0,comWord_DoTokenize
0003C7DC <PED.ab2@3819>   MOVE.w #0,flag_tokenization
0003C7DE <PED.ab2@3821> RTS
0003C7E4 <PED.ab2@3825>   MOVE.l comFunc_ReadXtraFile,D0
0003C7E8 <PED.ab2@3826>   BEQ.w exit_delete_tempprefs
0003C7EA <PED.ab2@3828>   MOVE.l A0,D0
0003C7F0 <PED.ab2@3829>   LEA str_template_tempxtrafile,A0
0003C7F6 <PED.ab2@3830>   JSR generate_tempfilename
0003C7FC <PED.ab2@3831>   MOVEA.l _dosbase,A6
0003C802 <PED.ab2@3832>   MOVE.l #str_temptedprefs,D1
0003C806 <PED.ab2@3833>   JSR _DeleteFile(A6)
0003C808 <PED.ab2@3836> RTS
0003C80E <PED.ab2@3840>   MOVE.l comFunc_ReadXtraFile,D0
0003C812 <PED.ab2@3841>   BEQ.w exit_read_tempprefs
0003C818 <PED.ab2@3843>   MOVE.l actualfile,D0
0003C81E <PED.ab2@3844>   LEA str_template_tempxtrafile,A0
0003C824 <PED.ab2@3845>   JSR generate_tempfilename
0003C82A <PED.ab2@3846>   MOVE.l comFunc_ReadXtraFile,D0
0003C830 <PED.ab2@3847>   MOVEA.l _dosbase,A6
0003C832 <PED.ab2@3848>   MOVEA.l D0,A5
0003C838 <PED.ab2@3849>   MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
0003C83E <PED.ab2@3850>   MOVE.l #str_temptedprefs,D1
0003C842 <PED.ab2@3851>   JSR _Open(A6)
0003C844 <PED.ab2@3852>   MOVE.l D0,D7
0003C846 <PED.ab2@3854>   MOVE.l D0,-(A7)
0003C848 <PED.ab2@3856>   JSR (A5)
0003C84A <PED.ab2@3857>   MOVE.l (A7)+,D1
0003C850 <PED.ab2@3858>    MOVEA.l _dosbase,A6
0003C854 <PED.ab2@3859>   JSR _Close(A6)
0003C856 <PED.ab2@3862> RTS
0003C85C <PED.ab2@3865>   MOVE.l comFunc_WriteXtraFile,D0
0003C860 <PED.ab2@3866>   BEQ.w exit_save_tempprefs
0003C866 <PED.ab2@3868>   MOVE.l actualfile,D0
0003C86C <PED.ab2@3869>   LEA str_template_tempxtrafile,A0
0003C872 <PED.ab2@3870>   JSR generate_tempfilename
0003C878 <PED.ab2@3871>   MOVE.l comFunc_WriteXtraFile,D0
0003C87E <PED.ab2@3872>   MOVEA.l _dosbase,A6
0003C880 <PED.ab2@3873>   MOVEA.l D0,A5
0003C886 <PED.ab2@3874>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
0003C88C <PED.ab2@3875>   MOVE.l #str_temptedprefs,D1
0003C890 <PED.ab2@3876>   JSR _Open(A6)
0003C892 <PED.ab2@3877>   MOVE.l D0,D7
0003C896 <PED.ab2@3878>   BEQ.w exit_save_tempprefs
0003C898 <PED.ab2@3879>   MOVE.l D0,-(A7)
0003C89A <PED.ab2@3881>   JSR (A5)
0003C89C <PED.ab2@3882>   MOVE.l (A7)+,D1
0003C8A2 <PED.ab2@3883>    MOVEA.l _dosbase,A6
0003C8A6 <PED.ab2@3884>   JSR _Close(A6)
0003C8A8 <PED.ab2@3887> RTS
0003C8AC <PED.ab2@3890> AL_0_15BC:    Ds.l 1
0003C8B0 <PED.ab2@3891> AL_0_15C0:    Ds.l 1
0003C8B2 <PED.ab2@3892> AL_0_1162:    Ds.w 1
0003C8B8 <PED.ab2@3896>   ST AL_0_1162
0003C8BE <PED.ab2@3897>   JSR StoreXtraData
0003C8C4 <PED.ab2@3898>   LEA comStr_ASLSaveFile,A2
0003C8C8 <PED.ab2@3900>   MOVEM.l D1-D6/A0-A6,-(A7)
0003C8CE <PED.ab2@3901>   JSR JL_0_50D2
0003C8D2 <PED.ab2@3902>   MOVEM.l (A7)+,D1-D6/A0-A6
0003C8D4 <PED.ab2@3904>   TST.l D0
0003C8D8 <PED.ab2@3905>   BEQ.w JL_0_1158
0003C8DE <PED.ab2@3906>     JSR menu_save
0003C8E4 <PED.ab2@3909>   SF AL_0_1162
0003C8E6 <PED.ab2@3910>   TST.l D0
0003C8E8 <PED.ab2@3911> RTS
0003C8EE <PED.ab2@3916>   LEA comStr_ASLSaveFile,A2
0003C8F2 <PED.ab2@3917>   MOVEM.l D1-D6/A0-A6,-(A7)
0003C8F8 <PED.ab2@3918>   JSR JL_0_50D2
0003C8FC <PED.ab2@3919>   MOVEM.l (A7)+,D1-D6/A0-A6
0003C8FE <PED.ab2@3920> RTS
0003C902 <PED.ab2@3923>   MOVEM.l d0-d7/a0-a6,-(a7)
0003C906 <PED.ab2@3924>   BSR menu_save
0003C90A <PED.ab2@3925>   MOVEM.l (a7)+,d0-d7/a0-a6
0003C90C <PED.ab2@3926> RTS
0003C912 <PED.ab2@3934>   TST.b comStr_SourceName
0003C916 <PED.ab2@3935>   BNE.w JL_0_1196
0003C91A <PED.ab2@3936>   BSR.b JL_0_1164
0003C91C <PED.ab2@3937>   TST.l D0
0003C920 <PED.ab2@3938>   BNE.w JL_0_1196
0003C922 <PED.ab2@3939> RTS
0003C94C <PED.ab2@3942>   !basic
0003C976 <PED.ab2@3943>   BB2Filename$ = Peek$(?comStr_SourceFileComplete)
0003C9F2 <PED.ab2@3944>   directory.s = dos_FilePart{dos_PathPart{BB2Filename$}}
0003CA82 <PED.ab2@3945>   If dos_Exist{BB2filename$} AND LCase$(directory) = "templates"
0003CB44 <PED.ab2@3946>     If RTEZRequest("",!TRANS{"Do you really want to save this file into the templates drawer?"},!TRANS{"Ok|Cancel"})
0003CB4A <PED.ab2@3947>       overwrite.l = True
0003CB50 <PED.ab2@3948>     Else
0003CB56 <PED.ab2@3949>       overwrite = False
0003CB5C <PED.ab2@3951>   Else
0003CB62 <PED.ab2@3952>     overwrite = True
0003CB70 <PED.ab2@3955>   If NOT overwrite
0003CB8E <PED.ab2@3957>     !asm
0003CB90 <PED.ab2@3958>     RTS
0003CBAE <PED.ab2@3960>   !asm
0003CBB2 <PED.ab2@3962>   MOVEM.l A0-A2,-(A7)
0003CBB8 <PED.ab2@3963>   MOVEA.l #comStr_CurrentDir,A1
0003CBBE <PED.ab2@3964>   MOVEA.l #comStr_SourceName,A2
0003CBC4 <PED.ab2@3965>   MOVEA.l #comStr_SourceFileComplete,A0
0003CBC6 <PED.ab2@3967>   TST.b (A1)
0003CBCA <PED.ab2@3968>   BEQ.w JL_0_11C6
0003CBCC <PED.ab2@3971>       MOVE.b (A1)+,(A0)+
0003CBD0 <PED.ab2@3972>     BNE.b JL_0_11B2
0003CBD2 <PED.ab2@3974>     SUBQ.w #1,A0
0003CBD8 <PED.ab2@3975>     CMPI.b #":",-$1(A0)
0003CBDC <PED.ab2@3976>     BEQ.w JL_0_11C6
0003CBE0 <PED.ab2@3977>     MOVE.b #$2F,(A0)+
0003CBE6 <PED.ab2@3980>   MOVE.l a0,namesizestore
0003CBE8 <PED.ab2@3983>   MOVE.b (A2)+,(A0)+
0003CBEC <PED.ab2@3984>   BNE.b 'l1a
0003CBF2 <PED.ab2@3985>   CLR.b ab2mode
0003CBFA <PED.ab2@3986>   CMP.l #$61623200,-4(a0)            ;ab2
0003CBFE <PED.ab2@3987>   BNE 'os
0003CC06 <PED.ab2@3988>   MOVE.b #1,ab2mode
0003CC0E <PED.ab2@3991>   CMP.l #$61623300,-4(a0)            ;ab3
0003CC12 <PED.ab2@3992>   BNE 'os3
0003CC1A <PED.ab2@3993>   MOVE.b #3,ab2mode
0003CC20 <PED.ab2@3996>   SUB.l namesizestore,a0
0003CC26 <PED.ab2@3997>   CMP.l #28,a0
0003CC2A <PED.ab2@3998>   BLE 'l10
0003CC54 <PED.ab2@3999>   !basic
0003CD14 <PED.ab2@4000>   dummy.l= RTEZRequest("",!TRANS{"Warning: Filename is longer than 27 characters.\\nThis may cause problems with some filesystems."},!TRANS{"Continue"})
0003CD32 <PED.ab2@4001>   !asm
0003CD36 <PED.ab2@4004>   MOVEM.l (A7)+,A0-A2
0003CD3C <PED.ab2@4005>   MOVE.l #comStr_SourceFileComplete,D7
0003CD42 <PED.ab2@4006>   JSR StoreXtraData
0003CD48 <PED.ab2@4007>   TST.b AL_0_1162
0003CD4C <PED.ab2@4008>   BEQ.w JL_0_1216
0003CD52 <PED.ab2@4009>   MOVEA.l _dosbase,A6
0003CD54 <PED.ab2@4010>   MOVE.l D7,D1
0003CD56 <PED.ab2@4011>   MOVEQ.l #-$02,D2
0003CD5A <PED.ab2@4012>   JSR _Lock(A6)
0003CD5C <PED.ab2@4013>   TST.l D0
0003CD60 <PED.ab2@4014>   BEQ.w JL_0_1216
0003CD62 <PED.ab2@4015>   MOVE.l D0,-(A7)                    ; put lock from d0 to stack
0003CD68 <PED.ab2@4016>   LEA easystruct_saveas,A1
0003CD6E <PED.ab2@4017>   JSR show_requester
0003CD70 <PED.ab2@4018>   MOVE.l (A7)+,D1                    ; get lock from stack to d1 for unlock
0003CD72 <PED.ab2@4019>   TST.w D0
0003CD76 <PED.ab2@4020>   BEQ.w JL_0_1214
0003CD7C <PED.ab2@4021>   MOVEA.l _dosbase,A6
0003CD80 <PED.ab2@4022>   JSR _UnLock(A6)
0003CD84 <PED.ab2@4023> BRA.w JL_0_1216
0003CD86 <PED.ab2@4026> RTS
0003CD8C <PED.ab2@4029>   MOVE.l D7,ptr_sourcefilename
0003CD92 <PED.ab2@4030>   MOVEA.l comPtr_DosBuffer,A1
0003CD94 <PED.ab2@4031>   MOVE.l A1,D1
0003CD96 <PED.ab2@4032>   MOVEA.l D7,A0
0003CD98 <PED.ab2@4035>     MOVE.b (A0)+,(A1)+
0003CD9C <PED.ab2@4036>   BNE.b JL_0_1224
0003CD9E <PED.ab2@4038>   SUBQ.w #1,A1
0003CDA4 <PED.ab2@4039>   LEA str_bakextention,A0
0003CDA6 <PED.ab2@4042>     MOVE.b (A0)+,(A1)+
0003CDAA <PED.ab2@4043>   BNE.b JL_0_122E
0003CDB0 <PED.ab2@4045>   MOVEA.l _dosbase,A6
0003CDB4 <PED.ab2@4046>   JSR _DeleteFile(A6)
0003CDB6 <PED.ab2@4047>   MOVE.l D7,D1
0003CDBC <PED.ab2@4048>   MOVE.l comPtr_DosBuffer,D2
0003CDC0 <PED.ab2@4049>   JSR _Rename(A6)
0003CDC6 <PED.ab2@4050>   TST.b ab2mode
0003CDCA <PED.ab2@4051>   BEQ old_saveroutine
0003CDD0 <PED.ab2@4052>   MOVE.l #comStr_SourceFileComplete,d0
0003CDD8 <PED.ab2@4053>   CMP.b #1,ab2mode
0003CDDC <PED.ab2@4054>   BNE 'saveab3
0003CDE2 <PED.ab2@4055>   JSR saveab2
0003CDE8 <PED.ab2@4057>   JSR JL_0_1372
0003CDEE <PED.ab2@4058>   TST.w remember_saved
0003CDF2 <PED.ab2@4059>   BEQ.w 'JL_0_1286b
0003CDF8 <PED.ab2@4060>   JSR AJL_0_B990
0003CDFA <PED.ab2@4063> RTS
0003CE24 <PED.ab2@4066>   !basic
0003CE42 <PED.ab2@4070>   !asm
0003CE48 <PED.ab2@4071>   MOVE.l #comStr_SourceFileComplete,d0
0003CE7A <PED.ab2@4072>   !ComData_JSR{comFunc_SaveSource}
0003CE80 <PED.ab2@4074>   JSR set_pointernormal
0003CE86 <PED.ab2@4075>   JSR analyze_loadedsource
0003CE8C <PED.ab2@4076>   CLR.w comWord_SourceModifiedFlag
0003CE92 <PED.ab2@4077>   CLR.w comWord_KeyBeforeReturn
0003CE98 <PED.ab2@4078>   CLR.w comWord_SourceChanged
0003CE9E <PED.ab2@4079>   JSR update_modifiermark
0003CEA4 <PED.ab2@4081>   TST.w remember_saved
0003CEA8 <PED.ab2@4082>   BEQ.w skip_historymenu
0003CEAE <PED.ab2@4083>   JSR AJL_0_B990
0003CEB0 <PED.ab2@4086> RTS
0003CEB6 <PED.ab2@4089>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
0003CEBE <PED.ab2@4090>   MOVE.b #1,menuload
0003CEC4 <PED.ab2@4091>   JSR open_sourcefile
0003CECA <PED.ab2@4092>   JSR set_pointerbusy
0003CED0 <PED.ab2@4093>   MOVEA.l comPtr_FirstSourceLine,A2
0003CED6 <PED.ab2@4094>   MOVE.l comLong_TotalLines,D5                 ;save routine
0003CEDC <PED.ab2@4096>   TST.w AL_0_B7E0
0003CEE0 <PED.ab2@4097>   BEQ.w JL_0_1288
0003CEE4 <PED.ab2@4098>   MOVEM.l D1-D7/A0-A6,-(A7)
0003CEEA <PED.ab2@4099>   JSR JL_0_12D6                      ;save write raw
0003CEEE <PED.ab2@4100>   MOVEM.l (A7)+,D1-D7/A0-A6
0003CEF4 <PED.ab2@4101>   JSR JL_0_1372
0003CEFA <PED.ab2@4102>   TST.w remember_saved
0003CEFE <PED.ab2@4103>   BEQ.w JL_0_1286
0003CF04 <PED.ab2@4104>   JSR AJL_0_B990
0003CF06 <PED.ab2@4107> RTS
0003CF0C <PED.ab2@4110>   JSR JL_0_1292
0003CF12 <PED.ab2@4111>   JSR JL_0_1372
0003CF14 <PED.ab2@4112> RTS
0003CF16 <PED.ab2@4116>   MOVEQ.l #$00,D4
0003CF1A <PED.ab2@4117>   MOVE.b $8(A2),D4
0003CF1E <PED.ab2@4118>   LEA $9(A2),A3
0003CF24 <PED.ab2@4119>   MOVE.w comWord_DoTokenize,D0
0003CF28 <PED.ab2@4120>   BNE.w JL_0_12B2
0003CF2E <PED.ab2@4122>   MOVE.b #$A,-$1(A3,D4.W)
0003CF30 <PED.ab2@4125>   MOVE.l D7,D1
0003CF32 <PED.ab2@4126>   MOVE.l A3,D2
0003CF34 <PED.ab2@4127>   MOVE.l D4,D3
0003CF3A <PED.ab2@4128>   MOVEA.l _dosbase,A6
0003CF3E <PED.ab2@4129>   JSR _Write(A6)
0003CF42 <PED.ab2@4130>   CLR.b -$1(A3,D4.W)
0003CF44 <PED.ab2@4131>   TST.l D0
0003CF48 <PED.ab2@4132>   BEQ.w JL_0_1378
0003CF4A <PED.ab2@4133>   MOVEA.l (A2),A2
0003CF4C <PED.ab2@4134>   SUBQ.l #1,d5
0003CF50 <PED.ab2@4135>   BNE JL_0_1298
0003CF56 <PED.ab2@4138>   CLR.w comWord_SourceChanged
0003CF58 <PED.ab2@4139>   MOVEQ.l #-$01,D0
0003CF5A <PED.ab2@4140> RTS
0003CF5C <PED.ab2@4143>   MOVEQ.l #$00,D0
0003CF5E <PED.ab2@4144>   MOVEQ.l #$00,D1
0003CF60 <PED.ab2@4145>   MOVE.l D5,D4
0003CF64 <PED.ab2@4148>     MOVE.b $8(A2),D1
0003CF66 <PED.ab2@4149>     ADD.l D1,D0
0003CF68 <PED.ab2@4150>     MOVEA.l (A2),A2
0003CF6A <PED.ab2@4151>     SUBQ.l #1,d5
0003CF6E <PED.ab2@4152>   BNE JL_0_12Dca
0003CF74 <PED.ab2@4154>   MOVEA.l _execbase,A6
0003CF76 <PED.ab2@4155>   MOVEQ.l #$00,D1
0003CF7C <PED.ab2@4156>   MOVE.l D0,AL_0_15C0
0003CF9E <PED.ab2@4157>   !newalloc
0003CFA4 <PED.ab2@4158>   MOVEA.l comPtr_FirstSourceLine,A2
0003CFA6 <PED.ab2@4159>   MOVEA.l D0,A5
0003CFA8 <PED.ab2@4160>   MOVE.l D4,D5
0003CFAE <PED.ab2@4161>   MOVE.l D0,AL_0_15BC
0003CFB2 <PED.ab2@4162>   BNE.w JL_0_130C
0003CFB6 <PED.ab2@4164> BRA.b JL_0_1298
0003CFBC <PED.ab2@4167>   MOVEA.l _dosbase,A6
0003CFC0 <PED.ab2@4170>     LEA $9(A2),A3
0003CFC2 <PED.ab2@4171>     MOVEQ.l #$00,D4
0003CFC6 <PED.ab2@4172>     MOVE.b $8(A2),D4
0003CFC8 <PED.ab2@4173>     SUBQ.w #1,D4
0003CFCA <PED.ab2@4176>       MOVE.b (A3)+,(A5)+
0003CFCE <PED.ab2@4177>     DBF D4,JL_0_131E
0003CFD4 <PED.ab2@4179>     TST.w comWord_DoTokenize
0003CFD8 <PED.ab2@4180>     BNE.w JL_0_1334
0003CFDE <PED.ab2@4182>     MOVE.b #$A,-$1(A5)
0003CFE0 <PED.ab2@4185>     MOVEA.l (A2),A2
0003CFE2 <PED.ab2@4186>     SUBQ.l #1,d5
0003CFE6 <PED.ab2@4187>   BNE JL_0_1312
0003CFE8 <PED.ab2@4189>   MOVE.l D7,D1
0003CFEE <PED.ab2@4190>   MOVE.l AL_0_15BC,D2
0003CFF4 <PED.ab2@4191>   MOVE.l AL_0_15C0,D3
0003CFFA <PED.ab2@4192>   MOVEA.l _dosbase,A6
0003CFFE <PED.ab2@4193>   JSR _Write(A6)
0003D000 <PED.ab2@4194>   MOVE.l D0,-(A7)
0003D006 <PED.ab2@4195>   CLR.w comWord_SourceChanged
0003D00C <PED.ab2@4196>   MOVEA.l _execbase,A6
0003D012 <PED.ab2@4197>   MOVEA.l AL_0_15BC,A1
0003D024 <PED.ab2@4198>   !newfree
0003D02A <PED.ab2@4199>   MOVEA.l _dosbase,A6
0003D030 <PED.ab2@4200>   CLR.w comWord_SourceChanged
0003D032 <PED.ab2@4201>   MOVE.l (A7)+,D0
0003D034 <PED.ab2@4202> RTS
0003D036 <PED.ab2@4205>   TST.l D0
0003D03A <PED.ab2@4206>   BNE.w JL_0_1380
0003D040 <PED.ab2@4209>   LEA comStr_ErrorWriteFile,A0
0003D046 <PED.ab2@4210>   JSR show_errorrequester
0003D04C <PED.ab2@4214>   JSR close_sourcefile
0003D052 <PED.ab2@4215>   MOVE.l comFunc_WriteXtraFile,D0
0003D056 <PED.ab2@4216>   BEQ.w JL_0_13A8
0003D058 <PED.ab2@4217>   MOVEA.l D0,A5
0003D05E <PED.ab2@4218>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
0003D064 <PED.ab2@4219>   JSR open_xtrafile          ;write xtra
0003D068 <PED.ab2@4220>   BEQ.w skip_writingxtrafile
0003D06A <PED.ab2@4223>   JSR (A5)
0003D094 <PED.ab2@4225>   !basic
0003D09A <PED.ab2@4226>   MOVE.l comLong_DisplayLineOffset,d0
0003D0A0 <PED.ab2@4227>   ADD.l comLong_DisplayLine,d0
0003D0A6 <PED.ab2@4228>   MOVE.l d0,comLong_CursorPosStore
0003D0DE <PED.ab2@4229>   Poke$ ?comStr_LabelSearchString,search_label$
0003D0E6 <PED.ab2@4230>   MOVE.l LabelList_FirstVisableItemNumber@(a5),comLong_Label1VisableItemStore
0003D0E8 <PED.ab2@4231>   MOVE.l d7,d0
0003D0EC <PED.ab2@4232>   xtrafilehandle.l = PutD0
0003D118 <PED.ab2@4233>   Write_ xtrafilehandle,?comDef_XtraExtendBegin,?comDef_XtraExtendEnd-?comDef_XtraExtendBegin ; moved the write of the 4 extra fill/pad/termination bytes to the Compiler xtra save routine because the Compiler xtra load routine need it!  tomsmart1
0003D136 <PED.ab2@4234>   !asm
0003D138 <PED.ab2@4235>   MOVE.l D7,D1
0003D13E <PED.ab2@4236>   MOVEA.l _dosbase,A6
0003D142 <PED.ab2@4237>   JSR _Close(A6)
0003D148 <PED.ab2@4240>   JSR JL_0_E28
0003D14E <PED.ab2@4243>   TST.w prefs_source_icon
0003D152 <PED.ab2@4244>    BEQ.w JL_0_13D6
0003D158 <PED.ab2@4245>   JSR open_infofile
0003D15C <PED.ab2@4246>   BEQ.w JL_0_13D2
0003D162 <PED.ab2@4247>   MOVE.l #sourceicon_datas,D2
0003D168 <PED.ab2@4248>   MOVE.l #SourceIconDatas_End-sourceicon_datas,D3
0003D16A <PED.ab2@4249>   MOVE.l D7,D1
0003D170 <PED.ab2@4250>   MOVEA.l _dosbase,A6
0003D174 <PED.ab2@4251>   JSR _Write(A6)
0003D176 <PED.ab2@4252>   MOVE.l D7,D1
0003D17A <PED.ab2@4253>   JSR _Close(A6)
0003D180 <PED.ab2@4256>   JSR JL_0_E28
0003D186 <PED.ab2@4259>   JSR set_pointernormal
0003D18C <PED.ab2@4260>   JSR analyze_loadedsource
0003D192 <PED.ab2@4261>   CLR.w comWord_SourceModifiedFlag
0003D198 <PED.ab2@4262>   CLR.w comWord_KeyBeforeReturn
0003D19E <PED.ab2@4263>   CLR.w comWord_SourceChanged
0003D1A4 <PED.ab2@4264>   JSR update_modifiermark
0003D1A6 <PED.ab2@4265> RTS
0003D1AA <PED.ab2@4269>   Dc.b $E3,$10,$00,$01
0003D1AE <PED.ab2@4270>   Dc.b $00,$00,$00,$00
0003D1B2 <PED.ab2@4271>   Dc.b $00,$63,$00,$11
0003D1B6 <PED.ab2@4272>   Dc.b $00,$2E,$00,$18
0003D1BA <PED.ab2@4273>   Dc.b $00,$05,$00,$03
0003D1BE <PED.ab2@4274>   Dc.b $00,$01,$00,$22
0003D1C2 <PED.ab2@4275>   Dc.b $7B,$20,$00,$00
0003D1C6 <PED.ab2@4276>   Dc.b $00,$00,$00,$00
0003D1CA <PED.ab2@4277>   Dc.b $00,$00,$00,$00
0003D1CE <PED.ab2@4278>   Dc.b $00,$00,$00,$00
0003D1D2 <PED.ab2@4279>   Dc.b $00,$00,$00,$00
0003D1D6 <PED.ab2@4280>   Dc.b $00,$00,$00,$00
0003D1DA <PED.ab2@4281>   Dc.b $04,$22,$00,$22
0003D1DE <PED.ab2@4282>   Dc.b $70,$78,$00,$22
0003D1E2 <PED.ab2@4283>   Dc.b $72,$B8,$00,$00
0003D1E6 <PED.ab2@4284>   Dc.b $00,$5C,$00,$00
0003D1EA <PED.ab2@4285>   Dc.b $00,$0E,$00,$00
0003D1EE <PED.ab2@4286>   Dc.b $00,$00,$00,$00
0003D1F2 <PED.ab2@4287>   Dc.b $00,$00,$00,$00
0003D1F6 <PED.ab2@4288>   Dc.b $00,$00,$00,$00
0003D1FA <PED.ab2@4289>   Dc.b $00,$00,$00,$2E
0003D1FE <PED.ab2@4290>   Dc.b $00,$17,$00,$02
0003D202 <PED.ab2@4291>   Dc.b $00,$01,$8F,$98
0003D206 <PED.ab2@4292>   Dc.b $03,$00,$00,$00
0003D20A <PED.ab2@4293>   Dc.b $00,$00,$FF,$FF
0003D20E <PED.ab2@4294>   Dc.b $FF,$FF,$FF,$FC
0003D212 <PED.ab2@4295>   Dc.b $80,$00,$00,$00
0003D216 <PED.ab2@4296>   Dc.b $00,$00,$80,$00
0003D21A <PED.ab2@4297>   Dc.b $00,$00,$00,$00
0003D21E <PED.ab2@4298>   Dc.b $80,$FF,$FF,$FF
0003D222 <PED.ab2@4299>   Dc.b $7C,$00,$81,$80
0003D226 <PED.ab2@4300>   Dc.b $00,$00,$06,$00
0003D22A <PED.ab2@4301>   Dc.b $81,$80,$00,$00
0003D22E <PED.ab2@4302>   Dc.b $06,$00,$81,$9A
0003D232 <PED.ab2@4303>   Dc.b $DE,$D5,$86,$00
0003D236 <PED.ab2@4304>   Dc.b $81,$97,$5B,$7D
0003D23A <PED.ab2@4305>   Dc.b $86,$00,$81,$82
0003D23E <PED.ab2@4306>   Dc.b $56,$E9,$86,$00
0003D242 <PED.ab2@4307>   Dc.b $81,$81,$AD,$5D
0003D246 <PED.ab2@4308>   Dc.b $86,$00,$81,$9F
0003D24A <PED.ab2@4309>   Dc.b $FF,$FF,$86,$00
0003D24E <PED.ab2@4310>   Dc.b $81,$80,$00,$00
0003D252 <PED.ab2@4311>   Dc.b $06,$00,$81,$FF
0003D256 <PED.ab2@4312>   Dc.b $FF,$FF,$FE,$00
0003D25A <PED.ab2@4313>   Dc.b $80,$00,$00,$00
0003D25E <PED.ab2@4314>   Dc.b $00,$00,$80,$7F
0003D262 <PED.ab2@4315>   Dc.b $FF,$FF,$F8,$00
0003D266 <PED.ab2@4316>   Dc.b $80,$80,$00,$00
0003D26A <PED.ab2@4317>   Dc.b $04,$00,$81,$3A
0003D26E <PED.ab2@4318>   Dc.b $AA,$AB,$52,$00
0003D272 <PED.ab2@4319>   Dc.b $81,$55,$55,$54
0003D276 <PED.ab2@4320>   Dc.b $2A,$00,$82,$00
0003D27A <PED.ab2@4321>   Dc.b $00,$00,$01,$00
0003D27E <PED.ab2@4322>   Dc.b $83,$FF,$FF,$FF
0003D282 <PED.ab2@4323>   Dc.b $FF,$00,$80,$00
0003D286 <PED.ab2@4324>   Dc.b $00,$00,$00,$00
0003D28A <PED.ab2@4325>   Dc.b $80,$00,$00,$00
0003D28E <PED.ab2@4326>   Dc.b $00,$00,$80,$00
0003D292 <PED.ab2@4327>   Dc.b $00,$00,$00,$00
0003D296 <PED.ab2@4328>   Dc.b $00,$00,$00,$00
0003D29A <PED.ab2@4329>   Dc.b $00,$00,$00,$00
0003D29E <PED.ab2@4330>   Dc.b $00,$00,$00,$04
0003D2A2 <PED.ab2@4331>   Dc.b $00,$00,$00,$00
0003D2A6 <PED.ab2@4332>   Dc.b $00,$04,$00,$00
0003D2AA <PED.ab2@4333>   Dc.b $00,$00,$00,$04
0003D2AE <PED.ab2@4334>   Dc.b $00,$00,$00,$00
0003D2B2 <PED.ab2@4335>   Dc.b $00,$04,$00,$1F
0003D2B6 <PED.ab2@4336>   Dc.b $FF,$FF,$E0,$04
0003D2BA <PED.ab2@4337>   Dc.b $00,$1A,$DE,$D4
0003D2BE <PED.ab2@4338>   Dc.b $00,$04,$00,$17
0003D2C2 <PED.ab2@4339>   Dc.b $5B,$7C,$00,$04
0003D2C6 <PED.ab2@4340>   Dc.b $00,$02,$56,$E8
0003D2CA <PED.ab2@4341>   Dc.b $00,$04,$00,$01
0003D2CE <PED.ab2@4342>   Dc.b $AD,$5C,$00,$04
0003D2D2 <PED.ab2@4343>   Dc.b $00,$00,$00,$00
0003D2D6 <PED.ab2@4344>   Dc.b $00,$04,$00,$00
0003D2DA <PED.ab2@4345>   Dc.b $00,$00,$00,$04
0003D2DE <PED.ab2@4346>   Dc.b $00,$00,$00,$00
0003D2E2 <PED.ab2@4347>   Dc.b $00,$04,$00,$1F
0003D2E6 <PED.ab2@4348>   Dc.b $FF,$FF,$E0,$04
0003D2EA <PED.ab2@4349>   Dc.b $00,$00,$00,$00
0003D2EE <PED.ab2@4350>   Dc.b $00,$04,$00,$7F
0003D2F2 <PED.ab2@4351>   Dc.b $FF,$FF,$F8,$04
0003D2F6 <PED.ab2@4352>   Dc.b $00,$C5,$55,$54
0003D2FA <PED.ab2@4353>   Dc.b $AC,$04,$00,$AA
0003D2FE <PED.ab2@4354>   Dc.b $AA,$AB,$D4,$04
0003D302 <PED.ab2@4355>   Dc.b $01,$FF,$FF,$FF
0003D306 <PED.ab2@4356>   Dc.b $FE,$04,$00,$00
0003D30A <PED.ab2@4357>   Dc.b $00,$00,$00,$04
0003D30E <PED.ab2@4358>   Dc.b $00,$00,$00,$00
0003D312 <PED.ab2@4359>   Dc.b $00,$04,$00,$00
0003D316 <PED.ab2@4360>   Dc.b $00,$00,$00,$04
0003D31A <PED.ab2@4361>   Dc.b $7F,$FF,$FF,$FF
0003D31E <PED.ab2@4362>   Dc.b $FF,$FC,$00,$00
0003D322 <PED.ab2@4363>   Dc.b $00,$0E,$42,$6C          ;0,$e4,"Bl"
0003D326 <PED.ab2@4364>   Dc.b $69,$74,$7A,$33          ;"itz3"
0003D32A <PED.ab2@4365>   Dc.b $3A,$41,$6D,$69          ;":Ami"
0003D32E <PED.ab2@4366>   Dc.b $42,$6C,$69,$74          ;"Blit"
0003D332 <PED.ab2@4367>   Dc.b $7A,$33,$00,$00          ;"z3",0,0
0003D335 <PED.ab2@4368>   Dc.b $00,$00,$04
0003D336 <PED.ab2@4369> Even
0003D33A <PED.ab2@4374>   !regs2stack
0003D364 <PED.ab2@4375>   !basic
0003D3DE <PED.ab2@4379>     txt0$ = "PED "+!versions+"#AmiBlitz " + Peek$(Peek.l(?comPtr_CompilerVersion))
0003D44C <PED.ab2@4380>     txt1$ = !TRANS {"AREXX Port : "}+Peek$(?str_Arexx_PortName)
0003D4BA <PED.ab2@4381>     txt2$ = !TRANS {"Public Screen : "}+Peek$(?str_defaultpubscreen)
0003D528 <PED.ab2@4382>     txt3$ = !TRANS {"AcidLibs: "}+acidlibdate$
0003D596 <PED.ab2@4383>     txt4$ = !TRANS {"DefLibs: "}+deflibdate$
0003D5FE <PED.ab2@4385>     txt0$ = !versions+"#"+Peek$(Peek.l(?comPtr_CompilerVersion))
0003D628 <PED.ab2@4386>     txt1$ = Peek$(?str_Arexx_PortName)
0003D652 <PED.ab2@4387>     txt2$ = Peek$(?str_defaultpubscreen)
0003D686 <PED.ab2@4388>     txt3$ = acidlibdate$
0003D6BA <PED.ab2@4389>     txt4$ = deflibdate$
0003D788 <PED.ab2@4391>     window_welcome{txt0$,txt1$, txt2$, txt3$, txt4$}
0003D7A6 <PED.ab2@4393>   !asm
0003D7AA <PED.ab2@4394>   !stack2regs
0003D7AC <PED.ab2@4395> RTS
0003D9AC <PED.ab2@4400> str_searchstring:   Ds.b #MAX_STRINGSIZE
0003DBAC <PED.ab2@4401> str_replacestring:  Ds.b #MAX_STRINGSIZE
0003DBAE <PED.ab2@4402> case_sensitive:     Dc.b $00,$00
0003DBB0 <PED.ab2@4406>   MOVEQ.l #$00,D5
0003DBB4 <PED.ab2@4409>   LEA $9(A4),A5
0003DBBA <PED.ab2@4410>   MOVE.w flag_tokenization,D0
0003DBBE <PED.ab2@4411>   BEQ.w JL_0_15E0
0003DBC0 <PED.ab2@4412>   MOVEA.l A5,A0
0003DBC6 <PED.ab2@4413>   MOVEA.l comPtr_Temp_TokenString1,A1
0003DBC8 <PED.ab2@4414>   MOVEA.l A1,A5
0003DBCE <PED.ab2@4415>   JSR detokenize_line                ;detokenize_line
0003DBD0 <PED.ab2@4418>   MOVEA.l A5,A1                      ;compare routine
0003DBD2 <PED.ab2@4419>   ADDA.w D5,A5
0003DBD4 <PED.ab2@4422>   MOVEA.l A5,A3
0003DBDA <PED.ab2@4423>   LEA str_oldsearchgadget,A2
0003DBDC <PED.ab2@4426>     MOVE.b (A2)+,D0
0003DBE0 <PED.ab2@4427>      BEQ.w JL_0_162E
0003DBE2 <PED.ab2@4428>     MOVE.b (A3)+,D2
0003DBE6 <PED.ab2@4429>      BEQ.w exit_search_string
0003DBEE <PED.ab2@4430>     BTST #$7,case_sensitive
0003DBF2 <PED.ab2@4431>      BNE.w JL_0_1626
0003DC14 <PED.ab2@4432>      !check
0003DC18 <PED.ab2@4434>      BNE.w JL_0_1626
0003DC1C <PED.ab2@4435>     ANDI.w #$DF,D2
0003DC1E <PED.ab2@4438>     CMP.b D0,D2
0003DC22 <PED.ab2@4439>      BEQ.b JL_0_15EA
0003DC24 <PED.ab2@4440>     ADDQ.w #1,A5
0003DC28 <PED.ab2@4441>   BRA.b JL_0_15E4
0003DC2A <PED.ab2@4444>   SUBA.l A1,A5
0003DC2C <PED.ab2@4445>   MOVE.w A5,D0
0003DC2E <PED.ab2@4446>   RTS
0003DC30 <PED.ab2@4449>   MOVEQ.l #-$01,D0
0003DC32 <PED.ab2@4450> RTS
0003DC38 <PED.ab2@4453>   JSR search_string
0003DC3C <PED.ab2@4454>    BMI.w exit_replace_string
0003DC44 <PED.ab2@4455>   MOVE.w #$FFFF,comWord_SourceChanged
0003DC4A <PED.ab2@4458>   MOVEA.l comPtr_Temp_TokenString2,A0
0003DC4C <PED.ab2@4459>   MOVEQ.l #$00,D1
0003DC4E <PED.ab2@4462>     CMP.w D0,D1
0003DC52 <PED.ab2@4463>     BCC.w JL_0_17EE
0003DC54 <PED.ab2@4464>     MOVE.b (A1)+,(A0)+
0003DC56 <PED.ab2@4465>     ADDQ.w #1,D1
0003DC5A <PED.ab2@4466>   BRA.b JL_0_17E2
0003DC60 <PED.ab2@4469>   LEA str_searchstring,A2
0003DC62 <PED.ab2@4472>   TST.b (A2)+
0003DC66 <PED.ab2@4473>   BEQ.w JL_0_17FC
0003DC68 <PED.ab2@4474>   ADDQ.w #1,A1
0003DC6C <PED.ab2@4475>   BRA.b JL_0_17F2
0003DC72 <PED.ab2@4478>   LEA str_replacestring,A2
0003DC74 <PED.ab2@4481>     ADDQ.w #1,D1
0003DC76 <PED.ab2@4482>     MOVE.b (A2)+,(A0)+
0003DC7A <PED.ab2@4483>   BNE.b JL_0_1800
0003DC7C <PED.ab2@4485>   SUBQ.w #1,A0
0003DC7E <PED.ab2@4486>   SUBQ.w #1,D1
0003DC80 <PED.ab2@4487>   MOVE.w D1,-(A7)
0003DC82 <PED.ab2@4490>     MOVE.b (A1)+,(A0)+
0003DC86 <PED.ab2@4491>   BNE.b JL_0_180C
0003DC88 <PED.ab2@4493>   SUBQ.w #1,A0
0003DC8E <PED.ab2@4496>     CMPA.l comPtr_Temp_TokenString3,A0
0003DC92 <PED.ab2@4497>     BCC.w JL_0_1820
0003DC96 <PED.ab2@4498>     MOVE.b #$20,(A0)+
0003DC9A <PED.ab2@4499>   BRA.b JL_0_1812
0003DCA0 <PED.ab2@4502>   MOVEA.l comPtr_Temp_TokenString2,A2
0003DCA6 <PED.ab2@4503>   JSR parse_line
0003DCAC <PED.ab2@4504>   JSR JL_0_55AA
0003DCAE <PED.ab2@4505>   MOVE.w (A7)+,D5
0003DCB4 <PED.ab2@4506>   JSR JL_0_15C6
0003DCB8 <PED.ab2@4507>   BPL.b JL_0_17Dca
0003DCBA <PED.ab2@4508>   MOVEQ.l #$00,D0
0003DCBC <PED.ab2@4509>   RTS
0003DCBE <PED.ab2@4512>   MOVEQ.l #-$01,D0
0003DCC0 <PED.ab2@4513> RTS
0003DCC6 <PED.ab2@4518>   MOVE.w message_qualifier,d0
0003DCCA <PED.ab2@4519>   AND.w #3,d0
0003DCCE <PED.ab2@4520>   BNE 'os1
0003DCD4 <PED.ab2@4521>   JSR jump_addhistory
0003DCDA <PED.ab2@4522>   TST.w oldsearch
0003DCDE <PED.ab2@4523>   BEQ 'os1
0003DCE0 <PED.ab2@4524>   MOVEQ #0,d0
0003DCE6 <PED.ab2@4525>   JSR jumpline
0003DCEA <PED.ab2@4527>   !regs2stack
0003DD14 <PED.ab2@4528>   !basic
0003DD6A <PED.ab2@4529>   If Peek.l(Addr Window(WZID("WIN_SEARCH")))=0
0003DE14 <PED.ab2@4530>     WZWindow WZID("WIN_SEARCH"),0,128,-2,-2,-2,-2,WZID("WIN_SEARCH")
0003DE3A <PED.ab2@4531>     SetMenuStrip_ WZWindowAddr,Peek.l(?addr_menustrip)
0003DE86 <PED.ab2@4532>     Use Window WZID("WIN_SEARCH") : Delay_ 2
0003DEC0 <PED.ab2@4533>     WZPrint "FIND_FINDSTRING"   ,&oldfindstr$
0003DEFA <PED.ab2@4534>     WZPrint "FIND_REPLACESTRING",&oldreplacestr$
0003DF42 <PED.ab2@4535>     ActivateGadget_ WZGadAddr("FIND_FINDSTRING"),WZWindowAddr,0
0003DF48 <PED.ab2@4536>   Else
0003DF82 <PED.ab2@4537>     Use Window WZID("WIN_SEARCH")
0003DF98 <PED.ab2@4538>     WindowToFront_ WZWindowAddr
0003DFB6 <PED.ab2@4540>   !asm
0003DFBA <PED.ab2@4541>   !stack2regs
0003DFBC <PED.ab2@4542> RTS
0003DFBE <PED.ab2@4545>   MOVE.l (A4),D0                     ;start code
0003DFC2 <PED.ab2@4546>   BEQ.w setpointer_to_normal
0003DFC4 <PED.ab2@4547>   MOVEA.l D0,A4
0003DFC6 <PED.ab2@4548>   MOVEQ.l #$01,D6
0003DFCC <PED.ab2@4551>   MOVE.b str_searchstring,D0         ;find
0003DFD0 <PED.ab2@4552>   BEQ.w setpointer_to_normal
0003DFD6 <PED.ab2@4553>   JSR set_pointerbusy
0003DFDC <PED.ab2@4554>   MOVE.l comLong_DisplayLineOffset,D7
0003DFE2 <PED.ab2@4555>   ADD.l comLong_DisplayLine,D7
0003DFE4 <PED.ab2@4556>   ADD.l D6,D7
0003DFEA <PED.ab2@4559>     JSR search_string
0003DFEE <PED.ab2@4560>      BPL.w JL_0_1790
0003DFF0 <PED.ab2@4561>     ADD.l D6,D7
0003DFF4 <PED.ab2@4562>     BMI.w setpointer_to_normal
0003DFFA <PED.ab2@4563>     CMP.l comLong_TotalLines,D7
0003DFFE <PED.ab2@4564>     BCC.w setpointer_to_normal
0003E000 <PED.ab2@4565>     TST.l D6
0003E004 <PED.ab2@4566>     BPL.w JL_0_178C
0003E008 <PED.ab2@4567>     MOVEA.l $4(A4),A4
0003E00C <PED.ab2@4568>     BRA.b JL_0_176A
0003E00E <PED.ab2@4571>     MOVEA.l (A4),A4
0003E012 <PED.ab2@4572>   BRA.b JL_0_176A
0003E018 <PED.ab2@4575>   JSR set_pointernormal
0003E01A <PED.ab2@4576>   MOVE.l D0,-(A7)
0003E01C <PED.ab2@4577>   MOVE.l D7,D0
0003E022 <PED.ab2@4578>   MOVEA.l comPtr_CurrentSourceLine,A4
0003E028 <PED.ab2@4579>   JSR sub_gotoline
0003E02A <PED.ab2@4580>   MOVE.l (A7)+,D1
0003E030 <PED.ab2@4581>   JSR JL_0_7ED2
0003E036 <PED.ab2@4582> JMP update_horizscroller
0003E03A <PED.ab2@4585>   MOVE.l $4(A4),D0
0003E03E <PED.ab2@4586>   BEQ.w setpointer_to_normal
0003E040 <PED.ab2@4587>   MOVEA.l D0,A4
0003E042 <PED.ab2@4588>   MOVEQ.l #-$01,D6
0003E046 <PED.ab2@4589> BRA.b JL_0_1754
0003E04C <PED.ab2@4592>   MOVE.b str_searchstring,D0
0003E050 <PED.ab2@4593>   BEQ.w setpointer_to_normal
0003E056 <PED.ab2@4594>   JSR replace_string
0003E05A <PED.ab2@4595>   BNE.w setpointer_to_normal
0003E060 <PED.ab2@4596>   JSR menu_findnext
0003E066 <PED.ab2@4597> JMP _redraw
0003E06C <PED.ab2@4602>   MOVEA.l #str_newfile_req,A0
0003E072 <PED.ab2@4603>   MOVE.l #$51756974,(A0)+            ; "Quit"
0003E076 <PED.ab2@4604>   MOVE.b #$0,(A0)+
0003E07C <PED.ab2@4605>   JSR show_newfilerequest
0003E082 <PED.ab2@4606>   MOVEA.l #str_newfile_req,A0
0003E088 <PED.ab2@4607>   MOVE.l #$4E657720,(A0)+            ; "New File"
0003E08E <PED.ab2@4608>   MOVE.l #$46696C65,(A0)+
0003E092 <PED.ab2@4609>   MOVE.b #$0,(A0)+
0003E094 <PED.ab2@4610>   TST.l D0
0003E098 <PED.ab2@4611>    BEQ.w exit_quitall
0003E09E <PED.ab2@4613>   JSR dummy_compilercall
0003E0A4 <PED.ab2@4614>   JSR clear_labellist
0003E0AA <PED.ab2@4616>   JSR clear_actualsource
0003E0B0 <PED.ab2@4618>   MOVEA.l actualfile,A0
0003E0B6 <PED.ab2@4619>   JSR close_actualsource
0003E0BC <PED.ab2@4620>   JSR print_filenames
0003E0C2 <PED.ab2@4621>   TST.l loadedfilesbase
0003E0C6 <PED.ab2@4622>    BNE.b menu_quitall
0003E0CC <PED.ab2@4624>   JSR arexx_send_quitplease
0003E0D2 <PED.ab2@4628>   JMP Exit_main                       ;Jump to real exit, this fix the Exit bug if the Sourcewindow not active  tomsmart1
0003E0D4 <PED.ab2@4631> RTS
0003E0DA <PED.ab2@4635>   MOVEA.l #str_newfile_req,A0
0003E0E0 <PED.ab2@4636>   MOVE.l #$51756974,(A0)+            ; "Quit"
0003E0E4 <PED.ab2@4637>   MOVE.b #$0,(A0)+
0003E0EA <PED.ab2@4638>   JSR show_newfilerequest
0003E0F0 <PED.ab2@4639>   MOVEA.l #str_newfile_req,A0
0003E0F6 <PED.ab2@4640>   MOVE.l #$4E657720,(A0)+            ; "New File"
0003E0FC <PED.ab2@4641>   MOVE.l #$46696C65,(A0)+
0003E100 <PED.ab2@4642>   MOVE.b #$0,(A0)+
0003E102 <PED.ab2@4643>   TST.l D0
0003E106 <PED.ab2@4644>    BEQ.w exit_quit
0003E10C <PED.ab2@4646>   JSR dummy_compilercall
0003E112 <PED.ab2@4647>   JSR clear_labellist
0003E118 <PED.ab2@4648>   JSR clear_actualsource             ;alle zeilen loeschen und freigeben
0003E11E <PED.ab2@4650>   MOVEA.l actualfile,A0
0003E124 <PED.ab2@4651>   JSR close_actualsource
0003E12A <PED.ab2@4653>   TST.l loadedfilesbase
0003E12E <PED.ab2@4654>    BNE.w exit_quit
0003E134 <PED.ab2@4656>   JSR arexx_send_quitplease
0003E13A <PED.ab2@4660>   JMP Exit_main                       ;Jump to real exit, this fix the Exit bug if the Sourcewindow not active  tomsmart1
0003E140 <PED.ab2@4663>   JSR update_statusline
0003E142 <PED.ab2@4664> RTS
0003E14C <PED.ab2@4668>   CMPI.l #$ffffFFFF,comLong_BlockEndY
0003E150 <PED.ab2@4669>    BEQ.w setpointer_to_normal
0003E156 <PED.ab2@4671>   JSR move_to_blockstarty
0003E158 <PED.ab2@4672>   MOVEA.l A5,A4
0003E15E <PED.ab2@4675>     MOVEA.l comPtr_Temp_TokenString2,A1
0003E162 <PED.ab2@4676>     MOVE.b #";",(A1)+
0003E166 <PED.ab2@4677>     LEA $9(A4),A0
0003E16C <PED.ab2@4678>     MOVE.w comWord_DoTokenize,D0
0003E170 <PED.ab2@4679>     BNE.w JL_0_220E
0003E172 <PED.ab2@4682>       MOVE.b (A0)+,(A1)+
0003E176 <PED.ab2@4683>     BNE.b JL_0_2206
0003E17A <PED.ab2@4684> BRA.w JL_0_2212
0003E180 <PED.ab2@4687>     JSR detokenize_line
0003E186 <PED.ab2@4690>       CMPA.l comPtr_Temp_TokenString3,A1
0003E18A <PED.ab2@4691>       BCC.w JL_0_2220
0003E18E <PED.ab2@4692>       MOVE.b #$20,(A1)+
0003E192 <PED.ab2@4693> BRA.b JL_0_2212
0003E198 <PED.ab2@4696>     MOVE.l A4,comPtr_CurrentSourceLine
0003E19E <PED.ab2@4697>     JSR JL_0_55A2
0003E1A0 <PED.ab2@4698>     MOVEA.l (A4),A4
0003E1A2 <PED.ab2@4699>     ADDQ.l #1,D6
0003E1A8 <PED.ab2@4700>   CMP.l comLong_BlockEndY,D6
0003E1AC <PED.ab2@4701>   BLS.b JL_0_21F0
0003E1B2 <PED.ab2@4703>   JSR update_currsourceline
0003E1B8 <PED.ab2@4704> JMP _redraw
0003E1C2 <PED.ab2@4708>   CMPI.l #$ffffFFFF,comLong_BlockEndY
0003E1C6 <PED.ab2@4709>    BEQ.w setpointer_to_normal
0003E1CC <PED.ab2@4711>   JSR move_to_blockstarty
0003E1CE <PED.ab2@4712>   MOVEA.l A5,A4
0003E1D4 <PED.ab2@4715>   MOVEA.l comPtr_Temp_TokenString2,A1
0003E1D8 <PED.ab2@4716>   LEA $9(A4),A0
0003E1DE <PED.ab2@4717>   MOVE.w comWord_DoTokenize,D0
0003E1E2 <PED.ab2@4718>    BNE.w JL_0_2268
0003E1E4 <PED.ab2@4721>   MOVE.b (A0)+,(A1)+
0003E1E8 <PED.ab2@4722>    BNE.b JL_0_2260
0003E1EC <PED.ab2@4723> BRA.w JL_0_226C
0003E1F2 <PED.ab2@4726>   JSR detokenize_line
0003E1F8 <PED.ab2@4729>   MOVEA.l comPtr_Temp_TokenString2,A1
0003E1FA <PED.ab2@4730>   MOVEA.l A1,A0
0003E1FC <PED.ab2@4733>   MOVE.b (A0)+,D1
0003E200 <PED.ab2@4734>    BEQ.w JL_0_2286
0003E204 <PED.ab2@4735>   CMP.b #";",D1
0003E208 <PED.ab2@4736>    BEQ.w JL_0_2288
0003E20C <PED.ab2@4737>   CMP.b #$20,D1
0003E210 <PED.ab2@4738>    BEQ.b JL_0_2272
0003E212 <PED.ab2@4741>   MOVEA.l A1,A0
0003E214 <PED.ab2@4744>     MOVE.b (A0)+,(A1)+
0003E218 <PED.ab2@4745>   BNE.b JL_0_2288
0003E21A <PED.ab2@4746>   SUBQ.w #1,A1
0003E220 <PED.ab2@4749>   CMPA.l comPtr_Temp_TokenString3,A1
0003E224 <PED.ab2@4750>    BCC.w JL_0_229C
0003E228 <PED.ab2@4751>   MOVE.b #$20,(A1)+
0003E22C <PED.ab2@4752>   BRA.b JL_0_228E
0003E232 <PED.ab2@4755>   MOVE.l A4,comPtr_CurrentSourceLine
0003E238 <PED.ab2@4756>   JSR JL_0_55A2
0003E23A <PED.ab2@4757>   MOVEA.l (A4),A4
0003E23C <PED.ab2@4758>   ADDQ.l #1,D6
0003E242 <PED.ab2@4759>   CMP.l comLong_BlockEndY,D6
0003E246 <PED.ab2@4760>   BLS.b JL_0_224E
0003E24C <PED.ab2@4761>   JSR update_currsourceline
0003E252 <PED.ab2@4762> JMP _redraw
0003E25C <PED.ab2@4766>   CMPI.l #$ffffFFFF,comLong_BlockEndY
0003E260 <PED.ab2@4767>    BEQ.w setpointer_to_normal
0003E266 <PED.ab2@4769>   JSR update_currsourceline
0003E26C <PED.ab2@4770>   JSR move_to_blockstarty
0003E26E <PED.ab2@4771>   MOVEA.l A5,A4
0003E274 <PED.ab2@4774>     MOVEA.l comPtr_Temp_TokenString2,A1     ; -- copy TAB-Spaces to A1
0003E27A <PED.ab2@4775>     MOVE.w tab_size,D0
0003E27E <PED.ab2@4776>     BEQ.w JL_0_22E2
0003E280 <PED.ab2@4777>     SUBQ.w #1,D0
0003E284 <PED.ab2@4780>       MOVE.b #$20,(A1)+
0003E288 <PED.ab2@4781>  DBF D0,JL_0_22DA
0003E28C <PED.ab2@4784>     LEA $9(A4),A0                    ; -- detokenize line in A0 and copy it in A1 behind TAB-Spaces
0003E292 <PED.ab2@4785>     MOVE.w comWord_DoTokenize,D0
0003E296 <PED.ab2@4786>     BNE.w JL_0_22F8
0003E298 <PED.ab2@4789>       MOVE.b (A0)+,(A1)+
0003E29C <PED.ab2@4790>     BNE.b JL_0_22F0
0003E2A0 <PED.ab2@4791> BRA.w JL_0_22FC
0003E2A6 <PED.ab2@4794>     JSR detokenize_line
0003E2AC <PED.ab2@4797>       CMPA.l comPtr_Temp_TokenString3,A1
0003E2B0 <PED.ab2@4798>       BCC.w JL_0_230A
0003E2B4 <PED.ab2@4799>       MOVE.b #$20,(A1)+
0003E2B8 <PED.ab2@4800> BRA.b JL_0_22FC
0003E2BE <PED.ab2@4803>     MOVE.l A4,comPtr_CurrentSourceLine
0003E2C4 <PED.ab2@4804>     JSR JL_0_55A2
0003E2C6 <PED.ab2@4805>     MOVEA.l (A4),A4
0003E2C8 <PED.ab2@4806>     ADDQ.l #1,D6
0003E2CE <PED.ab2@4807>   CMP.l comLong_BlockEndY,D6
0003E2D2 <PED.ab2@4808>   BLS.b JL_0_22CA                    ; -- next line until comLong_BlockEndY is reached
0003E2D8 <PED.ab2@4810>   JSR update_currsourceline
0003E2DE <PED.ab2@4811> JMP _redraw
0003E2E8 <PED.ab2@4815>   CMPI.l #$ffffFFFF,comLong_BlockEndY
0003E2EC <PED.ab2@4816>    BEQ.w setpointer_to_normal
0003E2F2 <PED.ab2@4818>   JSR move_to_blockstarty
0003E2F4 <PED.ab2@4819>   MOVEA.l A5,A4
0003E2FA <PED.ab2@4822>     MOVEA.l comPtr_Temp_TokenString2,A1
0003E2FE <PED.ab2@4823>     LEA $9(A4),A0
0003E304 <PED.ab2@4824>     MOVE.w comWord_DoTokenize,D0
0003E308 <PED.ab2@4825>     BNE.w JL_0_2352
0003E30A <PED.ab2@4828>       MOVE.b (A0)+,(A1)+
0003E30E <PED.ab2@4829>     BNE.b JL_0_234A
0003E312 <PED.ab2@4830> BRA.w JL_0_2356
0003E318 <PED.ab2@4833>     JSR detokenize_line
0003E31E <PED.ab2@4836>     MOVEA.l comPtr_Temp_TokenString2,A1
0003E320 <PED.ab2@4837>     MOVEA.l A1,A0
0003E326 <PED.ab2@4838>     MOVE.w tab_size,D0
0003E32A <PED.ab2@4839>     BEQ.w JL_0_2378
0003E32C <PED.ab2@4840>     SUBQ.w #1,D0
0003E32E <PED.ab2@4843>       TST.b (A0)+
0003E332 <PED.ab2@4844>       BEQ.w JL_0_2378
0003E336 <PED.ab2@4845>  DBF D0,JL_0_2368
0003E338 <PED.ab2@4848>       MOVE.b (A0)+,(A1)+
0003E33C <PED.ab2@4849>     BNE.b JL_0_2372
0003E33E <PED.ab2@4850>     SUBQ.w #1,A1
0003E344 <PED.ab2@4853>       CMPA.l comPtr_Temp_TokenString3,A1
0003E348 <PED.ab2@4854>       BCC.w JL_0_2386
0003E34C <PED.ab2@4855>       MOVE.b #$20,(A1)+
0003E350 <PED.ab2@4856> BRA.b JL_0_2378
0003E356 <PED.ab2@4859>     MOVE.l A4,comPtr_CurrentSourceLine
0003E35C <PED.ab2@4860>     JSR JL_0_55A2
0003E35E <PED.ab2@4861>     MOVEA.l (A4),A4
0003E360 <PED.ab2@4862>     ADDQ.l #1,D6
0003E366 <PED.ab2@4863>   CMP.l comLong_BlockEndY,D6
0003E36A <PED.ab2@4864>   BLS.b JL_0_2338
0003E370 <PED.ab2@4866>   JSR update_currsourceline
0003E376 <PED.ab2@4867> JMP _redraw
0003E37C <PED.ab2@4871>   LEA str_hexdigits,A1
0003E37E <PED.ab2@4872>   MOVEQ.l #$07,D2
0003E380 <PED.ab2@4875>     ROL.l #4,D0
0003E382 <PED.ab2@4876>     MOVE.b D0,D1
0003E386 <PED.ab2@4877>     ANDI.w #$F,D1
0003E38A <PED.ab2@4878>     MOVE.b $0(A1,D1.W),(A0)+
0003E38E <PED.ab2@4879>  DBF D2,JL_0_23A8
0003E390 <PED.ab2@4881> RTS
0003E3A0 <PED.ab2@4884> str_hexdigits:             Dc.b "0123456789ABCDEF"
0003E3A6 <PED.ab2@4885> str_temptedprefs:          Dc.b "T:TED_"
0003E3B4 <PED.ab2@4887> str_template_tempxtrafile: Dc.b "        .xtra",0 : Even
0003E3BA <PED.ab2@4893>   CLR.w comWord_SourceChanged
0003E3BE <PED.ab2@4895>   MOVEM.l D0-D2/A0-A1,-(A7)
0003E3C4 <PED.ab2@4896>   JSR delete_tempprefs
0003E3C8 <PED.ab2@4897>   MOVEM.l (A7)+,D0-D2/A0-A1
0003E3CE <PED.ab2@4899>   MOVEA.l _execbase,A6
0003E3D0 <PED.ab2@4900>   MOVE.l A0,-(A7)
0003E3D4 <PED.ab2@4901>   TST.l $4(A0)
0003E3D8 <PED.ab2@4902>    BEQ.w rem_file_from_base;JL_0_2432
0003E3DA <PED.ab2@4903>   TST.l (A0)
0003E3DE <PED.ab2@4904>    BEQ.w JL_0_2482
0003E3E0 <PED.ab2@4906>   MOVEA.l (A0),A1
0003E3E6 <PED.ab2@4907>   MOVE.l A1,actualfile
0003E3EA <PED.ab2@4908>   MOVEA.l $4(A0),A2
0003E3EC <PED.ab2@4909>   MOVE.l A1,(A2)
0003E3F0 <PED.ab2@4910>   MOVE.l A2,$4(A1)
0003E3F2 <PED.ab2@4911>   MOVEA.l A0,A1
0003E404 <PED.ab2@4912>   !newfree
0003E40A <PED.ab2@4914>   MOVEA.l actualfile,A0
0003E410 <PED.ab2@4915>   JSR GetXtraData
0003E416 <PED.ab2@4916>   JSR read_tempprefs
0003E41C <PED.ab2@4917>   JSR JL_0_2Dca8
0003E41E <PED.ab2@4918>   MOVEA.l (A7)+,A0
0003E420 <PED.ab2@4919> RTS
0003E422 <PED.ab2@4922>   TST.l (A0)
0003E426 <PED.ab2@4923>    BEQ.w JL_0_2466
0003E428 <PED.ab2@4924>   MOVEA.l (A0),A1
0003E42E <PED.ab2@4925>   MOVE.l A1,loadedfilesbase
0003E434 <PED.ab2@4926>   MOVE.l A1,actualfile
0003E438 <PED.ab2@4927>   CLR.l $4(A1)
0003E43A <PED.ab2@4928>   MOVEA.l A0,A1
0003E44C <PED.ab2@4929>   !newfree
0003E452 <PED.ab2@4930>   MOVEA.l actualfile,A0
0003E458 <PED.ab2@4931>   JSR GetXtraData
0003E45E <PED.ab2@4932>   JSR read_tempprefs
0003E464 <PED.ab2@4933>   JSR JL_0_2Dca8
0003E466 <PED.ab2@4934>   MOVEA.l (A7)+,A0
0003E468 <PED.ab2@4935> RTS
0003E46A <PED.ab2@4938>   MOVEA.l A0,A1
0003E47C <PED.ab2@4939>   !newfree
0003E482 <PED.ab2@4940>   CLR.l loadedfilesbase
0003E488 <PED.ab2@4941>   CLR.l AL_0_84B2
0003E48E <PED.ab2@4942>   CLR.l actualfile
0003E490 <PED.ab2@4943>   MOVEA.l (A7)+,A0
0003E492 <PED.ab2@4944> RTS
0003E496 <PED.ab2@4947>   TST.l $4(A0)
0003E49A <PED.ab2@4948>    BEQ.w JL_0_24B8
0003E49E <PED.ab2@4950>   MOVEA.l $4(A0),A1
0003E4A4 <PED.ab2@4951>   MOVE.l A1,AL_0_84B2
0003E4AA <PED.ab2@4952>   MOVE.l A1,actualfile
0003E4AC <PED.ab2@4953>   CLR.l (A1)
0003E4AE <PED.ab2@4954>   MOVEA.l A0,A1
0003E4C0 <PED.ab2@4955>   !newfree
0003E4C6 <PED.ab2@4956>   MOVEA.l actualfile,A0
0003E4CC <PED.ab2@4957>   JSR GetXtraData
0003E4D2 <PED.ab2@4958>   JSR read_tempprefs
0003E4D8 <PED.ab2@4959>   JSR JL_0_2Dca8
0003E4DA <PED.ab2@4960>   MOVEA.l (A7)+,A0
0003E4DC <PED.ab2@4961> RTS
0003E4DE <PED.ab2@4964>   MOVEA.l A0,A1
0003E4F0 <PED.ab2@4965>   !newfree
0003E4F6 <PED.ab2@4966>   CLR.l loadedfilesbase
0003E4FC <PED.ab2@4967>   CLR.l AL_0_84B2
0003E502 <PED.ab2@4968>   CLR.l actualfile
0003E504 <PED.ab2@4969>   MOVEA.l (A7)+,A0
0003E506 <PED.ab2@4970> RTS
0003E508 <PED.ab2@4975>   MOVE.l D0,-(A7)
0003E50E <PED.ab2@4976>   MOVE.l comFunc_CallDummy,D0
0003E512 <PED.ab2@4977>    BEQ.w exit_dummycall
0003E516 <PED.ab2@4979>   MOVEM.l D1-D7/A0-A6,-(A7)
0003E518 <PED.ab2@4980>   MOVEA.l D0,A0
0003E51A <PED.ab2@4981>   L_0_24E4: JSR (A0)
0003E51E <PED.ab2@4982>   MOVEM.l (A7)+,D1-D7/A0-A6
0003E548 <PED.ab2@4983>   !basic
0003E5A4 <PED.ab2@4984>   dummy.l = RTEZRequest("","The dummy call has been performed.","Ok")
0003E5C2 <PED.ab2@4985>   !asm
0003E5C4 <PED.ab2@4987>   MOVE.l (A7)+,D0
0003E5C6 <PED.ab2@4988> RTS
0003E5F0 <PED.ab2@4992> !basic
0003E61E <PED.ab2@4993>   error{"selected"}
0003E63C <PED.ab2@4994> !asm
0003E63E <PED.ab2@4995> RTS
0003E642 <PED.ab2@5001>   !regs2stack
0003E66C <PED.ab2@5002>   !basic
0003E67C <PED.ab2@5003>   mqualifier.w = Peek.w(?message_qualifier)
0003E68C <PED.ab2@5004>   mqualistor.w = Peek.w(?comWord_QualifierStore)
0003E692 <PED.ab2@5005>   Select mqualifier
0003E69E <PED.ab2@5006>      Case $0000                         ; -- CURSOR DOWN FOR FREEWHEEL
0003E6A0 <PED.ab2@5007>           Pop Select
0003E6BE <PED.ab2@5008>           !asm
0003E6C2 <PED.ab2@5009>           !stack2regs
0003E6C8 <PED.ab2@5010>           MOVE.l comLong_DisplayLineOffset,d0
0003E6CE <PED.ab2@5011>           ADD.l comLong_DisplayLine,D0
0003E6D4 <PED.ab2@5012>           ADD.l wheelstep,d0
0003E6DA <PED.ab2@5013>           JMP gotoline
0003E6EE <PED.ab2@5015>     Case $8000                         ; -- CURSOR DOWN
0003E6F0 <PED.ab2@5016>       Pop Select
0003E70E <PED.ab2@5017>       !asm
0003E712 <PED.ab2@5018>       !stack2regs
0003E71A <PED.ab2@5019>       MOVE.b #1,doedit2
0003E720 <PED.ab2@5020>       JMP movelinedown
0003E734 <PED.ab2@5022>     Case $8200                         ; -- CURSOR DOWN PRESSING
0003E736 <PED.ab2@5023>       Pop Select
0003E754 <PED.ab2@5024>       !asm
0003E758 <PED.ab2@5025>       !stack2regs
0003E760 <PED.ab2@5026>       MOVE.b #1,doedit2
0003E766 <PED.ab2@5027>       JMP movelinedown
0003E77A <PED.ab2@5031>     Case $8008                         ; -- CTRL + CURSOR DOWN
0003E77C <PED.ab2@5032>       Pop Select
0003E79A <PED.ab2@5033>       !asm
0003E79E <PED.ab2@5034>       !stack2regs
0003E7A4 <PED.ab2@5035>       JMP menu_bottom
0003E7B8 <PED.ab2@5037>     Case $8010                         ; -- LALT + CURSOR DOWN
0003E7BA <PED.ab2@5038>       Pop Select
0003E7D8 <PED.ab2@5039>       !asm
0003E7DC <PED.ab2@5040>       !stack2regs
0003E7E2 <PED.ab2@5041>       JMP jump_historydown
0003E7F6 <PED.ab2@5043>     Case $8009                         ; -- LSHIFT-CTRL + CURSOR DOWN
0003E7F8 <PED.ab2@5044>       Pop Select
0003E816 <PED.ab2@5045>       !asm
0003E820 <PED.ab2@5047>       CMPI.l #$ffffFFFF,comLong_BlockEndY
0003E824 <PED.ab2@5048>        BNE.w skip_setstart
0003E82A <PED.ab2@5049>       MOVE.w comWord_ColumnsOffset,D0
0003E830 <PED.ab2@5050>       ADD.w comWord_Column,D0
0003E836 <PED.ab2@5051>       JSR set_blockstart
0003E83A <PED.ab2@5053>       !stack2regs
0003E83E <PED.ab2@5054>       BSR movelinedown
0003E844 <PED.ab2@5055>       MOVE.w comWord_ColumnsOffset,D0
0003E84A <PED.ab2@5056>       ADD.w comWord_Column,D0
0003E850 <PED.ab2@5057>       JMP set_blockend
0003E856 <PED.ab2@5059>       Default
0003E858 <PED.ab2@5060>         Pop Select
0003E876 <PED.ab2@5061>       !asm
0003E87A <PED.ab2@5062>       !stack2regs
0003E880 <PED.ab2@5063>       MOVE.l comLong_DisplayLineOffset,D0
0003E886 <PED.ab2@5064>       ADD.l comLong_DisplayLine,D0
0003E88C <PED.ab2@5065>       ADD.l viewablelines,D0
0003E892 <PED.ab2@5066>       CMP.l comLong_TotalLines,D0
0003E896 <PED.ab2@5067>        BCS.w gotoline
0003E89C <PED.ab2@5068>       MOVE.l comLong_TotalLines,D0
0003E89E <PED.ab2@5069>       SUBQ.l #1,D0
0003E8A2 <PED.ab2@5070>       BRA.w gotoline
0003E8A4 <PED.ab2@5072>   End Select
0003E8C2 <PED.ab2@5074>   !asm
0003E8C6 <PED.ab2@5075>   !stack2regs
0003E8CA <PED.ab2@5076> BRA movelinedown
0003E8CE <PED.ab2@5080>   BSR checkedit2
0003E8D0 <PED.ab2@5101>     MOVE.l a0,-(a7)
0003E8D6 <PED.ab2@5102>     MOVE.l comLong_DisplayLineOffset,-(a7)
0003E8DC <PED.ab2@5103>     MOVE.l comPtr_CurrentSourceLine,a0
0003E8E4 <PED.ab2@5104>     CMP.l #";@@1",9(a0)
0003E8E8 <PED.ab2@5105>     BNE 'l1
0003E8EA <PED.ab2@5108>     MOVE.l (a0),d0
0003E8EE <PED.ab2@5109>     BEQ 'l1
0003E8F0 <PED.ab2@5110>     MOVE.l d0,a0
0003E8F6 <PED.ab2@5111>     ADDQ.l #1,comLong_DisplayLineOffset
0003E8FE <PED.ab2@5112>     CMP.l #";@@1",9(a0)
0003E902 <PED.ab2@5113>     BEQ 'l1
0003E90A <PED.ab2@5114>     CMP.l #";@@0",9(a0)
0003E90E <PED.ab2@5115>     BNE 'l2
0003E914 <PED.ab2@5116>     MOVE.l a0,comPtr_CurrentSourceLine
0003E91A <PED.ab2@5117>     JSR _redraw
0003E91C <PED.ab2@5118>     ADDQ.l #4,a7
0003E91E <PED.ab2@5119>     MOVE.l (a7)+,a0
0003E920 <PED.ab2@5120>   RTS
0003E926 <PED.ab2@5123>     MOVE.l (a7)+,comLong_DisplayLineOffset
0003E928 <PED.ab2@5124>     MOVE.l (a7)+,a0
0003E92A <PED.ab2@5126>   MOVE.l (A4),D0
0003E92E <PED.ab2@5127>   BNE.w JL_0_252E
0003E934 <PED.ab2@5130>   JSR set_pointernormal
0003E936 <PED.ab2@5131> RTS
0003E93C <PED.ab2@5135>   MOVE.l D0,comPtr_CurrentSourceLine
0003E942 <PED.ab2@5138>   MOVE.l comLong_DisplayLineOffset,D0
0003E948 <PED.ab2@5139>   ADD.l viewablelines,D0
0003E94E <PED.ab2@5140>   CMP.l comLong_TotalLines,D0
0003E952 <PED.ab2@5141>   BCC.w JUMP_JL_0_640C
0003E958 <PED.ab2@5142>   MOVE.l comLong_DisplayLine,D0
0003E95A <PED.ab2@5143>   ADDQ.l #1,D0
0003E960 <PED.ab2@5144>   ADD.l comLong_BoundLines,D0
0003E966 <PED.ab2@5145>   CMP.l viewablelines,D0
0003E96A <PED.ab2@5146>   BCS.w JUMP_JL_0_640C
0003E970 <PED.ab2@5147>   ADDQ.l #1,comLong_DisplayLineOffset
0003E976 <PED.ab2@5148>   JSR source_fullscroll_down
0003E97C <PED.ab2@5149> JMP JL_0_5B60
0003E982 <PED.ab2@5153> JMP JL_0_640C
0003E986 <PED.ab2@5158>   !regs2stack
0003E9B0 <PED.ab2@5159>   !basic
0003E9C0 <PED.ab2@5160>   mqualifier.w = Peek.w(?message_qualifier)
0003E9D0 <PED.ab2@5161>   mqualistor.w = Peek.w(?comWord_QualifierStore)
0003E9D6 <PED.ab2@5162>   Select mqualifier
0003E9E2 <PED.ab2@5163>     Case $0000                         ; cursor_up for freewheel
0003E9E4 <PED.ab2@5164>           Pop Select
0003EA02 <PED.ab2@5165>           !asm
0003EA06 <PED.ab2@5166>           !stack2regs
0003EA0C <PED.ab2@5168>           MOVE.l comLong_DisplayLineOffset,d0
0003EA12 <PED.ab2@5169>           ADD.l comLong_DisplayLine,D0
0003EA18 <PED.ab2@5170>           SUB.l wheelstep,d0
0003EA1E <PED.ab2@5171>           JMP gotoline
0003EA32 <PED.ab2@5173>     Case $8000                         ; -- just the key
0003EA34 <PED.ab2@5174>       Pop Select
0003EA52 <PED.ab2@5175>       !asm
0003EA56 <PED.ab2@5176>       !stack2regs
0003EA5E <PED.ab2@5177>       MOVE.b #1,doedit2
0003EA64 <PED.ab2@5178>       JMP movelineup
0003EA78 <PED.ab2@5180>     Case $8200                         ; -- pressing the key
0003EA7A <PED.ab2@5181>       Pop Select
0003EA98 <PED.ab2@5182>       !asm
0003EA9C <PED.ab2@5183>       !stack2regs
0003EAA4 <PED.ab2@5184>       MOVE.b #1,doedit2
0003EAAA <PED.ab2@5185>       JMP movelineup
0003EABE <PED.ab2@5189>     Case $8008                         ; -- CTRL
0003EAC0 <PED.ab2@5190>       Pop Select
0003EADE <PED.ab2@5191>       !asm
0003EAE2 <PED.ab2@5192>       !stack2regs
0003EAE8 <PED.ab2@5193>       JMP menu_top
0003EAFC <PED.ab2@5195>     Case $8010                         ; -- LALT
0003EAFE <PED.ab2@5196>       Pop Select
0003EB1C <PED.ab2@5197>       !asm
0003EB20 <PED.ab2@5198>       !stack2regs
0003EB26 <PED.ab2@5199>       JMP jump_historyup
0003EB3A <PED.ab2@5201>     Case $8009                         ; -- LSHIFT-CTRL
0003EB3C <PED.ab2@5202>       Pop Select
0003EB5A <PED.ab2@5203>       !asm
0003EB64 <PED.ab2@5205>       CMPI.l #$ffffFFFF,comLong_BlockEndY
0003EB68 <PED.ab2@5206>        BNE.w skip_setstart2
0003EB6E <PED.ab2@5207>       MOVE.w comWord_ColumnsOffset,D0
0003EB74 <PED.ab2@5208>       ADD.w comWord_Column,D0
0003EB7A <PED.ab2@5209>       JSR set_blockstart
0003EB7E <PED.ab2@5211>       !stack2regs
0003EB82 <PED.ab2@5212>       BSR movelineup
0003EB88 <PED.ab2@5213>       MOVE.w comWord_ColumnsOffset,D0
0003EB8E <PED.ab2@5214>       ADD.w comWord_Column,D0
0003EB94 <PED.ab2@5215>       JMP set_blockend
0003EB9A <PED.ab2@5217>     Default
0003EB9C <PED.ab2@5218>       Pop Select
0003EBBA <PED.ab2@5219>       !asm
0003EBBE <PED.ab2@5220>       !stack2regs
0003EBC4 <PED.ab2@5221>       MOVE.l comLong_DisplayLineOffset,D0
0003EBCA <PED.ab2@5222>       ADD.l comLong_DisplayLine,D0
0003EBD0 <PED.ab2@5223>       CMP.l viewablelines,D0
0003EBD4 <PED.ab2@5224>        BCC.w JL_0_2588
0003EBD6 <PED.ab2@5225>       MOVEQ.l #$00,D0
0003EBDA <PED.ab2@5226>       BRA.w gotoline
0003EBE0 <PED.ab2@5229>       SUB.l viewablelines,D0
0003EBE4 <PED.ab2@5230>       BRA.w gotoline
0003EBE6 <PED.ab2@5232>   End Select
0003EC04 <PED.ab2@5234>   !asm
0003EC08 <PED.ab2@5235>   !stack2regs
0003EC0C <PED.ab2@5237> BRA.w movelineup
0003EC10 <PED.ab2@5241>   BSR checkedit2
0003EC12 <PED.ab2@5266>    MOVE.l a2,-(a7)
0003EC18 <PED.ab2@5267>    MOVE.l comPtr_CurrentSourceLine,a4
0003EC1A <PED.ab2@5268>    MOVE.l a4,a2
0003EC22 <PED.ab2@5270>    CMP.l #";@@0",9(a2)
0003EC26 <PED.ab2@5271>    BNE 'l1
0003EC2C <PED.ab2@5274>    JSR doreverse
0003EC32 <PED.ab2@5275>    TST.l foldnum
0003EC36 <PED.ab2@5276>    BEQ 'l1
0003EC3A <PED.ab2@5277>    MOVE.l 4(a2),d0
0003EC3E <PED.ab2@5278>    BEQ 'l1
0003EC40 <PED.ab2@5279>    MOVE.l d0,a2
0003EC46 <PED.ab2@5280>    SUBQ.l #1,comLong_DisplayLineOffset
0003EC4E <PED.ab2@5281>    CMP.l #";@@1",9(a2)
0003EC52 <PED.ab2@5282>    BNE 'l2
0003EC58 <PED.ab2@5283>    MOVE.l a2,comPtr_CurrentSourceLine
0003EC5E <PED.ab2@5284>    JSR _redraw
0003EC60 <PED.ab2@5285>    MOVE.l (a7)+,a2
0003EC62 <PED.ab2@5286>   RTS
0003EC64 <PED.ab2@5289>    MOVE.l (a7)+,a0
0003EC68 <PED.ab2@5291>   MOVE.l $4(A4),D0
0003EC6C <PED.ab2@5292>   BEQ.b setpointer_to_normal
0003EC72 <PED.ab2@5293>   MOVE.l D0,comPtr_CurrentSourceLine
0003EC78 <PED.ab2@5294>   MOVE.l comLong_DisplayLineOffset,D0
0003EC7C <PED.ab2@5295>   BEQ.w JUMP_JL_0_642A
0003EC82 <PED.ab2@5296>   MOVE.l comLong_DisplayLine,D0
0003EC88 <PED.ab2@5297>   CMP.l comLong_BoundLines,D0
0003EC8C <PED.ab2@5298>   BHI.w JUMP_JL_0_642A
0003EC92 <PED.ab2@5299>   SUBQ.l #1,comLong_DisplayLineOffset
0003EC98 <PED.ab2@5300>   JSR source_fullscroll_up
0003EC9E <PED.ab2@5301> JMP JL_0_5B24
0003ECA4 <PED.ab2@5304> JMP JL_0_642A
0003ECA8 <PED.ab2@5308>   LEA $9(A4),A0
0003ECAA <PED.ab2@5309>   TST.b (A0)
0003ECAE <PED.ab2@5310>   BEQ.w setpointer_to_normal
0003ECB0 <PED.ab2@5311>   MOVEQ.l #-$01,D0
0003ECB2 <PED.ab2@5314>   ADDQ.w #1,D0
0003ECB6 <PED.ab2@5315>   CMPI.b #$20,(A0)+
0003ECBA <PED.ab2@5316>   BEQ.b JL_0_25CC
0003ECBC <PED.ab2@5317>   MOVEA.l A4,A1
0003ECC2 <PED.ab2@5318>   MOVE.l comLong_DisplayLineOffset,D1
0003ECC8 <PED.ab2@5319>   ADD.l comLong_DisplayLine,D1
0003ECCA <PED.ab2@5320>   MOVE.w D1,D2
0003ECCE <PED.ab2@5323>     BEQ.w JL_0_2606
0003ECD2 <PED.ab2@5324>     MOVEA.l $4(A1),A1
0003ECD6 <PED.ab2@5325>     LEA $9(A1),A0
0003ECD8 <PED.ab2@5326>     MOVEQ.l #-$01,D3
0003ECDA <PED.ab2@5329>     ADDQ.w #1,D3
0003ECDE <PED.ab2@5330>     CMPI.b #$20,(A0)+
0003ECE2 <PED.ab2@5331>      BEQ.b JL_0_25EE
0003ECE4 <PED.ab2@5332>     TST.b -(A0)
0003ECE8 <PED.ab2@5333>      BEQ.w JL_0_2602
0003ECEA <PED.ab2@5334>     CMP.w D0,D3
0003ECEE <PED.ab2@5335>      BLT.w JL_0_2606
0003ECF0 <PED.ab2@5338>     SUBQ.w #1,D1
0003ECF4 <PED.ab2@5339> BRA.b JL_0_25E0
0003ECF6 <PED.ab2@5342>   MOVEA.l A4,A1
0003ECF8 <PED.ab2@5345>     MOVE.l (A1),D3
0003ECFC <PED.ab2@5346>     BEQ.w JL_0_262E
0003ECFE <PED.ab2@5347>     MOVEA.l D3,A1
0003ED02 <PED.ab2@5348>     LEA $9(A1),A0
0003ED04 <PED.ab2@5349>     MOVEQ.l #-$01,D3
0003ED06 <PED.ab2@5352>     ADDQ.w #1,D3
0003ED0A <PED.ab2@5353>     CMPI.b #$20,(A0)+
0003ED0E <PED.ab2@5354>      BEQ.b JL_0_2616
0003ED10 <PED.ab2@5355>     TST.b -(A0)
0003ED14 <PED.ab2@5356>      BEQ.w JL_0_262A
0003ED16 <PED.ab2@5357>     CMP.w D0,D3
0003ED1A <PED.ab2@5358>      BLT.w JL_0_262E
0003ED1C <PED.ab2@5361>     ADDQ.w #1,D2
0003ED20 <PED.ab2@5362> BRA.b JL_0_2608
0003ED26 <PED.ab2@5365>   MOVE.l D1,comLong_BlockStartY
0003ED2C <PED.ab2@5366>   CLR.w comLong_BlockStartX
0003ED32 <PED.ab2@5367>   MOVE.l D2,comLong_BlockEndY
0003ED38 <PED.ab2@5368>   MOVE.w comWord_MaxColumns,D0
0003ED3A <PED.ab2@5369>   SUBQ.w #1,D0
0003ED40 <PED.ab2@5370>   MOVE.w D0,comLong_BlockEndX
0003ED46 <PED.ab2@5371>   JSR JL_0_56BA
0003ED4C <PED.ab2@5372> JMP _redraw
0003ED4E <PED.ab2@5375> RTS
0003ED54 <PED.ab2@5379>   CLR.b nodelete
0003ED5A <PED.ab2@5380>   TST.b new_editmode
0003ED5E <PED.ab2@5381>    BEQ 'l1
0003ED64 <PED.ab2@5382>   TST.b doedit2
0003ED68 <PED.ab2@5383>    BEQ 'l1
0003ED6E <PED.ab2@5384>   MOVE.b doedit2,d0
0003ED74 <PED.ab2@5385>   CLR.b doedit2
0003ED7E <PED.ab2@5386>   CMP.l  #$ffffffff,comLong_BlockEndY
0003ED82 <PED.ab2@5387>    BEQ 'l1
0003ED86 <PED.ab2@5388>   MOVEM.l d0-d7/a0-a6,-(a7)
0003ED8A <PED.ab2@5389>   CMP.b #2,d0
0003ED8E <PED.ab2@5390>    BNE 'l2
0003ED94 <PED.ab2@5391>   JSR arexxfunc_cut
0003ED9A <PED.ab2@5392>   MOVE.l comLong_BlockStartY,d0
0003EDA0 <PED.ab2@5393>   JSR gotoline
0003EDAA <PED.ab2@5394>   MOVE.w comLong_BlockStartX,comWord_Column
0003EDB0 <PED.ab2@5395>   TST.b nodisplaybeep
0003EDB4 <PED.ab2@5396>    BNE 'l2
0003EDBA <PED.ab2@5397>   MOVEA.l ptr_pedscreen,A0
0003EDC0 <PED.ab2@5398>   MOVEA.l _intuibase,A6
0003EDC4 <PED.ab2@5399>   JSR _DisplayBeep(A6)
0003EDCE <PED.ab2@5402>   MOVE.l #$ffffffff,comLong_BlockEndY
0003EDD4 <PED.ab2@5403>   JSR cursor_off
0003EDDC <PED.ab2@5404>   MOVE.b #1,nodelete
0003EDE2 <PED.ab2@5407>   JSR _redraw
0003EDE6 <PED.ab2@5408>   MOVEM.l (a7)+,d0-d7/a0-a6
0003EDE8 <PED.ab2@5411> RTS
0003EDEE <PED.ab2@5415>   JSR allocnewline
0003EDF2 <PED.ab2@5416>   BEQ.w JUMP_JL_0_4942
0003EDFA <PED.ab2@5419>   MOVE.w #$FFFF,comWord_SourceChanged
0003EE00 <PED.ab2@5420>   MOVE.l comLong_DisplayLineOffset,D0
0003EE06 <PED.ab2@5421>   ADD.l comLong_DisplayLine,D0
0003EE0C <PED.ab2@5422>   JSR JL_0_57B6
0003EE12 <PED.ab2@5423>   ADDQ.l #1,comLong_TotalLines
0003EE16 <PED.ab2@5424>   MOVE.l $4(A4),D1
0003EE1A <PED.ab2@5425>   BEQ.w JL_0_268C
0003EE1C <PED.ab2@5426>   MOVEA.l D1,A1
0003EE1E <PED.ab2@5427>   MOVE.l A0,(A1)
0003EE22 <PED.ab2@5428>   MOVE.l A1,$4(A0)
0003EE26 <PED.ab2@5429> BRA.w JL_0_2692
0003EE2C <PED.ab2@5432>   MOVE.l A0,comPtr_FirstSourceLine
0003EE2E <PED.ab2@5435>   MOVE.l A4,(A0)
0003EE32 <PED.ab2@5436>   MOVE.l A0,$4(A4)
0003EE38 <PED.ab2@5437>   MOVE.l A0,comPtr_CurrentSourceLine
0003EE3E <PED.ab2@5438>   MOVE.l comLong_DisplayLine,D7
0003EE44 <PED.ab2@5439>   JSR source_partscroll_up
0003EE4A <PED.ab2@5440> JMP JL_0_57E0
0003EE50 <PED.ab2@5443> JMP JL_0_4942
0003EE52 <PED.ab2@5447>   MOVEQ.l #$00,D5
0003EE58 <PED.ab2@5448>   MOVE.w comWord__AL_0_8A6A,D5
0003EE5E <PED.ab2@5449>   MOVEA.l AL_0_5BB2,A1
0003EE60 <PED.ab2@5450>   TST.b (A1)
0003EE64 <PED.ab2@5451>   BEQ.w JUMP_JL_0_76E8
0003EE6A <PED.ab2@5452>   MOVE.l comPtr_Temp_TokenString2,-(A7)
0003EE70 <PED.ab2@5453>   MOVE.l A1,comPtr_Temp_TokenString2
0003EE76 <PED.ab2@5454>   JSR JL_0_4F1A
0003EE7C <PED.ab2@5455>   MOVE.l (A7)+,comPtr_Temp_TokenString2
0003EE80 <PED.ab2@5456>   BSR.b JL_0_265E
0003EE86 <PED.ab2@5457>   JSR print_current_sourceline
0003EE88 <PED.ab2@5458>   MOVEQ.l #$00,D0
0003EE8E <PED.ab2@5459>   MOVE.l comLong_DisplayLineOffset,D0
0003EE94 <PED.ab2@5460>   ADD.l comLong_DisplayLine,D0
0003EE9A <PED.ab2@5461>   JSR JL_0_57B6
0003EE9C <PED.ab2@5462> RTS
0003EEA2 <PED.ab2@5465> JMP JL_0_76E8
0003EEAA <PED.ab2@5469>   MOVE.w #$FFFF,comWord_SourceChanged
0003EEB4 <PED.ab2@5470>   CMPI.l #$ffffFFFF,comLong_BlockEndY
0003EEB8 <PED.ab2@5471>    BEQ.w JL_0_2738
0003EEBE <PED.ab2@5472>   MOVE.l comLong_DisplayLineOffset,D0
0003EEC4 <PED.ab2@5473>   ADD.l comLong_DisplayLine,D0
0003EECA <PED.ab2@5474>   CMP.l comLong_BlockStartY,D0
0003EECE <PED.ab2@5475>    BCS.w JL_0_272C
0003EED4 <PED.ab2@5476>   CMP.l comLong_BlockEndY,D0
0003EED8 <PED.ab2@5477>    BHI.w JL_0_2738
0003EEDE <PED.ab2@5478>   SUBQ.l #1,comLong_BlockEndY
0003EEE4 <PED.ab2@5479>   MOVE.l comLong_BlockEndY,D0
0003EEEA <PED.ab2@5480>   CMP.l comLong_BlockStartY,D0
0003EEEE <PED.ab2@5481>    BCC.w JL_0_2738
0003EEF4 <PED.ab2@5482>   CLR.l comLong_BlockEndY
0003EEFA <PED.ab2@5485>   SUBQ.l #1,comLong_BlockStartY
0003EF00 <PED.ab2@5486>   SUBQ.l #1,comLong_BlockEndY
0003EF02 <PED.ab2@5489>   MOVE.l (A4),D7
0003EF06 <PED.ab2@5490>    BEQ.w JL_0_2776
0003EF0C <PED.ab2@5491>   SUBQ.l #1,comLong_TotalLines
0003EF10 <PED.ab2@5492>   MOVE.l $4(A4),D6
0003EF16 <PED.ab2@5493>    JSR JL_0_6BD2
0003EF18 <PED.ab2@5494>   MOVEA.l D7,A1
0003EF1C <PED.ab2@5495>   MOVE.l D6,$4(A1)
0003EF20 <PED.ab2@5496>    BNE.w JL_0_2760
0003EF26 <PED.ab2@5497>   MOVE.l A1,comPtr_FirstSourceLine
0003EF2A <PED.ab2@5498> BRA.w JL_0_2764
0003EF2C <PED.ab2@5501>   MOVEA.l D6,A0
0003EF2E <PED.ab2@5502>   MOVE.l D7,(A0)
0003EF34 <PED.ab2@5505>   MOVE.l D7,comPtr_CurrentSourceLine
0003EF3A <PED.ab2@5506>   MOVE.l comLong_DisplayLine,D7
0003EF40 <PED.ab2@5507>   JSR source_partscroll_down
0003EF46 <PED.ab2@5508> JMP JL_0_5B60
0003EF4A <PED.ab2@5512>   MOVE.l $4(A4),D6
0003EF4E <PED.ab2@5513>   BEQ.w JL_0_27C2
0003EF54 <PED.ab2@5514>   SUBQ.l #1,comLong_TotalLines
0003EF5A <PED.ab2@5515>   JSR JL_0_6BD2
0003EF5C <PED.ab2@5516>   MOVEA.l D6,A0
0003EF62 <PED.ab2@5517>   MOVE.l A0,comPtr_CurrentSourceLine
0003EF68 <PED.ab2@5518>   MOVE.l A0,comPtr_LastSourceLine
0003EF6A <PED.ab2@5519>   CLR.l (A0)
0003EF70 <PED.ab2@5520>   MOVE.l comLong_DisplayLineOffset,D0
0003EF74 <PED.ab2@5521>   BEQ.w JL_0_27B6
0003EF7A <PED.ab2@5522>   SUBQ.l #1,comLong_DisplayLineOffset
0003EF80 <PED.ab2@5523>   MOVE.l comLong_DisplayLine,D7
0003EF86 <PED.ab2@5524>   JSR source_partscroll_down
0003EF8C <PED.ab2@5525>   JSR source_fullscroll_up
0003EF92 <PED.ab2@5526> JMP JL_0_5B24
0003EF98 <PED.ab2@5530>   MOVE.l comLong_DisplayLine,D7
0003EF9E <PED.ab2@5531>   JSR source_partscroll_down
0003EFA4 <PED.ab2@5532> JMP JL_0_642A
0003EFAA <PED.ab2@5536>    JSR JL_0_6BD2
0003EFB0 <PED.ab2@5537> JMP JL_0_5B00
0003EFB2 <PED.ab2@5541>   MOVE.l (A4),D0
0003EFB6 <PED.ab2@5542>   BEQ.w setpointer_to_normal
0003EFBE <PED.ab2@5543>   MOVE.w #$FFFF,comWord_SourceChanged
0003EFC0 <PED.ab2@5544>   MOVEA.l D0,A5
0003EFC6 <PED.ab2@5545>   MOVEA.l textbufferaddr,A2
0003EFCC <PED.ab2@5546>   ADDA.w comWord_TextBufferOffset,A2
0003EFD2 <PED.ab2@5547>   MOVE.w comWord_MaxColumns,D0
0003EFD4 <PED.ab2@5550>   SUBQ.w #1,D0
0003EFD8 <PED.ab2@5551>    BMI.w JL_0_27F4
0003EFDE <PED.ab2@5552>   CMPI.b #$20,$0(A2,D0.W)
0003EFE2 <PED.ab2@5553>    BEQ.b JL_0_27E6
0003EFE4 <PED.ab2@5556>   ADDQ.w #1,D0
0003EFEE <PED.ab2@5557>   CMPI.l #$ffffFFFF,comLong_BlockEndY
0003EFF2 <PED.ab2@5558>    BEQ.w JL_0_2880
0003EFF8 <PED.ab2@5559>   MOVE.l comLong_DisplayLineOffset,D1
0003EFFE <PED.ab2@5560>   ADD.l comLong_DisplayLine,D1
0003F004 <PED.ab2@5561>   CMP.l comLong_BlockEndY,D1
0003F008 <PED.ab2@5562>    BCC.w JL_0_2880
0003F00A <PED.ab2@5563>   ADDQ.l #1,D1
0003F010 <PED.ab2@5564>   CMP.l comLong_BlockStartY,D1
0003F014 <PED.ab2@5565>    BEQ.w JL_0_282C
0003F018 <PED.ab2@5566>    BCS.w JL_0_2874
0003F01E <PED.ab2@5567>   CMP.l comLong_BlockEndY,D1
0003F022 <PED.ab2@5568>    BEQ.w JL_0_283E
0003F026 <PED.ab2@5569> BRA.w JL_0_287A
0003F02C <PED.ab2@5572>   CMP.l comLong_BlockEndY,D1
0003F030 <PED.ab2@5573>    BEQ.w JL_0_2854
0003F036 <PED.ab2@5574>   ADD.w D0,comLong_BlockStartX
0003F03A <PED.ab2@5575> BRA.w JL_0_2870
0003F040 <PED.ab2@5578>   CMP.l comLong_BlockStartY,D1
0003F044 <PED.ab2@5579>    BEQ.w JL_0_2854
0003F04A <PED.ab2@5580>   ADD.w D0,comLong_BlockEndX
0003F050 <PED.ab2@5581>    JSR JL_0_7A14
0003F054 <PED.ab2@5582> BRA.w JL_0_287A
0003F05A <PED.ab2@5585>   MOVE.w comLong_BlockEndX,D3
0003F060 <PED.ab2@5586>   SUB.w comLong_BlockStartX,D3
0003F066 <PED.ab2@5587>   MOVE.w comLong_BlockStartX,D2
0003F068 <PED.ab2@5588>   ADD.w D0,D2
0003F06E <PED.ab2@5589>   MOVE.w D2,comLong_BlockStartX
0003F070 <PED.ab2@5590>   ADD.w D3,D2
0003F076 <PED.ab2@5591>   MOVE.w D2,comLong_BlockEndX
0003F07C <PED.ab2@5593>   JSR JL_0_7A14
0003F082 <PED.ab2@5596>   SUBQ.l #1,comLong_BlockStartY
0003F088 <PED.ab2@5599>   SUBQ.l #1,comLong_BlockEndY
0003F08E <PED.ab2@5602>   MOVEA.l comPtr_Temp_TokenString2,A0
0003F092 <PED.ab2@5603>   LEA $0(A0,D0.W),A1
0003F094 <PED.ab2@5606>     SUBQ.w #1,D0
0003F098 <PED.ab2@5607>     BMI.w JL_0_2896
0003F09E <PED.ab2@5608>     MOVE.b $0(A2,D0.W),$0(A0,D0.W)
0003F0A2 <PED.ab2@5609> BRA.b JL_0_2888
0003F0A6 <PED.ab2@5612>   LEA $9(A5),A0
0003F0AA <PED.ab2@5615>     CMP.b #32,(a0)                 ;join without space
0003F0AE <PED.ab2@5616>     BNE 'l1
0003F0B0 <PED.ab2@5617>     ADDQ.l #1,a0
0003F0B4 <PED.ab2@5618> BRA 'l2
0003F0BA <PED.ab2@5621>    MOVE.w comWord_DoTokenize,D0
0003F0BE <PED.ab2@5622>    BNE.w JL_0_28AE
0003F0C0 <PED.ab2@5625>   MOVE.b (A0)+,(A1)+
0003F0C4 <PED.ab2@5626>    BNE.b JL_0_28A4
0003F0C6 <PED.ab2@5627>   SUBQ.w #1,A1
0003F0CA <PED.ab2@5628> BRA.w JL_0_28B2
0003F0D0 <PED.ab2@5631>   JSR detokenize_line
0003F0D6 <PED.ab2@5634>     CMPA.l comPtr_Temp_TokenString3,A1
0003F0DA <PED.ab2@5635>     BCC.w JL_0_28C0
0003F0DE <PED.ab2@5636>     MOVE.b #$20,(A1)+
0003F0E2 <PED.ab2@5637> BRA.b JL_0_28B2
0003F0E8 <PED.ab2@5640>   MOVEA.l comPtr_Temp_TokenString2,A2
0003F0EE <PED.ab2@5641>   JSR parse_line
0003F0F4 <PED.ab2@5642>   JSR JL_0_55AA
0003F0F6 <PED.ab2@5643>   MOVEA.l (A4),A1
0003F0F8 <PED.ab2@5644>   MOVE.l (A1),D0
0003F0FC <PED.ab2@5645>    BEQ.w JL_0_28E0
0003F0FE <PED.ab2@5646>   MOVEA.l D0,A0
0003F100 <PED.ab2@5647>   MOVE.l A0,(A4)
0003F104 <PED.ab2@5648>   MOVE.l A4,$4(A0)
0003F108 <PED.ab2@5649> BRA.w JL_0_28E8
0003F10E <PED.ab2@5652>   MOVE.l A4,comPtr_LastSourceLine
0003F110 <PED.ab2@5653>   CLR.l (A4)
0003F112 <PED.ab2@5656>   MOVEQ.l #$00,D0
0003F116 <PED.ab2@5657>   ADD.b $8(A1),D0
0003F11C <PED.ab2@5658>   MOVEA.l _execbase,A6
0003F122 <PED.ab2@5659>   ST comWord__AL_0_86C0
0003F134 <PED.ab2@5660>    !newfree
0003F13A <PED.ab2@5661>   SUBQ.l #1,comLong_TotalLines
0003F140 <PED.ab2@5662> JMP _redraw
0003F146 <PED.ab2@5666>   TST.b new_editmode
0003F14A <PED.ab2@5667>   BNE AJL_0_2A82b
0003F152 <PED.ab2@5670>   MOVE.w #$FFFF,comWord_SourceChanged
0003F158 <PED.ab2@5671>   MOVE.w comWord_ColumnsOffset,D0
0003F15E <PED.ab2@5672>   ADD.w comWord_Column,D0
0003F168 <PED.ab2@5673>   CMPI.l #$ffffFFFF,comLong_BlockEndY
0003F16C <PED.ab2@5674>   BEQ.w JL_0_29BC
0003F172 <PED.ab2@5675>   MOVE.l comLong_DisplayLineOffset,D2
0003F178 <PED.ab2@5676>   ADD.l comLong_DisplayLine,D2
0003F17E <PED.ab2@5677>   CMP.l comLong_BlockEndY,D2
0003F182 <PED.ab2@5678>   BHI.w JL_0_29BC
0003F186 <PED.ab2@5679>   BEQ.w JL_0_2962
0003F18C <PED.ab2@5680>   CMP.l comLong_BlockStartY,D2
0003F190 <PED.ab2@5681>    BCS.w JL_0_29B0
0003F194 <PED.ab2@5682>    BNE.w JL_0_29B6
0003F19A <PED.ab2@5683>   CMP.l comLong_BlockEndY,D2
0003F19E <PED.ab2@5684>    BEQ.w JL_0_2982
0003F1A4 <PED.ab2@5685>   CMP.w comLong_BlockStartX,D0
0003F1A8 <PED.ab2@5686>    BHI.w JL_0_29B6
0003F1AE <PED.ab2@5687>   MOVE.w comLong_BlockStartX,D2
0003F1B0 <PED.ab2@5688>   SUB.w D0,D2
0003F1B6 <PED.ab2@5689>   MOVE.w D2,comLong_BlockStartX
0003F1BA <PED.ab2@5690> BRA.w JL_0_29B0
0003F1C0 <PED.ab2@5693>   CMP.l comLong_BlockStartY,D2
0003F1C4 <PED.ab2@5694>    BEQ.w JL_0_2982
0003F1CA <PED.ab2@5695>   CMP.w comLong_BlockEndX,D0
0003F1CE <PED.ab2@5696>    BHI.w JL_0_29BC
0003F1D4 <PED.ab2@5699>   MOVE.w comLong_BlockEndX,D2
0003F1D6 <PED.ab2@5700>   SUB.w D0,D2
0003F1DC <PED.ab2@5701>   MOVE.w D2,comLong_BlockEndX
0003F1E0 <PED.ab2@5702> BRA.w JL_0_29B6
0003F1E6 <PED.ab2@5705>   CMP.w comLong_BlockEndX,D0
0003F1EA <PED.ab2@5706>    BHI.w JL_0_29BC
0003F1F0 <PED.ab2@5707>   CMP.w comLong_BlockStartX,D0
0003F1F4 <PED.ab2@5708>    BHI.b JL_0_2972
0003F1FA <PED.ab2@5709>   MOVE.w comLong_BlockEndX,D3
0003F200 <PED.ab2@5710>   SUB.w comLong_BlockStartX,D3
0003F206 <PED.ab2@5711>   MOVE.w comLong_BlockStartX,D2
0003F208 <PED.ab2@5712>   SUB.w D0,D2
0003F20E <PED.ab2@5713>   MOVE.w D2,comLong_BlockStartX
0003F210 <PED.ab2@5714>   ADD.w D3,D2
0003F216 <PED.ab2@5715>   MOVE.w D2,comLong_BlockEndX
0003F21C <PED.ab2@5716>    JSR JL_0_7A14
0003F222 <PED.ab2@5719>   ADDQ.l #1,comLong_BlockStartY
0003F228 <PED.ab2@5722>   ADDQ.l #1,comLong_BlockEndY
0003F22E <PED.ab2@5725>   MOVEA.l comPtr_Temp_TokenString2,A0
0003F234 <PED.ab2@5726>   MOVEA.l textbufferaddr,A2
0003F23A <PED.ab2@5727>   ADDA.w comWord_TextBufferOffset,A2
0003F240 <PED.ab2@5728>   TST.b new_editmode
0003F244 <PED.ab2@5729>   BEQ JL_0_29C8
0003F24A <PED.ab2@5730>   CLR.w comWord_Column
0003F24C <PED.ab2@5731>   MOVE.l d0,-(a7)
0003F24E <PED.ab2@5732>   MOVEQ #0,d0
0003F254 <PED.ab2@5735>   CMP.b #$20,0(a2,d0)
0003F258 <PED.ab2@5736>   BNE 'l1
0003F25A <PED.ab2@5737>   ADDQ #1,d0
0003F25E <PED.ab2@5738>   MOVE.b #32,(a0)+                   ;split line to column
0003F264 <PED.ab2@5739>   CMP.l #MAX_Columns,d0
0003F268 <PED.ab2@5740>   BGE 'l3
0003F26C <PED.ab2@5741> BRA 'l2
0003F272 <PED.ab2@5744>   TST.w comWord_ColumnsOffset
0003F276 <PED.ab2@5745>     BEQ 'ld
0003F27C <PED.ab2@5746>     CLR.w comWord_ColumnsOffset
0003F282 <PED.ab2@5747>     CMP.w visiblecolumns,d0
0003F286 <PED.ab2@5748>     BLE 'ld
0003F28C <PED.ab2@5749>     SUB.w visiblecolumns,d0
0003F296 <PED.ab2@5750>    MOVE.w visiblecolumns,comWord_ColumnsOffset
0003F29C <PED.ab2@5751>     CMP.w visiblecolumns,d0
0003F2A0 <PED.ab2@5752>     BLE 'ld
0003F2A6 <PED.ab2@5753>     SUB.w visiblecolumns,d0
0003F2A8 <PED.ab2@5754>     MOVE.l d0,-(a7)
0003F2AE <PED.ab2@5755>     MOVE.w comWord_ColumnsOffset,d0
0003F2B4 <PED.ab2@5756>     ADD.w visiblecolumns,d0
0003F2BA <PED.ab2@5757>     MOVE.w d0,comWord_ColumnsOffset
0003F2BC <PED.ab2@5758>     MOVE.l (a7)+,d0
0003F2C2 <PED.ab2@5761>     MOVE.w d0,comWord_Column
0003F2C4 <PED.ab2@5764>   MOVE.l (a7)+,d0
0003F2C8 <PED.ab2@5767>   MOVE.b $0(A2,D0.W),(A0)+
0003F2CE <PED.ab2@5768>   MOVE.b #$20,$0(A2,D0.W)
0003F2D0 <PED.ab2@5769>   ADDQ.w #1,D0
0003F2D6 <PED.ab2@5770>   CMP.w comWord_MaxColumns,D0
0003F2DA <PED.ab2@5771>    BCS.b JL_0_29C8
0003F2E0 <PED.ab2@5774>   CMPA.l comPtr_Temp_TokenString3,A0
0003F2E4 <PED.ab2@5775>    BCC.w JL_0_29E8
0003F2E8 <PED.ab2@5776>   MOVE.b #$20,(A0)+
0003F2EC <PED.ab2@5777> BRA.b JL_0_29DA
0003F2F2 <PED.ab2@5780>    JSR parse_line
0003F2F8 <PED.ab2@5781>    JSR JL_0_55AA
0003F2FE <PED.ab2@5782>   MOVEA.l comPtr_Temp_TokenString2,A2
0003F304 <PED.ab2@5783>    JSR parse_line
0003F306 <PED.ab2@5784>   MOVE.l D5,D0
0003F30A <PED.ab2@5785>   ADDI.w #$9,D0
0003F30C <PED.ab2@5786>   MOVEQ.l #$01,D1
0003F312 <PED.ab2@5787>   MOVEA.l _execbase,A6
0003F318 <PED.ab2@5788>   JSR JL_0_492E
0003F31A <PED.ab2@5789>   MOVEA.l D0,A0
0003F31E <PED.ab2@5790>   MOVE.b D5,$8(A0)
0003F322 <PED.ab2@5791>   LEA $9(A0),A0
0003F328 <PED.ab2@5792>   MOVEA.l comPtr_Temp_TokenString1,A1
0003F32A <PED.ab2@5795>   MOVE.b (A1)+,(A0)+
0003F32E <PED.ab2@5796>    BNE.b JL_0_2A16
0003F330 <PED.ab2@5797>   MOVEA.l D0,A0
0003F334 <PED.ab2@5798>   MOVE.l A4,$4(A0)
0003F336 <PED.ab2@5799>   MOVE.l (A4),D1
0003F33A <PED.ab2@5800>    BEQ.w JL_0_2A32
0003F33C <PED.ab2@5801>   MOVEA.l D1,A1
0003F340 <PED.ab2@5802>   MOVE.l A0,$4(A1)
0003F342 <PED.ab2@5803>   MOVE.l A1,(A0)
0003F346 <PED.ab2@5804> BRA.w JL_0_2A3A
0003F34C <PED.ab2@5807>   MOVE.l A0,comPtr_LastSourceLine
0003F34E <PED.ab2@5808>   CLR.l (A0)
0003F350 <PED.ab2@5811>   MOVE.l A0,(A4)
0003F356 <PED.ab2@5812>   ADDQ.l #1,comLong_TotalLines
0003F35C <PED.ab2@5813>   TST.b new_editmode
0003F360 <PED.ab2@5814>   BNE 'l1
0003F366 <PED.ab2@5815>   CLR.w comWord_Column
0003F36A <PED.ab2@5818>   BSR movelinedown
0003F370 <PED.ab2@5819> JMP _redraw
0003F376 <PED.ab2@5823>   TST.w auto_indent
0003F37A <PED.ab2@5824>    BEQ.w JL_0_2A7A
0003F37E <PED.ab2@5825>   MOVEM.l D0/A0,-(A7)
0003F384 <PED.ab2@5826>   MOVEA.l comPtr_CurrentSourceLine,A0
0003F388 <PED.ab2@5827>   LEA $9(A0),A0
0003F38A <PED.ab2@5828>   MOVEQ.l #-$01,D1
0003F38C <PED.ab2@5831>   ADDQ.w #1,D1
0003F38E <PED.ab2@5832>   MOVE.b (A0)+,D0
0003F392 <PED.ab2@5833>    BEQ.w JL_0_2A6E
0003F396 <PED.ab2@5834>   CMP.b #$20,D0
0003F39A <PED.ab2@5835>    BEQ.b JL_0_2A60
0003F39E <PED.ab2@5838>   MOVEM.l (A7)+,D0/A0
0003F3A4 <PED.ab2@5839>   MOVE.w D1,comWord_Column
0003F3A6 <PED.ab2@5840> RTS
0003F3AC <PED.ab2@5844>   CLR.w comWord_Column
0003F3AE <PED.ab2@5845> RTS
0003F3B4 <PED.ab2@5853>   MOVE.l comPtr_CurrentSourceLine,a4
0003F3BA <PED.ab2@5854>   MOVE.w comWord_QualifierStore,D0
0003F3BE <PED.ab2@5855>   ANDI.w #$3,D0
0003F3C2 <PED.ab2@5856>    BNE.w JL_0_2906
0003F3C8 <PED.ab2@5857>   TST.b new_editmode
0003F3CC <PED.ab2@5858>    BNE JL_0_2906b
0003F3D2 <PED.ab2@5861>   JSR allocnewline
0003F3D6 <PED.ab2@5862>    BEQ.w JUMP_JL_0_4942
0003F3DE <PED.ab2@5863>   MOVE.w #$FFFF,comWord_SourceChanged
0003F3E4 <PED.ab2@5864>   MOVE.l comLong_DisplayLineOffset,D0
0003F3EA <PED.ab2@5865>   ADD.l comLong_DisplayLine,D0
0003F3EC <PED.ab2@5866>   ADDQ.w #1,D0
0003F3F2 <PED.ab2@5867>    JSR JL_0_57B6
0003F3F8 <PED.ab2@5868>   ADDQ.l #1,comLong_TotalLines
0003F3FC <PED.ab2@5869>    BSR.b JL_0_2A46
0003F3FE <PED.ab2@5871>   MOVE.l (A4),D1
0003F402 <PED.ab2@5872>    BNE.w JL_0_2AD0
0003F404 <PED.ab2@5873>   MOVE.l A0,(A4)
0003F408 <PED.ab2@5874>   MOVE.l A4,$4(A0)
0003F40E <PED.ab2@5875>   MOVE.l A0,comPtr_LastSourceLine
0003F412 <PED.ab2@5876> BRA.w JL_0_2ADE
0003F414 <PED.ab2@5879>   MOVEA.l D1,A1
0003F418 <PED.ab2@5880>   MOVE.l A0,$4(A1)
0003F41A <PED.ab2@5881>   MOVE.l A0,(A4)
0003F41C <PED.ab2@5882>   MOVE.l A1,(A0)
0003F420 <PED.ab2@5883>   MOVE.l A4,$4(A0)
0003F426 <PED.ab2@5886>   MOVE.l A0,comPtr_CurrentSourceLine
0003F42C <PED.ab2@5887>   MOVE.w comWord_ColumnsOffset,D0
0003F430 <PED.ab2@5888>   BEQ.w JL_0_2AF6
0003F436 <PED.ab2@5889>   CLR.w comWord_ColumnsOffset
0003F43C <PED.ab2@5890>   JSR JL_0_7962
0003F442 <PED.ab2@5893>   JSR update_horizscroller
0003F448 <PED.ab2@5894>   MOVE.l comLong_DisplayLine,D0
0003F44A <PED.ab2@5895>   ADDQ.w #1,D0
0003F450 <PED.ab2@5896>   ADD.w comLong_BoundLines,D0
0003F456 <PED.ab2@5897>   CMP.l viewablelines,D0
0003F45A <PED.ab2@5898>   BCS.w JL_0_2B6C
0003F460 <PED.ab2@5899>   ADDQ.l #1,comLong_DisplayLineOffset
0003F466 <PED.ab2@5900>   MOVE.l viewablelines,-(A7)
0003F46C <PED.ab2@5901>   MOVE.l comLong_DisplayLine,D0
0003F46E <PED.ab2@5902>   ADDQ.l #1,D0
0003F474 <PED.ab2@5903>   MOVE.l D0,viewablelines
0003F47A <PED.ab2@5904>   MOVE.w ypos_statusarea,-(A7)
0003F480 <PED.ab2@5907>   JSR source_fullscroll_down
0003F486 <PED.ab2@5908>   MOVE.w (A7)+,ypos_statusarea
0003F48C <PED.ab2@5909>   MOVE.l (A7)+,viewablelines
0003F490 <PED.ab2@5910>   MOVEM.w D0-D1,-(A7)
0003F492 <PED.ab2@5911>   MOVEQ.l #$00,D0
0003F498 <PED.ab2@5912>   MOVE.l comLong_DisplayLine,D1
0003F49E <PED.ab2@5913>   ADD.l comLong_DisplayLineOffset,D1
0003F4A4 <PED.ab2@5914>   JSR JL_0_3154
0003F4A8 <PED.ab2@5915>   MOVEM.w (A7)+,D0-D1
0003F4AE <PED.ab2@5916>   TST.b comByte_StateBlockMark
0003F4B2 <PED.ab2@5917>   BNE.w JL_0_2B68
0003F4B4 <PED.ab2@5918> RTS
0003F4BA <PED.ab2@5921> JMP _redraw
0003F4C0 <PED.ab2@5924>   MOVE.l comLong_DisplayLine,D7
0003F4C2 <PED.ab2@5925>   ADDQ.w #1,D7
0003F4C8 <PED.ab2@5926>   JSR source_partscroll_up
0003F4CE <PED.ab2@5927>   JSR JL_0_2534
0003F4D2 <PED.ab2@5928>   MOVEM.w D0-D1,-(A7)
0003F4D4 <PED.ab2@5929>   MOVEQ.l #$00,D0
0003F4DA <PED.ab2@5930>   MOVE.l comLong_DisplayLine,D1
0003F4E0 <PED.ab2@5931>   ADD.l comLong_DisplayLineOffset,D1
0003F4E6 <PED.ab2@5932>   JSR JL_0_3154
0003F4EA <PED.ab2@5933>   MOVEM.w (A7)+,D0-D1
0003F4F0 <PED.ab2@5934>   TST.b comByte_StateBlockMark
0003F4F4 <PED.ab2@5935>   BNE.w JL_0_2BA0
0003F4F6 <PED.ab2@5936> RTS
0003F4FC <PED.ab2@5939> JMP JL_0_7962
0003F502 <PED.ab2@5943>   JSR jump_addhistory
0003F504 <PED.ab2@5944>   MOVEQ.l #$00,D0
0003F508 <PED.ab2@5945> BRA.w sub_gotoline
0003F50E <PED.ab2@5949>   JSR jump_addhistory
0003F514 <PED.ab2@5950>   MOVE.l comLong_TotalLines,D0
0003F516 <PED.ab2@5951>   SUBQ.l #1,D0
0003F51A <PED.ab2@5952> BRA.w sub_gotoline
0003F520 <PED.ab2@5956>   MOVE.l viewablelines,D0
0003F526 <PED.ab2@5957>   CMP.l comLong_TotalLines,D0
0003F52A <PED.ab2@5958>    BCS.w JL_0_2BC2
0003F52C <PED.ab2@5959> RTS
0003F532 <PED.ab2@5962>   MOVE.l comLong_DisplayLineOffset,D0
0003F538 <PED.ab2@5963>   ADD.l comLong_DisplayLine,D0
0003F53E <PED.ab2@5964>   MOVE.l D0,comLong_LinePosStartX
0003F544 <PED.ab2@5965>   JSR switch_cursordisplay
0003F56E <PED.ab2@5977>     !basic
0003F578 <PED.ab2@5979>     If *vertiprop.Gadget
0003F59C <PED.ab2@5980>       GetAttr_ #PGA_Top    ,*vertiprop,&slider_top.l
0003F5AC <PED.ab2@5981>       totallines.l = Peek.l(?comLong_TotalLines)
0003F5BE <PED.ab2@5982>       If totallines>=#max_slider_res
0003F630 <PED.ab2@5983>         !mul48f{slider_top,totallines,#max_slider_res,realline.l}
0003F636 <PED.ab2@5984>       Else
0003F63C <PED.ab2@5985>         realline = slider_top
0003F65C <PED.ab2@5987>       realline + Peek.l(?comLong_DisplayLine)
0003F662 <PED.ab2@5988>     Else
0003F66A <PED.ab2@5989>       realline = 0
0003F66E <PED.ab2@5991>     GetD0 realline
0003F68C <PED.ab2@5992>     !asm
0003F692 <PED.ab2@6010>     CMP.l comLong_LinePosStartX,D0
0003F696 <PED.ab2@6011>     BEQ.w JL_0_2C02
0003F69C <PED.ab2@6012>       MOVE.l D0,comLong_LinePosStartX
0003F6A2 <PED.ab2@6013>       JSR switch_cursordisplay
0003F6A8 <PED.ab2@6014>       MOVE.l comLong_LinePosStartX,D0
0003F6AE <PED.ab2@6015>       JSR gotoline
0003F6B4 <PED.ab2@6016>       JSR switch_cursordisplay
0003F6BA <PED.ab2@6017>       JSR update_statusline          ;JSR linetext
0003F6C0 <PED.ab2@6020>     JSR check_events                 ; check ob gadget noch gedrueckt
0003F6C2 <PED.ab2@6021>     TST.l D7
0003F6C6 <PED.ab2@6022>   BEQ.b JL_0_2BD4
0003F6CC <PED.ab2@6024>   JSR switch_cursordisplay
0003F6F6 <PED.ab2@6027>   !basic
0003F700 <PED.ab2@6029>   If *vertiprop.Gadget
0003F724 <PED.ab2@6030>     GetAttr_ #PGA_Top    ,*vertiprop,&slider_top.l
0003F734 <PED.ab2@6031>     totallines.l = Peek.l(?comLong_TotalLines)
0003F746 <PED.ab2@6032>     If totallines>=#max_slider_res
0003F7B8 <PED.ab2@6033>       !mul48f{slider_top,totallines,#max_slider_res,realline.l}
0003F7BE <PED.ab2@6034>     Else
0003F7C4 <PED.ab2@6035>       realline = slider_top
0003F7E4 <PED.ab2@6037>     realline + Peek.l(?comLong_DisplayLine)
0003F7EA <PED.ab2@6038>   Else
0003F7F2 <PED.ab2@6039>     realline = 0
0003F7F6 <PED.ab2@6041>   GetD0 realline
0003F814 <PED.ab2@6042>   !asm
0003F818 <PED.ab2@6060> BRA.w gotoline
0003F81C <PED.ab2@6064>   MOVE.w #$FFFF,-(A7)
0003F822 <PED.ab2@6065>   CLR.w comWord_Column
0003F826 <PED.ab2@6066> BRA.w JL_0_2C2E
0003F828 <PED.ab2@6070>   CLR.w -(A7)
0003F82A <PED.ab2@6071>   TST.l d0
0003F82E <PED.ab2@6072>   BGE JL_0_2C2E
0003F830 <PED.ab2@6073>   MOVEQ #0,d0
0003F836 <PED.ab2@6075>   CMP.l comLong_TotalLines,d0
0003F83A <PED.ab2@6076>   BLE 'l10
0003F840 <PED.ab2@6077>   MOVE.l comLong_TotalLines,d0
0003F842 <PED.ab2@6078>   SUBQ.l #1,d0
0003F848 <PED.ab2@6081>   MOVE.l comLong_DisplayLineOffset,D1
0003F84A <PED.ab2@6082>   MOVE.l D1,-(A7)
0003F850 <PED.ab2@6083>   ADD.l comLong_DisplayLine,D1
0003F852 <PED.ab2@6084>   CMP.l D1,D0
0003F856 <PED.ab2@6085>   BEQ.w JL_0_2C58
0003F85A <PED.ab2@6086>   BCC.w JL_0_2C50
0003F85C <PED.ab2@6089>   SUBQ.l #1,D1
0003F860 <PED.ab2@6090>     MOVEA.l $4(A4),A4
0003F862 <PED.ab2@6091>     CMP.l D1,D0              ;goto line in d0
0003F866 <PED.ab2@6092>   BNE.b JL_0_2C42
0003F86A <PED.ab2@6093> BRA.w JL_0_2C58
0003F870 <PED.ab2@6096>   MOVE.l comLong_TotalLines,d0
0003F872 <PED.ab2@6097>   SUBQ.l #1,d0
0003F874 <PED.ab2@6098>   MOVE.l d0,d1
0003F878 <PED.ab2@6099>   BRA JL_0_2C58
0003F87A <PED.ab2@6102>   ADDQ.l #1,D1
0003F87C <PED.ab2@6103>   TST.l (a4)
0003F880 <PED.ab2@6104>   BEQ JL_0_2C58b
0003F882 <PED.ab2@6105>   MOVEA.l (A4),A4
0003F884 <PED.ab2@6106>   CMP.l D1,D0
0003F888 <PED.ab2@6107>   BNE.b JL_0_2C50
0003F88E <PED.ab2@6110>   MOVE.l A4,comPtr_CurrentSourceLine
0003F894 <PED.ab2@6111>   TST.b newsyntax
0003F898 <PED.ab2@6112>   BEQ 'l10
0003F89E <PED.ab2@6113>   JSR syntax_new1
0003F8A4 <PED.ab2@6116>   MOVE.l comLong_BoundLines,D1
0003F8AA <PED.ab2@6117>   CLR.b newsyntax
0003F8AC <PED.ab2@6118>   MOVE.l D0,D2
0003F8AE <PED.ab2@6119>   SUB.l D1,D0
0003F8B2 <PED.ab2@6120>   BPL.w JL_0_2C7C
0003F8B8 <PED.ab2@6123>   CLR.l comLong_DisplayLineOffset
0003F8BE <PED.ab2@6124>   MOVE.w D2,comLong_DisplayLine+2
0003F8C2 <PED.ab2@6125> BRA.w JL_0_2CBA
0003F8C8 <PED.ab2@6128>   MOVE.l comLong_TotalLines,D3
0003F8CE <PED.ab2@6129>   CMP.l viewablelines,D3
0003F8D2 <PED.ab2@6130>   BLS.b JL_0_2C6C
0003F8D8 <PED.ab2@6131>   SUB.l viewablelines,D3
0003F8DE <PED.ab2@6132>   ADD.l comLong_BoundLines,D3
0003F8E0 <PED.ab2@6133>   CMP.l D3,D2
0003F8E4 <PED.ab2@6134>   BCS.w JL_0_2CAE
0003F8EA <PED.ab2@6135>   SUB.l comLong_BoundLines,D3
0003F8F0 <PED.ab2@6136>   MOVE.l D3,comLong_DisplayLineOffset
0003F8F2 <PED.ab2@6137>   SUB.l D3,D2
0003F8F8 <PED.ab2@6138>   MOVE.w D2,comLong_DisplayLine+2
0003F8FC <PED.ab2@6139> BRA.w JL_0_2CBA
0003F902 <PED.ab2@6142>   MOVE.w D1,comLong_DisplayLine+2
0003F908 <PED.ab2@6143>   MOVE.l D0,comLong_DisplayLineOffset
0003F90E <PED.ab2@6146>   JSR JL_0_775E
0003F910 <PED.ab2@6147>   MOVE.l (A7)+,D1
0003F916 <PED.ab2@6148>   CMP.l comLong_DisplayLineOffset,D1
0003F91A <PED.ab2@6149>   BEQ.w JL_0_2CCC
0003F920 <PED.ab2@6150>   JSR _redraw
0003F922 <PED.ab2@6153>   TST.w (A7)+
0003F926 <PED.ab2@6154>   BNE.w JUMP_update_horizscroller
0003F928 <PED.ab2@6155> RTS
0003F92E <PED.ab2@6158> JMP update_horizscroller
0003F932 <PED.ab2@6183>   CMP.w #$5A,D6    ; empty menu
0003F936 <PED.ab2@6184>   BNE.w JL_0_2CE0
0003F938 <PED.ab2@6186> RTS
0003F93C <PED.ab2@6189>   CMP.w ##MENU_COMPILERUN,D6
0003F940 <PED.ab2@6190>    BEQ.w JL_0_2CF0
0003F944 <PED.ab2@6191>   CMP.w ##MENU_RUN,D6
0003F948 <PED.ab2@6192>    BNE.w JL_0_2D10
0003F972 <PED.ab2@6195>   !basic
0003F97E <PED.ab2@6200>     TEDSetLabelList {?comPtr_LabelList}
0003F98A <PED.ab2@6201>     TEDSetLabelCount{?comWord_LabelCounter}
0003F9A8 <PED.ab2@6203>   !asm
0003F9AE <PED.ab2@6206>   CMP.l ##MENU_CREATERELEASEEXE,d6
0003F9B2 <PED.ab2@6207>   BNE skip_comploop
0003F9DC <PED.ab2@6208>   !basic  ; create executable as long as the file size does not decrease anymore
0003F9E8 <PED.ab2@6211>   comp_exit.b = False : comp_counter.b = 0
0003F9F0 <PED.ab2@6212>   oldexesize.l = $7FFFFFFF
0003F9F8 <PED.ab2@6213>   total_counter.l = 0
0003FA06 <PED.ab2@6215>     comp_counter + 1
0003FA14 <PED.ab2@6216>     total_counter + 1
0003FA32 <PED.ab2@6217>     !asm
0003FA34 <PED.ab2@6218>     MOVEQ #$b,d6
0003FA3A <PED.ab2@6219>     MOVE.l comFunc_CallMenuEntry,a0
0003FA40 <PED.ab2@6220>     MOVEA.l comPtr_FirstSourceLine,A5
0003FA46 <PED.ab2@6221>     MOVE.l comLong_TotalLines,D7
0003FA48 <PED.ab2@6223>     JSR (A0)
0003FA4E <PED.ab2@6224>     JSR check_state_of_debuggertoggle
0003FA78 <PED.ab2@6225>     !basic
0003FAF6 <PED.ab2@6226>     newexesize.l = dos_GetFileSizeEx{dos_AddPart{exepathname$,exefilename$}}
0003FB0E <PED.ab2@6227>     If newexesize<1 Then newexesize=oldexesize
0003FB38 <PED.ab2@6229>     If (oldexesize = newexesize) AND (comp_counter>2) Then comp_exit    = True
0003FB52 <PED.ab2@6230>     If oldexesize>newexesize                          Then comp_counter = 0 : oldexesize=newexesize
0003FB74 <PED.ab2@6231>   Until comp_exit OR total_counter>20
0003FB92 <PED.ab2@6232>   !asm
0003FB94 <PED.ab2@6233> RTS
0003FB9A <PED.ab2@6236>   SUBI.l #$50,D6
0003FBA0 <PED.ab2@6237>   MOVE.l comFunc_CallMenuEntry,D0
0003FBA4 <PED.ab2@6238>   BEQ.w exit_callcompilermenuentry
0003FBA8 <PED.ab2@6240>   CMP.w #$b,d6                       ; Save & Create executable
0003FBAC <PED.ab2@6241>   BNE 'l10
0003FBB2 <PED.ab2@6242>   JSR saverout
0003FBB4 <PED.ab2@6245>   MOVEQ #$b,d6
0003FBB8 <PED.ab2@6248>   CMP.w #$c,d6                       ; Save & Compile & run
0003FBBC <PED.ab2@6249>   BNE 'l20
0003FBC2 <PED.ab2@6251>   JSR menu_save
0003FBEC <PED.ab2@6252>   !basic
0003FBFE <PED.ab2@6253>   Delay_(50)
0003FC1C <PED.ab2@6254>   !asm
0003FC1E <PED.ab2@6257>   MOVEQ #$0,d6
0003FC22 <PED.ab2@6260>   CMP.b #9,d6                        ; Open Sourcebrowser
0003FC26 <PED.ab2@6261>   BNE 'l21
0003FC50 <PED.ab2@6262>   !basic
0003FC54 <PED.ab2@6263>   MOVEM.l a0/d0/d1,-(a7)
0003FC5A <PED.ab2@6264>   Gosub open_labelwindow
0003FC5E <PED.ab2@6265>   MOVEM.l (a7)+,d0/d1/a0
0003FC7C <PED.ab2@6266>   !asm
0003FC7E <PED.ab2@6267> RTS
0003FC80 <PED.ab2@6277>   MOVE.l d0,-(a7)
0003FC86 <PED.ab2@6278>   MOVE.l #comStr_CurrentDir,D0       ;set default dir
0003FC8C <PED.ab2@6279>   JSR set_currentdir
0003FC8E <PED.ab2@6280>   MOVE.l (a7)+,d0
0003FC94 <PED.ab2@6281>   MOVE.l comFunc_CallMenuEntry,a0
0003FC9A <PED.ab2@6282>   MOVEA.l comPtr_FirstSourceLine,A5
0003FCA0 <PED.ab2@6283>   MOVE.l comLong_TotalLines,D7
0003FCA2 <PED.ab2@6284>   MOVE.l D6,-(A7)                    ;menu num
0003FCA4 <PED.ab2@6287>   JSR (A0)                           ;call compiler menuentry
0003FCAA <PED.ab2@6289>   JSR check_state_of_debuggertoggle
0003FCD4 <PED.ab2@6290>   !basic
0003FCD8 <PED.ab2@6291>   MOVEM.l a0/d0/d1,-(a7)
0003FD00 <PED.ab2@6292>   previoussearch_instruction$ = "|"
0003FD06 <PED.ab2@6293>   Gosub update_versiongadgets
0003FD0A <PED.ab2@6294>   MOVEM.l (a7)+,d0/d1/a0
0003FD28 <PED.ab2@6295>   !asm
0003FD2A <PED.ab2@6296>   MOVE.l (A7)+,D6
0003FD2E <PED.ab2@6299>   CMP.w #$8,D6                       ; reload all libs
0003FD32 <PED.ab2@6300>    BNE.w JL_0_2D42
0003FD36 <PED.ab2@6301>   MOVEM.l D0-D7/A0-A6,-(A7)
0003FD3C <PED.ab2@6302>   JSR read_tempprefs
0003FD40 <PED.ab2@6303>   MOVEM.l (A7)+,D0-D7/A0-A6
0003FD44 <PED.ab2@6306>   CMP.w #$3,D6                       ; compiler settings
0003FD48 <PED.ab2@6307>   BNE.w JL_0_2D56
0003FD4C <PED.ab2@6308>   MOVEM.l D0-D7/A0-A6,-(A7)
0003FD52 <PED.ab2@6309>   JSR save_tempprefs
0003FD7C <PED.ab2@6310>   !basic
0003FDA8 <PED.ab2@6311>   If WZ_CheckOpen{"WIN_NEWTYPE"}
0003FDE2 <PED.ab2@6312>     Use Window WZID("WIN_NEWTYPE")
0003FDE8 <PED.ab2@6313>     Gosub newtype_updatelist
0003FE06 <PED.ab2@6315>   !asm
0003FE0A <PED.ab2@6316>   MOVEM.l (A7)+,D0-D7/A0-A6
0003FE0C <PED.ab2@6319>   MOVE.l D0,-(A7)
0003FE12 <PED.ab2@6320>   JSR update_title_sourcewindow
0003FE14 <PED.ab2@6321>   MOVE.l (A7)+,D0
0003FE1A <PED.ab2@6322>   MOVEA.l comPtr_CurrentSourceLine,A4
0003FE20 <PED.ab2@6323>   CMP.l #-$2,D0
0003FE24 <PED.ab2@6324>    BEQ.w _redrawb
0003FE2A <PED.ab2@6325>   CMP.l #-$1,D0
0003FE2E <PED.ab2@6326>    BNE.w JL_0_2C1Eb
0003FE30 <PED.ab2@6329> RTS
0003FE36 <PED.ab2@6333> JMP JL_0_5054
0003FE3A <PED.ab2@6337>   MOVE.w #$FFFF,-(A7)                ;syntax set cursor
0003FE42 <PED.ab2@6338>   MOVE.b #1,newsyntax
0003FE46 <PED.ab2@6339> BRA.w JL_0_2C2E
0003FE48 <PED.ab2@6342>   MOVE.l d0,-(a7)
0003FE4E <PED.ab2@6343>   MOVEA.l comPtr_Temp_TokenString1,A1
0003FE50 <PED.ab2@6345>   MOVE.l a4,a0
0003FE54 <PED.ab2@6346>   LEA 9(a0),a0
0003FE56 <PED.ab2@6347>   MOVEQ #-1,d1
0003FE5C <PED.ab2@6350>   TST.w comWord_DoTokenize
0003FE60 <PED.ab2@6351>   BEQ.w JUMP_JL_0_5054
0003FE62 <PED.ab2@6353>   CMP.l a0,a5
0003FE66 <PED.ab2@6354>   BEQ  JL_0_5050b
0003FE68 <PED.ab2@6355>   ADDQ.l #1,d1
0003FE6A <PED.ab2@6356>   MOVEQ.l #$00,D0
0003FE6C <PED.ab2@6357>   MOVE.b (A0)+,D0
0003FE70 <PED.ab2@6358>   BEQ.w JL_0_5050b
0003FE74 <PED.ab2@6359>   BMI.w JL_0_5040b
0003FE76 <PED.ab2@6360>   MOVE.b D0,(A1)+
0003FE7A <PED.ab2@6361>   BNE.b syn1
0003FE7C <PED.ab2@6364>   LSL.w #8,D0
0003FE7E <PED.ab2@6365>   MOVE.b (A0)+,D0
0003FE80 <PED.ab2@6366>   MOVE.l d1,-(a7)
0003FE86 <PED.ab2@6367>   JSR token_to_ascii
0003FE88 <PED.ab2@6368>   MOVE.l (a7)+,d1
0003FE8A <PED.ab2@6371>   ADDQ.l #1,d1
0003FE8C <PED.ab2@6372>   MOVE.b (A3)+,(A1)+
0003FE90 <PED.ab2@6373>   BNE.b JL_0_5048b
0003FE92 <PED.ab2@6374>   SUBQ.w #1,A1
0003FE94 <PED.ab2@6375>   SUBQ.l #1,d1
0003FE98 <PED.ab2@6376> BRA.b syn1
0003FE9A <PED.ab2@6379>   SUBQ.l #1,d1
0003FE9E <PED.ab2@6380>   CMP.w #MAX_Columns,d1
0003FEA2 <PED.ab2@6381>   BGE 'l1
0003FEA8 <PED.ab2@6382>   CMP.l #0,d1
0003FEAC <PED.ab2@6383>   BGE 'l1
0003FEAE <PED.ab2@6384>   MOVEQ #0,d1
0003FEB4 <PED.ab2@6387>   MOVE.w d1,comWord_Column
0003FEB6 <PED.ab2@6388>   MOVE.l (a7)+,d0
0003FEB8 <PED.ab2@6389> RTS
0003FEBE <PED.ab2@6393>   CMP.l #$50,D6
0003FEC2 <PED.ab2@6394>    BLT.w handle_menucalls
0003FEC8 <PED.ab2@6395>   CMP.l #$65,D6
0003FECC <PED.ab2@6396>    BGE.w handle_menucalls
0003FED0 <PED.ab2@6397> BRA.w call_compilermenuitem
0003FED6 <PED.ab2@6401>   CMP.l #$258,D6                     ; ped menuitem
0003FEDA <PED.ab2@6402>    BLE.w call_ownmenuitem
0003FEE0 <PED.ab2@6403>   CMP.l #$f00,D6                     ; compiler menuitem
0003FEE4 <PED.ab2@6404>    BGE call_ownmenuitem
0003FEEA <PED.ab2@6405> JMP call_pluginmenuentry             ;plugin menuitem
0003FEEC <PED.ab2@6410>   MOVE.l d6,-(a7)
0003FF16 <PED.ab2@6411>   !basic
0003FF18 <PED.ab2@6412>   MOVE.l (a7)+,D0
0003FF1C <PED.ab2@6413>   menuentry.l = PutD0
0003FF42 <PED.ab2@6414>   If menuentry >= #MENU_TEMPLATE AND menuentry<#MENU_TEMPLATE+#MAX_TEMPLATES
0003FF48 <PED.ab2@6415>     Gosub load_template
0003FF66 <PED.ab2@6417>     !asm
0003FF6C <PED.ab2@6418>     JMP update_vertscroller
0003FF8A <PED.ab2@6420>   !asm
0003FF90 <PED.ab2@6422>   LEA menutable,A0
0003FF92 <PED.ab2@6425>     MOVE.l (A0)+,D0
0003FF98 <PED.ab2@6426>     CMP.l #$FFFFFFFF,D0
0003FF9C <PED.ab2@6427>      BEQ.w exit_call_ownmenuitem
0003FF9E <PED.ab2@6428>     CMP.l D6,D0
0003FFA2 <PED.ab2@6429>      BEQ.w JL_0_2DB8
0003FFA4 <PED.ab2@6430>     ADDQ.w #8,A0
0003FFA8 <PED.ab2@6431> BRA.b JL_0_2DA2
0003FFAA <PED.ab2@6434>   MOVE.l (A0)+,-(A7)
0003FFAC <PED.ab2@6435>   MOVEA.l (A0)+,A0
0003FFAE <PED.ab2@6438>   JSR (A0)                           ;call the menupoint
0003FFB0 <PED.ab2@6439>   MOVE.l (A7)+,D0
0003FFB2 <PED.ab2@6441>   TST.l D0
0003FFB6 <PED.ab2@6442>    BNE.w JUMP_update_vertscroller
0003FFB8 <PED.ab2@6445> RTS
0003FFBE <PED.ab2@6448> JMP update_vertscroller
0003FFC4 <PED.ab2@6452>   MOVE.w AL_0_B7EE,D0
0003FFCA <PED.ab2@6453>   CMP.w comWord__AL_0_86C4,D0
0003FFCE <PED.ab2@6454>   BEQ.w JL_0_2DEA
0003FFD8 <PED.ab2@6456>   MOVE.w AL_0_B7EE,comWord__AL_0_86C4
0003FFDE <PED.ab2@6457>   JSR close_sourcewindow
0003FFE4 <PED.ab2@6458>   JSR open_sourcewindow
0003FFEA <PED.ab2@6461>   JSR update_labelstuff
0003FFF0 <PED.ab2@6462>   JSR JL_0_57F2
0003FFF6 <PED.ab2@6463>   JSR analyze_loadedsource
0003FFFC <PED.ab2@6464>   TST.b refreshonstore
00040000 <PED.ab2@6465>   BNE 'l2
00040006 <PED.ab2@6466>   TST.b AL_0_4734
0004000A <PED.ab2@6467>   BNE.w JL_0_2E0E
00040010 <PED.ab2@6468>   JSR update_statusline
00040016 <PED.ab2@6469>   JSR _redraw
0004001C <PED.ab2@6472>   MOVE.l #comStr_CurrentDir,D0
00040022 <PED.ab2@6473>   JSR set_currentdir
00040028 <PED.ab2@6476>   MOVEA.l comPtr_CurrentSourceLine,A4
0004002E <PED.ab2@6477>   CLR.w comWord_SourceModifiedFlag
00040030 <PED.ab2@6479> RTS
0004003E <PED.ab2@6483>   mcounter.l = menuentry-#MENU_TEMPLATE
00040048 <PED.ab2@6485>   ResetList templates()
00040076 <PED.ab2@6486>   For n.l=0 To mcounter-1
00040080 <PED.ab2@6487>     NextItem templates()
00040090 <PED.ab2@6488>   Next
000400A2 <PED.ab2@6489>   If NextItem(templates())
000400DC <PED.ab2@6496>     templatefilename$ = templates()\filename
000400E2 <PED.ab2@6497>     GetD0 &templatefilename$
00040100 <PED.ab2@6498>     !asm
00040102 <PED.ab2@6499>     MOVE.l d0,-(a7)
00040108 <PED.ab2@6500>     JSR menu_opennew
0004010A <PED.ab2@6501>     MOVE.l (a7)+,d7
00040110 <PED.ab2@6502>     JSR load_source
00040116 <PED.ab2@6503>   Else
00040166 <PED.ab2@6504>     templatefilename$=!TRANS{"unknown"}
00040168 <PED.ab2@6505>     MOVE.l d0,-(a7)
0004016E <PED.ab2@6506>     GetD0 &templatefilename$
0004018C <PED.ab2@6507>     !asm
00040192 <PED.ab2@6508>     JSR menu_opennew
00040194 <PED.ab2@6509>      MOVE.l (a7)+,d0 ; clean stack
00040196 <PED.ab2@6511> Return
0004019E <PED.ab2@6515>   MOVE.w #0,loadmode
000401A2 <PED.ab2@6516> BRA JL223
000401AA <PED.ab2@6520>   MOVE.w #1,loadmode
000401B0 <PED.ab2@6523>   JSR storeline
000401B2 <PED.ab2@6524>   MOVE.l d0,-(a7)
000401B8 <PED.ab2@6525>   MOVE.l comFunc_ReadXtraFile,d0
000401BC <PED.ab2@6526>   BEQ 'l10
000401BE <PED.ab2@6527>     MOVE.l d0,a0
000401C0 <PED.ab2@6528>     CLR.l d0
000401C2 <PED.ab2@6529>     JSR (a0)
000401C4 <PED.ab2@6532>   MOVE.l (a7)+,d0
000401CA <PED.ab2@6534>   MOVEA.l _execbase,A6
000401D0 <PED.ab2@6535>   MOVE.l #comDef_XtraEnd-comLongLong_XtraBegin+10,d0
000401D6 <PED.ab2@6537>   MOVE.l ##MEMF_CLEAR,D1
000401F8 <PED.ab2@6538>   !newalloc;JSR _AllocVec(A6)
000401FA <PED.ab2@6539>   TST.l D0
000401FE <PED.ab2@6540>    BEQ.w JUMP_display_memoryalert
00040204 <PED.ab2@6541>   TST.l AL_0_84B2
00040208 <PED.ab2@6542>    BNE.w JL_0_2E70
0004020C <PED.ab2@6543>   MOVEM.l D0/A6,-(A7)
00040212 <PED.ab2@6544>   JSR clear_sourcebuffer;JL_0_6B7C
00040218 <PED.ab2@6545>   CLR.w comWord_SourceChanged
0004021C <PED.ab2@6546>   MOVEM.l (A7)+,D0/A6
00040222 <PED.ab2@6547>   MOVE.l D0,actualfile
00040228 <PED.ab2@6548>   MOVE.l D0,AL_0_84B2
0004022E <PED.ab2@6549>   MOVE.l d0,loadedfilesbase
00040230 <PED.ab2@6550>   MOVEA.l D0,A0
00040234 <PED.ab2@6551>   CLR.l $4(A0)
00040236 <PED.ab2@6552>   CLR.l (A0)
00040238 <PED.ab2@6553> RTS
0004023E <PED.ab2@6556> JMP display_memoryalert
00040244 <PED.ab2@6560>   JSR StoreXtraData
0004024A <PED.ab2@6561>   CLR.w comWord_SourceChanged
0004024C <PED.ab2@6562>   MOVEA.l D0,A0
00040252 <PED.ab2@6563>   MOVEA.l actualfile,A1
00040258 <PED.ab2@6564>   MOVE.l D0,actualfile
0004025A <PED.ab2@6565>   TST.l (A1)
0004025E <PED.ab2@6566>   BEQ.w JL_0_2EA6
00040260 <PED.ab2@6567>   MOVEA.l (A1),A2
00040262 <PED.ab2@6568>   MOVE.l D0,(A1)
00040266 <PED.ab2@6569>   MOVE.l A1,$4(A0)
00040268 <PED.ab2@6570>   MOVE.l A2,(A0)
0004026C <PED.ab2@6571>   MOVE.l A0,$4(A2)
00040272 <PED.ab2@6572>   JSR clear_sourcebuffer;JL_0_6B7C
00040278 <PED.ab2@6573>   JSR JL_0_2Dca8
0004027A <PED.ab2@6574> RTS
00040280 <PED.ab2@6577>   MOVE.l D0,AL_0_84B2
00040284 <PED.ab2@6578>   MOVE.l A1,$4(A0)
00040286 <PED.ab2@6579>   MOVE.l A0,(A1)
00040288 <PED.ab2@6580>   CLR.l (A0)
0004028E <PED.ab2@6581>   JSR clear_sourcebuffer ; JL_0_6B7C
00040294 <PED.ab2@6582>   JSR JL_0_2Dca8
0004029A <PED.ab2@6584>   TST.w loadmode
0004029E <PED.ab2@6585>   BNE 'no
000402A2 <PED.ab2@6586>     MOVEM.l d0-d7/a0-a6,-(a7)
000402A8 <PED.ab2@6587>     JSR menu_load
000402AE <PED.ab2@6588>     JSR StoreXtraData
000402B4 <PED.ab2@6589>     JSR update_vertscroller
000402B8 <PED.ab2@6590>     MOVEM.l (a7)+,d0-d7/a0-a6
000402BA <PED.ab2@6593> RTS
000402BE <PED.ab2@6598>   MOVEM.l D0/A0-A1,-(A7)
000402E8 <PED.ab2@6599>   !basic
000402F0 <PED.ab2@6600>   MOVE.l LabelList_FirstVisableItemNumber@(a5),comLong_Label1VisableItem      ; same as Poke
000402FA <PED.ab2@6601>   MOVE.l comLong_Label1VisableItem,comLong_Label1VisableItemStore             ; to update both for a unified LabelList restore routine that work by load and switch of a Sourcecode  tomsmart1
00040318 <PED.ab2@6602>   !asm
0004031E <PED.ab2@6603>   MOVEA.l actualfile,A0
00040320 <PED.ab2@6604>   ADDQ.l #8,A0                       ; jump over list node header to xtra data
00040326 <PED.ab2@6605>   LEA comLongLong_XtraBegin,A1
0004032C <PED.ab2@6606>   MOVE.l #comDef_XtraEnd-comLongLong_XtraBegin,d0; #$504+72,D0
0004032E <PED.ab2@6608>   SUBQ.w #1,D0
00040330 <PED.ab2@6611>     MOVE.b (A1)+,(A0)+
00040334 <PED.ab2@6612>   DBF D0,'copyloop
00040338 <PED.ab2@6614>   MOVEM.l (A7)+,D0/A0-A1
0004033A <PED.ab2@6615> RTS
0004033C <PED.ab2@6620>   ADDQ.l #8,A0
00040342 <PED.ab2@6621>   LEA comLongLong_XtraBegin,A1
00040348 <PED.ab2@6623>   MOVE.l #comDef_XtraEnd-comLongLong_XtraBegin ,D0  ;MOVE.l #$504+72,D0
0004034A <PED.ab2@6624>   SUBQ.w #1,D0
0004034C <PED.ab2@6627>     MOVE.b (A0)+,(A1)+
00040350 <PED.ab2@6628>   DBF D0,'copyloop
0004037A <PED.ab2@6630>   !basic
00040380 <PED.ab2@6632>   Gosub RestoreLabelAndNewtypeWin
0004039E <PED.ab2@6641>   !asm
000403A4 <PED.ab2@6642>   MOVEA.l comPtr_CurrentSourceLine,A4
000403A6 <PED.ab2@6643> RTS
000403A8 <PED.ab2@6647>   MOVE.l A0,-(A7)
000403AC <PED.ab2@6648>   BSR.b StoreXtraData
000403B2 <PED.ab2@6649>   JSR save_tempprefs
000403B4 <PED.ab2@6650>   MOVEA.l (A7)+,A0
000403BA <PED.ab2@6651>   MOVE.l A0,actualfile
000403BE <PED.ab2@6652>   BSR.b GetXtraData
000403C4 <PED.ab2@6653>   JSR JL_0_2Dca8
000403CA <PED.ab2@6654>   JSR read_tempprefs
000403D0 <PED.ab2@6655>   JSR update_statusline              ;JSR linetext
000403D6 <PED.ab2@6656>   JSR update_horizscroller
000403D8 <PED.ab2@6657> RTS
000403DC <PED.ab2@6661>   BSR.b StoreXtraData
000403E2 <PED.ab2@6662>   JSR save_tempprefs
000403E8 <PED.ab2@6663>   MOVEA.l actualfile,A0
000403EC <PED.ab2@6664>   TST.l $4(A0)
000403F0 <PED.ab2@6665>   BNE.w JL_0_2F38
000403F6 <PED.ab2@6667>   MOVEA.l AL_0_84B2,A0
000403F8 <PED.ab2@6668>   MOVE.l A0,D0
000403FE <PED.ab2@6669>   CMP.l actualfile,D0
00040402 <PED.ab2@6670>   BNE.w JL_0_2F3C
00040404 <PED.ab2@6671> RTS
00040408 <PED.ab2@6674>   MOVEA.l $4(A0),A0
0004040E <PED.ab2@6677>   MOVE.l A0,actualfile
00040412 <PED.ab2@6678>   BSR.b GetXtraData
00040418 <PED.ab2@6679>   JSR JL_0_2Dca8
0004041E <PED.ab2@6680>   JSR read_tempprefs
00040424 <PED.ab2@6681>   JSR update_statusline              ;JSR linetext
0004042A <PED.ab2@6682>   JSR update_horizscroller
0004042C <PED.ab2@6683> RTS
00040432 <PED.ab2@6687>   JSR StoreXtraData
00040438 <PED.ab2@6688>   JSR save_tempprefs
0004043E <PED.ab2@6689>   MOVEA.l actualfile,A0
00040440 <PED.ab2@6690>   TST.l (A0)
00040444 <PED.ab2@6691>   BNE.w JL_0_2F72
0004044A <PED.ab2@6692>   MOVEA.l loadedfilesbase,A0
0004044C <PED.ab2@6693>   MOVE.l A0,D0
00040452 <PED.ab2@6694>   CMP.l actualfile,D0
00040456 <PED.ab2@6695>   BNE.w JL_0_2F74
00040458 <PED.ab2@6696> RTS
0004045A <PED.ab2@6699>   MOVEA.l (A0),A0
00040460 <PED.ab2@6702>   MOVE.l A0,actualfile
00040466 <PED.ab2@6703>   JSR GetXtraData
0004046C <PED.ab2@6704>   JSR JL_0_2Dca8
00040472 <PED.ab2@6705>   JSR read_tempprefs
00040478 <PED.ab2@6706>   JSR update_statusline              ;JSR linetext
0004047E <PED.ab2@6707>   JSR update_horizscroller
00040480 <PED.ab2@6708> RTS
00040486 <PED.ab2@6712>   JSR show_newfilerequest
00040488 <PED.ab2@6713>   TST.l D0
0004048C <PED.ab2@6714>    BEQ.w JL_0_76E8c
00040492 <PED.ab2@6715>   JSR clear_actualsource
00040498 <PED.ab2@6718>   LEA str_screentitle,A0
0004049E <PED.ab2@6719>   MOVEA.l str_windowtitle,A1
000404A0 <PED.ab2@6722>     MOVE.b (A0)+,(A1)+
000404A4 <PED.ab2@6723>   BNE.b JL_0_2FA0
000404AA <PED.ab2@6724>   JSR update_title_sourcewindow
000404B0 <PED.ab2@6726>   MOVE.l comFunc_ReadXtraFile,d0
000404B4 <PED.ab2@6727>   BEQ 'l10
000404B6 <PED.ab2@6728>   MOVE.l d0,a0
000404B8 <PED.ab2@6729>   CLR.l d0
000404BA <PED.ab2@6730>   JSR (a0)
000404C0 <PED.ab2@6733>   JMP clear_sourcebuffer;JL_0_6B7C
000404C2 <PED.ab2@6736> RTS
000404C8 <PED.ab2@6739> JMP JL_0_76E8
000404CC <PED.ab2@6742> str_iffchunk_form:    Dc.b "FORM"
000404D0 <PED.ab2@6743> AL_0_2FD4:            Ds.l 1
000404D4 <PED.ab2@6744> str_iffchunk_ftxt:    Dc.b "FTXT"
000404DA <PED.ab2@6745> str_iffchunk_chrs:    Dc.b "CHRS",0,0
000404EC <PED.ab2@6746>                       Ds.w 9
000404F6 <PED.ab2@6751>   MOVE.l #$464F524D,str_iffchunk_form
00040500 <PED.ab2@6752>   MOVE.l #$46545854,str_iffchunk_ftxt
0004050A <PED.ab2@6753>   MOVE.l #$43485253,str_iffchunk_chrs
00040510 <PED.ab2@6754>   MOVEA.l _execbase,A6
00040516 <PED.ab2@6755>   MOVEA.l ptr_iorequest_clipboard,A1
0004051E <PED.ab2@6756>   MOVE.l #$0,$2C(A1)
00040524 <PED.ab2@6757>   MOVE.b #$0,$1E(A1)
0004052C <PED.ab2@6758>   MOVE.l #str_iffchunk_form,$28(A1)
00040530 <PED.ab2@6759>   CLR.l $30(A1)
00040532 <PED.ab2@6760>   MOVEA.l A1,A4
0004053A <PED.ab2@6761>   MOVE.l #$14,$24(A1)
00040540 <PED.ab2@6762>   MOVE.w #$0003,$1C(A1)
00040544 <PED.ab2@6763>   JSR _DoIO(A6)
00040548 <PED.ab2@6764>   MOVEM.l A2-A4,-(A7)
0004054E <PED.ab2@6765>   MOVE.l comPtr_CurrentSourceLine,-(A7)
00040554 <PED.ab2@6766>   JSR JL_0_3318
0004055A <PED.ab2@6767>   MOVE.l (A7)+,comPtr_CurrentSourceLine
0004055C <PED.ab2@6768>   MOVEA.l A0,A2
0004055E <PED.ab2@6769>   MOVEQ.l #$00,D6
00040560 <PED.ab2@6770>   TST.w D7
00040564 <PED.ab2@6771>   BNE.w JL_0_3070
0004056A <PED.ab2@6772>   JSR JL_0_30E0
0004056E <PED.ab2@6773> BRA.w JL_0_3074
00040574 <PED.ab2@6776>   JSR JL_0_319C
00040578 <PED.ab2@6779>   BTST #0,d6
0004057C <PED.ab2@6780>    BEQ 'no
0004057E <PED.ab2@6781>   MOVEA.l A4,A1
00040586 <PED.ab2@6782>   MOVE.l #AL_0_2FD4,$28(A1)
0004058C <PED.ab2@6783>   CLR.l AL_0_2FD4
00040594 <PED.ab2@6784>   MOVE.l #$1,$24(A1)
0004059C <PED.ab2@6785>   MOVE.b #32,AL_0_2FD4
000405A2 <PED.ab2@6786>   MOVE.w #$0003,$1C(A1)
000405A6 <PED.ab2@6787>   JSR _DoIO(A6)
000405A8 <PED.ab2@6790>   MOVEA.l A4,A1
000405AE <PED.ab2@6791>   MOVE.l D6,AL_0_2FD4
000405B6 <PED.ab2@6792>   MOVE.l #AL_0_2FD4,$28(A1)
000405BE <PED.ab2@6793>   MOVE.l #$10,$2C(A1)
000405C6 <PED.ab2@6794>   MOVE.l #_execbase,$24(A1)
000405CC <PED.ab2@6795>   MOVE.w #$0003,$1C(A1)
000405D0 <PED.ab2@6796>   JSR _DoIO(A6)
000405D2 <PED.ab2@6797>   MOVEA.l A4,A1
000405D8 <PED.ab2@6798>   ADDI.l #$C,D6
000405DC <PED.ab2@6799>   BTST #0,d6
000405E0 <PED.ab2@6800>   BEQ 'ok
000405E2 <PED.ab2@6801>   ADDQ.l #1,d6
000405E8 <PED.ab2@6804>   MOVE.l D6,AL_0_2FD4
000405F0 <PED.ab2@6805>   MOVE.l #_execbase,$24(A1)
000405F8 <PED.ab2@6806>   MOVE.l #_execbase,$2C(A1)
00040600 <PED.ab2@6807>   MOVE.l #AL_0_2FD4,$28(A1)
00040606 <PED.ab2@6808>   MOVE.w #$0003,$1C(A1)
0004060A <PED.ab2@6809>   JSR _DoIO(A6)
0004060C <PED.ab2@6810>   MOVEA.l A4,A1
00040612 <PED.ab2@6811>   MOVE.w #$0004,$1C(A1)
00040616 <PED.ab2@6812>   JSR _DoIO(A6)
0004061C <PED.ab2@6813>   TST.b new_editmode
00040620 <PED.ab2@6814>    BEQ 'l1
00040626 <PED.ab2@6815>   TST.b cutmode
0004062A <PED.ab2@6816>    BNE 'l1
0004062E <PED.ab2@6817>   MOVEM.l d0-d7/a0-a6,-(a7)
00040638 <PED.ab2@6829>   MOVE.l #$ffffffff,comLong_BlockEndY        ;cursor off when do copy
0004063E <PED.ab2@6830>   JSR cursor_off
00040644 <PED.ab2@6831>   JSR _redraw
00040648 <PED.ab2@6832>   MOVEM.l (a7)+,d0-d7/a0-a6
0004064E <PED.ab2@6835>   CLR.b cutmode
00040652 <PED.ab2@6836>   MOVEM.l (A7)+,A2-A4
00040654 <PED.ab2@6837> RTS
00040656 <PED.ab2@6840>   MOVEA.l A4,A1
0004065A <PED.ab2@6841>   LEA $9(A2),A3
00040660 <PED.ab2@6842>   JSR JL_0_32E6
00040666 <PED.ab2@6844>   CMP.w comLong_BlockEndX,D0
0004066A <PED.ab2@6845>    BLT.w JL_0_3102
00040670 <PED.ab2@6846>   MOVE.w comLong_BlockEndX,D0
00040676 <PED.ab2@6847>   SUB.w comLong_BlockStartX,D0
00040678 <PED.ab2@6848>   ADDQ.w #2,D0
0004067A <PED.ab2@6851>   SUBQ.w #1,D0
0004067E <PED.ab2@6852>   MOVE.l D0,$24(A1)
00040680 <PED.ab2@6853>   ADD.l D0,D6
00040686 <PED.ab2@6854>   ADDA.w comLong_BlockStartX,A3
0004068A <PED.ab2@6855>   MOVEM.l a3/d0,-(a7)
0004068C <PED.ab2@6856>   MOVEQ #0,d0
0004068E <PED.ab2@6859>   TST.b (a3)+
00040692 <PED.ab2@6860>   BEQ 'e
00040694 <PED.ab2@6861>   ADDQ.l #1,d0
00040698 <PED.ab2@6862> BRA 'l
0004069A <PED.ab2@6865>   CMP.l d0,d6
0004069E <PED.ab2@6866>    BLE 'l2
000406A2 <PED.ab2@6867>    MOVE.l d0,$24(a1)
000406A4 <PED.ab2@6868>    MOVE.l d0,d6
000406A8 <PED.ab2@6871>   MOVEM.l (a7)+,a3/d0
000406AC <PED.ab2@6873>   MOVE.l A3,$28(A1)
000406B2 <PED.ab2@6874>   MOVE.w #$0003,$1C(A1)
000406B6 <PED.ab2@6875>    JSR _DoIO(A6)
000406BC <PED.ab2@6876>   MOVE.w comLong_BlockEndX,D0
000406C0 <PED.ab2@6877>   CMP.w #MAX_Columns-1,D0
000406C4 <PED.ab2@6878>   BNE.w JL_0_3152
000406C6 <PED.ab2@6879>   MOVEA.l A4,A1
000406CE <PED.ab2@6880>   MOVE.l #AL_0_2FD4,$28(A1)
000406D4 <PED.ab2@6881>   CLR.l AL_0_2FD4
000406D6 <PED.ab2@6882>   ADDQ.l #1,D6
000406DE <PED.ab2@6883>   MOVE.l #$1,$24(A1)
000406E6 <PED.ab2@6886>   MOVE.b #$0A,AL_0_2FD4
000406EC <PED.ab2@6887>   MOVE.w #$0003,$1C(A1)
000406F0 <PED.ab2@6888>   JSR _DoIO(A6)
000406F2 <PED.ab2@6902> RTS
000406F8 <PED.ab2@6905>   SF comByte_StateBlockMark
000406FE <PED.ab2@6906>   TST.l comLong_BlockEndY
00040702 <PED.ab2@6907>    BMI.w JL_0_319A
00040708 <PED.ab2@6908>   CMP.l comLong_BlockStartY,D1
0004070C <PED.ab2@6909>    BLT.w JL_0_319A
00040710 <PED.ab2@6910>    BNE.w JL_0_317C
00040716 <PED.ab2@6911>   CMP.w comLong_BlockStartX,D0
0004071A <PED.ab2@6912>    BLT.w JL_0_319A
00040720 <PED.ab2@6915>   CMP.l comLong_BlockEndY,D1
00040724 <PED.ab2@6916>    BGT.w JL_0_319A
00040728 <PED.ab2@6917>    BNE.w JL_0_3194
0004072E <PED.ab2@6918>   CMP.w comLong_BlockEndX,D0
00040732 <PED.ab2@6919>    BGT.w JL_0_319A
00040738 <PED.ab2@6922>   ST comByte_StateBlockMark
0004073A <PED.ab2@6925> RTS
00040744 <PED.ab2@6928>   MOVE.w comLong_BlockStartX,firstcolumn+2
00040746 <PED.ab2@6929>   MOVEA.l A4,A1
0004074A <PED.ab2@6930>   LEA $9(A2),A3
00040750 <PED.ab2@6931>    JSR JL_0_32E6
00040756 <PED.ab2@6932>   CMP.w comLong_BlockStartX,D0
0004075A <PED.ab2@6933>    BGT.w JL_0_31B4
0004075E <PED.ab2@6934> BRA.w JL_0_31D6
00040764 <PED.ab2@6937>   ADDA.w comLong_BlockStartX,A3
0004076A <PED.ab2@6938>   SUB.w comLong_BlockStartX,D0
0004076C <PED.ab2@6939>   SUBQ.w #1,D0
00040770 <PED.ab2@6940>   MOVE.l D0,$24(A1)
00040774 <PED.ab2@6941>   MOVE.l A3,$28(A1)
00040776 <PED.ab2@6942>   ADD.l D0,D6
0004077C <PED.ab2@6943>   MOVE.w #$0003,$1C(A1)
00040780 <PED.ab2@6944>    JSR _DoIO(A6)
00040782 <PED.ab2@6947>   MOVEA.l (A2),A2
00040784 <PED.ab2@6948>   MOVEA.l A4,A1
0004078C <PED.ab2@6949>   MOVE.l #AL_0_2FD4,$28(A1)
00040794 <PED.ab2@6950>   MOVE.l #$1,$24(A1)
0004079C <PED.ab2@6951>   MOVE.b #$A,AL_0_2FD4
000407A2 <PED.ab2@6952>   MOVE.w #$0003,$1C(A1)
000407A6 <PED.ab2@6953>    JSR _DoIO(A6)
000407A8 <PED.ab2@6954>   ADDQ.l #1,D6
000407AA <PED.ab2@6955>   SUBQ.w #2,D7
000407AE <PED.ab2@6956>    BMI.w JL_0_327A
000407B0 <PED.ab2@6959>     MOVEA.l A4,A1
000407B4 <PED.ab2@6960>     LEA $9(A2),A3
000407BA <PED.ab2@6961>     JSR JL_0_32E6
000407BC <PED.ab2@6962>     SUBQ.w #1,D0
000407C0 <PED.ab2@6963>     MOVE.l D0,$24(A1)
000407C4 <PED.ab2@6964>     MOVE.l A3,$28(A1)
000407C6 <PED.ab2@6965>     ADD.l D0,D6
000407CC <PED.ab2@6966>     MOVE.w #$0003,$1C(A1)
000407D0 <PED.ab2@6967>     JSR _DoIO(A6)
000407D2 <PED.ab2@6968>     MOVEA.l A4,A1
000407DA <PED.ab2@6969>     MOVE.l #AL_0_2FD4,$28(A1)
000407E2 <PED.ab2@6970>     MOVE.l #$1,$24(A1)
000407EA <PED.ab2@6971>     MOVE.b #$A,AL_0_2FD4
000407F0 <PED.ab2@6972>     MOVE.w #$0003,$1C(A1)
000407F4 <PED.ab2@6973>     JSR _DoIO(A6)
000407F6 <PED.ab2@6974>     ADDQ.l #1,D6
000407F8 <PED.ab2@6975>     MOVEA.l (A2),A2
000407FC <PED.ab2@6976>   DBF D7,JL_0_3204
00040800 <PED.ab2@6978> BRA.w JL_0_327A
00040802 <PED.ab2@6981>   MOVEA.l A4,A1
0004080A <PED.ab2@6982>   MOVE.l #AL_0_2FD4,$28(A1)
00040812 <PED.ab2@6983>   MOVE.l #$1,$24(A1)
0004081A <PED.ab2@6984>   MOVE.b #$A,AL_0_2FD4
00040820 <PED.ab2@6985>   MOVE.w #$0003,$1C(A1)
00040824 <PED.ab2@6986>   JSR _DoIO(A6)
00040826 <PED.ab2@6987>   ADDQ.l #1,D6
00040828 <PED.ab2@6990>   MOVEA.l A4,A1
0004082C <PED.ab2@6991>   LEA $9(A2),A3
00040832 <PED.ab2@6992>    JSR JL_0_32E6
0004083A <PED.ab2@6993>   CMPI.w #MAX_Columns-1,comLong_BlockEndX
0004083E <PED.ab2@6994>    BEQ.w JL_0_32A8
00040844 <PED.ab2@6995>   CMP.w comLong_BlockEndX,D0
00040848 <PED.ab2@6996>    BGT.w JL_0_32A0
0004084A <PED.ab2@6998>     SUBQ.w #1,D0
0004084E <PED.ab2@6999> BRA.w JL_0_32AA
00040854 <PED.ab2@7002>     MOVE.w comLong_BlockEndX,d1
00040856 <PED.ab2@7003>     ADDQ.w #1,d1
00040858 <PED.ab2@7004>     CMP.w d1,d0
0004085C <PED.ab2@7005>   BEQ xxl2b
00040862 <PED.ab2@7007>   MOVE.w comLong_BlockEndX,D0
00040864 <PED.ab2@7008>   ADDQ.l #2,D0
00040866 <PED.ab2@7011>   SUBQ.l #1,D0
0004086A <PED.ab2@7014>   MOVE.l D0,$24(A1)
0004086E <PED.ab2@7015>   MOVE.l A3,$28(A1)
00040870 <PED.ab2@7016>   ADD.l D0,D6
00040876 <PED.ab2@7017>   MOVE.w #$0003,$1C(A1)
0004087A <PED.ab2@7018>   JSR _DoIO(A6)
0004087C <PED.ab2@7019>   MOVEA.l A4,A1
00040884 <PED.ab2@7020>   MOVE.l #AL_0_2FD4,$28(A1)
0004088C <PED.ab2@7021>   MOVE.l #$1,$24(A1)
00040894 <PED.ab2@7022>   MOVE.b #$A,AL_0_2FD4
0004089A <PED.ab2@7023>   MOVE.w #$0003,$1C(A1)
0004089E <PED.ab2@7024>   JSR _DoIO(A6)
000408A0 <PED.ab2@7025>   ADDQ.l #1,D6
000408A2 <PED.ab2@7026> RTS
000408A8 <PED.ab2@7029>   TST.w comWord_DoTokenize
000408AC <PED.ab2@7030>    BEQ.w JL_0_3310
000408B0 <PED.ab2@7031>   MOVEM.l D1-D7/A0-A2/A4-A6,-(A7)
000408B2 <PED.ab2@7032>   MOVEQ.l #$00,D0
000408B8 <PED.ab2@7033>   MOVEA.l AL_0_5BA6,A1
000408BA <PED.ab2@7034>   MOVEA.l A3,A0
000408C0 <PED.ab2@7035>   JSR detokenize_line
000408C6 <PED.ab2@7036>   MOVEA.l AL_0_5BA6,A3
000408C8 <PED.ab2@7037>   SUBA.l A3,A1
000408CA <PED.ab2@7038>   MOVE.l A1,D0
000408CC <PED.ab2@7039>   ADDQ.w #1,D0
000408D0 <PED.ab2@7040>   MOVEM.l (A7)+,D1-D7/A0-A2/A4-A6
000408D2 <PED.ab2@7041>   RTS
000408D4 <PED.ab2@7044>   MOVEQ.l #$00,D0
000408D8 <PED.ab2@7045>   MOVE.b $8(A2),D0
000408DA <PED.ab2@7046> RTS
000408DC <PED.ab2@7049>   MOVEQ.l #$00,D7
000408E2 <PED.ab2@7050>   MOVE.l comLong_DisplayLine,D0
000408E8 <PED.ab2@7051>   ADD.l comLong_DisplayLineOffset,D0
000408EE <PED.ab2@7052>   CMP.l comLong_BlockStartY,D0
000408F2 <PED.ab2@7053>    BLT.w JL_0_3348
000408F6 <PED.ab2@7054>    BGT.w JL_0_337C
000408FC <PED.ab2@7055>   MOVEA.l comPtr_CurrentSourceLine,A0
00040902 <PED.ab2@7056>   MOVE.l comLong_BlockEndY,D7
00040908 <PED.ab2@7057>   SUB.l comLong_BlockStartY,D7
0004090A <PED.ab2@7058>   RTS
00040910 <PED.ab2@7061>   MOVE.l comLong_BlockStartY,D0
00040916 <PED.ab2@7062>   SUB.l comLong_DisplayLine,D0
0004091C <PED.ab2@7063>   SUB.l comLong_DisplayLineOffset,D0
0004091E <PED.ab2@7064>   SUBQ.l #1,D0
00040924 <PED.ab2@7065>   MOVEA.l comPtr_CurrentSourceLine,A0
00040926 <PED.ab2@7068>   MOVEA.l (A0),A0
0004092A <PED.ab2@7069>    DBF D0,JL_0_3362
00040930 <PED.ab2@7070>   MOVE.l comLong_BlockEndY,D7
00040936 <PED.ab2@7071>   SUB.l comLong_BlockStartY,D7
0004093C <PED.ab2@7072>   MOVE.l A0,comPtr_CurrentSourceLine
0004093E <PED.ab2@7073>   RTS
00040944 <PED.ab2@7076>   SUB.l comLong_BlockStartY,D0
00040946 <PED.ab2@7077>   SUBQ.w #1,D0
0004094C <PED.ab2@7078>   MOVEA.l comPtr_CurrentSourceLine,A0
00040950 <PED.ab2@7081>   MOVEA.l $4(A0),A0
00040954 <PED.ab2@7082>    DBF D0,JL_0_338A
0004095A <PED.ab2@7083>   MOVE.l comLong_BlockEndY,D7
00040960 <PED.ab2@7084>   SUB.l comLong_BlockStartY,D7
00040966 <PED.ab2@7085>   MOVE.l A0,comPtr_CurrentSourceLine
00040968 <PED.ab2@7086> RTS
0004096C <PED.ab2@7090>   MOVEM.l D0-D7/A0-A6,-(A7)
00040974 <PED.ab2@7091>   MOVE.b #1,cutmode
0004097A <PED.ab2@7092>   JSR menu_copy
0004097E <PED.ab2@7093>   MOVEM.l (A7)+,D0-D7/A0-A6
00040984 <PED.ab2@7094>   MOVE.l comPtr_CurrentSourceLine,a4
0004098A <PED.ab2@7095>   JSR menu_kill
0004098C <PED.ab2@7096> RTS
0004098E <PED.ab2@7100>   MOVE.l A4,-(A7)
00040996 <PED.ab2@7142>   MOVE.w #$FFFF,comWord_PasteMode
0004099C <PED.ab2@7143>   JSR JL_0_3748
000409A4 <PED.ab2@7144>   MOVE.w #$0000,comWord_PasteMode
000409A6 <PED.ab2@7161>   MOVEA.l (A7)+,A4
000409A8 <PED.ab2@7162> RTS
000409B2 <PED.ab2@7166>   CMPI.l #$ffffFFFF,comLong_BlockEndY        ;cut block
000409B6 <PED.ab2@7167>    BEQ.w setpointer_to_normal
000409BC <PED.ab2@7168>   CLR.w comWord__AL_0_8AD8
000409C4 <PED.ab2@7169>   MOVE.w #$FFFF,comWord_SourceChanged
000409CA <PED.ab2@7170>   JSR JL_0_5524
000409CC <PED.ab2@7171>   MOVEQ.l #$00,D5
000409D2 <PED.ab2@7172>   MOVEA.l comPtr_Temp_TokenString2,A0
000409D8 <PED.ab2@7175>   CMP.w comLong_BlockStartX,D5
000409DC <PED.ab2@7176>    BCC.w JL_0_34A8
000409E2 <PED.ab2@7177>   JSR JL_0_5650
000409E4 <PED.ab2@7178>   MOVE.b D0,(A0)+
000409E8 <PED.ab2@7179>   BRA.b JL_0_3498
000409EA <PED.ab2@7182>   MOVE.l A0,-(A7)
000409F0 <PED.ab2@7185>     CMP.l comLong_BlockEndY,D6
000409F4 <PED.ab2@7186>      BCC.w JL_0_34BE
000409F6 <PED.ab2@7187>     MOVE.l (A5),-(A7)
000409FC <PED.ab2@7188>     JSR JL_0_5474
000409FE <PED.ab2@7189>     MOVEA.l (A7)+,A5
00040A00 <PED.ab2@7191>     ADDQ.l #1,D6
00040A04 <PED.ab2@7192>   BRA.b JL_0_34AA
00040A0A <PED.ab2@7195>   CMP.l comLong_BlockStartY,D6
00040A0E <PED.ab2@7196>    BEQ.w JL_0_34CA
00040A14 <PED.ab2@7197>   JSR JL_0_553A
00040A16 <PED.ab2@7200>   MOVEA.l (A7)+,A0
00040A1C <PED.ab2@7201>   MOVE.w comLong_BlockEndX,D5
00040A1E <PED.ab2@7203>     ADDQ.w #1,D5
00040A24 <PED.ab2@7204>     CMP.w comWord_MaxColumns,D5
00040A28 <PED.ab2@7205>      BCC.w JL_0_34E4
00040A2E <PED.ab2@7206>     JSR JL_0_5650
00040A30 <PED.ab2@7207>     SUBQ.w #1,D5
00040A32 <PED.ab2@7208>     MOVE.b D0,(A0)+
00040A36 <PED.ab2@7209>   BRA.b JL_0_34D0
00040A3C <PED.ab2@7211>     CMPA.l comPtr_Temp_TokenString3,A0
00040A40 <PED.ab2@7212>      BCC.w JL_0_34F2
00040A44 <PED.ab2@7213>     MOVE.b #$20,(A0)+
00040A48 <PED.ab2@7214>   BRA.b JL_0_34E4
00040A4E <PED.ab2@7217>   MOVE.w comLong_BlockStartX,D0
00040A52 <PED.ab2@7218>    BNE.w JL_0_3510
00040A58 <PED.ab2@7219>   MOVE.w comLong_BlockEndX,D0
00040A5A <PED.ab2@7220>   ADDQ.w #1,D0
00040A60 <PED.ab2@7221>   CMP.w comWord_MaxColumns,D0
00040A64 <PED.ab2@7222>    BCS.w JL_0_3510
00040A6A <PED.ab2@7223>   JSR JL_0_5474
00040A6E <PED.ab2@7224>   BRA.w JL_0_351C
00040A70 <PED.ab2@7227>   MOVEA.l A5,A4
00040A76 <PED.ab2@7228>   MOVE.l A4,comPtr_CurrentSourceLine
00040A7C <PED.ab2@7229>   JSR JL_0_55A2
00040A82 <PED.ab2@7232>   JSR JL_0_572C
00040A88 <PED.ab2@7233>   MOVE.l comLong_DisplayLineOffset,D0
00040A8E <PED.ab2@7234>   ADD.l comLong_DisplayLine,D0
00040A94 <PED.ab2@7235>   CMP.l comLong_TotalLines,D0
00040A98 <PED.ab2@7236>   BCS.w JL_0_3552
00040A9E <PED.ab2@7237>   MOVE.l comLong_TotalLines,D0
00040AA0 <PED.ab2@7238>   SUBQ.l #1,D0
00040AA6 <PED.ab2@7239>   MOVE.l D0,comLong_DisplayLineOffset
00040AAC <PED.ab2@7240>   CLR.l comLong_DisplayLine
00040AB2 <PED.ab2@7241>   JSR update_currsourceline
00040AB8 <PED.ab2@7242>   JSR _redraw
00040ABE <PED.ab2@7243>   MOVE.l comLong_DisplayLineOffset,D0
00040AC2 <PED.ab2@7244>   BRA.w gotoline
00040AC8 <PED.ab2@7247>   JSR update_currsourceline
00040ACE <PED.ab2@7248> JMP _redraw
00040AEE <PED.ab2@7252> str_title_ascreq: Dc.b "Select file to save as ASCII...",0
00040AF2 <PED.ab2@7253> ptr_asciifile:    Ds.l 1
00040AF4 <PED.ab2@7256>   MOVE.l a2,-(a7)
00040AF8 <PED.ab2@7257> BRA saveab
00040AFA <PED.ab2@7260>   MOVE.l A2,-(A7)
00040B00 <PED.ab2@7261>   LEA str_title_ascreq,A2
00040B06 <PED.ab2@7262>   JSR get_filename
00040B08 <PED.ab2@7263>   TST.l D0
00040B0C <PED.ab2@7264>    BEQ.w saveascii_exit
00040B0E <PED.ab2@7267>   MOVE.l D0,-(a7)
00040B14 <PED.ab2@7271>   JSR set_pointerbusy
00040B16 <PED.ab2@7272>   MOVE.l (a7)+,D0
00040B1C <PED.ab2@7274>   MOVEA.l _dosbase,A6                ;d0 = filename
00040B1E <PED.ab2@7275>   MOVE.l D0,D1
00040B24 <PED.ab2@7276>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
00040B28 <PED.ab2@7277>   JSR _Open(A6)
00040B2A <PED.ab2@7278>   TST.l D0
00040B2E <PED.ab2@7279>    BEQ.w saveascii_writeerror
00040B34 <PED.ab2@7281>   MOVE.l D0,ptr_asciifile
00040B36 <PED.ab2@7282>   MOVEQ.l #$00,D7
00040B3C <PED.ab2@7283>   MOVE.l comLong_TotalLines,D7
00040B40 <PED.ab2@7284>    BEQ.w saveascii_done
00040B48 <PED.ab2@7286>   MOVE.b #$A,comByte_EnteredCharacter
00040B4E <PED.ab2@7287>   MOVEA.l comPtr_FirstSourceLine,A2
00040B54 <PED.ab2@7288>   TST.w comWord_DoTokenize
00040B58 <PED.ab2@7289>    BEQ.w JL_0_3608
00040B5C <PED.ab2@7290>    BRA saveascii_writeline_fast
00040B60 <PED.ab2@7293>     LEA $9(A2),A0
00040B66 <PED.ab2@7294>     MOVEA.l comPtr_Temp_TokenString2,A1
00040B6C <PED.ab2@7295>     JSR detokenize_line
00040B70 <PED.ab2@7296>     MOVE.b #$A,(A1)
00040B72 <PED.ab2@7297>     ADDQ.w #1,A1
00040B78 <PED.ab2@7298>     MOVE.l ptr_asciifile,D1
00040B7E <PED.ab2@7299>     MOVE.l comPtr_Temp_TokenString2,D2
00040B80 <PED.ab2@7300>     SUBA.l D2,A1
00040B82 <PED.ab2@7301>     MOVE.l A1,D3
00040B86 <PED.ab2@7302>     JSR _Write(A6)
00040B88 <PED.ab2@7303>     MOVEA.l (A2),A2
00040B8A <PED.ab2@7304>     SUBQ.l #1,d7
00040B8E <PED.ab2@7305>   BNE saveascii_writeline
00040B92 <PED.ab2@7306>   BRA.w saveascii_done
00040B98 <PED.ab2@7309>     MOVE.l A2,saveascii_node
00040B9E <PED.ab2@7310>     MOVE.l D7,saveascii_lines
00040BC8 <PED.ab2@7312>     !basic
00040BD8 <PED.ab2@7313>     node.l     = Peek.l(?saveascii_node)
00040BE8 <PED.ab2@7314>     numlines.l = Peek.l(?saveascii_lines)
00040BF8 <PED.ab2@7315>     fp.l       = Peek.l(?ptr_asciifile)
00040C00 <PED.ab2@7317>     totalLength.l = 0
00040C2E <PED.ab2@7319>     For n.l=0 To numlines-1
00040C3C <PED.ab2@7320>       baseptr.l = node+$9 ;Peek.l (node+$9)
00040C42 <PED.ab2@7321>       sptr.l = baseptr
00040C6A <PED.ab2@7322>       While Peek.b(sptr) : sptr+1 : Wend
00040C84 <PED.ab2@7323>       totalLength + sptr-baseptr+1
00040C92 <PED.ab2@7324>       node = Peek.l(node)
00040CA2 <PED.ab2@7325>     Next
00040CC0 <PED.ab2@7327>     tmp.l      = AllocVec_(totalLength,#MEMF_CLEAR)
00040CCA <PED.ab2@7328>     If tmp
00040CDA <PED.ab2@7329>       node.l     = Peek.l(?saveascii_node)
00040CE0 <PED.ab2@7330>       dptr.l     = tmp
00040D0E <PED.ab2@7331>       For n.l=0 To numlines-1
00040D1C <PED.ab2@7332>         baseptr.l = node+$9 ;Peek.l (node+$9)
00040D22 <PED.ab2@7333>         sptr.l    = baseptr
00040D32 <PED.ab2@7335>            char.b = Peek.b(sptr)
00040D5E <PED.ab2@7336>            Poke.b dptr,char : sptr +1 : dptr+1
00040D74 <PED.ab2@7337>         Until char=0
00040D82 <PED.ab2@7338>         node = Peek.l(node)
00040D92 <PED.ab2@7339>       Next
00040DAC <PED.ab2@7341>       plainLength.l = preproc_DetokenizeFP{*PreProcessor,tmp,totalLength,fp}
00040DBC <PED.ab2@7342>       FreeVec_ tmp
00040DC2 <PED.ab2@7343>     Else
00040E18 <PED.ab2@7344>       error{!TRANS{"Not enough memory for temp buffer!"}}
00040E28 <PED.ab2@7346>     Close_ fp
00040E46 <PED.ab2@7347>     !asm
00040E4C <PED.ab2@7348>     MOVE.l #0,d7
00040E50 <PED.ab2@7350>   BRA saveascii_exit
00040E54 <PED.ab2@7351>   saveascii_node:  Dc.l 0
00040E58 <PED.ab2@7352>   saveascii_lines: Dc.l 0
00040E5C <PED.ab2@7357>     LEA $9(A2),A0
00040E5E <PED.ab2@7358>     MOVEQ.l #$00,D3
00040E62 <PED.ab2@7359>     MOVE.b $8(A2),D3
00040E64 <PED.ab2@7360>     SUBQ.w #1,D3
00040E6A <PED.ab2@7361>     MOVE.l ptr_asciifile,D1
00040E6C <PED.ab2@7362>     MOVE.l A0,D2
00040E70 <PED.ab2@7363>     JSR _Write(A6)
00040E76 <PED.ab2@7364>     MOVE.l #comByte_EnteredCharacter,D2
00040E7C <PED.ab2@7365>     MOVE.l ptr_asciifile,D1
00040E7E <PED.ab2@7366>     MOVEQ.l #$01,D3
00040E82 <PED.ab2@7367>     JSR _Write(A6)
00040E84 <PED.ab2@7368>     MOVEA.l (A2),A2
00040E86 <PED.ab2@7369>     SUBQ.l #1,d7
00040E8A <PED.ab2@7370>     BNE JL_0_3608
00040E8E <PED.ab2@7371>   DBF D7,JL_0_3608
00040E94 <PED.ab2@7374>   MOVE.l ptr_asciifile,D1
00040E98 <PED.ab2@7375>   JSR _Close(A6)
00040E9E <PED.ab2@7378>   JSR set_pointernormal
00040EA0 <PED.ab2@7382>   MOVEA.l (A7)+,A2
00040EA2 <PED.ab2@7383> RTS
00040EA8 <PED.ab2@7386>   JSR set_pointernormal
00040ED2 <PED.ab2@7387>   !basic
00040ED8 <PED.ab2@7388>   WZ_HideMessage{}
00040EF6 <PED.ab2@7389>   !asm
00040EF8 <PED.ab2@7390>   MOVEA.l (A7)+,A2
00040EFE <PED.ab2@7391>   LEA comStr_ErrorWriteFile,A0
00040F04 <PED.ab2@7392> JMP show_errorrequester
00040F0A <PED.ab2@7401>   MOVE.w comWord_QualifierStore,D0
00040F0E <PED.ab2@7402>   ANDI.w #$3,D0
00040F12 <PED.ab2@7404>   BEQ.b menu_saveblockas
00040F18 <PED.ab2@7406>   JSR menu_kill
00040F1E <PED.ab2@7407> JMP update_vertscroller
00040F28 <PED.ab2@7410>   CMPI.l #$ffffFFFF,comLong_BlockEndY
00040F2C <PED.ab2@7411>   BEQ.w setpointer_to_normal
00040F32 <PED.ab2@7412>   LEA comStr_ASLSaveBlock,A2
00040F38 <PED.ab2@7413>   JSR get_filename
00040F3A <PED.ab2@7414>   TST.l D0
00040F3E <PED.ab2@7415>   BEQ.w JL_0_3732
00040F44 <PED.ab2@7416>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
00040F4C <PED.ab2@7417>   MOVE.b #1,menuload
00040F52 <PED.ab2@7418>   JSR open_sourcefile
00040F54 <PED.ab2@7419>   MOVE.l D7,-(A7)
00040F5A <PED.ab2@7420>   MOVEA.l comPtr_CurrentSourceLine,A4
00040F60 <PED.ab2@7421>   JSR JL_0_5524
00040F62 <PED.ab2@7422>   MOVE.l (A7)+,D7
00040F6A <PED.ab2@7423>   MOVE.w #$FFFF,comWord__AL_0_8AD8
00040F70 <PED.ab2@7426>       JSR JL_0_5630
00040F74 <PED.ab2@7427>       BMI.w JL_0_372E
00040F78 <PED.ab2@7428>       BEQ.w JL_0_36C4
00040F7E <PED.ab2@7429>       MOVE.b D0,comLong_LinePosStartX
00040F80 <PED.ab2@7430>       MOVE.l D7,D1
00040F86 <PED.ab2@7431>       MOVE.l #comLong_LinePosStartX,D2
00040F88 <PED.ab2@7432>       MOVEQ.l #$01,D3
00040F8C <PED.ab2@7433>       JSR _Write(A6)
00040F90 <PED.ab2@7434>     BRA.b JL_0_36A2
00040F98 <PED.ab2@7437>     MOVE.b #$A,comLong_LinePosStartX
00040F9A <PED.ab2@7438>     MOVE.l D7,D1
00040FA0 <PED.ab2@7439>     MOVE.l #comLong_LinePosStartX,D2
00040FA2 <PED.ab2@7440>     MOVEQ.l #$01,D3
00040FA6 <PED.ab2@7441>     JSR _Write(A6)
00040FA8 <PED.ab2@7442>     MOVEQ.l #$00,D5
00040FAE <PED.ab2@7445>     CMP.l comLong_BlockEndY,D6
00040FB2 <PED.ab2@7446>      BCS.w JL_0_36F4
00040FB8 <PED.ab2@7447>     MOVE.w comWord_DoTokenize,D0
00040FBC <PED.ab2@7448>      BEQ.b JL_0_36A2
00040FC2 <PED.ab2@7449>      JSR JL_0_553A
00040FC4 <PED.ab2@7450>     MOVEQ.l #$00,D5
00040FC8 <PED.ab2@7451>   BRA.b JL_0_36A2
00040FCE <PED.ab2@7454>   JSR JL_0_553A
00040FD0 <PED.ab2@7455>   MOVE.l D7,D1
00040FD6 <PED.ab2@7456>   MOVEA.l comPtr_Temp_TokenString3,A0
00040FD8 <PED.ab2@7457>   MOVEQ.l #$00,D3
00040FDA <PED.ab2@7458>   MOVE.b (A0),D3
00040FE0 <PED.ab2@7459>   MOVE.b #$A,$0(A0,D3.W)
00040FE2 <PED.ab2@7460>   ADDQ.w #1,A0
00040FE4 <PED.ab2@7461>   MOVE.l A0,D2
00040FE6 <PED.ab2@7462>   MOVE.l D7,D1
00040FEA <PED.ab2@7463>   JSR _Write(A6)
00040FEC <PED.ab2@7464>   TST.l D0
00040FF0 <PED.ab2@7465>   BPL.w JL_0_3728
00040FF2 <PED.ab2@7466>   SUBA.l A0,A0
00040FF8 <PED.ab2@7467>   MOVEA.l #comStr_ErrorWriteFile,A0
00040FFE <PED.ab2@7468>   JSR show_errorrequester
00041002 <PED.ab2@7469>   BRA.w JL_0_372E
00041004 <PED.ab2@7472>   MOVEA.l (A5),A5
00041006 <PED.ab2@7473>   ADDQ.l #1,D6
0004100A <PED.ab2@7474>   BRA.b JL_0_36Dca
0004100E <PED.ab2@7477>   BRA.w JL_0_4E4Ab
00041010 <PED.ab2@7480> RTS
00041016 <PED.ab2@7483>   CLR.w comWord__AL_0_8AD8
0004101C <PED.ab2@7484>   LEA comStr_ASLLoadBlock,A2
00041022 <PED.ab2@7485>   JSR get_filename
00041024 <PED.ab2@7486>   TST.l D0
00041028 <PED.ab2@7487>   BNE.b JL_0_3748
0004102A <PED.ab2@7488> RTS
00041030 <PED.ab2@7492> JMP close_sourcefile
00041036 <PED.ab2@7496>   MOVEA.l comPtr_CurrentSourceLine,A4
0004103C <PED.ab2@7497>   MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
00041042 <PED.ab2@7498>   CLR.b menuload
00041048 <PED.ab2@7499>   JSR open_sourcefile
0004104E <PED.ab2@7500>   JSR source_readin
00041052 <PED.ab2@7501>   BEQ.w JL_0_4E4Ab
0004105A <PED.ab2@7502>   MOVE.w #$FFFF,comWord_LabelListChanged
00041062 <PED.ab2@7503>   MOVE.w #$FFFF,comWord_SourceChanged
00041068 <PED.ab2@7504>   MOVEA.l textbufferaddr,A2
0004106E <PED.ab2@7505>   ADDA.w comWord_TextBufferOffset,A2
00041070 <PED.ab2@7506>   MOVEA.l A2,A0
00041076 <PED.ab2@7507>   ADDA.w comWord_MaxColumns,A0
0004107C <PED.ab2@7508>   MOVE.l A0,comLong_LinePosStartX
00041082 <PED.ab2@7509>   MOVE.w comWord_ColumnsOffset,D1
00041088 <PED.ab2@7510>   ADD.w comWord_Column,D1
0004108E <PED.ab2@7511>   MOVEA.l comPtr_Temp_TokenString1,A3
00041090 <PED.ab2@7512>   MOVEQ.l #$00,D4
00041096 <PED.ab2@7513>   CLR.b instring
00041098 <PED.ab2@7516>     CMP.w D1,D4
0004109C <PED.ab2@7517>     BCC.w JL_0_37A2
0004109E <PED.ab2@7518>     MOVE.b (A2)+,D0
000410A2 <PED.ab2@7519>     CMP.b #$22,d0
000410A6 <PED.ab2@7520>     BNE 'l1
000410AC <PED.ab2@7521>     NOT.b instring
000410B2 <PED.ab2@7523>     TST.b instring
000410B6 <PED.ab2@7524>     BNE 'l2
000410BA <PED.ab2@7525>     BCLR #$7,D0                      ;paste mix line
000410BC <PED.ab2@7527>     MOVE.b D0,(A3)+
000410BE <PED.ab2@7528>     ADDQ.w #1,D4
000410C2 <PED.ab2@7529>   BRA.b JL_0_3790
000410C4 <PED.ab2@7532>   MOVE.l A2,-(A7)
000410CA <PED.ab2@7533>   CLR.w pastecolumn
000410CC <PED.ab2@7545>   MOVEQ #0,d0
000410CE <PED.ab2@7547>   ADDQ.l #1,d0
000410D0 <PED.ab2@7548>   SUBQ.w #1,d6
000410D2 <PED.ab2@7551>   SUBQ.l #1,d0
000410D4 <PED.ab2@7552>   ADDQ.w #1,d6
000410DA <PED.ab2@7553>   MOVE.w d0,pastecolumn
000410E4 <PED.ab2@7557>   MOVE.l comPtr_Temp_TokenString2,tempstore
000410EA <PED.ab2@7558>   JSR JL_0_4F5A
000410EE <PED.ab2@7559>   BEQ.w JL_0_37DE
000410F4 <PED.ab2@7560>   JSR JL_0_4E36
000410FA <PED.ab2@7561>   JSR JL_0_5596
00041100 <PED.ab2@7562>   CLR.b skipit
00041106 <PED.ab2@7565>   MOVEA.l comPtr_Temp_TokenString2,A0
0004110C <PED.ab2@7568>   TST.w pastecolumn
00041110 <PED.ab2@7569>   BEQ 'l1a
00041116 <PED.ab2@7570>   MOVE.w pastecolumn,d0
0004111A <PED.ab2@7571>   BRA 'nc
00041120 <PED.ab2@7573>   MOVE.l firstcolumn,d0
00041124 <PED.ab2@7574>   BEQ 'w1
00041126 <PED.ab2@7575>   ADDQ.l #2,d0
00041128 <PED.ab2@7577>   SUBQ.l #1,d0
0004112C <PED.ab2@7578>   BEQ 'f1
0004112E <PED.ab2@7579>   SUBQ.w #1,d6
00041132 <PED.ab2@7580>   CMP.b #32,(a5)+                    ;paste at column
00041136 <PED.ab2@7581>   BEQ 'l1
00041138 <PED.ab2@7583>   ADDQ.w #1,d6
0004113A <PED.ab2@7584>   SUBQ.l #1,a5
00041140 <PED.ab2@7586>   MOVE.w comWord_Column,d0
00041146 <PED.ab2@7587>   ADD.w comWord_ColumnsOffset,D0
0004114A <PED.ab2@7588>   BEQ 'nc
0004114E <PED.ab2@7590>   CMP.w #MAX_Columns-10,d0
00041152 <PED.ab2@7591>   BLE 'l1b
00041156 <PED.ab2@7592>   MOVE.w #MAX_Columns-10,d0
0004115A <PED.ab2@7594>     MOVE.b #32,(a0)+
0004115C <PED.ab2@7595>     SUBQ.w #1,d0
00041160 <PED.ab2@7596>   BNE 'l1b
00041166 <PED.ab2@7598>   MOVE.l a0,tempstore
0004116C <PED.ab2@7600>   JSR JL_0_4F5A
0004116E <PED.ab2@7601>   TST.w d0
00041172 <PED.ab2@7602>   BMI.w JL_0_37CA
00041178 <PED.ab2@7604>   JSR JL_0_4F1A
0004117E <PED.ab2@7605>   JSR JL_0_4E08
00041182 <PED.ab2@7606>   BRA.b JL_0_37B4
00041188 <PED.ab2@7609>   JSR allocnewline
0004118C <PED.ab2@7610>   BEQ.w JL_0_4942
00041192 <PED.ab2@7611>   JSR JL_0_4E08
00041198 <PED.ab2@7612>   MOVEA.l comPtr_Temp_TokenString1,A3
0004119C <PED.ab2@7613>   BRA.w JL_0_37F6
000411A2 <PED.ab2@7616>   JSR JL_0_4E36
000411A6 <PED.ab2@7617>   BRA.w JL_0_37F6
000411AC <PED.ab2@7620>   JSR JL_0_4F1A
000411B2 <PED.ab2@7621>   JSR JL_0_4E08
000411B8 <PED.ab2@7622>   MOVEA.l comPtr_Temp_TokenString1,A3
000411BE <PED.ab2@7623>   JSR JL_0_4E36
000411C4 <PED.ab2@7627>    JSR close_sourcefile
000411C6 <PED.ab2@7628>   MOVEA.l (A7)+,A2
000411CC <PED.ab2@7629>   CLR.b instring
000411D2 <PED.ab2@7632>     CMPA.l comLong_LinePosStartX,A2
000411D6 <PED.ab2@7633>      BCC.w JL_0_3816
000411DC <PED.ab2@7634>     CMPA.l comPtr_Temp_TokenString2,A3
000411E0 <PED.ab2@7635>      BCC.w JL_0_3816
000411E2 <PED.ab2@7636>     MOVE.b (A2)+,D0
000411E4 <PED.ab2@7640>     MOVE.b D0,(A3)+
000411E8 <PED.ab2@7641>   BRA.b JL_0_37FC
000411EE <PED.ab2@7644>   MOVEA.l comPtr_Temp_TokenString1,A2
000411F4 <PED.ab2@7645>   JSR parse_line
000411FA <PED.ab2@7646>   JSR JL_0_55AA
00041200 <PED.ab2@7647>   JSR update_currsourceline
00041206 <PED.ab2@7648>   JSR JL_0_572C
0004120A <PED.ab2@7649> BRA.w _redrawb
0004120C <PED.ab2@7651> RTS
00041216 <PED.ab2@7655>   CMPI.l #$ffffFFFF,comLong_BlockEndY
0004121A <PED.ab2@7656>    BEQ.w setpointer_to_normal
00041220 <PED.ab2@7657>   CLR.w comWord__AL_0_8AD8
00041228 <PED.ab2@7658>   MOVE.w #$FFFF,comWord_SourceChanged
0004122E <PED.ab2@7659>   MOVE.l comLong_DisplayLineOffset,D7
00041234 <PED.ab2@7660>   ADD.l comLong_DisplayLine,D7
0004123A <PED.ab2@7661>   CMP.l comLong_BlockStartY,D7
0004123E <PED.ab2@7662>    BCS.w JL_0_387E
00041242 <PED.ab2@7663>    BNE.w JL_0_386A
00041248 <PED.ab2@7664>    JSR JL_0_79CC
0004124C <PED.ab2@7665>    BNE.w JL_0_386A
00041250 <PED.ab2@7666>  BRA.w JL_0_387E
00041256 <PED.ab2@7669>   CMP.l comLong_BlockEndY,D7
0004125A <PED.ab2@7670>    BHI.w JL_0_387E
0004125E <PED.ab2@7671>    BNE.w setpointer_to_normal
00041264 <PED.ab2@7672>    JSR JL_0_79F0
00041268 <PED.ab2@7673>    BEQ.w setpointer_to_normal
0004126E <PED.ab2@7675>    JSR JL_0_5524
00041274 <PED.ab2@7676>   MOVEA.l textbufferaddr,A2
0004127A <PED.ab2@7677>   ADDA.w comWord_TextBufferOffset,A2
0004127C <PED.ab2@7678>   MOVEA.l A2,A1
00041282 <PED.ab2@7679>   MOVE.w comWord_ColumnsOffset,D2
00041288 <PED.ab2@7680>   ADD.w comWord_Column,D2
0004128A <PED.ab2@7681>   MOVEQ.l #$00,D1
00041290 <PED.ab2@7682>   MOVEA.l comPtr_Temp_TokenString2,A0
00041292 <PED.ab2@7684>   CMP.w D2,D1
00041296 <PED.ab2@7685>    BCC.w JL_0_38AC
00041298 <PED.ab2@7686>   MOVE.b (A1)+,D0
0004129C <PED.ab2@7687>   ANDI.b #$7F,D0
0004129E <PED.ab2@7688>   MOVE.b D0,(A0)+
000412A0 <PED.ab2@7689>   ADDQ.w #1,D1
000412A4 <PED.ab2@7690>  BRA.b JL_0_389A
000412A8 <PED.ab2@7693>   MOVEM.l D1/A1,-(A7)
000412AE <PED.ab2@7695>    JSR JL_0_5630
000412B2 <PED.ab2@7696>    BMI.w JL_0_3982
000412B6 <PED.ab2@7697>    BEQ.w JL_0_38C8
000412BC <PED.ab2@7698>   CMP.w comWord_MaxColumns,D1
000412C0 <PED.ab2@7699>    BCC.b JL_0_38B0
000412C2 <PED.ab2@7700>   MOVE.b D0,(A0)+
000412C4 <PED.ab2@7701>   ADDQ.w #1,D1
000412C8 <PED.ab2@7702>  BRA.b JL_0_38B0
000412CE <PED.ab2@7705>   CMP.w comWord_MaxColumns,D1
000412D2 <PED.ab2@7706>    BCC.w JL_0_38D8
000412D6 <PED.ab2@7707>   MOVE.b #$20,(A0)+
000412D8 <PED.ab2@7708>   ADDQ.w #1,D1
000412DC <PED.ab2@7709>  BRA.b JL_0_38C8
000412E2 <PED.ab2@7712>   MOVEA.l comPtr_Temp_TokenString2,A2
000412E8 <PED.ab2@7713>    JSR parse_line
000412EA <PED.ab2@7714>   MOVE.l D5,D0
000412EC <PED.ab2@7715>   MOVEQ.l #$01,D1
000412F2 <PED.ab2@7716>   MOVEA.l _execbase,A6
000412F6 <PED.ab2@7717>   ADDI.w #$9,D0
000412FC <PED.ab2@7718>    JSR JL_0_492E
000412FE <PED.ab2@7719>   MOVEA.l D0,A0
00041302 <PED.ab2@7720>   LEA $9(A0),A0
00041308 <PED.ab2@7721>   MOVEA.l comPtr_Temp_TokenString1,A1
0004130A <PED.ab2@7723>   MOVE.b (A1)+,(A0)+
0004130E <PED.ab2@7724>    BNE.b JL_0_38FA
00041310 <PED.ab2@7725>   MOVEA.l D0,A0
00041316 <PED.ab2@7727>   ADDQ.l #1,comLong_TotalLines
0004131A <PED.ab2@7728>   MOVE.b D5,$8(A0)
0004131E <PED.ab2@7729>   MOVE.l $4(A4),D1
00041322 <PED.ab2@7730>    BNE.w JL_0_3920
00041328 <PED.ab2@7731>   MOVE.l A0,comPtr_FirstSourceLine
0004132C <PED.ab2@7732>   CLR.l $4(A0)
00041330 <PED.ab2@7733>  BRA.w JL_0_3928
00041332 <PED.ab2@7736>   MOVEA.l D1,A1
00041334 <PED.ab2@7737>   MOVE.l A0,(A1)
00041338 <PED.ab2@7738>   MOVE.l A1,$4(A0)
0004133C <PED.ab2@7740>   MOVE.l A0,$4(A4)
0004133E <PED.ab2@7741>   MOVE.l A4,(A0)
00041344 <PED.ab2@7742>   CMP.l comLong_BlockEndY,D6
00041348 <PED.ab2@7743>    BCC.w JL_0_3968
0004134A <PED.ab2@7744>   MOVEQ.l #$00,D0
0004134E <PED.ab2@7745>   MOVE.b $8(A5),D0
00041350 <PED.ab2@7746>   MOVE.w D0,D5
00041354 <PED.ab2@7747>   ADDI.w #$9,D0
00041356 <PED.ab2@7748>   MOVEQ.l #$01,D1
0004135C <PED.ab2@7749>   MOVEA.l _execbase,A6
00041362 <PED.ab2@7750>    JSR JL_0_492E
00041364 <PED.ab2@7751>   MOVEA.l D0,A0
00041368 <PED.ab2@7752>   MOVEM.l A0/A5,-(A7)
0004136C <PED.ab2@7753>   LEA $9(A0),A0
00041370 <PED.ab2@7754>   LEA $9(A5),A5
00041372 <PED.ab2@7756>   MOVE.b (A5)+,(A0)+
00041376 <PED.ab2@7757>    BNE.b JL_0_395A
0004137A <PED.ab2@7758>   MOVEM.l (A7)+,A0/A5
0004137C <PED.ab2@7759>   ADDQ.l #1,D6
0004137E <PED.ab2@7760>   MOVEA.l (A5),A5
00041382 <PED.ab2@7761>  BRA.b JL_0_3900
00041388 <PED.ab2@7764>   MOVE.w comWord_DoTokenize,D0
0004138C <PED.ab2@7765>    BEQ.w JL_0_3976
00041392 <PED.ab2@7766>    JSR JL_0_553A
00041398 <PED.ab2@7768>   MOVEA.l comPtr_Temp_TokenString2,A0
0004139A <PED.ab2@7769>   MOVEQ.l #$00,D5
0004139C <PED.ab2@7770>   MOVEQ.l #$00,D1
000413A0 <PED.ab2@7771>  BRA.w JL_0_38B0
000413A4 <PED.ab2@7774>   MOVEM.l (A7)+,D1/A1
000413AA <PED.ab2@7776>   CMP.w comWord_MaxColumns,D1
000413AE <PED.ab2@7777>    BCC.w JL_0_399A
000413B0 <PED.ab2@7778>   MOVE.b (A1)+,D0
000413B4 <PED.ab2@7779>   ANDI.b #$7F,D0
000413B6 <PED.ab2@7780>   MOVE.b D0,(A0)+
000413B8 <PED.ab2@7781>   ADDQ.w #1,D1
000413BC <PED.ab2@7782>  BRA.b JL_0_3986
000413C2 <PED.ab2@7785>   CMPA.l comPtr_Temp_TokenString3,A0
000413C6 <PED.ab2@7786>    BCC.w JL_0_39A8
000413CA <PED.ab2@7787>   MOVE.b #$20,(A0)+
000413CE <PED.ab2@7788>  BRA.b JL_0_399A
000413D4 <PED.ab2@7791>    JSR JL_0_55A2
000413DA <PED.ab2@7792>   MOVE.w comWord_ColumnsOffset,D0
000413E0 <PED.ab2@7793>   ADD.w comWord_Column,D0
000413E6 <PED.ab2@7794>   MOVE.l comLong_DisplayLineOffset,D7
000413EC <PED.ab2@7795>   ADD.l comLong_DisplayLine,D7
000413F2 <PED.ab2@7796>   CMP.l comLong_BlockEndY,D7
000413F6 <PED.ab2@7797>    BHI.w JL_0_3A42
000413FA <PED.ab2@7798>    BNE.w JL_0_39D0
00041400 <PED.ab2@7799>   CMP.w comLong_BlockEndX,D0
00041404 <PED.ab2@7800>    BHI.w JL_0_3A42
0004140A <PED.ab2@7802>   MOVE.l comLong_BlockEndY,D1
00041410 <PED.ab2@7803>   SUB.l comLong_BlockStartY,D1
00041416 <PED.ab2@7804>   MOVE.w comLong_BlockEndX,D2
00041418 <PED.ab2@7805>   ADDQ.w #1,D2
0004141E <PED.ab2@7806>   CMP.w comWord_MaxColumns,D2
00041422 <PED.ab2@7807>    BCS.w JL_0_39FA
00041424 <PED.ab2@7808>   ADDQ.l #1,D1
0004142A <PED.ab2@7809>   CMP.l comLong_BlockStartY,D7
0004142E <PED.ab2@7810>    BCS.w JL_0_3A36
00041434 <PED.ab2@7811>   SUB.w D0,comLong_BlockStartX
00041438 <PED.ab2@7812>  BRA.w JL_0_3A36
0004143E <PED.ab2@7815>   CMP.l comLong_BlockStartY,D7
00041442 <PED.ab2@7816>    BCS.w JL_0_3A36
00041448 <PED.ab2@7817>   CMP.l comLong_BlockEndY,D7
0004144C <PED.ab2@7818>    BEQ.w JL_0_3A1C
00041452 <PED.ab2@7819>   MOVE.w comLong_BlockEndX,D2
00041454 <PED.ab2@7820>   SUB.w D0,D2
00041456 <PED.ab2@7821>   ADDQ.w #1,D2
0004145C <PED.ab2@7822>   ADD.w D2,comLong_BlockStartX
00041460 <PED.ab2@7823>  BRA.w JL_0_3A32
00041466 <PED.ab2@7826>   MOVE.w comLong_BlockEndX,D2
0004146C <PED.ab2@7827>   SUB.w comLong_BlockStartX,D2
0004146E <PED.ab2@7828>   ADDQ.w #1,D2
00041474 <PED.ab2@7829>   ADD.w D2,comLong_BlockStartX
0004147A <PED.ab2@7830>   ADD.w D2,comLong_BlockEndX
00041480 <PED.ab2@7833>   JSR JL_0_7A14
00041486 <PED.ab2@7836>   ADD.l D1,comLong_BlockStartY
0004148C <PED.ab2@7837>   ADD.l D1,comLong_BlockEndY
00041492 <PED.ab2@7839>   JSR update_currsourceline
00041496 <PED.ab2@7840> BRA.w _redrawb
000414A0 <PED.ab2@7843>   CMPI.l #$ffffFFFF,comLong_BlockEndY
000414A4 <PED.ab2@7844>   BEQ.w setpointer_to_normal
000414AA <PED.ab2@7845>   JSR JL_0_572C
000414AE <PED.ab2@7846> BRA.w _redrawb
000414B4 <PED.ab2@7863>   MOVEA.l comPtr_FirstSourceLine,A1
000414B6 <PED.ab2@7864>   MOVEQ.l #$00,D0
000414BC <PED.ab2@7865>   MOVE.l comLong_TotalLines,D1
000414BE <PED.ab2@7866>   SUBQ.l #1,D1
000414C2 <PED.ab2@7867>   BEQ JL_0_3A9A
000414C6 <PED.ab2@7870>     CMPA.l $4(A0),A1
000414CA <PED.ab2@7872>     BNE.w 'l10
000414CC <PED.ab2@7873>     ADDQ.l #1,d0
000414D2 <PED.ab2@7874>     JMP jumpline
000414D4 <PED.ab2@7877>     MOVEA.l (A1),A1
000414D6 <PED.ab2@7878>     ADDQ.l #1,D0
000414D8 <PED.ab2@7879>     SUBQ.l #1,d1
000414DC <PED.ab2@7880>   BNE JL_0_3A88
000414DE <PED.ab2@7881>   MOVEQ.l #-$01,D0
000414E0 <PED.ab2@7884> RTS
000414E6 <PED.ab2@7889>   JSR get_mousepos
000414EA <PED.ab2@7890>   BMI.w exit_leftmousebutton         ; ausserhalb source- und statusareabereich
000414EC <PED.ab2@7895>   MOVE.l D3,D1                       ; ab hier: blockmarkieren bis loslassen
000414F2 <PED.ab2@7896>   ADD.l comLong_DisplayLineOffset,D1
000414F8 <PED.ab2@7897>   CMP.l comLong_TotalLines,D1
000414FC <PED.ab2@7898>    BCC.w exit_leftmousebutton
00041502 <PED.ab2@7901>   MOVE.w comLong_BlockStartX,-(a7)
00041508 <PED.ab2@7902>   MOVE.l comLong_BlockStartY,-(a7)
0004150E <PED.ab2@7905>   MOVE.w comLong_BlockEndX,-(a7)
00041514 <PED.ab2@7906>   MOVE.l comLong_BlockEndY,-(a7)
0004151E <PED.ab2@7907>   CMPI.l #$ffffFFFF,comLong_BlockEndY
00041522 <PED.ab2@7908>    BEQ.w JL_0_3ADC
00041528 <PED.ab2@7909>    JSR JL_0_572C
0004152C <PED.ab2@7910>   MOVEM.l D2-D3,-(A7)
00041532 <PED.ab2@7911>   JSR _redraw
00041536 <PED.ab2@7912>   MOVEM.l (A7)+,D2-D3
00041538 <PED.ab2@7915>   MOVE.l D3,D1
0004153E <PED.ab2@7916>   ADD.l comLong_DisplayLineOffset,D1
00041544 <PED.ab2@7917>   MOVE.l D1,comLong_LinePosStartY
0004154A <PED.ab2@7918>   MOVE.l D1,comLong_LinePosEndY
00041550 <PED.ab2@7919>   ADD.w comWord_ColumnsOffset,D2
00041556 <PED.ab2@7920>   MOVE.w D2,comLong_LinePosStartX
0004155C <PED.ab2@7921>   MOVE.w D2,comWord_LinePosEndX
00041562 <PED.ab2@7922>    JSR JL_0_57F2
00041564 <PED.ab2@7923>   MOVE.w D2,D5
00041566 <PED.ab2@7924>   MOVE.l D3,D6
00041568 <PED.ab2@7925>   MOVE.w D2,D0
0004156A <PED.ab2@7926>   MOVE.l D3,D1
00041570 <PED.ab2@7927>   CLR.w comWord__AL_0_86B8
00041576 <PED.ab2@7928>   MOVE.l comLong_DisplayLineOffset,-(A7)
0004157C <PED.ab2@7929>   MOVE.w comWord_ColumnsOffset,-(A7)
0004157E <PED.ab2@7930>   MOVE.l A4,-(A7)
00041584 <PED.ab2@7931>   JSR JL_0_59BC
0004158A <PED.ab2@7934>   JSR check_events
0004158E <PED.ab2@7935>   CMP.w #-$4,D7
00041592 <PED.ab2@7936>    BEQ.w JL_0_3DD0
00041598 <PED.ab2@7937>   JSR get_mousepos                   ;mark block loop
0004159C <PED.ab2@7940>    BPL.w JL_0_3C38                   ;ok
000415A2 <PED.ab2@7941>   CMP.w win_TopEdge,D1
000415A6 <PED.ab2@7942>    BCS.w JL_0_3BCE
000415AC <PED.ab2@7943>   MOVE.l viewablelines,D3
000415AE <PED.ab2@7944>   MOVE.l D3,D0
000415B4 <PED.ab2@7945>   ADD.l comLong_DisplayLineOffset,D0
000415BA <PED.ab2@7946>   CMP.l comLong_TotalLines,D0
000415BE <PED.ab2@7947>    BCC.b JL_0_3B1E
000415C0 <PED.ab2@7948>   SUBQ.l #1,D3
000415C6 <PED.ab2@7949>   MOVE.w comWord_MaxColumns,D2
000415CC <PED.ab2@7950>   MOVE.l comLong_DisplayLineOffset,D0
000415D2 <PED.ab2@7951>   ADD.l viewablelines,D0
000415D8 <PED.ab2@7952>   CMP.l comLong_TotalLines,D0
000415DC <PED.ab2@7953>    BCC.w JL_0_3D06
000415E0 <PED.ab2@7954>   MOVEM.l D5-D6,-(A7)
000415E6 <PED.ab2@7955>    JSR source_fullscroll_down
000415E8 <PED.ab2@7956>   MOVEA.l (A4),A4
000415EE <PED.ab2@7957>   MOVE.l A4,comPtr_CurrentSourceLine
000415F4 <PED.ab2@7958>   ADDQ.l #1,comLong_DisplayLineOffset
000415FA <PED.ab2@7959>    JSR JL_0_5B60
000415FE <PED.ab2@7960>   MOVEM.l (A7)+,D5-D6
00041600 <PED.ab2@7961>   SUBQ.w #1,D6
00041606 <PED.ab2@7962>   MOVE.w comWord_MaxColumns,D2
0004160C <PED.ab2@7963>   MOVE.l viewablelines,D3
0004160E <PED.ab2@7964>   SUBQ.l #1,D3
00041610 <PED.ab2@7965>   MOVE.l D3,D1
00041616 <PED.ab2@7966>   ADD.l comLong_DisplayLineOffset,D1
0004161C <PED.ab2@7967>   CMP.l comLong_LinePosStartY,D1
00041620 <PED.ab2@7968>    BHI.w JL_0_3D06
00041622 <PED.ab2@7969>   MOVE.l D1,-(A7)
00041624 <PED.ab2@7970>   MOVE.w D5,D2
00041626 <PED.ab2@7971>   MOVE.w D6,D3
0004162C <PED.ab2@7972>   MOVE.w comWord_MaxColumns,D0
00041632 <PED.ab2@7973>   MOVE.l viewablelines,D1
00041634 <PED.ab2@7974>   SUBQ.l #2,D1
0004163A <PED.ab2@7975>    JSR JL_0_59BC
00041640 <PED.ab2@7976>   MOVE.w comWord_MaxColumns,D5
00041646 <PED.ab2@7977>   MOVE.l viewablelines,D6
00041648 <PED.ab2@7978>   SUBQ.l #1,D6
0004164A <PED.ab2@7979>   MOVE.l D6,D3
0004164C <PED.ab2@7980>   MOVEQ.l #-$01,D2
0004164E <PED.ab2@7981>   MOVE.l (A7)+,D1
00041654 <PED.ab2@7982>   CMP.l comLong_LinePosStartY,D1
00041658 <PED.ab2@7983>    BNE.w JL_0_3D06
0004165E <PED.ab2@7984>   MOVE.w comLong_LinePosStartX,D5
00041660 <PED.ab2@7985>   ADDQ.w #1,D5
00041664 <PED.ab2@7986>   BRA.w JL_0_3D06
00041666 <PED.ab2@7989>   MOVEQ.l #$00,D2
00041668 <PED.ab2@7990>   MOVEQ.l #$00,D3
0004166E <PED.ab2@7991>   MOVE.l comLong_DisplayLineOffset,D0
00041672 <PED.ab2@7992>    BEQ.w JL_0_3D06
00041676 <PED.ab2@7993>   MOVEM.l D5-D6,-(A7)
0004167C <PED.ab2@7994>    JSR source_fullscroll_up
00041680 <PED.ab2@7995>   MOVEA.l $4(A4),A4
00041686 <PED.ab2@7996>   MOVE.l A4,comPtr_CurrentSourceLine
0004168C <PED.ab2@7997>   SUBQ.l #1,comLong_DisplayLineOffset
00041692 <PED.ab2@7998>    JSR JL_0_5B24
00041696 <PED.ab2@7999>   MOVEM.l (A7)+,D5-D6
00041698 <PED.ab2@8000>   ADDQ.w #1,D6
0004169A <PED.ab2@8001>   MOVEQ.l #$00,D3
0004169C <PED.ab2@8002>   MOVEQ.l #$00,D2
000416A2 <PED.ab2@8003>   MOVE.l comLong_DisplayLineOffset,D1
000416A8 <PED.ab2@8004>   CMP.l comLong_LinePosStartY,D1
000416AC <PED.ab2@8005>    BCS.w JL_0_3D06
000416AE <PED.ab2@8006>   MOVE.w D5,D2
000416B0 <PED.ab2@8007>   MOVE.w D6,D3
000416B2 <PED.ab2@8008>   MOVEQ.l #$00,D0
000416B4 <PED.ab2@8009>   MOVEQ.l #$01,D1
000416BA <PED.ab2@8010>    JSR JL_0_59BC
000416C0 <PED.ab2@8011>   MOVE.w comWord_MaxColumns,D2
000416C2 <PED.ab2@8012>   MOVEQ.l #$00,D3
000416C4 <PED.ab2@8013>   MOVEQ.l #-$01,D5
000416C6 <PED.ab2@8014>   MOVEQ.l #$00,D6
000416CC <PED.ab2@8015>   MOVE.l comLong_DisplayLineOffset,D1
000416D2 <PED.ab2@8016>   CMP.l comLong_LinePosStartY,D1
000416D6 <PED.ab2@8017>    BNE.w JL_0_3D06
000416DC <PED.ab2@8018>   MOVE.w comLong_LinePosStartX,D5
000416DE <PED.ab2@8019>   SUBQ.w #1,D5
000416E2 <PED.ab2@8020>   BRA.w JL_0_3D06
000416E8 <PED.ab2@8023>   ADD.w comWord_ColumnsOffset,D2
000416EA <PED.ab2@8024>   MOVE.l D3,D1
000416F0 <PED.ab2@8025>   ADD.l comLong_DisplayLineOffset,D1
000416F6 <PED.ab2@8026>   CMP.l comLong_TotalLines,D1
000416FA <PED.ab2@8027>    BCS.w JL_0_3C54
00041700 <PED.ab2@8028>   MOVE.l comLong_TotalLines,D3
00041706 <PED.ab2@8029>   SUB.l comLong_DisplayLineOffset,D3
00041708 <PED.ab2@8030>   SUBQ.l #1,D3
0004170A <PED.ab2@8033>   TST.w D0
0004170E <PED.ab2@8034>    BNE.w JL_0_3CA6                   ;ok
00041710 <PED.ab2@8035>   SUBQ.w #1,D2
00041716 <PED.ab2@8036>   MOVE.w comWord_ColumnsOffset,D0
0004171A <PED.ab2@8037>    BEQ.w JL_0_3D06
0004171C <PED.ab2@8038>   SUBQ.w #1,D2
00041720 <PED.ab2@8039>   MOVEM.w D2-D3/D5-D6,-(A7)
00041726 <PED.ab2@8040>   MOVE.w D5,comWord_LinePosEndX
00041728 <PED.ab2@8041>   EXT.l d6
0004172A <PED.ab2@8042>   MOVE.l D6,D1
00041730 <PED.ab2@8043>   ADD.l comLong_DisplayLineOffset,D1
00041736 <PED.ab2@8044>   MOVE.l D1,comLong_LinePosEndY
00041740 <PED.ab2@8045>   MOVE.w comLong_LinePosStartX,comLong_BlockStartX
0004174A <PED.ab2@8046>   MOVE.l comLong_LinePosStartY,comLong_BlockStartY
00041754 <PED.ab2@8048>   MOVE.w comWord_LinePosEndX,comLong_BlockEndX
0004175E <PED.ab2@8049>   MOVE.l comLong_LinePosEndY,comLong_BlockEndY
00041764 <PED.ab2@8051>    JSR JL_0_5836
0004176A <PED.ab2@8052>   SUBQ.w #2,comWord_ColumnsOffset
00041770 <PED.ab2@8053>    JSR scroll_right
00041776 <PED.ab2@8054>    JSR JL_0_572C
0004177A <PED.ab2@8055>   MOVEM.w (A7)+,D2-D3/D5-D6
0004177E <PED.ab2@8056>   BRA.w JL_0_3D06
00041780 <PED.ab2@8059>   MOVE.w D2,D0
00041786 <PED.ab2@8060>   SUB.w comWord_ColumnsOffset,D0
0004178C <PED.ab2@8061>   CMP.w visiblecolumns,D0
00041790 <PED.ab2@8062>    BCS.w JL_0_3D06
00041796 <PED.ab2@8063>   MOVE.w comWord_ColumnsOffset,D2
0004179C <PED.ab2@8064>   ADD.w visiblecolumns,D2
000417A2 <PED.ab2@8065>   CMP.w comWord_MaxColumns,D2
000417A6 <PED.ab2@8066>    BCC.w JL_0_3D06
000417A8 <PED.ab2@8067>   ADDQ.w #1,D2
000417AC <PED.ab2@8068>   MOVEM.l D2-D3/D5-D6,-(A7)
000417B2 <PED.ab2@8069>   MOVE.w D5,comWord_LinePosEndX
000417B4 <PED.ab2@8070>   MOVE.l D6,D1
000417BA <PED.ab2@8071>   ADD.l comLong_DisplayLineOffset,D1
000417C0 <PED.ab2@8072>   MOVE.l D1,comLong_LinePosEndY
000417CA <PED.ab2@8073>   MOVE.w comLong_LinePosStartX,comLong_BlockStartX
000417D4 <PED.ab2@8074>   MOVE.l comLong_LinePosStartY,comLong_BlockStartY
000417DE <PED.ab2@8076>   MOVE.w comWord_LinePosEndX,comLong_BlockEndX
000417E8 <PED.ab2@8077>   MOVE.l comLong_LinePosEndY,comLong_BlockEndY
000417EE <PED.ab2@8079>    JSR JL_0_5836
000417F4 <PED.ab2@8080>   ADDQ.w #2,comWord_ColumnsOffset
000417FA <PED.ab2@8081>    JSR scroll_left
00041800 <PED.ab2@8082>    JSR JL_0_572C
00041804 <PED.ab2@8083>   MOVEM.l (A7)+,D2-D3/D5-D6
00041808 <PED.ab2@8084>   BRA.w JL_0_3D06
0004180A <PED.ab2@8087>   CMP.w D5,D2
0004180E <PED.ab2@8088>    BNE.w JL_0_3D12
00041810 <PED.ab2@8089>   CMP.w D6,D3
00041814 <PED.ab2@8090>    BEQ.w JL_0_3B1E
0004181A <PED.ab2@8093>    JSR JL_0_57F2
00041820 <PED.ab2@8094>   MOVE.w D2,comWord_LinePosEndX
00041822 <PED.ab2@8095>   MOVE.l D3,D1
00041828 <PED.ab2@8096>   ADD.l comLong_DisplayLineOffset,D1
0004182E <PED.ab2@8097>   MOVE.l D1,comLong_LinePosEndY
00041834 <PED.ab2@8098>   CMP.l comLong_LinePosStartY,D1
00041838 <PED.ab2@8099>    BCS.w JL_0_3D5A
0004183C <PED.ab2@8100>    BNE.w JL_0_3D3C
00041842 <PED.ab2@8101>   CMP.w comLong_LinePosStartX,D2
00041846 <PED.ab2@8102>    BLT.w JL_0_3D5A
0004184C <PED.ab2@8105>   MOVE.w comWord__AL_0_86B8,D4
00041850 <PED.ab2@8106>    BNE.w JL_0_3D78
00041852 <PED.ab2@8107>   MOVE.w D5,D0
00041854 <PED.ab2@8108>   MOVE.l D6,D1
00041856 <PED.ab2@8109>   MOVE.w D2,D5
00041858 <PED.ab2@8110>   MOVE.w D3,D6
0004185E <PED.ab2@8111>    JSR JL_0_5874
00041860 <PED.ab2@8112>   ADDQ.w #1,D0
00041866 <PED.ab2@8113>    JSR JL_0_59C0
0004186A <PED.ab2@8114>   BRA.w JL_0_3B1E
00041870 <PED.ab2@8117>   MOVE.w comWord__AL_0_86B8,D4
00041874 <PED.ab2@8118>    BEQ.w JL_0_3D78
00041876 <PED.ab2@8119>   MOVE.w D5,D0
00041878 <PED.ab2@8120>   MOVE.l D6,D1
0004187A <PED.ab2@8121>   MOVE.w D2,D5
0004187C <PED.ab2@8122>   MOVE.w D3,D6
00041882 <PED.ab2@8123>    JSR JL_0_5874
00041884 <PED.ab2@8124>   SUBQ.w #1,D2
0004188A <PED.ab2@8125>    JSR JL_0_59C0
0004188E <PED.ab2@8126>   BRA.w JL_0_3B1E
00041894 <PED.ab2@8129>   NOT.w comWord__AL_0_86B8
00041898 <PED.ab2@8130>   MOVEM.w D2-D3,-(A7)
0004189A <PED.ab2@8131>   MOVE.w D5,D2
0004189C <PED.ab2@8132>   MOVE.w D6,D3
000418A2 <PED.ab2@8133>   MOVE.w comLong_LinePosStartX,D0
000418A8 <PED.ab2@8134>   MOVE.l comLong_LinePosStartY,D1
000418AE <PED.ab2@8135>   SUB.l comLong_DisplayLineOffset,D1
000418B2 <PED.ab2@8136>   BPL.w JL_0_3D9E
000418B4 <PED.ab2@8137>   MOVEQ.l #$00,D0
000418B6 <PED.ab2@8138>   MOVEQ.l #$00,D1
000418BA <PED.ab2@8139>   BRA.w JL_0_3DB2
000418C0 <PED.ab2@8142>   CMP.l viewablelines,D1
000418C4 <PED.ab2@8143>    BCS.w JL_0_3DB2
000418CA <PED.ab2@8144>   MOVE.l viewablelines,D1
000418CC <PED.ab2@8145>   SUBQ.l #1,D1
000418D2 <PED.ab2@8146>   MOVE.w comWord_MaxColumns,D0
000418D4 <PED.ab2@8147>   SUBQ.w #1,D0
000418D8 <PED.ab2@8150>   MOVEM.w D0-D1,-(A7)
000418DE <PED.ab2@8152>   JSR JL_0_59BC
000418E2 <PED.ab2@8153>   MOVEM.w (A7)+,D0-D1
000418E6 <PED.ab2@8154>   MOVEM.w (A7)+,D2-D3
000418E8 <PED.ab2@8155>   MOVE.w D2,D5
000418EA <PED.ab2@8156>   MOVE.w D3,D6
000418F0 <PED.ab2@8157>   JSR JL_0_59BC
000418F4 <PED.ab2@8158>   BRA.w JL_0_3B1E
000418F6 <PED.ab2@8161> RTS
00041900 <PED.ab2@8165>   MOVE.l comLong_DisplayLineOffset,comLong_DisplayLineOffsetStore
0004190A <PED.ab2@8166>   MOVE.w comWord_ColumnsOffset,ColumnsOffsetStore
00041910 <PED.ab2@8167>   MOVE.l (A7)+,comPtr_CurrentSourceLine
00041916 <PED.ab2@8168>   MOVE.w (A7)+,comWord_ColumnsOffset
0004191C <PED.ab2@8169>   MOVE.l (A7)+,comLong_DisplayLineOffset
00041922 <PED.ab2@8170>   MOVE.w comWord_LinePosEndX,D0
00041926 <PED.ab2@8171>    BPL.w JL_0_3E16
0004192C <PED.ab2@8172>   MOVE.l comLong_LinePosEndY,D1
00041932 <PED.ab2@8173>   CMP.l comLong_LinePosStartY,D1
00041936 <PED.ab2@8174>    BLS.w JL_0_3E10
0004193C <PED.ab2@8175>   SUBQ.l #1,comLong_LinePosEndY
00041940 <PED.ab2@8176>  BRA.w JL_0_3E1E
00041942 <PED.ab2@8179>   MOVEQ.l #$00,D0
00041946 <PED.ab2@8180> BRA.w JL_0_3E24
0004194C <PED.ab2@8183>   CMP.w comWord_MaxColumns,D0
00041950 <PED.ab2@8184>    BCS.w JL_0_3E24
00041956 <PED.ab2@8187>   MOVE.w comWord_MaxColumns,D0
00041958 <PED.ab2@8188>   SUBQ.w #1,D0
0004195E <PED.ab2@8191>   MOVE.w D0,comWord_LinePosEndX
00041964 <PED.ab2@8194>   MOVE.w comLong_LinePosStartX,d0
0004196A <PED.ab2@8195>   MOVE.w comWord_LinePosEndX,d1
0004196C <PED.ab2@8196>   CMP.w d1,d0
00041970 <PED.ab2@8197>   BNE 'l10
00041976 <PED.ab2@8198>   MOVE.l comLong_LinePosStartY,d0
0004197C <PED.ab2@8199>   MOVE.l comLong_LinePosEndY,d1
0004197E <PED.ab2@8200>   CMP.l D1,D0
00041982 <PED.ab2@8201>    BEQ.w JL_0_3E5E
00041986 <PED.ab2@8203>   MOVEM.l D0-D1,-(A7)
0004198C <PED.ab2@8204>   JSR JL_0_56BA
00041990 <PED.ab2@8205>   MOVEM.l (A7)+,D0-D1
00041994 <PED.ab2@8207>   ADD.w #12,a7
0004199E <PED.ab2@8209>   MOVE.l comLong_LinePosStartY,comLong_BlockStartY
000419A8 <PED.ab2@8210>   MOVE.w comLong_LinePosStartX,comLong_BlockStartX
000419B2 <PED.ab2@8211>   MOVE.l comLong_LinePosEndY,comLong_BlockEndY
000419BC <PED.ab2@8212>   MOVE.w comWord_LinePosEndX,comLong_BlockEndX
000419C2 <PED.ab2@8214>   JSR JL_0_5836
000419C8 <PED.ab2@8215>   JSR update_horizscroller
000419CC <PED.ab2@8216> BRA.w _redrawb
000419D2 <PED.ab2@8220>   MOVE.l (a7)+,comLong_BlockEndY
000419D8 <PED.ab2@8221>   MOVE.w (a7)+,comLong_BlockEndX
000419DE <PED.ab2@8222>   MOVE.l (a7)+,comLong_BlockStartY
000419E4 <PED.ab2@8223>   MOVE.w (a7)+,comLong_BlockStartX
000419EA <PED.ab2@8225>   MOVE.w comLong_LinePosStartX,D0
000419F0 <PED.ab2@8226>   SUB.w comWord_ColumnsOffset,D0
000419F6 <PED.ab2@8227>   MOVE.w D0,comWord_Column
000419FC <PED.ab2@8228>   CLR.l foldnum
00041A02 <PED.ab2@8229>   MOVE.l comLong_DisplayLineOffset,D0
00041A08 <PED.ab2@8230>   ADD.l comLong_DisplayLine,D0
00041A0E <PED.ab2@8231>   MOVEA.l comPtr_CurrentSourceLine,A4
00041A14 <PED.ab2@8297>   CMP.l comLong_LinePosStartY,D0
00041A18 <PED.ab2@8298>    BEQ.w JL_0_3E9E
00041A1C <PED.ab2@8299>    BCS.w JL_0_3E98
00041A20 <PED.ab2@8300>   MOVEA.l $4(A4),A4
00041A22 <PED.ab2@8301>   SUBQ.l #1,D0
00041A26 <PED.ab2@8302>  BRA.b JL_0_3E84
00041A28 <PED.ab2@8305>   MOVEA.l (A4),A4
00041A2A <PED.ab2@8306>   ADDQ.l #1,D0
00041A2E <PED.ab2@8307>  BRA.b JL_0_3E84
00041A34 <PED.ab2@8310>   SUB.l comLong_DisplayLineOffset,D0
00041A3A <PED.ab2@8312>   MOVE.w D0,comLong_DisplayLine+2
00041A40 <PED.ab2@8313>   MOVE.l A4,comPtr_CurrentSourceLine
00041A46 <PED.ab2@8314>   JSR JL_0_775E
00041A4C <PED.ab2@8315>   MOVE.w message_qualifier,d1
00041A50 <PED.ab2@8316>   AND.w #$3,d1
00041A54 <PED.ab2@8317>   BEQ 'l9
00041A5E <PED.ab2@8318>   MOVE.w comLong_LinePosStartX,comLong_BlockEndX          ;enhance block
00041A68 <PED.ab2@8319>   MOVE.l comLong_LinePosStartY,comLong_BlockEndY
00041A6C <PED.ab2@8320>   BRA 'l1
00041A74 <PED.ab2@8322>   MOVE.b #1,doedit2
00041A7A <PED.ab2@8323>   JSR checkedit2
00041A80 <PED.ab2@8324>   MOVE.l comLong_LinePosStartY,d0
00041A86 <PED.ab2@8325>   MOVE.w comLong_LinePosStartX,d1
00041A8C <PED.ab2@8326>   CMP.l comLong_BlockStartY,d0
00041A90 <PED.ab2@8327>   BLT 'l1
00041A96 <PED.ab2@8328>   CMP.l comLong_BlockEndY ,d0
00041A9A <PED.ab2@8329>   BGT 'l1
00041AA0 <PED.ab2@8330>   CMP.l comLong_BlockStartY,d0
00041AA4 <PED.ab2@8331>   BNE 'l3
00041AAA <PED.ab2@8332>   CMP.w comLong_BlockStartX,d1
00041AAE <PED.ab2@8333>   BLT 'l1
00041AB4 <PED.ab2@8335>   CMP.l comLong_BlockEndY,d0
00041AB8 <PED.ab2@8336>   BNE 'l2
00041ABE <PED.ab2@8337>   CMP.w comLong_BlockEndX,d1
00041AC2 <PED.ab2@8338>   BGT 'l1
00041ACC <PED.ab2@8341>   MOVE.l #$ffffffff,comLong_BlockEndY
00041AD6 <PED.ab2@8343>   CMPI.l #$ffffFFFF,comLong_BlockEndY        ;redraw mark
00041ADA <PED.ab2@8344>   BEQ.w JL_0_3EC6
00041AE0 <PED.ab2@8345>   JSR JL_0_56BA
00041AE6 <PED.ab2@8346>   MOVE.w message_qualifier,d1
00041AEA <PED.ab2@8347>   AND.w #$30,d1
00041AEE <PED.ab2@8348>   BEQ 'l10
00041AF4 <PED.ab2@8349>   JSR jump_onclick
00041AFA <PED.ab2@8351>   JSR _redraw
00041AFC <PED.ab2@8353>   RTS
00041B00 <PED.ab2@8355> BRA.w _redrawb
00041B06 <PED.ab2@8358>   MOVE.l comLong_DisplayLineOffset,D0
00041B0C <PED.ab2@8359>   CMP.l comLong_DisplayLineOffsetStore,D0
00041B10 <PED.ab2@8360>    BNE.w _redrawb
00041B16 <PED.ab2@8361>   MOVE.w comWord_ColumnsOffset,D0
00041B1C <PED.ab2@8362>   CMP.w ColumnsOffsetStore,D0
00041B20 <PED.ab2@8363>    BNE.w _redrawb
00041B26 <PED.ab2@8366>   MOVE.w message_qualifier,d1
00041B2A <PED.ab2@8367>   AND.w #$30,d1
00041B2E <PED.ab2@8368>   BEQ 'l10
00041B34 <PED.ab2@8370>   JSR jump_onclick
00041B36 <PED.ab2@8371> RTS
00041B3C <PED.ab2@8373> JMP draw_cursor
00041B42 <PED.ab2@8376> JMP _redraw
00041B44 <PED.ab2@8379> ColumnsOffsetStore:    Ds.w 1
00041B46 <PED.ab2@8433>   MOVE.l A0,-(A7)
00041B48 <PED.ab2@8434>   MOVEQ.l #$08,D1
00041B4E <PED.ab2@8435>   MOVEA.l _dosbase,A6
00041B52 <PED.ab2@8436>   JSR _Delay(A6)
00041B54 <PED.ab2@8437>   MOVEA.l (A7)+,A0
00041B5A <PED.ab2@8438>   MOVEA.l comPtr_CompilerWindow,A1
00041B5C <PED.ab2@8439>   SUBA.l A2,A2
00041B62 <PED.ab2@8440>   MOVEA.l _intuibase,A6
00041B66 <PED.ab2@8441>   JSR _ActivateGadget(A6)
00041B68 <PED.ab2@8442> RTS
00041B92 <PED.ab2@8446>   !basic
00041C3C <PED.ab2@8447>   WZWindow WZID("WIN_GOTO"),0,32,-2,-2,-2,-2,WZID("WIN_GOTO")
00041C76 <PED.ab2@8448>   Use Window WZID("WIN_GOTO")
00041CBE <PED.ab2@8449>   ActivateGadget_ WZGadAddr("GOTO_LINE"),WZWindowAddr,0
00041CC4 <PED.ab2@8450>   exit_goto.b = False
00041CCE <PED.ab2@8452>     !ev_WaitEvent
00041CD4 <PED.ab2@8453>     Select ev
00041CE2 <PED.ab2@8454>     Case #IDCMP_IDCMPUPDATE
00041D12 <PED.ab2@8455>       If WZGadName = "GOTO_LINE"
00041D5C <PED.ab2@8456>         _line.l = Abs(WZInput("GOTO_LINE")) - 1
00041D62 <PED.ab2@8457>         exit_goto = True
00041D76 <PED.ab2@8460>     Case #IDCMP_CLOSEWINDOW
00041D7E <PED.ab2@8461>       _line = 0
00041D84 <PED.ab2@8462>       exit_goto = True
00041D86 <PED.ab2@8463>     End Select
00041D94 <PED.ab2@8464>   Until exit_goto
00041DCC <PED.ab2@8465>   WZCloseWindow WZID("WIN_GOTO")
00041DD2 <PED.ab2@8467>   JSR activatesource
00041DE4 <PED.ab2@8468>   If _line > 0
00041DE8 <PED.ab2@8469>     GetD0 _line
00041E06 <PED.ab2@8470>     !asm
00041E0A <PED.ab2@8471>     BRA.w sub_gotoline
00041E28 <PED.ab2@8473>   !asm
00041E2A <PED.ab2@8474> RTS
00041E2C <PED.ab2@8477> AL_0_4280:        Dc.b $FF,$FF
00041E32 <PED.ab2@8480>   MOVE.w D0,AL_0_4280
00041E38 <PED.ab2@8481>   MOVE.l comLong_DisplayLineOffset,D0
00041E3E <PED.ab2@8482>   ADD.l comLong_DisplayLine,D0
00041E44 <PED.ab2@8483>   MOVE.l D0,comLong_BlockStartDisplayLine
00041E46 <PED.ab2@8484> RTS
00041E48 <PED.ab2@8487>   MOVE.l D0,-(a7)
00041E4E <PED.ab2@8488>   MOVE.w AL_0_4280,D2
00041E52 <PED.ab2@8489>    BMI.w JUMP_setpointer_to_normal
00041E58 <PED.ab2@8490>   MOVE.w D0,comLong_BlockStartX
00041E5E <PED.ab2@8491>   MOVE.l comLong_BlockStartDisplayLine,D3
00041E64 <PED.ab2@8493>   MOVE.l comLong_DisplayLineOffset,D1
00041E6A <PED.ab2@8494>   ADD.l comLong_DisplayLine,D1
00041E6C <PED.ab2@8496>   MOVE.l (a7)+,D0
00041E6E <PED.ab2@8499>   CMP.w D0,D2
00041E72 <PED.ab2@8500>    BNE.w JL_0_42D8
00041E74 <PED.ab2@8501>   CMP.l D1,D3
00041E78 <PED.ab2@8502>    BNE.w JL_0_42D8
00041E7E <PED.ab2@8503>   JSR JL_0_572C
00041E84 <PED.ab2@8504>   JMP _redraw
00041E86 <PED.ab2@8507>   TST.w D0
00041E8A <PED.ab2@8508>    BNE.w JL_0_42EA
00041E8C <PED.ab2@8509>   TST.l D1
00041E90 <PED.ab2@8510>    BEQ.w JL_0_42EA
00041E92 <PED.ab2@8511>   SUBQ.l #1,D1
00041E98 <PED.ab2@8512>   MOVE.w comWord_MaxColumns,D0
00041E9E <PED.ab2@8515>   MOVE.w D0,comLong_BlockEndX
00041EA4 <PED.ab2@8516>   MOVE.l D1,comLong_BlockEndY
00041EAA <PED.ab2@8517>   MOVE.w D2,comLong_BlockStartX
00041EB0 <PED.ab2@8518>   MOVE.l D3,comLong_BlockStartY
00041EB6 <PED.ab2@8519>   JSR JL_0_5836
00041EBC <PED.ab2@8520>   JSR JL_0_56BA
00041EC2 <PED.ab2@8521> JMP _redraw
00041EC8 <PED.ab2@8526>   MOVEA.l _intuibase,A6
00041ECC <PED.ab2@8527>   JSR _CloseWorkbench(A6)
00041ECE <PED.ab2@8528> RTS
00041ED4 <PED.ab2@8531>   MOVEA.l _intuibase,A6
00041ED8 <PED.ab2@8532>   JSR _OpenWorkbench(A6)
00041EDE <PED.ab2@8533>   MOVEA.l ptr_pedscreen,A0
00041EE2 <PED.ab2@8534>   JSR _ScreenToFront(A6)
00041EE8 <PED.ab2@8535>   MOVEA.l ptr_sourcewindow,A0
00041EEC <PED.ab2@8536> JMP _ActivateWindow(A6)
00041F16 <PED.ab2@8540>   !basic
00041F32 <PED.ab2@8542>   If Peek.w(?use_wbscreen)<>0
00041F3A <PED.ab2@8543>     WBenchToFront_
00041F62 <PED.ab2@8544>     exescr$ = "Workbench"
00041F68 <PED.ab2@8545>   Else
00041F92 <PED.ab2@8546>     exescr$ = Peek$(?str_defaultpubscreen) ;Sreenname not Screentitle (?str_pedscreenname)
0004201A <PED.ab2@8548>   exe.s = "NEWCLI WINDOW = \\22"+console_device$+"///196/AmiBlitz Shell/CLOSE/SCREEN "+exescr$+"\\22"   ; use select Consoledevice for Shell
00042040 <PED.ab2@8549>   Execute_ &exe,0,0
0004205E <PED.ab2@8550>   !asm
00042060 <PED.ab2@8551> RTS
00042064 <PED.ab2@8557> CLI_input_stream:  Ds.l 1
00042068 <PED.ab2@8558> CLI_output_stream: Ds.l 1
0004206C <PED.ab2@8559> CLI_output_file:   Ds.l 1
0004206E <PED.ab2@8562>   SUBA.l A1,A1
00042074 <PED.ab2@8563>   MOVEA.l _execbase,A6
00042078 <PED.ab2@8564>   JSR _FindTask(A6)
0004207A <PED.ab2@8565>   MOVEA.l D0,A3
00042082 <PED.ab2@8566>   MOVE.l $9C(A3),CLI_input_stream
0004208A <PED.ab2@8567>   MOVE.l $A0(A3),CLI_output_stream
0004208E <PED.ab2@8569>   MOVEM.l A2-A3,-(A7)
000420B8 <PED.ab2@8570>   !basic
000420BE <PED.ab2@8571>   console_dontclose.l = False
000420DA <PED.ab2@8572>   If console_wb = True Then WBenchToFront_
000420EE <PED.ab2@8575>   If \console_h = 0
000420FA <PED.ab2@8576>     \console_x = 0
00042114 <PED.ab2@8577>     \console_y = *myscreen\BarHeight * 2
0004212E <PED.ab2@8578>     \console_w = *myscreen\Width / 3
00042148 <PED.ab2@8579>     \console_h = *myscreen\Height / 3
000421A0 <PED.ab2@8583>   con_windowpath$ = dos_PathPart{console_device$}
00042202 <PED.ab2@8584>   con_windowpath$ + Str$(\console_x)
00042276 <PED.ab2@8585>   con_windowpath$ + "/"+Str$(\console_y)
000422EA <PED.ab2@8586>   con_windowpath$ + "/"+Str$(\console_w)
0004235E <PED.ab2@8587>   con_windowpath$ + "/"+Str$(\console_h)
000423C2 <PED.ab2@8588>   con_windowpath$ + "/"+console_title$
00042408 <PED.ab2@8589>   con_windowpath$ + "/ZOOM"
0004241C <PED.ab2@8590>   If console_wb = True
00042462 <PED.ab2@8591>     con_windowpath$ + "/SCREEN Workbench"
00042468 <PED.ab2@8592>   Else
000424CC <PED.ab2@8593>     con_windowpath$ + "/SCREEN "+Peek$(?str_defaultpubscreen)
00042504 <PED.ab2@8595>   If console_device$ = "VNC:"
0004254A <PED.ab2@8596>     con_windowpath$ + "/DRAG/QUIET/NOCLOSE/NOBUTTONS"
000425EC <PED.ab2@8597>     If console_font$<>"" Then con_windowpath$ + "/FONT"+console_font$
00042638 <PED.ab2@8604>   con_windowpath$ + Chr$(0)
00042658 <PED.ab2@8605>   If Peek.l(?CLI_output_file) = 0
000426AA <PED.ab2@8606>     Poke.l ?CLI_output_file, Open_( con_windowpath$,#HUNK_RELOC_8__MODE_NEWFILE)
000426C8 <PED.ab2@8608>   !asm
000426CC <PED.ab2@8609>   MOVEM.l (A7)+,A2-A3
000426D2 <PED.ab2@8611>   MOVE.l CLI_output_file,D0
000426D6 <PED.ab2@8612>   BEQ.w JL_0_442A
000426DA <PED.ab2@8613>   MOVE.l D0,$9C(A3) ; pr_CIS
000426DE <PED.ab2@8614>   MOVE.l D0,$A0(A3) ; pr_COS
000426E0 <PED.ab2@8616> RTS
000426E2 <PED.ab2@8619>   SUBA.l A1,A1
000426E8 <PED.ab2@8620>   MOVEA.l _execbase,A6
000426EC <PED.ab2@8621>   JSR _FindTask(A6)
000426EE <PED.ab2@8622>   MOVEA.l D0,A3
000426F6 <PED.ab2@8623>   MOVE.l CLI_input_stream,$9C(A3)
000426FE <PED.ab2@8624>   MOVE.l CLI_output_stream,$A0(A3)
00042728 <PED.ab2@8626>   !basic
00042744 <PED.ab2@8627>   If console_wb   = True Then WBenchToFront_
00042758 <PED.ab2@8628>   If console_wait = True
0004278E <PED.ab2@8629>     txt$ = Chr$(27) + "[1m"              ; make text bold via escape-sequence
00042828 <PED.ab2@8630>     txt$ + Chr$(27) + "["+Str$(30+3)+"m" ; change textcolor
000428B8 <PED.ab2@8631>     txt$ + Chr$(10) + !TRANS{"Program terminated."}
00042948 <PED.ab2@8632>     txt$ + Chr$(10) + !TRANS{"Press <ENTER> to return to AmiBlitz3..."}
0004297E <PED.ab2@8633>     Write_ Peek.l(?CLI_output_file),&txt$,FLen(txt$)
00042996 <PED.ab2@8634>     Flush_(Peek.l(?CLI_output_file))
000429B8 <PED.ab2@8636>     SetWindowPointerA_ Peek.l(?ptr_sourcewindow), ?taglist_mousepointerbusy
000429BE <PED.ab2@8637>     console_dummy.b = 0
000429FE <PED.ab2@8639>     While Read_(Peek.l(?CLI_output_file),&console_dummy,1) = 0
00042A10 <PED.ab2@8640>       Delay_ 2
00042A16 <PED.ab2@8641>     Wend
00042A40 <PED.ab2@8643>   Close_ Peek.l(?CLI_output_file) : Poke.l ?CLI_output_file,0
00042A62 <PED.ab2@8644>   SetWindowPointerA_ Peek.l(?ptr_sourcewindow) , ?taglist_mousepointernormal
00042A7A <PED.ab2@8645>   ActivateWindow_ Peek.l(?ptr_sourcewindow)
00042AA6 <PED.ab2@8646>   If console_wb = True Then ScreenToFront_ Peek.l(?ptr_pedscreen)
00042AC4 <PED.ab2@8647>   !asm
00042AC6 <PED.ab2@8657> RTS
00042ACC <PED.ab2@8663>   MOVEA.l _dosbase,A1
00042AD0 <PED.ab2@8664>   MOVEA.l $22(A1),A1
00042AD4 <PED.ab2@8665>   MOVEA.l $18(A1),A1
00042AD6 <PED.ab2@8666>   ADDA.l A1,A1
00042AD8 <PED.ab2@8667>   ADDA.l A1,A1
00042ADC <PED.ab2@8668>   MOVE.l $4(A1),D1
00042ADE <PED.ab2@8671>   MOVEA.l D1,A1
00042AE0 <PED.ab2@8672>   ADDA.l A1,A1
00042AE2 <PED.ab2@8673>   ADDA.l A1,A1
00042AE6 <PED.ab2@8674>   MOVEA.l $28(A1),A2
00042AE8 <PED.ab2@8675>   ADDA.l A2,A2
00042AEA <PED.ab2@8676>   ADDA.l A2,A2
00042AEC <PED.ab2@8677>   CMP.b (A2)+,D0
00042AF0 <PED.ab2@8678>   BNE.w JL_0_4372
00042AF2 <PED.ab2@8679>   MOVEA.l A0,A3
00042AF4 <PED.ab2@8680>   MOVE.w D0,D1
00042AF6 <PED.ab2@8681>   SUBQ.w #1,D1
00042AF8 <PED.ab2@8684>     CMPM.b (A3)+,(A2)+
00042AFC <PED.ab2@8685>     BNE.w JL_0_4372
00042B00 <PED.ab2@8686>   DBF D1,JL_0_4364
00042B02 <PED.ab2@8687>   MOVEQ.l #$00,D0
00042B04 <PED.ab2@8688> RTS
00042B06 <PED.ab2@8691>   MOVE.l (A1),D1
00042B0A <PED.ab2@8692>   BNE.b JL_0_434A
00042B0C <PED.ab2@8693>   MOVEQ.l #-$01,D0
00042B0E <PED.ab2@8694> RTS
00042B14 <PED.ab2@8700>   MOVEA.l comPtr_CompilerWindow,A1
00042B16 <PED.ab2@8701>   SUBA.l A2,A2
00042B1C <PED.ab2@8702>   MOVEA.l _intuibase,A6
00042B20 <PED.ab2@8703> JMP _RefreshGList(A6)                ; A0: Gadgets, A1: Window, A2: Requ, D0: NumGad
00042B22 <PED.ab2@8707>   MOVEA.l A0,A2
00042B24 <PED.ab2@8708>   MOVEQ.l #$00,D1
00042B26 <PED.ab2@8711>     ADDQ.w #1,D1
00042B28 <PED.ab2@8712>     TST.b (A0)+
00042B2C <PED.ab2@8713>   BNE.b JL_0_44E6
00042B2E <PED.ab2@8715>   MOVEA.l A2,A1
00042B30 <PED.ab2@8716>   SUBQ.w #1,D1
00042B34 <PED.ab2@8717>   BPL.w JUMP_JL_0_5F62
00042B36 <PED.ab2@8718> RTS
00042B3C <PED.ab2@8721> JMP JL_0_5F62
00042B42 <PED.ab2@8725>   MOVE.w comWord_DoTokenize,D0
00042B46 <PED.ab2@8726>    BNE.w JUMP_setpointer_to_normal
00042B4C <PED.ab2@8727>   NOT.w comWord_DoTokenize
00042B52 <PED.ab2@8728>   MOVEA.l comPtr_FirstSourceLine,A4
00042B58 <PED.ab2@8729>   MOVE.l comLong_TotalLines,-(A7)
00042B5A <PED.ab2@8732>     MOVEQ.l #$00,D1
00042B5E <PED.ab2@8733>     MOVE.b $8(A4),D1
00042B60 <PED.ab2@8734>     SUBQ.w #1,D1
00042B64 <PED.ab2@8735>     BMI.w JL_0_4530
00042B68 <PED.ab2@8736>     LEA $9(A4),A2
00042B6E <PED.ab2@8737>     MOVEA.l comPtr_Temp_TokenString1,A1
00042B74 <PED.ab2@8738>     JSR JL_0_5F62
00042B7A <PED.ab2@8739>     MOVE.l A4,comPtr_CurrentSourceLine
00042B80 <PED.ab2@8740>     JSR JL_0_55AA
00042B82 <PED.ab2@8743>     MOVEA.l (A4),A4
00042B84 <PED.ab2@8744>     SUBQ.w #1,(A7)
00042B88 <PED.ab2@8745>   BNE.b JL_0_450E
00042B8A <PED.ab2@8747>   ADDQ.w #2,A7
00042B8E <PED.ab2@8748> BRA.w JL_0_458E
00042B94 <PED.ab2@8752>   MOVE.w comWord_DoTokenize,D0
00042B98 <PED.ab2@8753>    BEQ.w JUMP_setpointer_to_normal
00042B9E <PED.ab2@8754>   CLR.w comWord_DoTokenize
00042BA4 <PED.ab2@8757>   MOVEA.l comPtr_FirstSourceLine,A4
00042BAA <PED.ab2@8758>   MOVE.l comLong_TotalLines,-(A7)
00042BAE <PED.ab2@8761>     LEA $9(A4),A0
00042BB4 <PED.ab2@8762>     MOVEA.l comPtr_Temp_TokenString1,A1
00042BBA <PED.ab2@8763>     JSR detokenize_line
00042BC0 <PED.ab2@8764>     SUBA.l comPtr_Temp_TokenString1,A1
00042BC2 <PED.ab2@8765>     ADDQ.w #1,A1
00042BC4 <PED.ab2@8766>     MOVE.l A1,D5
00042BCA <PED.ab2@8767>     MOVE.l A4,comPtr_CurrentSourceLine
00042BD0 <PED.ab2@8768>     JSR JL_0_55AA
00042BD2 <PED.ab2@8769>     MOVEA.l (A4),A4
00042BD4 <PED.ab2@8770>     SUBQ.w #1,(A7)
00042BD8 <PED.ab2@8771>   BNE.b JL_0_4554
00042BDA <PED.ab2@8772>   ADDQ.w #2,A7
00042BDC <PED.ab2@8773> RTS
00042BE2 <PED.ab2@8777>   MOVE.w comWord_DoTokenize,D0
00042BE6 <PED.ab2@8778>    BEQ.w JUMP_setpointer_to_normal
00042BEC <PED.ab2@8779>   CLR.w comWord_DoTokenize
00042BF0 <PED.ab2@8780>   BSR.b JL_0_454C
00042BF6 <PED.ab2@8783>   JSR update_currsourceline
00042BFC <PED.ab2@8784> JMP _redraw
00042C02 <PED.ab2@8787> JMP setpointer_to_normal
00042C04 <PED.ab2@8792> RTS
00042C0A <PED.ab2@8796>   CLR.l numcount
00042C34 <PED.ab2@8797>   !basic
00042C60 <PED.ab2@8798>   InitArgParse search_label$
00042C82 <PED.ab2@8799>   word1$ = NextArg$
00042CA4 <PED.ab2@8800>   word2$ = NextArg$
00042CAC <PED.ab2@8801>   MOVE.b #0,searchmode
00042CB4 <PED.ab2@8802>   t.l = 0
00042CEC <PED.ab2@8803>   If word2$<>""
00042CF4 <PED.ab2@8804>     t = 1
00042CFC <PED.ab2@8805>     MOVE.b #1,searchmode
00042D30 <PED.ab2@8807>   search_label$ = search_label$
00042D38 <PED.ab2@8808>   skip.l = 0
00042D3E <PED.ab2@8809>   MOVE.l (a2),straddr
00042D5C <PED.ab2@8810>   !asm
00042D62 <PED.ab2@8811>   MOVEA.l comPtr_FirstSourceLine,A0
00042D68 <PED.ab2@8812>   MOVE.l comLong_TotalLines,D0
00042D6E <PED.ab2@8813>   MOVE.b comByte_LabelIdentifier,D1
00042D70 <PED.ab2@8814>   MOVE.l A1,-(A7)
00042D76 <PED.ab2@8815>   TST.w comWord_LabelAll
00042D7A <PED.ab2@8816>    BNE alladd
00042D80 <PED.ab2@8817>   TST.w comWord_LabelRemark
00042D84 <PED.ab2@8818>    BNE click_remark
00042D88 <PED.ab2@8821>   LEA $9(A0),A1
00042D8C <PED.ab2@8824>   CMPI.b #$20,(A1)
00042D90 <PED.ab2@8825>    BNE.b 'no
00042D92 <PED.ab2@8826>   ADDQ.l #1,a1
00042D96 <PED.ab2@8827> BRA JL_0_4680
00042D9A <PED.ab2@8830>   CMP.w #$802d,(a1)
00042D9E <PED.ab2@8831>   BEQ 'l20                           ;stop
00042DA2 <PED.ab2@8832>   CMP.w #$80ae,(a1)                  ;trap
00042DA6 <PED.ab2@8833>   BEQ 'l20
00042DAA <PED.ab2@8834>   CMP.w #$8008,(a1)                  ;func
00042DAE <PED.ab2@8835>   BNE 'nex
00042DB0 <PED.ab2@8836>   ADDQ #3,a1
00042DB2 <PED.ab2@8837>   MOVE.l a1,-(a7)
00042DC0 <PED.ab2@8838>   !skipspace a1
00042DC4 <PED.ab2@8839>   CMP.w #$8007,(a1)
00042DC8 <PED.ab2@8840>   BNE 'ok
00042DCA <PED.ab2@8842>   MOVE.l (a7)+,a1
00042DCE <PED.ab2@8843> BRA 'nex
00042DD0 <PED.ab2@8846>   MOVE.l (a7)+,a1
00042DD8 <PED.ab2@8847>   MOVE.b #1,isfunction
00042DDC <PED.ab2@8848> BRA 'l20
00042DE0 <PED.ab2@8851>   CMP.w #$8009,(a1)                  ;state
00042DE4 <PED.ab2@8852>    BNE 'nex2
00042DE6 <PED.ab2@8853>   ADDQ #3,a1
00042DE8 <PED.ab2@8854>   MOVE.l a1,-(a7)
00042DF6 <PED.ab2@8855>   !skipspace a1
00042DFA <PED.ab2@8856>   CMP.w #$8007,(a1)
00042DFE <PED.ab2@8857>   BNE 'ok
00042E00 <PED.ab2@8858>   MOVE.l (a7)+,a1
00042E04 <PED.ab2@8859> BRA 'nex2
00042E06 <PED.ab2@8861>   MOVE.l (a7)+,a1                   ;??looks like dead code??
00042E0E <PED.ab2@8862>   MOVE.b #1,isfunction
00042E12 <PED.ab2@8863> BRA 'l20
00042E14 <PED.ab2@8867>   CMP.b (A1),D1
00042E18 <PED.ab2@8868>    BNE.w JL_0_4696
00042E1A <PED.ab2@8871>   ADDQ.l #1,a1
00042E1C <PED.ab2@8872>   TST.b (a1)
00042E20 <PED.ab2@8873>   BEQ JL_0_4696
00042E2E <PED.ab2@8876>   !skipspace a1
00042E34 <PED.ab2@8877>   CMP.b #".",-1(a1)
00042E38 <PED.ab2@8878>    BNE 'noformat
00042E3A <PED.ab2@8879>   ADDQ.l #1,a1
00042E48 <PED.ab2@8880>   !skipspace a1
00042E4E <PED.ab2@8883>   CMP.l #"FAST",(a1)
00042E52 <PED.ab2@8884>    BNE 'nf
00042E58 <PED.ab2@8885>   CMP.b #" ",4(a1)
00042E5C <PED.ab2@8886>    BNE 'nf
00042E5E <PED.ab2@8887>   ADDQ.l #5,a1
00042E64 <PED.ab2@8890>   MOVE.w D1,comWord_LabelListChanged
00042E6A <PED.ab2@8891>   JSR JL_0_46D6
00042E6C <PED.ab2@8894>   MOVEA.l (A0),A0
00042E6E <PED.ab2@8895>   SUBQ .l #1,d0
00042E72 <PED.ab2@8896>   BNE JL_0_467C
00042E74 <PED.ab2@8897>   MOVEA.l (A7)+,A1
00042E76 <PED.ab2@8898> RTS
00042E7A <PED.ab2@8906>   MOVEM.l d2-d3/a2/a3,-(a7)
00042E80 <PED.ab2@8908>   MOVE.l comLong_TotalLines,D0
00042E86 <PED.ab2@8911>   MOVE.b comByte_LabelIdentifier,D1
00042E88 <PED.ab2@8912>   MOVEQ #0,d3
00042E8E <PED.ab2@8913>   MOVE.l comparetab,a3
00042E92 <PED.ab2@8914> 'l15  MOVE.b #";",d1
00042E96 <PED.ab2@8915>   LEA $9(A0),A1
00042E98 <PED.ab2@8916>   TST.b (a1)
00042E9C <PED.ab2@8917>   BEQ 'nowrite
00042EA0 <PED.ab2@8918> 'lc1  CMP.b #" ",(a1)
00042EA4 <PED.ab2@8919>   BNE 'l1
00042EA6 <PED.ab2@8920>   ADDQ.l #1,a1
00042EAA <PED.ab2@8921>   BRA 'lc1
00042EB0 <PED.ab2@8922> 'l1 MOVE.l a1,straddr2
00042EB4 <PED.ab2@8923>   CMP.b #".",(a1)
00042EB8 <PED.ab2@8924>   BNE 'l1b
00042EBA <PED.ab2@8925>   ADDQ.l #1,a1
00042EBE <PED.ab2@8927> 'l1b  CMP.w #$802d,(a1)              ;stop
00042EC2 <PED.ab2@8928>   BEQ 'addstop
00042EC6 <PED.ab2@8929>   CMP.w #$80ae,(a1)                  ;trap
00042ECA <PED.ab2@8930>   BEQ 'addstop
00042ED0 <PED.ab2@8931>   MOVE.l straddr,a2
00042ED6 <PED.ab2@8932>   CLR.l slen2
00042ED8 <PED.ab2@8933> 'cok  MOVE.b (a2)+,d2
00042EDC <PED.ab2@8934>   BEQ 'addlist
00042EDE <PED.ab2@8935> 'cf  MOVE.b (a1)+,d3
00042EE4 <PED.ab2@8936>   TST.b searchmode
00042EE8 <PED.ab2@8937>   BEQ 'nopat
00042EEC <PED.ab2@8938>   BRA 'addlist
00042EEE <PED.ab2@8939> 'nopat TST.b d3
00042EF2 <PED.ab2@8940>   BEQ 'nowrite
00042EF8 <PED.ab2@8941>    TST.b casemode
00042EFC <PED.ab2@8942>    BEQ 'lca1
00042F00 <PED.ab2@8943>    MOVE.b 0(a3,d3.w),d3
00042F0A <PED.ab2@8944> 'lca1 ADD.l #1,slen2
00042F0C <PED.ab2@8945>   CMP.b d2,d3
00042F10 <PED.ab2@8946>   BEQ 'cok
00042F16 <PED.ab2@8947>   MOVE.l slen2,a2
00042F18 <PED.ab2@8948>   SUBQ.l #1,a2
00042F1A <PED.ab2@8949>   SUB.l a2,a1
00042F20 <PED.ab2@8950>   CLR.l slen2
00042F26 <PED.ab2@8951>   MOVE.l straddr,a2
00042F2A <PED.ab2@8952>   BRA 'cok
00042F2E <PED.ab2@8954>   MOVEM.l a0/d0,-(a7)
00042F30 <PED.ab2@8955>   MOVE.l a0,d0
00042F5A <PED.ab2@8956>   !basic
00042F5E <PED.ab2@8957>   s.l = PutD0
00042F7E <PED.ab2@8958>   WZTags #WENTRYA_TextPen,2
00042FA6 <PED.ab2@8959>   s$ = " --Breakpoint---"
00042FE2 <PED.ab2@8960>   WZListAdd list_labels,s$,0,s
00043000 <PED.ab2@8961>   !asm
00043004 <PED.ab2@8962>   MOVEM.l (a7)+,d0/a0
00043008 <PED.ab2@8963>   BRA 'nowrite
00043012 <PED.ab2@8966>   CMP.l #maxlabels,numcount          ;reduce this for slow computer
00043016 <PED.ab2@8967>   BGE 'nowrite
0004301A <PED.ab2@8968>   MOVEM.l a0/d0,-(a7)
0004301C <PED.ab2@8969>   MOVE.l a0,d0
00043046 <PED.ab2@8970>   !basic
0004304A <PED.ab2@8971>   s.l = PutD0
00043050 <PED.ab2@8972>   MOVE.l straddr2,a1
00043052 <PED.ab2@8975>   MOVE.l a1,a0
00043058 <PED.ab2@8976>   MOVE.l expandstore,a1
0004305E <PED.ab2@8977>   JSR detokenize_line
00043064 <PED.ab2@8978>   MOVE.l expandstore,d0
00043068 <PED.ab2@8979>   i = PutD0
000430C8 <PED.ab2@8980>   If i Then s$ = Peek$(i) : Else s$="!NULL!"
000430D2 <PED.ab2@8981>    If t
0004312E <PED.ab2@8982>      If Instr(s$,word1$)
0004318A <PED.ab2@8983>          If Instr(s$,word2$)
000431C8 <PED.ab2@8984>            WZListAdd list_labels,s$,-1,s
000431CE <PED.ab2@8985>            ADDQ.l #1,numcount
000431D4 <PED.ab2@8988>    Else
00043212 <PED.ab2@8989>      WZListAdd list_labels,s$,-1,s
00043218 <PED.ab2@8990>      ADDQ.l #1,numcount
0004321E <PED.ab2@8993>   ADDQ.w #1,comWord_LabelCounter
0004323C <PED.ab2@8994>   !asm
00043240 <PED.ab2@8995>   MOVEM.l (a7)+,d0/a0
00043242 <PED.ab2@8998>   MOVEA.l (A0),A0
00043244 <PED.ab2@8999>   SUBQ.l #1,d0
00043248 <PED.ab2@9000>   BNE 'l15
0004324C <PED.ab2@9002>   MOVEM.l (a7)+,d2-d3/a2/a3
0004324E <PED.ab2@9003>   MOVEA.l (A7)+,A1
00043250 <PED.ab2@9004> RTS
00043256 <PED.ab2@9007>   CLR.b instring
0004325A <PED.ab2@9008>   MOVE.b #";",d1
0004325E <PED.ab2@9009>   LEA $9(A0),A1
00043260 <PED.ab2@9010>   TST.b (a1)
00043264 <PED.ab2@9011>   BEQ 'nowrite
00043268 <PED.ab2@9012> 'l1  CMP.b #" ",(a1)
0004326C <PED.ab2@9013>   BNE 'l1b
0004326E <PED.ab2@9014>   ADDQ.l #1,a1
00043272 <PED.ab2@9015>   BRA 'l1
00043276 <PED.ab2@9019>   CMP.b #".",(a1)
0004327A <PED.ab2@9021>   CMP.b #$22,(a1)
0004327E <PED.ab2@9022>   BNE 'is1
00043284 <PED.ab2@9023>   NOT.b instring
00043288 <PED.ab2@9026>   CMP.w #$802d,(a1)
0004328C <PED.ab2@9027>   BEQ 'addlist
00043290 <PED.ab2@9028>   CMP.w #$800f,(a1)
00043294 <PED.ab2@9029>   BNE 'l10
00043296 <PED.ab2@9030>   MOVE.l a0,-(a7)
0004329C <PED.ab2@9031>   MOVE.l straddr,a0
000432A2 <PED.ab2@9032>   CMP.l #"Case",(a0)
000432A6 <PED.ab2@9033>   BNE 'l10a
000432D0 <PED.ab2@9034>   !basic
000432D8 <PED.ab2@9035>   skip = 1
000432F6 <PED.ab2@9036>   !asm
000432F8 <PED.ab2@9037>   MOVE.l (a7)+,a0
000432FA <PED.ab2@9038>   ADDQ.l #3,a1
000432FE <PED.ab2@9039>   BRA 'addlist
00043300 <PED.ab2@9041>   MOVE.l (a7)+,a0
00043302 <PED.ab2@9043>   CMP.b (a1),d1
00043306 <PED.ab2@9044>   BNE 'skip
00043308 <PED.ab2@9046>   ADDQ.l #1,a1
0004330E <PED.ab2@9047>   TST.b instring
00043312 <PED.ab2@9048>   BNE 'nowrite
00043314 <PED.ab2@9049>   TST.b (a1)
00043318 <PED.ab2@9050>   BEQ 'nowrite
0004331C <PED.ab2@9051>   CMP.b #".",(a1)
00043320 <PED.ab2@9052>   BEQ 'nowrite
00043324 <PED.ab2@9054>   CMP.b #" ",(a1)
00043328 <PED.ab2@9055>   BNE 'l1bs
0004332A <PED.ab2@9056>   ADDQ.l #1,a1
0004332E <PED.ab2@9057>   BRA 'l1s
00043338 <PED.ab2@9060>   CMP.l #maxlabels,numcount          ;reduce this for slow computer
0004333C <PED.ab2@9061>   BGE 'out
00043342 <PED.ab2@9062>   MOVE.w D1,comWord_LabelListChanged
00043348 <PED.ab2@9063>   JSR JL_0_46D6                      ;remarklistadd
0004334A <PED.ab2@9066>   TST.b (a1)+
0004334E <PED.ab2@9067>   BNE 'co
00043350 <PED.ab2@9069>   MOVEA.l (A0),A0
00043352 <PED.ab2@9070>   SUBQ.l #1,d0
00043356 <PED.ab2@9071>   BNE click_remark
00043358 <PED.ab2@9073>   MOVEA.l (A7)+,A1
0004335A <PED.ab2@9074> RTS
00043384 <PED.ab2@9077>   !basic
00043390 <PED.ab2@9078>   WZListRemove list_labels
000433AE <PED.ab2@9079>   !asm
000433B4 <PED.ab2@9080>   CLR.w comWord_LabelCounter
000433B6 <PED.ab2@9081> RTS
000433BE <PED.ab2@9084>   MOVE.w #$FFFF,comWord_LabelListChanged
000433C0 <PED.ab2@9085> RTS
000433C4 <PED.ab2@9088>   MOVEM.l D0-D1/A1-A2,-(A7)
000433C6 <PED.ab2@9089>   MOVEQ.l #$08,D0
000433CC <PED.ab2@9090>   MOVE.l #$10000,D1
000433D2 <PED.ab2@9091>   MOVEA.l _execbase,A6
000433D4 <PED.ab2@9092>   MOVE.l A0,-(A7)
000433F6 <PED.ab2@9093>   !newalloc
000433F8 <PED.ab2@9094>   TST.l D0
000433FC <PED.ab2@9095>    BEQ.w JL_0_4942
000433FE <PED.ab2@9097>   MOVEA.l (A7)+,A0
00043400 <PED.ab2@9098>   MOVEA.l D0,A2
00043406 <PED.ab2@9099>   MOVE.w comWord_LabelCounter,D1
0004340A <PED.ab2@9100>   BEQ.w JL_0_4714
00043410 <PED.ab2@9102>   MOVEA.l comPtr_LabelList,A1
00043412 <PED.ab2@9103>   SUBQ.w #2,D1
00043416 <PED.ab2@9104>   BMI.w JL_0_470E
00043418 <PED.ab2@9107>     MOVEA.l (A1),A1
0004341C <PED.ab2@9108>   DBF D1,JL_0_4708
0004341E <PED.ab2@9111>   MOVE.l A2,(A1)
00043422 <PED.ab2@9112>   BRA.w JL_0_471A
00043428 <PED.ab2@9115>   MOVE.l A2,comPtr_LabelList
0004342C <PED.ab2@9118>   MOVE.l A0,$4(A2)
00043432 <PED.ab2@9119>   ADDQ.w #1,comWord_LabelCounter
00043436 <PED.ab2@9121>   MOVEM.l (A7)+,D0-D1/A1-A2
00043438 <PED.ab2@9122> RTS
00043440 <PED.ab2@9125>   MOVE.w #$FFFF,comWord_LabelListChanged
00043442 <PED.ab2@9126> RTS
00043446 <PED.ab2@9129> AL_0_4734:  Ds.l 1
0004344C <PED.ab2@9132>   CLR.l AL_0_4734
00043454 <PED.ab2@9133>   CMPI.b #$FF,comByte_LabelIdentifier
00043458 <PED.ab2@9134>   BNE.w JL_0_474C
0004345A <PED.ab2@9135> RTS
00043460 <PED.ab2@9138>   JSR clear_labellist
00043466 <PED.ab2@9139>   JSR update_labellist
0004346C <PED.ab2@9140>   MOVE.w comWord_LabelCounter,D3
00043472 <PED.ab2@9142>   TST.w comWord_LabelSize
00043476 <PED.ab2@9143>    BEQ.w JL_0_47AA
0004347C <PED.ab2@9144>   MOVE.w comWord_LabelSize,D0
00043482 <PED.ab2@9145>   CMP.w comWord_LabelSizeC,D0
00043486 <PED.ab2@9146>    BEQ.w redraw_labellist
0004348C <PED.ab2@9149>   ST AL_0_4734
00043496 <PED.ab2@9150>   MOVE.w clickpos,comWord_LabelSize
0004349C <PED.ab2@9151>   JSR _redraw
000434A2 <PED.ab2@9152>   JSR update_horizscroller
000434A8 <PED.ab2@9153>   JSR update_vertscroller
000434AE <PED.ab2@9154>   CLR.w comWord_LabelListChanged
000434B4 <PED.ab2@9157>   MOVE.w comWord_LabelCounter,D5
000434B6 <PED.ab2@9158>   MOVEQ.l #$00,D1
000434B8 <PED.ab2@9159>   MOVEQ.l #$00,D4
000434BE <PED.ab2@9160>   TST.w comWord_LabelCounter
000434C2 <PED.ab2@9161> BRA JL_0_47Dca ;BNE.w JL_0_47Dca
000434C4 <PED.ab2@9162> RTS
000434EE <PED.ab2@9165>   !basic
000434F0 <PED.ab2@9166>   MOVEQ #0,d0
000434F6 <PED.ab2@9167>   MOVE.w comWord_LabelCounter,d0
000434FC <PED.ab2@9168>   CMP.l comLong_Label1VisableItem,d0
00043500 <PED.ab2@9169>   BGT 'g1
00043506 <PED.ab2@9170>   CLR.l comLong_Label1VisableItem
00043510 <PED.ab2@9173>   MOVE.l comLong_Label1VisableItem,d0 : LabelList_FirstVisableItemNumber = PutD0
0004353C <PED.ab2@9174>   If WZ_CheckOpen{"WIN_LABELS"}
00043576 <PED.ab2@9175>     Use Window WZID("WIN_LABELS")
000435C6 <PED.ab2@9176>     WZPrint "LISTVIEW_LABELS",LabelList_PreSelectItemNumber,list_labels,LabelList_FirstVisableItemNumber
000435D2 <PED.ab2@9177>     WZListRemove lib_list.List
00043618 <PED.ab2@9178>     WZPrint "LIBRARY_LIST",0,lib_list
00043636 <PED.ab2@9180>   !asm
00043638 <PED.ab2@9181> RTS
00043640 <PED.ab2@9229>   MOVE.w #$FFFF,comWord__AL_0_86C0
00043662 <PED.ab2@9230>   !newalloc;JSR _AllocVec(A6)
00043664 <PED.ab2@9231>   TST.l D0
00043668 <PED.ab2@9232>   BEQ.w JL_0_4942
0004366A <PED.ab2@9233> RTS
00043670 <PED.ab2@9236>   JSR display_memoryalert
00043676 <PED.ab2@9237>   MOVE.l comPtr_SourceFileHandle,D1
0004367A <PED.ab2@9238>   BEQ.w JL_0_4956
00043680 <PED.ab2@9239>   MOVEA.l _dosbase,A6
00043684 <PED.ab2@9240>   JSR _Close(A6)
0004368A <PED.ab2@9243>   CLR.l comLong_DisplayLineOffset
00043690 <PED.ab2@9244>   CLR.l comLong_DisplayLine
0004369A <PED.ab2@9245>   MOVE.l comPtr_FirstSourceLine,comPtr_CurrentSourceLine
000436A0 <PED.ab2@9246>   JSR _redraw
000436A6 <PED.ab2@9247> JMP JL_0_CE2
000436AA <PED.ab2@9250>   JSR -$2AC(A6)
000436AC <PED.ab2@9251>   TST.l D0
000436B0 <PED.ab2@9252>   BNE.w 'fail
000436B6 <PED.ab2@9253>   JSR comwin_close
000436BA <PED.ab2@9254>   BRA.b JL_0_4942
000436BC <PED.ab2@9257> RTS
000436E6 <PED.ab2@9260>   !basic
0004370A <PED.ab2@9261>   alert$ = Chr$($00)  ; alert code
00043756 <PED.ab2@9262>   alert$ + Chr$($38)  ; x-position
000437A2 <PED.ab2@9263>   alert$ + Chr$($16)  ; y-position
000437E8 <PED.ab2@9264>   alert$ + "Not enough memory for that operation! - Click Mousebutton to continue.\00\00"
0004380E <PED.ab2@9265>   DisplayAlert_ $00,&alert$,$28
0004382C <PED.ab2@9266>   !asm
0004382E <PED.ab2@9267> RTS
00043832 <PED.ab2@9271>   MOVEM.l D0-D7/A0-A6,-(A7)
00043838 <PED.ab2@9274>   JSR change_sourcefont
00043842 <PED.ab2@9283>   MOVE.w flag_tokenization,comWord_DoTokenize
00043848 <PED.ab2@9284>   TST.w comWord_DoTokenize
0004384C <PED.ab2@9285>   BEQ.w JL_0_4A76
00043852 <PED.ab2@9286>     TST.l comPtr_TokenBase
00043856 <PED.ab2@9287>     BNE.w JL_0_4A76
0004385C <PED.ab2@9288>       CLR.w comWord_DoTokenize
00043862 <PED.ab2@9292>   JSR add_history_to_menu
00043866 <PED.ab2@9294>   MOVEM.l (A7)+,D0-D7/A0-A6
00043868 <PED.ab2@9295> RTS
0004386C <PED.ab2@9298>   MOVEM.l A0-A1,-(A7)
0004386E <PED.ab2@9301>     MOVE.b (A0)+,(A1)+
00043872 <PED.ab2@9302>   BNE.b JL_0_4A92
00043876 <PED.ab2@9304>   MOVEM.l (A7)+,A0-A1
00043878 <PED.ab2@9305> RTS
0004387E <PED.ab2@9308>   JSR close_sourcewindow
00043882 <PED.ab2@9309>   BMI.w close_librariesb
00043888 <PED.ab2@9310>   JSR open_sourcewindow
0004388C <PED.ab2@9311>   BMI.w close_librariesb
0004388E <PED.ab2@9313> RTS
00043894 <PED.ab2@9315> JMP close_libraries
000438A8 <PED.ab2@9333>   If Peek.l(?ptr_sourcefonti)
000438D8 <PED.ab2@9334>     If Peek.l(?ptr_sourcefonti)><Peek.l(?ptr_sourcefont)
000438F0 <PED.ab2@9335>       CloseFont_ Peek.l(?ptr_sourcefonti)
000438F6 <PED.ab2@9337>     CLR.l ptr_sourcefonti
0004390A <PED.ab2@9340>   If Peek.l(?ptr_sourcefontb)
0004393A <PED.ab2@9341>     If Peek.l(?ptr_sourcefontb)><Peek.l(?ptr_sourcefont)
00043952 <PED.ab2@9342>       CloseFont_ Peek.l(?ptr_sourcefontb)
00043958 <PED.ab2@9344>     CLR.l ptr_sourcefontb
0004396C <PED.ab2@9347>   If Peek.l(?ptr_sourcefont)
00043984 <PED.ab2@9348>     CloseFont_ Peek.l(?ptr_sourcefont)
0004398A <PED.ab2@9349>     CLR.l ptr_sourcefont
0004398C <PED.ab2@9351> Return
000439B6 <PED.ab2@9355>   !basic
000439BC <PED.ab2@9357>   Gosub close_sourcefont
000439C6 <PED.ab2@9359>   MOVE.w sourcefontsize  ,textfont_YSize
000439D0 <PED.ab2@9360>   MOVE.b sourcefontstyle ,textfont_Style
000439E2 <PED.ab2@9361>   Poke.l ?struct_textfont,?str_sourcefontname
000439F8 <PED.ab2@9362>   *font.TextFont = OpenDiskFont_ (?struct_textfont)
00043A0A <PED.ab2@9364>   If *font = 0                       ; unable to open font => use system default
00043A1C <PED.ab2@9365>     InitRastPort_ rp.RastPort
00043A38 <PED.ab2@9366>     AskFont_ rp,ta.TextAttr ; might be better
00043A70 <PED.ab2@9367>     Poke.s ?str_sourcefontname,Peek.s(ta\ta_Name)
00043A86 <PED.ab2@9368>     Poke.w ?sourcefontsize    ,ta\ta_YSize
00043A9C <PED.ab2@9369>     *font = OpenDiskFont_(ta)
00043AAC <PED.ab2@9372>   Poke.l ?ptr_sourcefont,*font
00043AB6 <PED.ab2@9374>   MOVE.w sourcefontsize,textfont_YSize
00043ABE <PED.ab2@9375>   MOVE.b ##FSF_ITALIC,textfont_Style
00043AD0 <PED.ab2@9376>   Poke.l ?struct_textfont,?str_sourcefontname
00043AE6 <PED.ab2@9377>   *fontI.TextFont = OpenDiskFont_ (?struct_textfont)
00043AF8 <PED.ab2@9379>   If *fontI = 0  ; unable to open font => use system default
00043B0A <PED.ab2@9380>     InitRastPort_ rp.RastPort
00043B26 <PED.ab2@9381>     AskFont_ rp,ta.TextAttr ; might be better
00043B5E <PED.ab2@9382>     Poke.s ?str_sourcefontname,Peek.s(ta\ta_Name)
00043B74 <PED.ab2@9383>     Poke.w ?sourcefontsize    ,ta\ta_YSize
00043B8A <PED.ab2@9384>     *fontI = OpenDiskFont_(ta)
00043B9A <PED.ab2@9387>   Poke.l ?ptr_sourcefonti,*fontI
00043BA4 <PED.ab2@9389>   MOVE.w sourcefontsize,textfont_YSize
00043BAC <PED.ab2@9390>   MOVE.b ##FSF_BOLD,textfont_Style
00043BBE <PED.ab2@9391>   Poke.l ?struct_textfont,?str_sourcefontname
00043BD4 <PED.ab2@9392>   *fontB.TextFont = OpenDiskFont_ (?struct_textfont)
00043BE6 <PED.ab2@9394>   If *fontB = 0  ; unable to open font => use system default
00043BF8 <PED.ab2@9395>     InitRastPort_ rp.RastPort
00043C14 <PED.ab2@9396>     AskFont_ rp,ta.TextAttr ; might be better
00043C4C <PED.ab2@9397>     Poke.s ?str_sourcefontname,Peek.s(ta\ta_Name)
00043C62 <PED.ab2@9398>     Poke.w ?sourcefontsize    ,ta\ta_YSize
00043C78 <PED.ab2@9399>     *fontB = OpenDiskFont_(ta)
00043C88 <PED.ab2@9402>   Poke.l ?ptr_sourcefontb,*fontB
00043C92 <PED.ab2@9404>   If *fontI
00043CAE <PED.ab2@9405>     If *fontI\tf_XSize><*font\tf_XSize
00043CBE <PED.ab2@9406>       Poke.l ?ptr_sourcefonti,*font
00043CD4 <PED.ab2@9407>       CloseFont_ *fontI : *fontI = *font
00043CDE <PED.ab2@9411>   If *fontB
00043CFA <PED.ab2@9412>     If *fontB\tf_XSize><*font\tf_XSize
00043D0A <PED.ab2@9413>       Poke.l ?ptr_sourcefontb,*font
00043D20 <PED.ab2@9414>       CloseFont_ *fontB : *fontB = *font
00043D3E <PED.ab2@9418>   !asm
00043D40 <PED.ab2@9419> RTS
00043D44 <PED.ab2@9422> valueaddr:  Ds.l 1
00043D4A <PED.ab2@9425>   MOVE.l a0,valueaddr
00043D74 <PED.ab2@9426>   !basic
00043D78 <PED.ab2@9427>   value.l = PutD0
00043DB2 <PED.ab2@9428>   formatstr$ = Peek$(Peek.l(?valueaddr))
00043DC6 <PED.ab2@9429>   len_fmtstr.b = FLen(formatstr$)
00043E1E <PED.ab2@9430>   formatstr$ = StrRight(Str$(value),len_fmtstr,48)  ; mit nullen auff|llen
00043E66 <PED.ab2@9431>   Poke$ Peek.l(?valueaddr),formatstr$
00043E84 <PED.ab2@9432>   !asm
00043E86 <PED.ab2@9433> RTS
00043E8C <PED.ab2@9437>   MOVE.w comWord_SourceChanged,D0
00043E90 <PED.ab2@9438>   BEQ.w JL_0_4DFC
00043E96 <PED.ab2@9439>     LEA easystruct_loosewarning,A1
00043E9C <PED.ab2@9440>     JSR show_requester
00043E9E <PED.ab2@9441>     RTS
00043EA6 <PED.ab2@9444>   MOVE.w #$FFFF,comWord_LabelListChanged
00043EA8 <PED.ab2@9445>   MOVEQ.l #-$01,D0
00043EAA <PED.ab2@9446> RTS
00043EB0 <PED.ab2@9449>   ADDQ.l #1,comLong_TotalLines
00043EB2 <PED.ab2@9450>   MOVE.l (A4),D0
00043EB6 <PED.ab2@9451>   BEQ.w JL_0_4E20
00043EB8 <PED.ab2@9452>   MOVEA.l D0,A1
00043EBA <PED.ab2@9453>   MOVE.l A1,(A0)
00043EBE <PED.ab2@9454>   MOVE.l A0,$4(A1)
00043EC2 <PED.ab2@9455>   BRA.w JL_0_4E26
00043EC8 <PED.ab2@9458>   MOVE.l A0,comPtr_LastSourceLine
00043ECC <PED.ab2@9461>   MOVE.l A4,$4(A0)
00043ECE <PED.ab2@9462>   MOVE.l A0,(A4)
00043ED0 <PED.ab2@9463>   MOVEA.l A0,A4
00043ED6 <PED.ab2@9464>   MOVE.l A4,comPtr_CurrentSourceLine
00043ED8 <PED.ab2@9465> RTS
00043EDE <PED.ab2@9468>   MOVEA.l comPtr_Temp_TokenString2,A0
00043EE0 <PED.ab2@9470>     MOVE.b (A0)+,(A3)+
00043EE4 <PED.ab2@9471>     BEQ.w JL_0_4E46
00043EE8 <PED.ab2@9472>     BPL.b JL_0_4E3A
00043EEA <PED.ab2@9473>     MOVE.b (A0)+,(A3)+
00043EEE <PED.ab2@9474>   BRA.b JL_0_4E3A
00043EF0 <PED.ab2@9477>   SUBQ.w #1,A3
00043EF2 <PED.ab2@9478> RTS
00043EF8 <PED.ab2@9481>   TST.w comWord_PasteMode
00043EFC <PED.ab2@9482>    BNE.w JL_0_4E64
00043F02 <PED.ab2@9483>   CLR.l comPtr_SourceFileHandle
00043F04 <PED.ab2@9484>   MOVE.l D7,D1
00043F0A <PED.ab2@9485>   MOVEA.l _dosbase,A6
00043F0E <PED.ab2@9486> JMP _Close(A6)
00043F10 <PED.ab2@9488> RTS
00043F16 <PED.ab2@9491>   TST.w comWord_PasteMode
00043F1A <PED.ab2@9492>     BNE.w exit_opensourcefile
00043F1C <PED.ab2@9494>   MOVE.l D7,D1
00043F1E <PED.ab2@9495>   MOVE.l D1,A0
00043F24 <PED.ab2@9496>   CLR.b convert
00043F2A <PED.ab2@9497>   LEA comStr_SourceFileComplete,A0
00043F2C <PED.ab2@9499>     TST.b (a0)+
00043F30 <PED.ab2@9500>   BNE 'l10
00043F32 <PED.ab2@9501>   MOVE.l a1,-(a7)
00043F34 <PED.ab2@9502>   MOVE.l a0,a1
00043F3A <PED.ab2@9503>   JSR check_fileextension_for_tokenization
00043F3C <PED.ab2@9504>   MOVE.l (a7)+,a1
00043F40 <PED.ab2@9505>   LEA -5(a0),a2
00043F46 <PED.ab2@9506>   CMP.l #".asm",(a2)
00043F4A <PED.ab2@9507>    BNE 'l11
00043F50 <PED.ab2@9508>   TST.w smart_tokenization
00043F54 <PED.ab2@9509>   BEQ 't1
00043F5C <PED.ab2@9510>   MOVE.w #$ffff,comWord_DoTokenize
00043F64 <PED.ab2@9512>   MOVE.b #1,convert
00043F6A <PED.ab2@9514>   MOVEA.l _dosbase,A6
00043F6E <PED.ab2@9515>   JSR _Open(A6)                      ; D1: name, D2: accessmode
00043F70 <PED.ab2@9516>   MOVE.l D0,D7
00043F74 <PED.ab2@9517>    BNE.w file_found
00043F76 <PED.ab2@9518>   ADDQ.w #4,A7
00043F78 <PED.ab2@9519>   SUBA.l A0,A0
00043F7E <PED.ab2@9520>   MOVEA.l #comStr_ErrorOpenFile,A0
00043F84 <PED.ab2@9521>   TST.b menuload
00043F88 <PED.ab2@9522>   BNE 'lod1
00043F8C <PED.ab2@9523>     BRA.w show_errorrequester
00043F92 <PED.ab2@9525>   CLR.b menuload
00043F96 <PED.ab2@9526>   BRA loadfileerror
00043F9C <PED.ab2@9529>   MOVE.l D7,comPtr_SourceFileHandle
00043F9E <PED.ab2@9532> RTS
00043FA0 <PED.ab2@9535>   SUBQ.w #1,D6
00043FA4 <PED.ab2@9536>   BMI.w JL_0_4EA2
00043FA6 <PED.ab2@9537>   MOVE.b (A5)+,D0
00043FA8 <PED.ab2@9538>   CMP.w D0,D0
00043FAA <PED.ab2@9539> RTS
00043FB0 <PED.ab2@9542>   JSR source_readin
00043FB4 <PED.ab2@9543>   BNE.b readbyte
00043FB6 <PED.ab2@9544>   MOVEQ.l #-$01,D0
00043FB8 <PED.ab2@9545> RTS
00043FBE <PED.ab2@9548>   TST.w comWord_PasteMode
00043FC2 <PED.ab2@9549>   BEQ.w source_read_from_file_cached ; well, it's from file
00043FC6 <PED.ab2@9551>   !regs2stack                           ; new line-by-line Code (Thilo)
00043FF0 <PED.ab2@9552>   !basic
00044002 <PED.ab2@9553>   Poke.l ?clipboard_copylen,0
00044014 <PED.ab2@9554>   Poke.l ?clipboard_copybuffer,?clipboard_dummystr
0004403C <PED.ab2@9555>   clipboard_text.s=""
00044064 <PED.ab2@9556>   If *cH.clipboardHandle=#NULL Then *cH=clipboard_Open{0} : hasReturn.w=0
0004406E <PED.ab2@9557>   If *cH
00044080 <PED.ab2@9558>     If clipboard_HasMoreLines{*cH}
000440B4 <PED.ab2@9559>       clipboard_text.s = clipboard_GetNextLine{*cH}
000440EE <PED.ab2@9561>       For n.l=0 To FLen(clipboard_text)-1
0004410C <PED.ab2@9562>         cchar.w = Peek.b(&clipboard_text+n) & $FF
0004412A <PED.ab2@9563>         If cchar = $a0 Then cchar = @" "  ; non breaking space
00044142 <PED.ab2@9564>         If cchar > 127 Then cchar = @"?"
00044158 <PED.ab2@9565>         Poke.b &clipboard_text+n,cchar
00044168 <PED.ab2@9566>       Next
0004419C <PED.ab2@9568>       lastChar.b = Peek.b(&clipboard_text+FLen(clipboard_text)-1)
00044206 <PED.ab2@9569>       If lastChar><$0A AND hasReturn><0 Then clipboard_text+"\\n"
00044222 <PED.ab2@9570>       If lastChar=$0A Then hasReturn=1
00044248 <PED.ab2@9572>       Poke.l ?clipboard_copylen,FLen(clipboard_text)
0004425A <PED.ab2@9573>       Poke.l ?clipboard_copybuffer,&clipboard_text
00044260 <PED.ab2@9574>     Else
0004426A <PED.ab2@9575>       clipboard_Free{*cH}
00044272 <PED.ab2@9576>       *cH = #NULL
00044290 <PED.ab2@9580>   !asm
00044294 <PED.ab2@9581>   !stack2regs
0004429A <PED.ab2@9582>   MOVE.l  clipboard_copylen,D6
000442A0 <PED.ab2@9583>   MOVEA.l clipboard_copybuffer,A5
000442A2 <PED.ab2@9584>   TST.l D6
000442A4 <PED.ab2@9585>   RTS
000442A8 <PED.ab2@9588> Dc.l 0
000442AC <PED.ab2@9673> clipboard_copylen: Dc.l 0
000442B0 <PED.ab2@9674> clipboard_copybuffer: Dc.l 0
000442B2 <PED.ab2@9677>   MOVE.l D7,D1                       ; file handle
000442B8 <PED.ab2@9678>   MOVEA.l comPtr_DosBuffer,A5
000442BA <PED.ab2@9679>   MOVE.l A5,D2                       ; membuffer
000442C0 <PED.ab2@9680>   MOVE.l #$2000,D3                   ; length
000442C6 <PED.ab2@9681>   MOVEA.l _dosbase,A6
000442CA <PED.ab2@9682>    JSR _Read(A6)
000442CC <PED.ab2@9683>   MOVE.l D0,D6
000442D0 <PED.ab2@9684>    BPL.w JL_0_4F18
000442D2 <PED.ab2@9685>   SUBA.l A0,A0
000442D8 <PED.ab2@9686>   MOVEA.l #comStr_ErrorReadFile,A0
000442DE <PED.ab2@9687>    JSR show_errorrequester
000442E0 <PED.ab2@9688>   MOVEQ.l #$00,D6
000442E2 <PED.ab2@9690> RTS
000442E8 <PED.ab2@9694>   MOVE.l D7,readcache_fp
000442EE <PED.ab2@9695>   MOVEA.l comPtr_DosBuffer,A5
000442F4 <PED.ab2@9696>   MOVE.l A5,readcache_destptr        ; membuffer
000442FE <PED.ab2@9697>   MOVE.l #$2000,readcache_blocklen   ; length
00044328 <PED.ab2@9698>   !basic
00044338 <PED.ab2@9699>   rc_fp.l         = Peek.l(?readcache_fp)
00044348 <PED.ab2@9700>   rc_destptr.l    = Peek.l(?readcache_destptr)
00044358 <PED.ab2@9701>   rc_readlen.l    = Peek.l(?readcache_readlen)
00044368 <PED.ab2@9702>   rc_offset.l     = Peek.l(?readcache_offset)
00044378 <PED.ab2@9703>   rc_blocklen.l   = Peek.l(?readcache_blocklen)
00044388 <PED.ab2@9704>   rc_cachelen.l   = Peek.l(?readcache_cachelen)
00044398 <PED.ab2@9705>   rc_cacheptr.l   = Peek.l(?readcache_cacheptr)
000443A8 <PED.ab2@9706>   rc_dotokenize.l = Peek.l(?readcache_dotokenize)
000443BA <PED.ab2@9708>   If rc_readlen<=0                   ; no file yet!
000443D2 <PED.ab2@9709>     ExamineFH_ rc_fp,*rc_fib
000443E0 <PED.ab2@9710>     rc_filelen.l = *rc_fib\fib_Size
000443EE <PED.ab2@9711>     If rc_filelen>rc_cachelen
00044408 <PED.ab2@9712>       If rc_cacheptr Then FreeVec_ rc_cacheptr
00044426 <PED.ab2@9713>       rc_cacheptr = AllocVec_(rc_filelen,#MEMF_ANY)
0004442C <PED.ab2@9714>       rc_cachelen = rc_filelen
00044450 <PED.ab2@9716>     rc_readlen.l = Read_ (rc_fp,rc_cacheptr,rc_filelen)
000444BA <PED.ab2@9717>     ex.s = LCase$(dos_GetExt{Peek.s(&*rc_fib\fib_FileName)})
00044560 <PED.ab2@9718>     If ex="ab2" OR ex="ab3" OR ex="asc"
0004457A <PED.ab2@9719>       rc_readlen = preproc_Tokenize{*PreProcessor,rc_cacheptr,rc_cacheptr,rc_readlen}
00044582 <PED.ab2@9721>     rc_offset = 0
00044588 <PED.ab2@9724>   rc_chunklen.l = rc_blocklen
000445AC <PED.ab2@9725>   If rc_chunklen>rc_readlen-rc_offset Then rc_chunklen=rc_readlen-rc_offset
000445BE <PED.ab2@9726>   If rc_chunklen>0
000445E4 <PED.ab2@9727>     CopyMem_ rc_cacheptr+rc_offset,rc_destptr,rc_chunklen
000445F2 <PED.ab2@9728>     rc_offset + rc_chunklen
000445F8 <PED.ab2@9729>   Else
00044600 <PED.ab2@9730>     rc_chunklen   = 0
00044608 <PED.ab2@9731>     rc_readlen = 0
00044618 <PED.ab2@9734>   Poke.l ?readcache_chunklen ,rc_chunklen
00044628 <PED.ab2@9735>   Poke.l ?readcache_readlen  ,rc_readlen
00044638 <PED.ab2@9736>   Poke.l ?readcache_offset   ,rc_offset
00044648 <PED.ab2@9737>   Poke.l ?readcache_cachelen ,rc_cachelen
00044658 <PED.ab2@9738>   Poke.l ?readcache_cacheptr ,rc_cacheptr
00044676 <PED.ab2@9740>   !asm
0004467C <PED.ab2@9741>   MOVE.l readcache_chunklen,d0
00044682 <PED.ab2@9742>   MOVE.l readcache_chunklen,d6
00044688 <PED.ab2@9743>   MOVEA.l comPtr_DosBuffer,A5
0004468E <PED.ab2@9744>   MOVE.l readcache_fp,D7
00044690 <PED.ab2@9745>   TST.l D6
00044692 <PED.ab2@9746> RTS
00044696 <PED.ab2@9748> readcache_fp:         Dc.l 0
0004469A <PED.ab2@9749> readcache_destptr:    Dc.l 0
0004469E <PED.ab2@9750> readcache_filelen:    Dc.l 0
000446A2 <PED.ab2@9751> readcache_offset:     Dc.l 0
000446A6 <PED.ab2@9752> readcache_blocklen:   Dc.l 0
000446AA <PED.ab2@9753> readcache_readlen:    Dc.l 0
000446AE <PED.ab2@9754> readcache_cacheptr:   Dc.l 0
000446B2 <PED.ab2@9755> readcache_cachelen:   Dc.l 0
000446B6 <PED.ab2@9756> readcache_chunklen:   Dc.l 0
000446BA <PED.ab2@9757> readcache_dotokenize: Dc.l 0
000446BC <PED.ab2@9760>   MOVE.l D5,D0
000446C0 <PED.ab2@9761>   ADDI.w #$9,D0
000446C2 <PED.ab2@9762>   MOVEQ.l #$01,D1
000446C8 <PED.ab2@9763>   MOVEA.l _execbase,A6
000446CE <PED.ab2@9764>   JSR JL_0_492E
000446D4 <PED.ab2@9766>   JSR JL_0_FBDE
000446D6 <PED.ab2@9767>   NOP
000446DC <PED.ab2@9768>   MOVEA.l comPtr_Temp_TokenString2,A1
000446E0 <PED.ab2@9769>   LEA $9(A0),A0
000446E2 <PED.ab2@9772>   MOVE.b (A1)+,(A0)+
000446E6 <PED.ab2@9773>    BNE.b JL_0_4F3A
000446E8 <PED.ab2@9774>   MOVEA.l D0,A0
000446EE <PED.ab2@9775>   MOVE.b comByte_LabelIdentifier,D0
000446F0 <PED.ab2@9776>   MOVE.l A1,-(A7)
000446F4 <PED.ab2@9777>   LEA $9(A0),A1
000446F8 <PED.ab2@9780>   CMPI.b #$20,(A1)+
000446FC <PED.ab2@9781>    BEQ.b JL_0_4F4A
000446FE <PED.ab2@9782>   CMP.b -(A1),D0
00044700 <PED.ab2@9783>   MOVEA.l (A7)+,A1
00044704 <PED.ab2@9785>    BRA.w JL_0_46CC
00044706 <PED.ab2@9786> RTS
0004470C <PED.ab2@9789>   JSR readbyte
00044710 <PED.ab2@9790>   BMI.w JL_0_500C                    ;move a line
00044716 <PED.ab2@9792>   MOVEA.l tempstore,A0
00044718 <PED.ab2@9793>   MOVEQ.l #$00,D4
0004471A <PED.ab2@9796>   TST.b D0
0004471E <PED.ab2@9797>    BPL.w JL_0_4F82
00044720 <PED.ab2@9798>   MOVE.b D0,(A0)+
00044722 <PED.ab2@9799>   MOVE.l A0,-(A7)
00044728 <PED.ab2@9800>    JSR readbyte
0004472A <PED.ab2@9801>   MOVEA.l (A7)+,A0
0004472E <PED.ab2@9802>    BMI.w JL_0_4FD2
00044730 <PED.ab2@9803>   MOVE.b D0,(A0)+
00044734 <PED.ab2@9804>   BRA.w JL_0_4FB6
00044738 <PED.ab2@9807>   CMP.b #$A,D0
0004473C <PED.ab2@9808>    BNE.w JL_0_4F8E                   ;end line clipboard
0004473E <PED.ab2@9809>   TST.b (a5)
00044742 <PED.ab2@9810>   BNE 'c2
00044744 <PED.ab2@9811>   SUBQ.l #$1,d6
00044746 <PED.ab2@9812>   ADDQ #1,a5
0004474C <PED.ab2@9814>     CMP.l #"STYL",(a5)
00044750 <PED.ab2@9815>     BEQ 's1
00044756 <PED.ab2@9816>     CMP.l #"COLS",(a5)
0004475A <PED.ab2@9817>     BNE 'c1
0004475E <PED.ab2@9818>     MOVE.l 4(a5),d0
00044760 <PED.ab2@9819>     ADDQ.l #8,a5
00044762 <PED.ab2@9820>     SUBQ.l #8,d6
00044764 <PED.ab2@9821>     ADD.l d0,a5
00044766 <PED.ab2@9822>     SUB.l d0,d6
0004476A <PED.ab2@9823>   BRA 'c2
0004476C <PED.ab2@9825>   SUBQ.l #4,d6
00044774 <PED.ab2@9826>   CMP.l #0,4(a5)
00044778 <PED.ab2@9827>   BNE 'c1
0004477A <PED.ab2@9828>   SUBQ.l #4,d6
00044782 <PED.ab2@9829>   CMP.l #"CHRS",8(a5)
00044786 <PED.ab2@9830>   BNE 'c1
00044788 <PED.ab2@9831>   SUBQ.l #4,d6
0004478E <PED.ab2@9832>   CMP.b #0,12(a5)
00044792 <PED.ab2@9833>   BNE 'c1
00044794 <PED.ab2@9834>   SUBQ.l #4,d6
00044798 <PED.ab2@9835>   ADD.w # 16,a5
0004479A <PED.ab2@9837>   MOVEQ.l #$00,D0
0004479C <PED.ab2@9838>   MOVEQ.l #-$01,D4
0004479E <PED.ab2@9841>   MOVE.b D0,(A0)+
000447A2 <PED.ab2@9842>    BEQ.w JL_0_5002
000447A6 <PED.ab2@9843>   CMP.b #$9,D0
000447AA <PED.ab2@9844>    BNE.w JL_0_4FB6
000447AC <PED.ab2@9845>   SUBQ.w #1,A0
000447AE <PED.ab2@9846>   MOVE.l A0,D0
000447B4 <PED.ab2@9847>   SUB.l comPtr_Temp_TokenString2,D0
000447B8 <PED.ab2@9850>   MOVE.b #$20,(A0)+
000447BA <PED.ab2@9851>   ADDQ.w #1,D0
000447BC <PED.ab2@9852>   MOVE.l D0,D1
000447C2 <PED.ab2@9853>   DIVU tab_size,D1
000447C4 <PED.ab2@9854>   SWAP D1
000447C6 <PED.ab2@9855>   TST.w D1
000447CA <PED.ab2@9856>    BNE.b JL_0_4FA4
000447CC <PED.ab2@9859>   ADDQ #3,a0
000447D2 <PED.ab2@9860>   CMPA.l comPtr_Temp_TokenString3,A0
000447D6 <PED.ab2@9861>    BCS.w JL_0_4FC8
000447DC <PED.ab2@9862>   MOVEA.l comPtr_Temp_TokenString3,A0
000447E0 <PED.ab2@9864>   BRA.w JL_0_4FD2
000447E2 <PED.ab2@9867>   MOVE.l A0,-(a7)
000447E8 <PED.ab2@9868>   JSR JL_0_4EA2
000447EA <PED.ab2@9869>   MOVE.l (A7)+,a0
000447EE <PED.ab2@9870>   BRA load
000447F0 <PED.ab2@9873>   SUBQ #3,a0
000447F2 <PED.ab2@9874>   SUBQ.w #1,D6
000447F6 <PED.ab2@9875>   BMI.w JL_0_4EA2b
000447F8 <PED.ab2@9876>   MOVE.b (A5)+,D0
000447FA <PED.ab2@9877>   CMP.w d0,d0
000447FE <PED.ab2@9880>   BPL.b JL_0_4F68
00044800 <PED.ab2@9882>   CLR.b (A0)+
00044806 <PED.ab2@9883>   SUBA.l comPtr_Temp_TokenString2,A0
00044808 <PED.ab2@9884>   MOVE.l A0,D5
0004480A <PED.ab2@9885>   MOVEQ.l #$00,D0
0004480C <PED.ab2@9888>   MOVE.w D0,-(A7)
0004480E <PED.ab2@9889>   TST.w D4                           ;-1 ascii
00044812 <PED.ab2@9890>    BEQ.w JL_0_4FFE
00044818 <PED.ab2@9892>   MOVE.w comWord_DoTokenize,D2
0004481C <PED.ab2@9893>    BEQ.w JL_0_4FFE
0004481E <PED.ab2@9894>   SUBQ.w #1,D5
00044822 <PED.ab2@9895>    BPL.w JL_0_4FFA
00044824 <PED.ab2@9896>   MOVEQ.l #$01,D5
00044828 <PED.ab2@9897>   BRA.w JL_0_4FFE
0004482E <PED.ab2@9900>   JSR import_start
00044830 <PED.ab2@9903>   MOVE.w (A7)+,D0
00044832 <PED.ab2@9904> RTS
00044838 <PED.ab2@9907>   SUBA.l comPtr_Temp_TokenString2,A0
0004483A <PED.ab2@9908>   MOVE.l A0,D5
0004483C <PED.ab2@9909>   MOVEQ.l #$01,D0
00044840 <PED.ab2@9910>   BRA.b JL_0_4FDC
00044842 <PED.ab2@9913>   MOVEQ.l #-$01,D0
00044844 <PED.ab2@9914> RTS
00044848 <PED.ab2@9918>   MOVEM.l D1-D4/D6-D7/A0-A6,-(A7)
0004484A <PED.ab2@9919>   MOVE.w D5,D1
00044850 <PED.ab2@9920>   MOVEA.l comPtr_Temp_TokenString2,A1
00044856 <PED.ab2@9921>   CLR.b instring
0004485C <PED.ab2@9922>   LEA tempbuf,a2
00044862 <PED.ab2@9923>   TST.b convert
00044866 <PED.ab2@9924>   BEQ 'l2b  ;'l1
0004486A <PED.ab2@9932>  CMP.b #".",(a1)
0004486E <PED.ab2@9933>   BNE 'l1
00044872 <PED.ab2@9935>   MOVE.w #"'l",(a2)+
00044874 <PED.ab2@9936>   ADDQ.w #1,d5                       ;add 1 additional char
00044876 <PED.ab2@9937>   ADDQ.l #1,a1
0004487A <PED.ab2@9938>   BRA 'ln1
00044880 <PED.ab2@9939> 'l1 TST.b convert
00044884 <PED.ab2@9940>   BNE 'l1a
00044886 <PED.ab2@9942>   MOVE.b (a1)+,d0
0004488A <PED.ab2@9943>   BEQ 'exit
0004488C <PED.ab2@9944>   MOVE.b d0,(a2)+
00044890 <PED.ab2@9945>   DBF d1,'l1b
00044894 <PED.ab2@9946>   BRA 'exit
00044898 <PED.ab2@9948>   CMP.w #"\@",(a1)
0004489C <PED.ab2@9949>   BNE 'ln1
000448A0 <PED.ab2@9950>   MOVE.w #"'l",(a2)+
000448A2 <PED.ab2@9951>   ADDQ.l #2,a1
000448A4 <PED.ab2@9952> 'n3 MOVE.b (a1)+,d0
000448A8 <PED.ab2@9953>   BEQ 'n2
000448AC <PED.ab2@9954>   CMP.b #" ",d0
000448B0 <PED.ab2@9955>   BEQ 'n2
000448B4 <PED.ab2@9956>   CMP.b #":",d0
000448B8 <PED.ab2@9957>   BEQ 'n2
000448BA <PED.ab2@9958>   MOVE.b d0,(a2)+
000448BE <PED.ab2@9959>   BRA 'n3
000448C0 <PED.ab2@9961>      SUBQ.l #1,a1
000448C6 <PED.ab2@9962>      MOVE.l #"l`@ ",(a2)+
000448C8 <PED.ab2@9963>      ADDQ.w #4,d5
000448CC <PED.ab2@9964>  'ln1 CMP.b #";",(a1)   ;-1
000448D0 <PED.ab2@9965>       BEQ 'l2c
000448D4 <PED.ab2@9966>     CMP.b #$22,(a1)     ;-1
000448D8 <PED.ab2@9967>     BNE 'l2b
000448DE <PED.ab2@9968>     TST.b instring
000448E2 <PED.ab2@9969>     BEQ 'l2c
000448E8 <PED.ab2@9970>     CLR.b instring
000448EC <PED.ab2@9971>     BRA 'l2b
000448F4 <PED.ab2@9972>  'l2c   MOVE.b #1,instring
000448F6 <PED.ab2@9974>   MOVE.b (a1)+,d0
000448FA <PED.ab2@9975>   BEQ 'exit
00044900 <PED.ab2@9976>   TST.b instring                     ;do only if no string
00044904 <PED.ab2@9977>   BNE 'l5
0004490A <PED.ab2@9978>   TST.b convert
0004490E <PED.ab2@9979>   BEQ 'l5
00044912 <PED.ab2@9981>   CMP.b #".",d0
00044916 <PED.ab2@9982>   BNE 'l2
0004491C <PED.ab2@9983>   CMP.b #",",-2(a1)
00044920 <PED.ab2@9984>   BEQ 'l500
00044926 <PED.ab2@9985>   CMP.b #" ",-2(a1)
0004492A <PED.ab2@9986>   BNE 'l2
0004492C <PED.ab2@9987> 'l500  ADDQ.w #1,d5
00044930 <PED.ab2@9988>   MOVE.b #"'",(a2)+
00044932 <PED.ab2@9989>   MOVEQ #"l",d0
00044938 <PED.ab2@9990> 'l2 CMP.b #"_",-2(a1)
0004493C <PED.ab2@9991>     BEQ 'l4
00044944 <PED.ab2@9994>   CMP.l #"grap",-1(a1)
00044948 <PED.ab2@9995>   BEQ 'l3
00044950 <PED.ab2@9996>   CMP.l #"dosb",-1(a1)
00044954 <PED.ab2@9997>   BEQ 'l3
0004495C <PED.ab2@9998>   CMP.l #"intu",-1(a1)
00044960 <PED.ab2@9999>   BEQ 'l3
00044968 <PED.ab2@10000>   CMP.l #"Allo",-1(a1)
0004496C <PED.ab2@10001>   BEQ 'l3
00044974 <PED.ab2@10002>   CMP.l #"Free",-1(a1)
00044978 <PED.ab2@10003>   BEQ 'l3
00044980 <PED.ab2@10004>   CMP.l #"Wait",-1(a1)
00044984 <PED.ab2@10005>   BEQ 'l3
0004498A <PED.ab2@10006>   CMP.l #"\",d0
0004498E <PED.ab2@10007>   BNE 'p1
00044992 <PED.ab2@10008>   MOVE.b #"`",d0
0004499A <PED.ab2@10009> 'p1 CMP.l #"end",-1(a1)
0004499E <PED.ab2@10010>   BEQ 'l4a                           ;endm
000449A6 <PED.ab2@10011>   CMP.l #"END",-1(a1)
000449AA <PED.ab2@10012>   BNE 'l4
000449B0 <PED.ab2@10014>      CMP.b #"m",3(a1)
000449B4 <PED.ab2@10015>      BEQ 'l44a
000449BA <PED.ab2@10016>      CMP.b #"M",3(a1)
000449BE <PED.ab2@10017>      BNE 'l4
000449C4 <PED.ab2@10019>   CMP.b #" ",4(a1)
000449C8 <PED.ab2@10020>   BEQ 'l444a
000449CE <PED.ab2@10021>   CMP.b #";",4(a1)
000449D2 <PED.ab2@10022>   BEQ  'l444a
000449D6 <PED.ab2@10023>   TST.b 4(a1)
000449DA <PED.ab2@10024>   BNE 'l4
000449E0 <PED.ab2@10025> 'l444a  MOVE.l #"end ",(a2)+
000449E6 <PED.ab2@10026>   MOVE.l #"macr",(a2)+
000449EA <PED.ab2@10027>   MOVE.b #"o",d0
000449EE <PED.ab2@10028>   ADD.w #9,d5
000449F0 <PED.ab2@10029>   ADDQ.l #4,a1
000449F8 <PED.ab2@10030> 'l4 CMP.l #" mac",-1(a1)
000449FC <PED.ab2@10032>     BEQ 'l4b
00044A04 <PED.ab2@10033>     CMP.l #" MAC",-1(a1)
00044A08 <PED.ab2@10034>      BNE 'l4c
00044A0E <PED.ab2@10036>      CMP.w #"ro",3(a1)
00044A12 <PED.ab2@10037>      BEQ 'l44b
00044A18 <PED.ab2@10038>      CMP.w #"RO",3(a1)
00044A1C <PED.ab2@10039>      BNE 'l4c
00044A22 <PED.ab2@10041>      CMP.b #" ",5(a1)
00044A26 <PED.ab2@10042>   BEQ 'l444b
00044A2C <PED.ab2@10043>   CMP.b #";",5(a1)
00044A30 <PED.ab2@10044>   BEQ  'l444b
00044A34 <PED.ab2@10045>   TST.b 5(a1)
00044A38 <PED.ab2@10046>   BNE 'l4c
00044A3A <PED.ab2@10048>      ADDQ.l #5,a1
00044A3C <PED.ab2@10049>      ADDQ.w #2,d5
00044A40 <PED.ab2@10050>      MOVE.b #" ",(a2)+
00044A46 <PED.ab2@10051>      MOVE.l #"macr",(a2)+
00044A4A <PED.ab2@10052>      MOVE.w #"o ",(a2)+
00044A4C <PED.ab2@10053>      SUBQ.w #5,d1
00044A4E <PED.ab2@10054>      MOVE.l a1,-(a7)
00044A54 <PED.ab2@10055>      MOVEA.l comPtr_Temp_TokenString2,A1
00044A56 <PED.ab2@10056> 'n3b MOVE.b (a1)+,d0
00044A5A <PED.ab2@10057>   BEQ 'n2b
00044A5E <PED.ab2@10058>   CMP.b #" ",d0
00044A62 <PED.ab2@10059>   BEQ 'n2b
00044A66 <PED.ab2@10060>   CMP.b #":",d0
00044A6A <PED.ab2@10061>   BEQ 'n2b
00044A6C <PED.ab2@10062>   MOVE.b d0,(a2)+
00044A6E <PED.ab2@10063>   ADDQ.w #1,d5
00044A72 <PED.ab2@10064>   BRA 'n3b
00044A74 <PED.ab2@10065>  'n2b MOVEQ #0,d0
00044A76 <PED.ab2@10066>      MOVE.l (a7)+,a1
00044A7C <PED.ab2@10068> CMP.l #"ovem",(a1)
00044A80 <PED.ab2@10069>   BEQ 'mm
00044A86 <PED.ab2@10070>   CMP.l #"OVEM",(a1)
00044A8A <PED.ab2@10071>   BNE 'mm6
00044A90 <PED.ab2@10072> 'mm  CMP.b #"m",-1(a1)
00044A94 <PED.ab2@10073>   BEQ 'mm2
00044A9A <PED.ab2@10074>   CMP.b #"M",-1(a1)
00044A9E <PED.ab2@10075>   BNE 'mm6
00044AA0 <PED.ab2@10077>  MOVE.l a1,a0
00044AA2 <PED.ab2@10078>  MOVEQ #0,d2
00044AA4 <PED.ab2@10079> 'mm3 MOVE.b (a0)+,d3
00044AA8 <PED.ab2@10080>  BEQ 'mm6
00044AAC <PED.ab2@10081>  CMP.b #"(",d3
00044AB0 <PED.ab2@10082>  BEQ 'mm6
00044AB4 <PED.ab2@10083>  CMP.b #"-",d3
00044AB8 <PED.ab2@10084>  BNE 'mm4
00044ABA <PED.ab2@10085>  MOVEQ #1,d2
00044ABE <PED.ab2@10087>  CMP.b #"/",d3
00044AC2 <PED.ab2@10088>  BNE 'mm5
00044AC4 <PED.ab2@10089>  MOVEQ #1,d2
00044AC8 <PED.ab2@10090> 'mm5 CMP.b #",",d3
00044ACC <PED.ab2@10091>  BNE 'mm3
00044ACE <PED.ab2@10092>  TST.l d2
00044AD2 <PED.ab2@10093>  BNE 'mm6
00044AD8 <PED.ab2@10094>  MOVE.b #$20,3(a1)
00044ADA <PED.ab2@10095>  SUBQ.l #1,a1
00044ADC <PED.ab2@10096>  MOVE.l (a1)+,(a2)+
00044ADE <PED.ab2@10097>  MOVE.w (a1)+,(a2)+
00044AE0 <PED.ab2@10098>  SUBQ #6,d1
00044AE4 <PED.ab2@10099>  BRA 'b1
00044AE6 <PED.ab2@10107> 'l5  MOVE.b d0,(a2)+
00044AEA <PED.ab2@10109> 'b1  DBF d1,'l1
00044AF0 <PED.ab2@10112>    CMP.b #$0d,-1(a2)
00044AF4 <PED.ab2@10113>    BNE 'nd0
00044AF8 <PED.ab2@10114>    CLR.b -1(a2)
00044AFA <PED.ab2@10115>    SUBQ.w #1,d5
00044AFC <PED.ab2@10117> 'nd0 CLR.b (a2)
00044AFE <PED.ab2@10118>   MOVE.w d5,d1
00044B04 <PED.ab2@10119>    MOVEA.l comPtr_Temp_TokenString2,A1
00044B0A <PED.ab2@10120>   LEA tempbuf,a2
00044B10 <PED.ab2@10122> 'l10: JSR JL_0_5F62
00044B16 <PED.ab2@10123>   MOVEA.l comPtr_Temp_TokenString2,A2
00044B1C <PED.ab2@10124>   TST.b convert
00044B20 <PED.ab2@10125>   BEQ 'l21
00044B22 <PED.ab2@10126>   MOVEQ #0,d0
00044B24 <PED.ab2@10127>   MOVE.b (a2)+,d0
00044B28 <PED.ab2@10128>   CMP.b #" ",d0
00044B2C <PED.ab2@10129>   BNE 'l21
00044B2E <PED.ab2@10131>   MOVE.b (a2)+,d0
00044B32 <PED.ab2@10132>   BEQ 'l21
00044B36 <PED.ab2@10133>   CMP.b #" ",d0
00044B3A <PED.ab2@10134>   BEQ 'l20
00044B3E <PED.ab2@10135>   CMP.b #";",d0
00044B42 <PED.ab2@10136>   BEQ 'l21
00044B46 <PED.ab2@10137>   CMP.w #$80,d0
00044B4A <PED.ab2@10138>   BGE 'l21
00044B50 <PED.ab2@10139>   MOVE.b #"!",-2(a2)
00044B54 <PED.ab2@10141>   MOVEM.l (A7)+,D1-D4/D6-D7/A0-A6
00044B56 <PED.ab2@10142>   RTS
00044B58 <PED.ab2@10145>   ADDQ.l #1,d5
00044B5C <PED.ab2@10146>   MOVE.b #"_",(a2)+
00044B60 <PED.ab2@10147> BRA 'l4
00044B66 <PED.ab2@10151>   CLR.b instring3
00044B6C <PED.ab2@10154>     TST.w comWord_DoTokenize
00044B70 <PED.ab2@10155>      BEQ.w JL_0_5054
00044B72 <PED.ab2@10156>     MOVEQ.l #$00,D0
00044B74 <PED.ab2@10157>     MOVE.b (A0)+,D0
00044B78 <PED.ab2@10158>     BEQ.w JL_0_5050
00044B7C <PED.ab2@10159>     CMP.b #$22,d0
00044B80 <PED.ab2@10160>      BNE 'l1
00044B86 <PED.ab2@10161>     NOT.b instring3
00044B8C <PED.ab2@10163>     TST.b instring3
00044B90 <PED.ab2@10164>     BNE 'l2
00044B92 <PED.ab2@10165>     TST.b d0
00044B96 <PED.ab2@10166>     BMI.w JL_0_5040
00044B98 <PED.ab2@10168>     MOVE.b D0,(A1)+
00044B9C <PED.ab2@10169>     BNE.b detokenize_line2
00044B9E <PED.ab2@10172>     LSL.w #8,D0
00044BA0 <PED.ab2@10173>     MOVE.b (A0)+,D0
00044BA6 <PED.ab2@10174>     JSR token_to_ascii
00044BA8 <PED.ab2@10177>       MOVE.b (A3)+,(A1)+
00044BAC <PED.ab2@10178>     BNE.b JL_0_5048
00044BAE <PED.ab2@10179>     SUBQ.w #1,A1
00044BB2 <PED.ab2@10180>   BRA.b detokenize_line2
00044BB4 <PED.ab2@10183>   CLR.b (A1)
00044BB6 <PED.ab2@10184> RTS
00044BB8 <PED.ab2@10187>   MOVE.l A3,-(A7)
00044BBA <PED.ab2@10188>   MOVEA.l A0,A3
00044BC0 <PED.ab2@10189>   JSR AJL_0_4A8E
00044BC2 <PED.ab2@10190>   MOVEA.l (A7)+,A3
00044BC4 <PED.ab2@10191> RTS
00044BCA <PED.ab2@10195>   TST.b keepstring
00044BCE <PED.ab2@10196>   BNE 'l1
00044BD4 <PED.ab2@10197>     CLR.b instring2
00044BDA <PED.ab2@10199>   TST.b comWord__AL_0_8668
00044BDE <PED.ab2@10200>    BEQ.w JL_0_5072
00044BE0 <PED.ab2@10203>     MOVE.b (A0)+,(A1)+
00044BE4 <PED.ab2@10204>   BNE.b JL_0_506A
00044BE6 <PED.ab2@10205>   SUBQ.w #1,A1
00044BE8 <PED.ab2@10206> RTS
00044BEA <PED.ab2@10210>   MOVEQ.l #$00,D0
00044BEC <PED.ab2@10211>   MOVE.b (A0)+,D0
00044BF0 <PED.ab2@10212>   BEQ.w JL_0_5096
00044BF4 <PED.ab2@10213>   CMP.b #$22,d0
00044BF8 <PED.ab2@10214>   BNE 'l10
00044BFE <PED.ab2@10215>   NOT.b instring2
00044C04 <PED.ab2@10217>   TST.b instring2
00044C08 <PED.ab2@10218>   BNE 'l11
00044C0A <PED.ab2@10219>   TST.b d0
00044C0E <PED.ab2@10220>   BMI.w JL_0_5082                    ;morechar
00044C10 <PED.ab2@10222>   MOVE.b D0,(A1)+
00044C14 <PED.ab2@10223>   BNE.b JL_0_5072a
00044C16 <PED.ab2@10226>   LSL.w #8,D0
00044C18 <PED.ab2@10227>   MOVE.b (A0)+,D0
00044C1E <PED.ab2@10228>   JSR token_to_ascii
00044C20 <PED.ab2@10231>     MOVE.b (A3)+,D1
00044C24 <PED.ab2@10232>     BEQ.b JL_0_5072a
00044C28 <PED.ab2@10233>     BSET #$7,D1
00044C2A <PED.ab2@10234>     MOVE.b D1,(A1)+
00044C2E <PED.ab2@10235>   BRA.b JL_0_508A
00044C30 <PED.ab2@10238>   CLR.b (A1)
00044C32 <PED.ab2@10239> RTS
00044C36 <PED.ab2@10244>   BCLR #$F,D0
00044C3C <PED.ab2@10245>   LEA instrtab,a3
00044C40 <PED.ab2@10247>   Dc.l $26730400 ;Dc.l $26730600 MOVE.l 0(a3,d0.w*4),a3
00044C46 <PED.ab2@10248>   CMP.l #0,a3
00044C4A <PED.ab2@10249>   BNE 'l10
00044C50 <PED.ab2@10250>   MOVEA.l comPtr_TokenBase,A3
00044C54 <PED.ab2@10252>     CMP.w $4(A3),D0
00044C58 <PED.ab2@10253>      BEQ.w JL_0_50B4
00044C5A <PED.ab2@10254>     TST.l (A3)
00044C5E <PED.ab2@10255>      BEQ.w JL_0_50B8
00044C60 <PED.ab2@10256>     MOVEA.l (A3),A3
00044C64 <PED.ab2@10257>   BRA.b 'JL_0_50A2
00044C66 <PED.ab2@10259>   ADDQ.w #6,A3
00044C68 <PED.ab2@10260>   RTS
00044C6A <PED.ab2@10263>   MOVE.l a1,-(a7)
00044C70 <PED.ab2@10264>   LEA instrtab,a1
00044C74 <PED.ab2@10266>   Dc.l $238B0400 ; MOVE.l a3,0(a1,d0.w*4)
00044C76 <PED.ab2@10267>   MOVE.l (a7)+,a1
00044C78 <PED.ab2@10268>   ADDQ.w #6,A3
00044C7A <PED.ab2@10269>   RTS
00044CA4 <PED.ab2@10274>   !basic
00044CA8 <PED.ab2@10275>   i = PutD0
00044D44 <PED.ab2@10276>   temp$ = "????Lib "+Str$(i LSR 7)+"/"+Str$((i AND $7f)-1)
00044D48 <PED.ab2@10277>   MOVE.l temp@(a5),d0
00044D66 <PED.ab2@10278>   !asm
00044D68 <PED.ab2@10279>   MOVE.l d0,a3
00044D6A <PED.ab2@10280> RTS
00044D70 <PED.ab2@10284>   LEA comStr_ASLDummyPath,A0
00044D76 <PED.ab2@10285>   LEA comStr_ASLDummyDir,A1
00044D7C <PED.ab2@10286>   LEA comStr_FilePattern_NoInfo,A3
00044D80 <PED.ab2@10287> BRA.w aslrequest_file
00044D86 <PED.ab2@10291>   LEA comStr_ASLLoadFile,A2          ; asl title
00044D8C <PED.ab2@10293>   LEA comStr_CurrentDir,A0           ; asl dir
00044D92 <PED.ab2@10294>   LEA comStr_SourceName,A1           ; asl path
00044D98 <PED.ab2@10295>   LEA comStr_FilePattern,A3          ; file pattern (*.bb2 etc.)
00044D9C <PED.ab2@10296> BRA.b aslrequest_file
00044DA6 <PED.ab2@10300>   MOVE.l #$FFFFFFFF,asl_usepattern
00044DAC <PED.ab2@10301>   JSR show_aslfilerequest
00044DAE <PED.ab2@10302>   MOVE.l D0,D7
00044DB8 <PED.ab2@10303>   MOVE.l #$00,asl_usepattern
00044DBA <PED.ab2@10304> RTS
00044DBE <PED.ab2@10307> asl_usepattern:  Ds.l 1
00044DC2 <PED.ab2@10308> asl_drawersonly: Ds.l 1
00044DC6 <PED.ab2@10318>   MOVEM.l D1-D7/A0-A6,-(A7)
00044DCA <PED.ab2@10319>   MOVEM.l A0-A3,-(a7)
00044DF4 <PED.ab2@10320>   !basic
00044DF8 <PED.ab2@10321>   MOVEM.l (A7)+,a0-a3
00044DFE <PED.ab2@10322>   MOVE.l a0,D0 : _a0.l = PutD0
00044E04 <PED.ab2@10323>   MOVE.l a1,D0 : _a1.l = PutD0
00044E0A <PED.ab2@10324>   MOVE.l a2,D0 : _a2.l = PutD0
00044E10 <PED.ab2@10325>   MOVE.l a3,D0 : _a3.l = PutD0
00044E4A <PED.ab2@10326>   If _a0<>0 Then tmpdir$   = Peek$(_a0)
00044E84 <PED.ab2@10327>   If _a1<>0 Then tmpfile$  = Peek$(_a1)
00044EBE <PED.ab2@10328>   If _a2<>0 Then tmptitle$ = Peek$(_a2)
00044EDA <PED.ab2@10329>   If Peek.w(?use_filepattern)<>0
00044EFA <PED.ab2@10330>     If Peek.l(?asl_usepattern)<>0
00044F34 <PED.ab2@10331>       If _a3<>0 Then tmppattern$ = Peek$(_a3)
00044F3A <PED.ab2@10332>     Else
00044F64 <PED.ab2@10333>       tmppattern$ = Peek$(?comStr_FilePattern_NoInfo)
00044F6A <PED.ab2@10335>   Else
00044F92 <PED.ab2@10336>     tmppattern$ = ""
00044FA6 <PED.ab2@10338>   If Peek.w(?use_asldims)
00044FFA <PED.ab2@10339>     asl_SetRequesterDims{Peek.l(?aslreq_x),Peek.l(?aslreq_y),Peek.l(?aslreq_width),Peek.l(?aslreq_height)}
00045098 <PED.ab2@10341>   aslfr_SetRequesterTitle{1,!TRANS{tmptitle$},"",""}
000450CC <PED.ab2@10342>   aslfr_SetPattern{1,tmppattern$}
0004511E <PED.ab2@10343>   aslfr_SetPath{1,tmpdir$}
00045152 <PED.ab2@10344>   aslfr_SetFile{1,tmpfile$}
0004518C <PED.ab2@10345>   If aslfr_Request{1,False,False,Peek.l(?asl_drawersonly)}
000451C2 <PED.ab2@10346>     tempdir$      = aslfr_GetPath{1}
000451F8 <PED.ab2@10347>     tempfile$     = aslfr_GetFile{1}
00045278 <PED.ab2@10348>     tempcomplete$ = dos_AddPart{tempdir$ , tempfile$}
0004527E <PED.ab2@10349>   Else
000452A6 <PED.ab2@10350>     tempfile$ = ""
000452DE <PED.ab2@10352>   If tempfile$<>""
00045316 <PED.ab2@10353>     Poke.s ?comStr_SourceFileComplete,tempcomplete$
0004534C <PED.ab2@10354>     Poke.s _a0,tempdir$
00045382 <PED.ab2@10355>     Poke.s _a1,tempfile$
00045388 <PED.ab2@10356>     GetD0 ?comStr_SourceFileComplete                       ; replaced &tempcomplete$to remove the Memtrashbug by quit PED and match the privios asmsource
0004538E <PED.ab2@10357>   Else
00045390 <PED.ab2@10358>     MOVEQ.l #0,D0
000453AE <PED.ab2@10360>   !asm
000453B0 <PED.ab2@10361>   MOVE.l D0,-(a7)
000453B6 <PED.ab2@10362>   JSR save_tempprefs
000453B8 <PED.ab2@10363>   MOVE.l (a7)+,D0
000453BE <PED.ab2@10364>   CLR.l asl_drawersonly
000453C2 <PED.ab2@10365>   MOVEM.l (A7)+,D1-D7/A0-A6
000453C4 <PED.ab2@10366>   MOVEA.l D0,A0
000453C6 <PED.ab2@10367>   TST.b D0
000453CA <PED.ab2@10368>   BEQ.w exit_aslfilereq
000453CC <PED.ab2@10369>     TST.b (A0)
000453D0 <PED.ab2@10370>     BNE.w exit_aslfilereq
000453D2 <PED.ab2@10371>       MOVEQ.l #$00,D0
000453D4 <PED.ab2@10373> RTS
000453D6 <PED.ab2@10415>   MOVE.l D7,-(A7)
000453DC <PED.ab2@10417>   MOVE.l A0,ptr_errortext
000453E2 <PED.ab2@10418>   CMP.l #0,a5
000453E6 <PED.ab2@10419>   BNE 'l4
000453EC <PED.ab2@10420>   LEA dummystr + 1,a5
000453EE <PED.ab2@10422>   MOVEQ #20,d0
000453F0 <PED.ab2@10423>   MOVE.l a5,a0                       ;macro title
000453F2 <PED.ab2@10424>   SUBQ.l #1,a0
000453F4 <PED.ab2@10426>     MOVE.b -(a0),d1
000453F8 <PED.ab2@10427>     BEQ 'l1
000453FC <PED.ab2@10428>     CMP.b #":",d1
00045400 <PED.ab2@10429>     BEQ 'l1
00045402 <PED.ab2@10430>     SUBQ.l #1,d0
00045406 <PED.ab2@10431>   BNE 'l2
00045408 <PED.ab2@10433>   ADDQ #1,a0
0004540E <PED.ab2@10434>   LEA helpstring,a1
00045414 <PED.ab2@10435>   CMP.l #"INLN",a6
00045418 <PED.ab2@10436>   BNE 'l1x
0004541E <PED.ab2@10437>   LEA helpstring,a1
00045420 <PED.ab2@10438>   ADDQ #4,a1
00045424 <PED.ab2@10439>   MOVE.b #32,(a1)+
00045426 <PED.ab2@10442>   MOVEQ #60,d1
00045428 <PED.ab2@10444>     MOVE.b (a0)+,d0
0004542C <PED.ab2@10445>     BEQ 'n1
0004542E <PED.ab2@10446>     MOVE.b d0,(a1)+
00045430 <PED.ab2@10447>     SUBQ.l #1,d1
00045434 <PED.ab2@10448>   BNE 'l5
00045436 <PED.ab2@10450>   CLR.b (a1)+
0004543C <PED.ab2@10451>   LEA helpstring,a0
0004543E <PED.ab2@10452>   TST.b (a0)
00045442 <PED.ab2@10453>   BNE 'l1b
00045444 <PED.ab2@10454>   ADDQ.l #4,a0
0004544A <PED.ab2@10456>   MOVE.l expandstore,a1
00045450 <PED.ab2@10457>   JSR detokenize_line
00045456 <PED.ab2@10458>   MOVE.l expandstore,a1
0004545C <PED.ab2@10459>   MOVE.l a1,ptr_errortitle
0004545E <PED.ab2@10462>     MOVE.b (a1)+,d0
00045462 <PED.ab2@10463>     BEQ 'l9
00045466 <PED.ab2@10464>     CMP.b #":",d0
0004546A <PED.ab2@10465>   BNE 'l8
00045494 <PED.ab2@10470>   !basic
0004549A <PED.ab2@10471>   MOVE.l D7,d0 : i.l = PutD0
000454BE <PED.ab2@10472>   Format "####"
00045500 <PED.ab2@10473>   Poke$ ?helpstring,Str$(i)
00045524 <PED.ab2@10474>   Format ""
000455A8 <PED.ab2@10476>   fid.l = file_Open{dos_AddPart{my_systemdir$,"ab_compileerror.txt"},#file_read}
000455BC <PED.ab2@10477>   If fid <> -1
000455F0 <PED.ab2@10478>     errormessage$  = file_ReadLine{fid}
00045624 <PED.ab2@10479>     sourceline$    = file_ReadLine{fid}
00045658 <PED.ab2@10480>     sourcename$    = file_ReadLine{fid}
0004568C <PED.ab2@10481>     l$ = file_ReadLine{fid}
000456C0 <PED.ab2@10482>     compilestatus$ = file_ReadLine{fid}
000456CA <PED.ab2@10483>     file_Close{fid}
00045702 <PED.ab2@10484>     If sourcename$ <>"none"
00045708 <PED.ab2@10485>      GetD0 &sourcename$
00045744 <PED.ab2@10486>       If Exists (sourcename$)
0004574A <PED.ab2@10487>         GetD0 &sourcename$
00045768 <PED.ab2@10488>         !asm
0004576E <PED.ab2@10489>         JSR loadfile
00045774 <PED.ab2@10490>         JSR update_statusline
0004577A <PED.ab2@10491>         JSR update_vertscroller
000457A4 <PED.ab2@10492>         !basic
000457AA <PED.ab2@10495>   Else
000457D2 <PED.ab2@10496>     sourceline$ = ""
000457DC <PED.ab2@10499>   *easystruct.EasyStruct = ?easystruct_error
0004582C <PED.ab2@10501>   errortitle$ = !TRANS{"Compile Error"}
0004585A <PED.ab2@10502>   errortext$ = Peek$(*easystruct\es_TextFormat)
00045892 <PED.ab2@10503>   If sourceline$<>""
00045974 <PED.ab2@10504>     errortext$ = !TRANS{"Compile error in line"}+" " + sourceline$ + ":\\n\\n" + !TRANS{errortext$}
000459AC <PED.ab2@10507>   If Len(Peek$(?helpstring)) > 5
00045A10 <PED.ab2@10508>     errortext$ + "\\n" + Peek$(?helpstring)
00045A94 <PED.ab2@10514>   dummy = RTEZRequest(errortitle$,errortext$,Peek$(*easystruct\es_GadgetFormat))
00045AB2 <PED.ab2@10515>   !asm
00045AB4 <PED.ab2@10516>   MOVE.l (A7)+,D7
00045AB6 <PED.ab2@10517> RTS
00045AB8 <PED.ab2@10520>   MOVE.l D7,-(A7)
00045ABE <PED.ab2@10521>   MOVE.l A0,ptr_errortext
00045AC4 <PED.ab2@10522>   LEA easystruct_error,A1
00045ACA <PED.ab2@10523>   JSR show_requester
00045ACC <PED.ab2@10524>   MOVE.l (a7)+,d7
00045ACE <PED.ab2@10525> RTS
00045AD0 <PED.ab2@10530>   Ds.w 1
00045AD2 <PED.ab2@10532>   Ds.w 1
00045AD4 <PED.ab2@10534>   Ds.w 1
00045AD6 <PED.ab2@10536>   Ds.w 1
00045AD8 <PED.ab2@10538>   Dc.b $01,$02                       ; DetailPen,BlockPen,
00045ADC <PED.ab2@10539>   Dc.b $00,$00,$06,$60               ; IDCMPFlags
00045AE0 <PED.ab2@10540>   Dc.b $00,$00,$10,$0A               ; Flags
00045AE8 <PED.ab2@10543>   Ds.l 2
00045AEC <PED.ab2@10546>   Ds.l 1
00045AF4 <PED.ab2@10548>   Ds.l 2
00045AF8 <PED.ab2@10549>   Dc.b $FF,$FF,$FF,$FF               ; minwith,minheight
00045AFC <PED.ab2@10550>   Dc.b $FF,$FF,$FF,$FF               ; maxwidth,maxheight
00045AFE <PED.ab2@10551>   Dc.b $00,$0F                       ; type
00045B02 <PED.ab2@10554>   Ds.l 1
00045B06 <PED.ab2@10556>   Ds.l 1
00045B08 <PED.ab2@10562>   MOVE.l a1,-(a7)
00045B32 <PED.ab2@10563>   !basic
00045B34 <PED.ab2@10564>   MOVE.l (a7)+,a1
00045B36 <PED.ab2@10565>   MOVE.l a1,d0
00045B3A <PED.ab2@10566>   *easystruct.EasyStruct = PutD0
00045B68 <PED.ab2@10567>   req_title.s  = Peek$(*easystruct\es_Title)
00045B96 <PED.ab2@10568>   req_text.s   = Peek$(*easystruct\es_TextFormat)
00045BC4 <PED.ab2@10569>   req_gadtex.s = Peek$(*easystruct\es_GadgetFormat)
00045CD0 <PED.ab2@10570>   dummy        = RTEZRequest (!TRANS{req_title},!TRANS{req_text},!TRANS{req_gadtex})
00045CEE <PED.ab2@10571>   !asm
00045CF0 <PED.ab2@10572> RTS
00045CF2 <PED.ab2@10576>   MOVE.l d2,-(a7)
00045CF4 <PED.ab2@10577>   MOVE.l d1,-(a7)
00045D1E <PED.ab2@10578>   !basic
00045D22 <PED.ab2@10579>   reg_d0.l = PutD0
00045D24 <PED.ab2@10580>   MOVE.l (a7)+,d0
00045D28 <PED.ab2@10581>   reg_d1.l = PutD0
00045D2A <PED.ab2@10582>   MOVE.l (a7)+,d0
00045D2E <PED.ab2@10583>   reg_d2.l = PutD0
00045D34 <PED.ab2@10585>   Select reg_d0
00045D42 <PED.ab2@10586>   Case 1000
00045D48 <PED.ab2@10587>     Gosub open_newtype
00045D4A <PED.ab2@10588>     Pop Select
00045D68 <PED.ab2@10589>     !asm
00045D6C <PED.ab2@10590>     ADD.w #20,a7
00045D72 <PED.ab2@10591>     JMP JL_0_CE2
00045D86 <PED.ab2@10593>   Case 1001
00045D8C <PED.ab2@10594>     Gosub open_cliarguments
00045DA0 <PED.ab2@10596>   Case 1002
00045DA6 <PED.ab2@10597>     Gosub open_calculator
00045DA8 <PED.ab2@10599>   End Select
00045DC6 <PED.ab2@10600>   !asm
00045DC8 <PED.ab2@10601> RTS
00045DCE <PED.ab2@10604>   MOVE.l A0,comPtr_CompilerWindowStructur ; A0 enthaelt windowstruktur des compilers
00045DD0 <PED.ab2@10605>   MOVEA.l A0,A2
00045DD4 <PED.ab2@10606>   MOVEA.l $14(A2),A1                 ; pointer auf STOP-gadget
00045DFE <PED.ab2@10607>   !basic
00045E2C <PED.ab2@10608>   error{"routine comwin_open called. When does this occur ??"}
00045E4A <PED.ab2@10609>   !asm
00045E4E <PED.ab2@10611>     MOVE.l $4(A1),D0
00045E54 <PED.ab2@10612>     CMP.l #$2010103,D0
00045E58 <PED.ab2@10613>     BEQ.w JL_0_52A0
00045E5E <PED.ab2@10614>     CMP.l #$1020103,D0
00045E62 <PED.ab2@10615>     BNE.w JL_0_52A8
00045E6A <PED.ab2@10616>     MOVE.l #$2010103,$4(A1)
00045E6E <PED.ab2@10617>     BRA.w JL_0_52A8
00045E76 <PED.ab2@10620>     MOVE.l #$1020103,$4(A1)
00045E7A <PED.ab2@10623>     TST.l $8(A1)
00045E7E <PED.ab2@10624>     BEQ.w JL_0_52BA
00045E82 <PED.ab2@10625>     MOVEA.l $8(A1),A1
00045E86 <PED.ab2@10626>     LEA $C(A1),A1
00045E8A <PED.ab2@10627>   BRA.b JL_0_527C
00045E92 <PED.ab2@10630>   MOVE.l $8(A0),comwin_width
00045E9A <PED.ab2@10631>   ADDI.w #$C,comwin_width
00045EA2 <PED.ab2@10632>   ADDI.w #$F,comwin_height
00045EA8 <PED.ab2@10633>   MOVE.w visiblecolumns,D0
00045EAA <PED.ab2@10634>   LSL.w #3,D0
00045EB0 <PED.ab2@10635>   SUB.w comwin_width,D0
00045EB2 <PED.ab2@10636>   LSR.w #1,D0
00045EB8 <PED.ab2@10637>   MOVE.w D0,newwindow_compilerwindow ; hier xposition des Fensters im struct newwindow
00045EBA <PED.ab2@10639>   MOVE.l A1,-(A7)
00045EC0 <PED.ab2@10640>   MOVEA.l ptr_pedscreen,A1
00045EC4 <PED.ab2@10641>   MOVE.w $E(A1),D0
00045EC6 <PED.ab2@10642>   MOVEA.l (A7)+,A1
00045ECC <PED.ab2@10643>   SUB.w comwin_height,D0
00045ECE <PED.ab2@10644>   LSR.w #1,D0
00045ED4 <PED.ab2@10645>   MOVE.w D0,comwin_y
00045ED8 <PED.ab2@10646>   MOVEA.l $10(A0),A1
00045EDE <PED.ab2@10647>   MOVE.l A1,comwin_firstgadget
00045EE2 <PED.ab2@10648>   TST.w $28(A1)
00045EE6 <PED.ab2@10649>   BNE.b JL_0_5324
00045EEC <PED.ab2@10650>   MOVE.w #$FFFF,$28(A1)
00045EF0 <PED.ab2@10653>     ADDQ.w #6,$4(A1)
00045EF6 <PED.ab2@10654>     ADDI.w #$C,$6(A1)
00045EF8 <PED.ab2@10655>     MOVE.l (A1),D0
00045EFA <PED.ab2@10656>     MOVEA.l D0,A1
00045EFE <PED.ab2@10657>   BNE.b JL_0_5314
00045F08 <PED.ab2@10660>   MOVE.l ptr_pedscreen,comwin_screenptr
00045F0E <PED.ab2@10661>   LEA newwindow_compilerwindow,A0
00045F16 <PED.ab2@10662>   CMP.l #$011c00bb,4(a0)
00045F1A <PED.ab2@10663>   BEQ call_newtype
00045F20 <PED.ab2@10665>   MOVEA.l _intuibase,A6
00045F22 <PED.ab2@10666>   MOVE.l a0,d0
00045F28 <PED.ab2@10667>   MOVE.b #$0,$e+3(a0)
00045F52 <PED.ab2@10668>   !basic
00045F56 <PED.ab2@10669>   *nw_.NewWindow = PutD0
00045F64 <PED.ab2@10670>   *gad2_.Gadget = *nw_\FirstGadget
00045F6E <PED.ab2@10671>   While *gad2_
00045F80 <PED.ab2@10672>     If *gad2_\GadgetText
00045F94 <PED.ab2@10673>       *gad2_\GadgetText\ITextFont = ?topaz_font
00045F9E <PED.ab2@10675>     *gad2_ = *gad2_\NextGadget
00045FA4 <PED.ab2@10676>   Wend
00045FC2 <PED.ab2@10677>   !asm
00045FC6 <PED.ab2@10681>   JSR _OpenWindow(A6)                ; open find, goto, etc. windows
00045FC8 <PED.ab2@10685>   TST.l D0
00045FCC <PED.ab2@10686>   BEQ.w JL_0_4942
00045FD6 <PED.ab2@10687>   MOVE.l AL_0_519C,AL_0_51A0
00045FE0 <PED.ab2@10688>   MOVE.l comPtr_CompilerWindow,AL_0_519C
00045FE6 <PED.ab2@10689>   MOVE.l D0,comPtr_CompilerWindow
00045FEC <PED.ab2@10691>   MOVEA.l comPtr_CompilerWindow,A0
00045FF0 <PED.ab2@10692>   MOVEA.l $32(A0),A0
00045FF6 <PED.ab2@10693>   MOVEA.l comPtr_CompilerWindowStructur,A1
00045FFA <PED.ab2@10694>   MOVEA.l $18(A1),A1                 ; itext laden
00045FFC <PED.ab2@10695>   MOVEQ.l #$06,D0
00045FFE <PED.ab2@10696>   MOVEQ.l #$0C,D1
00046000 <PED.ab2@10697>   MOVE.l A0,-(A7)
00046004 <PED.ab2@10698>    JSR _PrintIText(A6)               ; a0:rp, a1:IText, d0: Leftoffset, d1: TopOffset
00046006 <PED.ab2@10699>   MOVEA.l (A7)+,A0
0004600C <PED.ab2@10700>   MOVEA.l comPtr_CompilerWindowStructur,A1
00046010 <PED.ab2@10701>   MOVEA.l $14(A1),A1                 ; borderstruktur laden
00046012 <PED.ab2@10702>   MOVEQ.l #$06,D0
00046014 <PED.ab2@10703>   MOVEQ.l #$0C,D1
00046018 <PED.ab2@10704>   JSR _DrawBorder(A6)
0004601E <PED.ab2@10705>   ADDQ.w #1,AL_0_5388
00046020 <PED.ab2@10706> RTS
0004604A <PED.ab2@10710>   !basic
00046050 <PED.ab2@10711>   Gosub open_newtype
0004606E <PED.ab2@10712>   !asm
00046072 <PED.ab2@10713>   ADD.w #20,a7
00046078 <PED.ab2@10714> JMP JL_0_CE2
0004607A <PED.ab2@10718> AL_0_5388:    Ds.w 1
0004607E <PED.ab2@10721>   MOVEM.l D0-D1/A0-A2/A6,-(A7)
00046084 <PED.ab2@10722>   SUBQ.w #1,AL_0_5388
0004608A <PED.ab2@10723>   MOVE.l comPtr_CompilerWindow,D0
0004608E <PED.ab2@10724>   BEQ.w JL_0_543A
00046090 <PED.ab2@10725>   MOVEA.l D0,A2
00046096 <PED.ab2@10726>   MOVEA.l _execbase,A6
0004609A <PED.ab2@10727>   MOVEA.l $56(A2),A2                 ; UserPort->MsgPort
0004609C <PED.ab2@10730>     MOVEA.l A2,A0
000460A0 <PED.ab2@10731>     JSR _GetMsg(A6)
000460A2 <PED.ab2@10732>     TST.l D0
000460A6 <PED.ab2@10733>     BEQ.b JL_0_53B8
000460A8 <PED.ab2@10734>     MOVEA.l D0,A1
000460AC <PED.ab2@10735>     JSR _ReplyMsg(A6)
000460B0 <PED.ab2@10736>   BRA.b JL_0_53A6
000460B6 <PED.ab2@10739>   MOVEA.l comPtr_CompilerWindow,A0
000460BC <PED.ab2@10740>   MOVEA.l _intuibase,A6
000460C0 <PED.ab2@10741>   JSR _ClearPointer(A6)
000460C6 <PED.ab2@10742>   MOVEA.l comPtr_CompilerWindow,A0
000460CA <PED.ab2@10743>   JSR _CloseWindow(A6)
000460D4 <PED.ab2@10744>   MOVE.l #$0,comwin_title
000460DE <PED.ab2@10745>   MOVE.l AL_0_519C,comPtr_CompilerWindow
000460E8 <PED.ab2@10746>   MOVE.l AL_0_51A0,AL_0_519C
000460EE <PED.ab2@10747>   CLR.l AL_0_51A0
000460F4 <PED.ab2@10748>   MOVEA.l comPtr_CompilerWindowStructur,A0
000460F6 <PED.ab2@10749>   MOVEA.l A0,A2
000460FA <PED.ab2@10750>   MOVEA.l $14(A2),A1
000460FE <PED.ab2@10753>     MOVE.l $4(A1),D0
00046104 <PED.ab2@10754>     CMP.l #$2010103,D0
00046108 <PED.ab2@10755>     BEQ.w JL_0_541C
0004610E <PED.ab2@10756>     CMP.l #$1020103,D0
00046112 <PED.ab2@10757>     BNE.w JL_0_5424
0004611A <PED.ab2@10758>     MOVE.l #$2010103,$4(A1)
0004611E <PED.ab2@10759>     BRA.w JL_0_5424
00046126 <PED.ab2@10762>     MOVE.l #$1020103,$4(A1)
0004612A <PED.ab2@10765>     TST.l $8(A1)
0004612E <PED.ab2@10766>     BEQ.w JL_0_5436
00046132 <PED.ab2@10767>     MOVEA.l $8(A1),A1
00046136 <PED.ab2@10768>     LEA $C(A1),A1
0004613A <PED.ab2@10769>   BRA.b JL_0_53F8
00046140 <PED.ab2@10772>   JSR check_intuimsg
00046146 <PED.ab2@10776>   JSR arexxfunc_activate
0004614A <PED.ab2@10777>   MOVEM.l (A7)+,D0-D1/A0-A2/A6
0004614C <PED.ab2@10778> RTS
00046152 <PED.ab2@10781>   TST.l ptr_sourcewindow
00046156 <PED.ab2@10782>    BEQ.w exit_check_intuimessage
0004615C <PED.ab2@10783>   MOVEA.l ptr_sourcewindow,A2
00046162 <PED.ab2@10784>   MOVEA.l _execbase,A6
00046166 <PED.ab2@10785>   MOVEA.l $56(A2),A2                 ; Window\UserPort
00046168 <PED.ab2@10788>     MOVEA.l A2,A0
0004616C <PED.ab2@10789>     JSR _GetMsg(A6)
0004616E <PED.ab2@10790>     TST.l D0
00046172 <PED.ab2@10791>      BEQ.b exit_check_intuimessage
00046174 <PED.ab2@10792>     MOVEA.l D0,A1
00046178 <PED.ab2@10793>     JSR _ReplyMsg(A6)
0004617C <PED.ab2@10794>   BRA.b JL_0_5460
0004617E <PED.ab2@10797> RTS
00046188 <PED.ab2@10800>   CMPI.l #$1,comLong_TotalLines
0004618C <PED.ab2@10801>   BEQ.w JL_0_54EA
00046192 <PED.ab2@10802>   SUBQ.l #1,comLong_TotalLines
00046194 <PED.ab2@10803>   MOVE.l (A5),D1
00046198 <PED.ab2@10804>   MOVE.l $4(A5),D2
0004619C <PED.ab2@10805>   BEQ.w JL_0_54A4
0004619E <PED.ab2@10806>   TST.l D1
000461A2 <PED.ab2@10807>   BEQ.w JL_0_54B4
000461A4 <PED.ab2@10808>   MOVEA.l D2,A0
000461A6 <PED.ab2@10809>   MOVE.l D1,(A0)
000461A8 <PED.ab2@10810>   MOVEA.l D1,A0
000461AC <PED.ab2@10811>   MOVE.l D2,$4(A0)
000461B0 <PED.ab2@10812>   BRA.w JL_0_54BE
000461B6 <PED.ab2@10815>   MOVE.l D1,comPtr_FirstSourceLine
000461B8 <PED.ab2@10816>   MOVEA.l D1,A0
000461BC <PED.ab2@10817>   CLR.l $4(A0)
000461C0 <PED.ab2@10818>   BRA.w JL_0_54BE
000461C6 <PED.ab2@10821>   MOVE.l D2,comPtr_LastSourceLine
000461C8 <PED.ab2@10822>   MOVEA.l D2,A0
000461CA <PED.ab2@10823>   CLR.l (A0)
000461CC <PED.ab2@10825>   MOVEA.l A5,A1
000461D2 <PED.ab2@10826>   MOVE.b comByte_LabelIdentifier,D0
000461D4 <PED.ab2@10827>   MOVE.l A0,-(A7)
000461D8 <PED.ab2@10828>   LEA $9(A1),A0
000461DC <PED.ab2@10830>   CMPI.b #$20,(A0)+
000461E0 <PED.ab2@10831>   BEQ.b JL_0_54CA
000461E2 <PED.ab2@10832>   CMP.b -(A0),D0
000461E4 <PED.ab2@10833>   MOVEA.l (A7)+,A0
000461E8 <PED.ab2@10834>   BNE.w JL_0_54Dca
000461EE <PED.ab2@10835>   JSR JL_0_472A
000461F4 <PED.ab2@10837>   ST comWord__AL_0_86C0
000461FA <PED.ab2@10838>   MOVEA.l _execbase,A6
0004620C <PED.ab2@10839>  !newfree
0004620E <PED.ab2@10840> RTS
00046214 <PED.ab2@10844>    JSR JL_0_5B08
00046218 <PED.ab2@10845> BRA.b JL_0_54BE
0004621A <PED.ab2@10849>   MOVEA.l A4,A5                      ; -- copy currentline to A5
00046220 <PED.ab2@10850>   MOVE.l comLong_DisplayLineOffset,D7
00046226 <PED.ab2@10851>   ADD.l comLong_DisplayLine,D7
00046228 <PED.ab2@10852>   MOVE.l D7,D6
0004622E <PED.ab2@10854>   CMP.l comLong_BlockStartY,D6
00046232 <PED.ab2@10855>    BEQ.w JL_0_5522
00046236 <PED.ab2@10856>    BCC.w JL_0_5516
00046238 <PED.ab2@10859>     MOVEA.l (A5),A5
0004623A <PED.ab2@10860>     ADDQ.l #1,D6
00046240 <PED.ab2@10861>   CMP.l comLong_BlockStartY,D6
00046244 <PED.ab2@10862>   BNE.b JL_0_5508
00046248 <PED.ab2@10863>   BRA.w JL_0_5522
0004624C <PED.ab2@10866>     MOVEA.l $4(A5),A5
0004624E <PED.ab2@10867>     SUBQ.l #1,D6
00046254 <PED.ab2@10868>   CMP.l comLong_BlockStartY,D6
00046258 <PED.ab2@10869>   BNE.b JL_0_5516
0004625A <PED.ab2@10872> RTS
0004625E <PED.ab2@10875>   BSR.b move_to_blockstarty
00046264 <PED.ab2@10876>   MOVE.w comLong_BlockStartX,D5
0004626A <PED.ab2@10878>   MOVE.w comWord_DoTokenize,D0
0004626E <PED.ab2@10879>   BEQ.w JL_0_5538
00046272 <PED.ab2@10880>   BRA.w JL_0_553A
00046274 <PED.ab2@10883> RTS
0004627A <PED.ab2@10886>   MOVEA.l comPtr_Temp_TokenString3,A0
00046280 <PED.ab2@10887>   CMP.l #0,a5
00046284 <PED.ab2@10888>     BEQ 'l1
00046288 <PED.ab2@10889>   LEA $9(A5),A1
0004628A <PED.ab2@10890>   ADDQ.w #1,A0
00046290 <PED.ab2@10891>   JSR JL_0_5556
00046292 <PED.ab2@10892>   MOVE.l A0,D0
00046298 <PED.ab2@10893>   SUB.l comPtr_Temp_TokenString3,D0
0004629E <PED.ab2@10894>   MOVEA.l comPtr_Temp_TokenString3,A0
000462A0 <PED.ab2@10895>   MOVE.b D0,(A0)
000462A2 <PED.ab2@10897> RTS
000462A8 <PED.ab2@10900>   CLR.b instring3
000462AA <PED.ab2@10902>   MOVE.b (A1)+,D0                    ;cut token
000462AE <PED.ab2@10903>   BEQ.w JL_0_5574
000462B2 <PED.ab2@10904>   CMP.b #$22,d0
000462B6 <PED.ab2@10905>    BNE 'l1
000462BC <PED.ab2@10906>   NOT.b instring3
000462C2 <PED.ab2@10908>   TST.b instring3
000462C6 <PED.ab2@10909>   BNE 'l2
000462C8 <PED.ab2@10910>   TST.b d0
000462CC <PED.ab2@10911>    BMI.w JL_0_5564
000462CE <PED.ab2@10913>   MOVE.b D0,(A0)+
000462D2 <PED.ab2@10914>   BRA.b JL_0_5556b
000462D4 <PED.ab2@10917>   LSL.w #8,D0
000462D6 <PED.ab2@10918>   MOVE.b (A1)+,D0
000462DC <PED.ab2@10919>   JSR token_to_ascii
000462DE <PED.ab2@10921>   MOVE.b (A3)+,(A0)+
000462E2 <PED.ab2@10922>    BNE.b JL_0_556C
000462E4 <PED.ab2@10923>   SUBQ.w #1,A0
000462E8 <PED.ab2@10924>   BRA.b JL_0_5556b
000462EA <PED.ab2@10927> RTS
000462F0 <PED.ab2@10930>   MOVEA.l comPtr_FirstSourceLine,A4
000462F6 <PED.ab2@10931>   MOVE.l comLong_DisplayLineOffset,D0
000462FC <PED.ab2@10932>   ADD.l comLong_DisplayLine,D0
00046300 <PED.ab2@10933>   BEQ.w JL_0_558E
00046302 <PED.ab2@10937>     MOVEA.l (A4),A4
00046304 <PED.ab2@10938>     SUBQ.l #1,d0
00046308 <PED.ab2@10940>   BNE JL_0_5588
0004630E <PED.ab2@10943>   MOVE.l A4,comPtr_CurrentSourceLine
00046310 <PED.ab2@10944> RTS
00046312 <PED.ab2@10947>   MOVE.l A3,D5
00046318 <PED.ab2@10948>   SUB.l comPtr_Temp_TokenString1,D5
0004631A <PED.ab2@10949>   ADDQ.l #1,D5
0004631E <PED.ab2@10950> BRA.w JL_0_55AA
00046324 <PED.ab2@10953>   MOVEA.l comPtr_Temp_TokenString2,A2
0004632A <PED.ab2@10954>   JSR parse_line
0004632C <PED.ab2@10957>   MOVE.l D5,D0
00046330 <PED.ab2@10958>   ADDI.w #$9,D0
00046332 <PED.ab2@10959>   MOVEQ.l #$01,D1
00046338 <PED.ab2@10960>   MOVEA.l _execbase,A6
0004633E <PED.ab2@10961>    JSR JL_0_492E
00046340 <PED.ab2@10962>   MOVEA.l D0,A0
00046346 <PED.ab2@10963>   MOVEA.l comPtr_Temp_TokenString1,A1
0004634C <PED.ab2@10964>   MOVE.b comByte_LabelIdentifier,D0
0004634E <PED.ab2@10965>   MOVE.l A1,-(A7)
00046352 <PED.ab2@10968>   CMPI.b #$20,(A1)+
00046356 <PED.ab2@10969>    BEQ.b JL_0_55C6
00046358 <PED.ab2@10970>   CMP.b -(A1),D0
0004635C <PED.ab2@10972>     BEQ 'l10
0004635E <PED.ab2@10974>   MOVE.b (a1),d0                     ;pre clicksort
00046362 <PED.ab2@10975>   BEQ JL_0_55D8
00046366 <PED.ab2@10976>   CMP.b #";",d0
0004636A <PED.ab2@10977>   BEQ 'l10
0004636E <PED.ab2@10978>   CMP.b #$80,d0
00046372 <PED.ab2@10979>   BNE 'l15
00046378 <PED.ab2@10980>   CMP.b #$2d,1(a1)                   ;stop
0004637C <PED.ab2@10981>   BEQ 'l10
00046382 <PED.ab2@10982>   CMP.b #$ae,1(a1)                   ;trap
00046386 <PED.ab2@10983>   BEQ 'l10
00046388 <PED.ab2@10985>   ADDQ.l #1,a1
0004638C <PED.ab2@10986>   BRA 'l20
00046392 <PED.ab2@10988>   JSR JL_0_46CC
00046394 <PED.ab2@10991>   MOVEA.l (A7)+,A1
0004639A <PED.ab2@10992>   CMPA.l comPtr_FirstSourceLine,A4
0004639E <PED.ab2@10993>    BNE.w JL_0_55E6
000463A4 <PED.ab2@10994>   MOVE.l A0,comPtr_FirstSourceLine
000463AA <PED.ab2@10997>   CMPA.l comPtr_LastSourceLine,A4
000463AE <PED.ab2@10998>    BNE.w JL_0_55F4
000463B4 <PED.ab2@10999>   MOVE.l A0,comPtr_LastSourceLine
000463B8 <PED.ab2@11002>   MOVE.b D5,$8(A0)
000463BC <PED.ab2@11003>   MOVE.l $4(A4),D1
000463C0 <PED.ab2@11004>    BEQ.w JL_0_5604
000463C2 <PED.ab2@11005>   MOVEA.l D1,A1
000463C4 <PED.ab2@11006>   MOVE.l A0,(A1)
000463C8 <PED.ab2@11009>   MOVE.l D1,$4(A0)
000463CA <PED.ab2@11010>   MOVE.l (A4),D1
000463CE <PED.ab2@11011>    BEQ.w JL_0_5614
000463D0 <PED.ab2@11012>   MOVEA.l D1,A1
000463D4 <PED.ab2@11013>   MOVE.l A0,$4(A1)
000463D6 <PED.ab2@11016>   MOVE.l D1,(A0)
000463D8 <PED.ab2@11017>   MOVEA.l A0,A4
000463DC <PED.ab2@11018>   LEA $9(A0),A0
000463E2 <PED.ab2@11019>   MOVEA.l comPtr_Temp_TokenString1,A1
000463E4 <PED.ab2@11022>   MOVE.b (A1)+,(A0)+
000463E8 <PED.ab2@11023>    BNE.b JL_0_5620
000463EE <PED.ab2@11024>   JSR JL_0_6C04
000463F4 <PED.ab2@11025>   MOVE.l A4,comPtr_CurrentSourceLine
000463F6 <PED.ab2@11026> RTS
000463FC <PED.ab2@11029>   CMP.w comWord_MaxColumns,D5
00046400 <PED.ab2@11030>    BGE.w JL_0_568C
00046406 <PED.ab2@11031>   CMP.l comLong_BlockEndY,D6
0004640A <PED.ab2@11032>    BCS.w JL_0_5650
0004640E <PED.ab2@11033>    BNE.w JL_0_564C
00046414 <PED.ab2@11034>   CMP.w comLong_BlockEndX,D5
00046418 <PED.ab2@11035>    BLS.w JL_0_5650
0004641A <PED.ab2@11038>   MOVEQ.l #-$01,D0
0004641C <PED.ab2@11039> RTS
0004641E <PED.ab2@11042>   ADDQ.w #1,D5
00046424 <PED.ab2@11043>   MOVE.w comWord_DoTokenize,D0
00046428 <PED.ab2@11044>    BEQ.w JL_0_5670
0004642E <PED.ab2@11045>   MOVEA.l comPtr_Temp_TokenString3,A3
00046430 <PED.ab2@11046>   CMP.b (A3),D5
00046434 <PED.ab2@11047>    BCC.w JL_0_5680
00046436 <PED.ab2@11048>   MOVEQ.l #$00,D0
0004643A <PED.ab2@11049>   MOVE.b $0(A3,D5.W),D0
0004643C <PED.ab2@11050>   TST.w D0
0004643E <PED.ab2@11051> RTS
00046442 <PED.ab2@11054>   CMP.b $8(A5),D5
00046446 <PED.ab2@11055>    BCC.w JL_0_5680
00046448 <PED.ab2@11056>   MOVEQ.l #$00,D0
0004644C <PED.ab2@11057>   MOVE.b $8(A5,D5.W),D0
0004644E <PED.ab2@11058> RTS
00046454 <PED.ab2@11061>   MOVE.w comWord__AL_0_8AD8,D0
00046458 <PED.ab2@11062>    BNE.w JL_0_568C
0004645A <PED.ab2@11063>   MOVEQ.l #$20,D0
0004645C <PED.ab2@11064> RTS
0004645E <PED.ab2@11067>   MOVEA.l (A5),A5
00046460 <PED.ab2@11068>   ADDQ.l #1,D6
00046462 <PED.ab2@11069>   MOVEQ.l #$00,D5
00046464 <PED.ab2@11070>   MOVEQ.l #$00,D0
00046466 <PED.ab2@11071> RTS
0004646A <PED.ab2@11074>   Dc.b $00,$00,$00,$C9
0004646E <PED.ab2@11075>   Dc.b $00,$00,$00,$CA
00046472 <PED.ab2@11076>   Dc.b $00,$00,$00,$D8
00046476 <PED.ab2@11077>   Dc.b $00,$00,$00,$CC
0004647A <PED.ab2@11078>   Dc.b $00,$00,$00,$CD
0004647E <PED.ab2@11079>   Dc.b $00,$00,$00,$D2
00046482 <PED.ab2@11080>   Dc.b $00,$00,$00,$D3
00046486 <PED.ab2@11081>   Dc.b $00,$00,$00,$D7
0004648A <PED.ab2@11083> AL_0_56B6:  Dc.l $CB
00046490 <PED.ab2@11086>   TST.l AL_0_B90
00046494 <PED.ab2@11087>    BNE.w JL_0_56C6
00046496 <PED.ab2@11088> RTS
0004649A <PED.ab2@11091>   MOVEM.l D0-D3/A0-A1,-(A7)
000464A0 <PED.ab2@11092>   MOVEA.l addr_menustrip,A1
000464A6 <PED.ab2@11093>   LEA L_0_5696,A0
000464A8 <PED.ab2@11094>   MOVEA.l (A1),A1
000464AC <PED.ab2@11095>   MOVEA.l $12(A1),A1
000464AE <PED.ab2@11096>   MOVE.l (A0),D0
000464B2 <PED.ab2@11099>   CMP.l $22(A1),D0
000464B6 <PED.ab2@11100>    BEQ.w JL_0_56F2
000464B8 <PED.ab2@11101>   MOVEA.l (A1),A1
000464BE <PED.ab2@11102>   CMPA.l #$0,A1
000464C2 <PED.ab2@11103>    BNE.b JL_0_56Dca
000464C6 <PED.ab2@11104>   BRA.w JL_0_570C
000464CC <PED.ab2@11107>   ORI.w #$10,$C(A1)
000464D2 <PED.ab2@11108>   MOVEA.l addr_menustrip,A1
000464D4 <PED.ab2@11109>   MOVEA.l (A1),A1
000464D8 <PED.ab2@11110>   MOVEA.l $12(A1),A1
000464DA <PED.ab2@11111>   ADDQ.l #4,A0
000464DC <PED.ab2@11112>   MOVE.l (A0),D0
000464DE <PED.ab2@11113>   TST.l (A1)
000464E2 <PED.ab2@11114>   BNE.b JL_0_56Dca
000464E6 <PED.ab2@11120>   MOVEM.l (A7)+,D0-D3/A0-A1
000464E8 <PED.ab2@11121> RTS
000464EE <PED.ab2@11131>   CLR.l AL_0_56B6
000464F4 <PED.ab2@11132>   TST.l AL_0_B90
000464F8 <PED.ab2@11133>   BNE.w JL_0_5746
00046502 <PED.ab2@11134>   MOVE.l #$CB,AL_0_56B6
00046506 <PED.ab2@11137>   MOVEM.l D0-D3/A0-A1,-(A7)
0004650C <PED.ab2@11138>   MOVEA.l addr_menustrip,A1
00046512 <PED.ab2@11139>   LEA L_0_5696,A0
00046514 <PED.ab2@11140>   MOVEA.l (A1),A1
00046518 <PED.ab2@11141>   MOVEA.l $12(A1),A1
0004651A <PED.ab2@11142>   MOVE.l (A0),D0
0004651E <PED.ab2@11145>     CMP.l $22(A1),D0
00046522 <PED.ab2@11146>      BEQ.w JL_0_5772
00046524 <PED.ab2@11147>     MOVEA.l (A1),A1
0004652A <PED.ab2@11148>     CMPA.l #$0,A1
0004652E <PED.ab2@11149>      BNE.b JL_0_575C
00046532 <PED.ab2@11150>     BRA.w JL_0_578C
00046538 <PED.ab2@11153>     ANDI.w #$FFEF,$C(A1)
0004653E <PED.ab2@11154>     MOVEA.l addr_menustrip,A1
00046540 <PED.ab2@11155>     MOVEA.l (A1),A1
00046544 <PED.ab2@11156>     MOVEA.l $12(A1),A1
00046546 <PED.ab2@11157>     ADDQ.l #4,A0
00046548 <PED.ab2@11158>     MOVE.l (A0),D0
0004654A <PED.ab2@11159>     TST.l (A1)
0004654E <PED.ab2@11160>   BNE.b JL_0_575C
00046556 <PED.ab2@11163>   MOVE.w #$FFFF,AL_0_4280
00046560 <PED.ab2@11164>   MOVE.l #$ffffFFFF,comLong_BlockEndY
00046564 <PED.ab2@11169>   MOVEM.l (A7)+,D0-D3/A0-A1
00046566 <PED.ab2@11170> RTS
00046570 <PED.ab2@11173>   CMPI.l #$ffffFFFF,comLong_BlockEndY
00046574 <PED.ab2@11174>    BEQ.w JL_0_57DE
0004657A <PED.ab2@11175>   CMP.l comLong_BlockEndY,D0
0004657E <PED.ab2@11176>    BHI.w JL_0_57DE
00046584 <PED.ab2@11177>   ADDQ.l #1,comLong_BlockEndY
0004658A <PED.ab2@11178>   CMP.l comLong_BlockStartY,D0
0004658E <PED.ab2@11179>    BHI.w JL_0_57DE
00046594 <PED.ab2@11180>   ADDQ.l #1,comLong_BlockStartY
00046596 <PED.ab2@11183> RTS
000465A0 <PED.ab2@11187>   CMPI.l #$ffffFFFF,comLong_BlockEndY
000465A4 <PED.ab2@11188>    BEQ.w JL_0_57F0
000465AA <PED.ab2@11189>   JSR _redraw
000465AC <PED.ab2@11191> RTS
000465B2 <PED.ab2@11195>   MOVE.w comWord_Column,-(A7)
000465B8 <PED.ab2@11196>   MOVE.l comLong_DisplayLine,-(A7)
000465BC <PED.ab2@11197>   MOVEM.w D2-D3/D5,-(A7)
000465C2 <PED.ab2@11198>   SUB.w comWord_ColumnsOffset,D2
000465C6 <PED.ab2@11199>    BPL.w JL_0_5808
000465C8 <PED.ab2@11200>   MOVEQ.l #$00,D2
000465CC <PED.ab2@11201>   BRA.w JL_0_5816
000465D2 <PED.ab2@11204>   CMP.w comWord_MaxColumns,D2
000465D6 <PED.ab2@11205>    BCS.w JL_0_5816
000465DC <PED.ab2@11206>   MOVE.w comWord_MaxColumns,D2
000465DE <PED.ab2@11207>   SUBQ.w #1,D2
000465E4 <PED.ab2@11210>   MOVE.w D2,comWord_Column
000465EA <PED.ab2@11211>   MOVE.w D3,comLong_DisplayLine+2
000465F0 <PED.ab2@11212>    JSR update_horizscroller
000465F6 <PED.ab2@11213>    JSR update_vertscroller
000465FA <PED.ab2@11214>   MOVEM.w (A7)+,D2-D3/D5
00046600 <PED.ab2@11216>   MOVE.l (A7)+,comLong_DisplayLine
00046606 <PED.ab2@11217>   MOVE.w (A7)+,comWord_Column
00046608 <PED.ab2@11218> RTS
0004660E <PED.ab2@11221>   MOVE.w comLong_BlockStartX,D0
00046614 <PED.ab2@11222>   MOVE.l comLong_BlockStartY,D1
0004661A <PED.ab2@11223>   MOVE.w comLong_BlockEndX,D2
00046620 <PED.ab2@11224>   MOVE.l comLong_BlockEndY,D3
00046622 <PED.ab2@11225>   CMP.l D3,D1
00046626 <PED.ab2@11226>    BCS.w JL_0_5872
0004662A <PED.ab2@11227>    BEQ.w JL_0_586E
0004662C <PED.ab2@11229>   EXG.l D0,D2
0004662E <PED.ab2@11230>   EXG.l D1,D3
00046634 <PED.ab2@11231>   MOVE.w D0,comLong_BlockStartX
0004663A <PED.ab2@11232>   MOVE.l D1,comLong_BlockStartY
00046640 <PED.ab2@11233>   MOVE.w D2,comLong_BlockEndX
00046646 <PED.ab2@11234>   MOVE.l D3,comLong_BlockEndY
00046648 <PED.ab2@11235> RTS
0004664A <PED.ab2@11238>   CMP.w D2,D0
0004664E <PED.ab2@11239>    BGT.b JL_0_5850
00046650 <PED.ab2@11241> RTS
00046652 <PED.ab2@11244>   CMP.w D3,D1
00046656 <PED.ab2@11245>    BCS.w JL_0_5888
0004665A <PED.ab2@11246>    BNE.w JL_0_5884
0004665C <PED.ab2@11247>   CMP.w D2,D0
00046660 <PED.ab2@11248>    BLE.w JL_0_5888
00046662 <PED.ab2@11251>   EXG.l D0,D2
00046664 <PED.ab2@11252>   EXG.l D1,D3
00046666 <PED.ab2@11255> RTS
0004666C <PED.ab2@11259>   MOVE.l comLong_BlockEndY,-(A7)
00046676 <PED.ab2@11260>   MOVE.l #$ffffFFFF,comLong_BlockEndY
0004667C <PED.ab2@11261>   JSR save_cursorposition
00046682 <PED.ab2@11262>   JSR clear_sourcewindow
00046688 <PED.ab2@11263>   MOVEA.l comPtr_CurrentSourceLine,A2
0004668E <PED.ab2@11264>   CMPA.l #$0,A2
00046692 <PED.ab2@11265>   BNE.w JL_0_58B6
00046698 <PED.ab2@11266>   MOVE.l (A7)+,comLong_BlockEndY
0004669A <PED.ab2@11267> RTS
000466A0 <PED.ab2@11274>   MOVE.l comLong_DisplayLine,D1
000466A4 <PED.ab2@11277>   BEQ.w JL_0_58C6
000466A8 <PED.ab2@11278>   MOVE.l $4(A2),d0
000466AC <PED.ab2@11279>   BEQ JL_0_58C6
000466AE <PED.ab2@11280>   MOVE.l d0,a2
000466B2 <PED.ab2@11283>   BRA 'l3
000466B8 <PED.ab2@11286>   CMP.w #";@",9(a2)
000466BC <PED.ab2@11287>   BNE 'l2
000466C0 <PED.ab2@11288>   BSR doreverse
000466C6 <PED.ab2@11289>   CMP.w #"@0",11(a2)
000466CA <PED.ab2@11290>   BNE 'l2
000466D0 <PED.ab2@11291>   TST.l foldnum
000466D4 <PED.ab2@11292>   BNE 'l3
000466DA <PED.ab2@11294>   TST.l foldnum
000466DE <PED.ab2@11295>   BNE JL_0_58BA
000466E0 <PED.ab2@11297>   SUBQ.l #1,D1
000466E4 <PED.ab2@11298> BRA.b JL_0_58BA
000466EA <PED.ab2@11302>   CLR.l foldnum
000466EC <PED.ab2@11303>   MOVE.l a1,-(a7)
000466F2 <PED.ab2@11304>   MOVE.l comPtr_FirstSourceLine,d0
000466F6 <PED.ab2@11305>   BEQ 'out
000466F8 <PED.ab2@11307>     MOVE.l d0,a1
000466FA <PED.ab2@11308>     CMP.l a2,a1
000466FE <PED.ab2@11309>     BEQ 'out
00046704 <PED.ab2@11310>     CMP.w #";@",9(a1)
00046708 <PED.ab2@11311>     BNE 'l2
0004670E <PED.ab2@11312>     CMP.w #"@1",11(a1)
00046712 <PED.ab2@11313>     BNE 'no1
0004671C <PED.ab2@11314>     MOVE.l #1,foldnum
00046722 <PED.ab2@11316>     CMP.w #"@0",11(a1)
00046726 <PED.ab2@11317>     BNE 'no2
00046730 <PED.ab2@11318>     MOVE.l #0,foldnum
00046732 <PED.ab2@11321>     MOVE.l (a1),d0
00046736 <PED.ab2@11322>   BNE 'l1
00046738 <PED.ab2@11325>   MOVE.l (a7)+,a1
0004673A <PED.ab2@11326> RTS
00046740 <PED.ab2@11330> CMP.w #"@0",11(a2)                   ;reverse ok !!!
00046744 <PED.ab2@11331> BNE 'no1
00046748 <PED.ab2@11332> MOVEM.l d0/a1,-(a7)
00046752 <PED.ab2@11333> MOVE.l #0,foldnum
00046756 <PED.ab2@11334> MOVE.l 4(a2),d0
0004675A <PED.ab2@11335> BEQ 'lp4
0004675C <PED.ab2@11336> 'lp1 MOVE.l d0,a1                    ;check if previous is ;@@1
00046762 <PED.ab2@11337> CMP.w #";@",9(a1)
00046766 <PED.ab2@11338> BNE 'lp2
0004676C <PED.ab2@11339> CMP.w #"@1",11(a1)
00046770 <PED.ab2@11340> BNE 'lp3
0004677A <PED.ab2@11341> MOVE.l #1,foldnum
0004677E <PED.ab2@11342> BRA 'lp4                             ;block is folded
00046784 <PED.ab2@11344> CMP.w #"@0",11(a1)
00046788 <PED.ab2@11345> BEQ 'lp4
0004678C <PED.ab2@11347>  MOVE.l 4(a1),d0
00046790 <PED.ab2@11348>  BNE 'lp1
00046794 <PED.ab2@11349> 'lp4 MOVEM.l (a7)+,a1/d0
0004679A <PED.ab2@11351> CMP.w #"@1",11(a2)
0004679E <PED.ab2@11352> BNE 'no2
000467A8 <PED.ab2@11353> MOVE.l #0,foldnum
000467AA <PED.ab2@11357> RTS
000467B0 <PED.ab2@11361>   MOVE.w D1,comLong_DisplayLine+2
000467B6 <PED.ab2@11363>   CLR.w comWord_TextBufferOffset
000467BC <PED.ab2@11364>   CLR.l foldnum
000467C6 <PED.ab2@11365>   MOVE.l #-1,BetterRefresh_FillEndOfLine
000467CC <PED.ab2@11366>   MOVE.l viewablelines,D7
000467CE <PED.ab2@11367>   SUBQ.l #1,D7
000467D8 <PED.ab2@11368>   MOVE.w comWord_ColumnsOffset,comWord__AL_0_869A
000467DE <PED.ab2@11369>   MOVE.l comLong_LinePosStartY,d0
000467E0 <PED.ab2@11397>     MOVE.l (A2),-(A7)
000467E6 <PED.ab2@11398>     JSR print_sourceline
000467EC <PED.ab2@11399>     JSR update_modifiermark
000467EE <PED.ab2@11400>     MOVE.l (A7)+,D0
000467F2 <PED.ab2@11401>     BEQ.w JL_0_5902
000467F4 <PED.ab2@11402>     MOVEA.l D0,A2
000467FA <PED.ab2@11403>     JSR JL_0_640C
000467FE <PED.ab2@11404>   DBF D7,JL_0_58E8
00046808 <PED.ab2@11407>    MOVE.l #0,BetterRefresh_FillEndOfLine
0004680E <PED.ab2@11409>   MOVE.l backgroundcolor,d0   ;: ADD.l #3,d0
00046814 <PED.ab2@11410>   MOVEA.l _graphicsbase,A6
0004681A <PED.ab2@11411>   MOVEA.l rp_sourcewindow,A1
0004681E <PED.ab2@11412>   JSR _SetAPen(A6)
00046824 <PED.ab2@11414>   MOVEA.l _graphicsbase,A6
0004682A <PED.ab2@11415>   MOVEA.l rp_sourcewindow,A1
0004682E <PED.ab2@11417>   MOVE.w #0,D0
00046834 <PED.ab2@11419>   MOVE.l comLong_DisplayLine,D1
0004683A <PED.ab2@11420>   MULU fontheight,D1
00046840 <PED.ab2@11424>   ADD.w  fontheight,D1
00046846 <PED.ab2@11425>   MOVE.w win_InnerWidth,D2
0004684C <PED.ab2@11426>   MOVE.w ypos_statusarea ,D3
00046850 <PED.ab2@11427>   JSR _RectFill(A6)                  ;A1:rp, D0:x min, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00046856 <PED.ab2@11429>   JSR restore_cursorposition
0004685C <PED.ab2@11430>   MOVE.l (A7)+,comLong_BlockEndY
00046862 <PED.ab2@11433>   TST.l comLong_BlockEndY
00046866 <PED.ab2@11434>    BMI.w JL_0_59BA
0004686C <PED.ab2@11435>   MOVEA.l _graphicsbase,A6
00046872 <PED.ab2@11436>   MOVEA.l comPtr_SourceAreaRastPort,A1
00046878 <PED.ab2@11437>   MOVE.w comLong_BlockStartX,D0
0004687E <PED.ab2@11438>   MOVE.w comLong_BlockEndX,D2
00046884 <PED.ab2@11439>   MOVE.l comLong_BlockEndY,D3
0004688A <PED.ab2@11440>   MOVE.l comLong_BlockStartY,D1
00046890 <PED.ab2@11441>   MOVE.l comLong_DisplayLineOffset,D4
00046892 <PED.ab2@11442>   MOVE.l D4,D5
00046898 <PED.ab2@11443>   ADD.l viewablelines,D5
0004689E <PED.ab2@11444>   SUB.w comWord_ColumnsOffset,D0
000468A2 <PED.ab2@11445>    BPL.w JL_0_5954
000468A4 <PED.ab2@11446>   MOVEQ.l #$00,D0
000468A6 <PED.ab2@11449>   CMP.l D4,D3
000468AA <PED.ab2@11450>    BLT.w JL_0_59BA
000468B0 <PED.ab2@11451>   SUB.l comLong_DisplayLineOffset,D1
000468B4 <PED.ab2@11452>    BPL.w JL_0_5968
000468B6 <PED.ab2@11453>   MOVEQ.l #$00,D0
000468B8 <PED.ab2@11454>   MOVEQ.l #$00,D1
000468BE <PED.ab2@11457>   SUB.w comWord_ColumnsOffset,D2
000468C2 <PED.ab2@11458>    BPL.w JL_0_5974
000468C4 <PED.ab2@11459>   MOVEQ.l #$00,D2
000468CA <PED.ab2@11462>   SUB.l comLong_DisplayLineOffset,D3
000468CE <PED.ab2@11463>    BPL.w JL_0_5980
000468D0 <PED.ab2@11464>   MOVEQ.l #$00,D3
000468D6 <PED.ab2@11467>   MOVE.l viewablelines,D5
000468D8 <PED.ab2@11468>   CMP.l D5,D1
000468DC <PED.ab2@11469>    BGE.w JL_0_59BA
000468DE <PED.ab2@11470>   CMP.l D5,D3
000468E2 <PED.ab2@11471>    BLE.w JL_0_5998
000468E8 <PED.ab2@11472>   MOVE.l viewablelines_m1,D3
000468EE <PED.ab2@11475>   CMP.w visiblecolumns,D2
000468F2 <PED.ab2@11476>    BLT.w JL_0_59AA
000468F8 <PED.ab2@11477>   MOVE.w visiblecolumns,D2
000468FA <PED.ab2@11478>   SUBQ.w #1,D2
00046900 <PED.ab2@11481>   ADD.w comWord_ColumnsOffset,D0
00046906 <PED.ab2@11482>   ADD.w comWord_ColumnsOffset,D2
0004690A <PED.ab2@11483>   BRA.w JL_0_59C0
0004690C <PED.ab2@11486> RTS
00046912 <PED.ab2@11489>   JSR JL_0_5874
00046916 <PED.ab2@11491>   MOVEM.l D0-D3/A0-A1,-(A7)
00046918 <PED.ab2@11493>   TST.w D0
0004691C <PED.ab2@11494>    BPL.w JL_0_59CC
0004691E <PED.ab2@11495>   MOVEQ.l #$00,D0
00046920 <PED.ab2@11498>   TST.w D2
00046924 <PED.ab2@11499>    BPL.w JL_0_59D8
00046926 <PED.ab2@11500>   MOVEQ.l #$00,D2
0004692A <PED.ab2@11501>   BRA.w JL_0_59DA
0004692C <PED.ab2@11504>   ADDQ.w #1,D2
0004692E <PED.ab2@11507>   TST.w D1
00046932 <PED.ab2@11508>    BPL.w JL_0_59E2
00046934 <PED.ab2@11509>   MOVEQ.l #$00,D1
00046936 <PED.ab2@11512>   TST.w D3
0004693A <PED.ab2@11513>    BPL.w JL_0_59EA
0004693C <PED.ab2@11514>   MOVEQ.l #$00,D3
00046942 <PED.ab2@11517>   MOVEA.l _graphicsbase,A6
00046948 <PED.ab2@11518>   SUB.w comWord_ColumnsOffset,D2
0004694E <PED.ab2@11519>   SUB.w comWord_ColumnsOffset,D0
00046954 <PED.ab2@11520>   CMP.w visiblecolumns,D2
00046958 <PED.ab2@11521>    BLE.w JL_0_5A08
0004695E <PED.ab2@11522>   MOVE.w visiblecolumns,D2
00046964 <PED.ab2@11525>   CMP.l viewablelines_m1,D3
00046968 <PED.ab2@11526>    BLE.w JL_0_5A18
0004696E <PED.ab2@11527>   MOVE.l viewablelines_m1,D3
00046974 <PED.ab2@11530>   CMP.l viewablelines_m1,D1
00046978 <PED.ab2@11531>    BLE.w JL_0_5A28
0004697E <PED.ab2@11532>   MOVE.l viewablelines_m1,D1
00046984 <PED.ab2@11535>   MULU fontheight,D1
0004698A <PED.ab2@11536>   MULU fontheight,D3
00046990 <PED.ab2@11539>   MULU fontwidth,d0
00046996 <PED.ab2@11540>   MULU fontwidth,d2
00046998 <PED.ab2@11541>   CMP.l D1,D3
0004699C <PED.ab2@11542>    BGE.w JL_0_5A3C
0004699E <PED.ab2@11543>   EXG.l D1,D3
000469A0 <PED.ab2@11546>   CMP.w D1,D3
000469A4 <PED.ab2@11547>    BNE.w JL_0_5A52
000469AA <PED.ab2@11548>   ADD.w font_Heightm1,D3
000469B0 <PED.ab2@11549>   JSR JL_0_5AA6
000469B4 <PED.ab2@11550>   MOVEM.l (A7)+,D0-D3/A0-A1
000469B6 <PED.ab2@11551> RTS
000469BA <PED.ab2@11554>   MOVEM.l D0-D3,-(A7)
000469BC <PED.ab2@11555>   MOVE.l D1,D3
000469C2 <PED.ab2@11556>   ADD.w font_Heightm1,D3
000469C4 <PED.ab2@11557>   MOVEQ.l #$00,D2
000469CA <PED.ab2@11558>   MOVE.w visiblecolumns,D2
000469D0 <PED.ab2@11560>   MULU fontwidth,d2
000469D6 <PED.ab2@11561>    JSR JL_0_5AA6
000469DA <PED.ab2@11562>   MOVEM.l (A7)+,D0-D3
000469E0 <PED.ab2@11563>   ADD.w fontheight,D1
000469E2 <PED.ab2@11564>   CMP.w D1,D3
000469E6 <PED.ab2@11565>    BLE.w JL_0_5A96
000469EA <PED.ab2@11566>   MOVEM.l D0-D3,-(A7)
000469EC <PED.ab2@11567>   SUBQ.w #1,D3
000469EE <PED.ab2@11568>   MOVEQ.l #$00,D2
000469F4 <PED.ab2@11569>   MOVE.w visiblecolumns,D2
000469FA <PED.ab2@11571>   MULU fontwidth,d2
000469FC <PED.ab2@11572>   MOVEQ.l #$00,D0
00046A02 <PED.ab2@11573>    JSR JL_0_5AA6
00046A06 <PED.ab2@11574>   MOVEM.l (A7)+,D0-D3
00046A08 <PED.ab2@11575>   MOVEQ.l #$00,D0
00046A0A <PED.ab2@11576>   MOVE.l D3,D1
00046A0C <PED.ab2@11579>   MOVEQ.l #$00,D0
00046A12 <PED.ab2@11580>   ADD.w font_Heightm1,D3
00046A18 <PED.ab2@11581>   JSR JL_0_5AA6
00046A1C <PED.ab2@11582>   MOVEM.l (A7)+,D0-D3/A0-A1
00046A1E <PED.ab2@11583> RTS
00046A24 <PED.ab2@11587>   MOVEA.l _graphicsbase,A6           ; added by Thilo for security
00046A26 <PED.ab2@11588>   SUBQ.w #1,D2
00046A2C <PED.ab2@11589>   MOVEA.l comPtr_SourceAreaRastPort,A1
00046A30 <PED.ab2@11590>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00046A32 <PED.ab2@11591> RTS
00046A38 <PED.ab2@11595>   MOVE.l ptr_sourcewindow,a0
00046A3C <PED.ab2@11596>   MOVE.w $C(A0),D1                   ; MouseY-Window
00046A40 <PED.ab2@11597>   ADD.w #1,D1
00046A42 <PED.ab2@11600>   TST.w D1
00046A46 <PED.ab2@11601>   BPL.w JL_0_5ACA
00046A48 <PED.ab2@11602>   MOVEQ.l #$00,D1
00046A4E <PED.ab2@11605>   MOVE.w win_BorTop,D2               ; win_TopEdge
00046A50 <PED.ab2@11606>   CMP.w D2,D1
00046A54 <PED.ab2@11607>    BLS.w JL_0_5AF4
00046A5A <PED.ab2@11608>   ADD.w ypos_statusarea,D2
00046A5C <PED.ab2@11609>   CMP.w D2,D1
00046A60 <PED.ab2@11610>    BCC.w JL_0_5AF4
00046A64 <PED.ab2@11612>   MOVE.w $e(A0),D0                   ; MouseX-Window
00046A6A <PED.ab2@11613>   SUB.w win_BorLef,D0
00046A6E <PED.ab2@11614>   BGT 'l1                            ; wenn weniger als borleft, auf borleft setzen
00046A70 <PED.ab2@11615>   MOVEQ #0,d0
00046A72 <PED.ab2@11620>   MOVE.w D0,D2
00046A74 <PED.ab2@11621>   MOVEQ.l #$00,D3
00046A76 <PED.ab2@11622>   MOVE.w D1,D3
00046A7C <PED.ab2@11623>   SUB.w win_BorTop,D3                ; win _TopEdge
00046A7E <PED.ab2@11625>   EXT.l d2
00046A84 <PED.ab2@11626>   DIVU fontwidth,d2
00046A8A <PED.ab2@11627>   DIVU fontheight,D3
00046A8C <PED.ab2@11628>   EXT.l d3
00046A8E <PED.ab2@11629> RTS
00046A92 <PED.ab2@11632>   MOVE.w $12(A0),D0                  ; MinHeight
00046A94 <PED.ab2@11633>   MOVE.w D0,D2
00046A96 <PED.ab2@11634>   EXT.l d2
00046A9C <PED.ab2@11636>   DIVU fontwidth,d2
00046A9E <PED.ab2@11637>   MOVEQ.l #-$01,D3
00046AA0 <PED.ab2@11638> RTS
00046AA6 <PED.ab2@11641>   JSR JL_0_5B08
00046AAC <PED.ab2@11642> JMP clear_sourcewindow_visual
00046AB2 <PED.ab2@11645>   JSR allocnewline
00046AB6 <PED.ab2@11646>   BEQ.w JL_0_5B22
00046ABC <PED.ab2@11647>   MOVE.l A0,comPtr_FirstSourceLine
00046AC2 <PED.ab2@11648>   MOVE.l A0,comPtr_LastSourceLine
00046AC8 <PED.ab2@11649>   MOVE.l A0,comPtr_CurrentSourceLine
00046ACA <PED.ab2@11651> RTS
00046AD0 <PED.ab2@11655>   MOVEA.l comPtr_CurrentSourceLine,A2
00046AD6 <PED.ab2@11656>    JSR save_cursorposition
00046ADC <PED.ab2@11658>   CLR.w comWord_TextBufferOffset
00046AE2 <PED.ab2@11659>   MOVE.l comLong_DisplayLine,D1
00046AE6 <PED.ab2@11662>     BEQ.w JL_0_5B4E
00046AEA <PED.ab2@11663>     MOVE.l $4(A2),D0
00046AEE <PED.ab2@11664>     BEQ.w JL_0_5B58
00046AF0 <PED.ab2@11665>     MOVEA.l D0,A2
00046AF2 <PED.ab2@11666>     SUBQ.w #1,D1
00046AF6 <PED.ab2@11667>   BRA.b JL_0_5B3C
00046AFC <PED.ab2@11670>   MOVE.w D1,comLong_DisplayLine+2
00046B02 <PED.ab2@11671>   JSR print_sourceline
00046B08 <PED.ab2@11673>   JSR restore_cursorposition
00046B0C <PED.ab2@11674> BRA.w JL_0_612C
00046B12 <PED.ab2@11677>   MOVEA.l comPtr_CurrentSourceLine,A2
00046B18 <PED.ab2@11678>   JSR save_cursorposition
00046B1E <PED.ab2@11680>     MOVE.l comLong_DisplayLine,D0
00046B20 <PED.ab2@11681>     ADDQ.l #1,D0
00046B26 <PED.ab2@11682>     CMP.l viewablelines,D0
00046B2A <PED.ab2@11683>      BCC.w JL_0_5B84
00046B2C <PED.ab2@11684>     MOVE.l (A2),D0
00046B30 <PED.ab2@11685>      BEQ.w JL_0_5B88
00046B32 <PED.ab2@11686>     MOVEA.l D0,A2
00046B38 <PED.ab2@11687>      JSR JL_0_640C
00046B3C <PED.ab2@11688>   BRA.b JL_0_5B68
00046B42 <PED.ab2@11691>   JSR print_sourceline
00046B48 <PED.ab2@11693>   JSR restore_cursorposition
00046B4C <PED.ab2@11694> BRA.w JL_0_60FE
00046B52 <PED.ab2@11697>   MOVEA.l comPtr_CurrentSourceLine,A2
00046B56 <PED.ab2@11698> BRA.w print_sourceline
00046B5A <PED.ab2@11700> AL_0_5B9A:    Ds.l 1
00046B5E <PED.ab2@11701> AL_0_5B9E:    Ds.l 1
00046B62 <PED.ab2@11702> AL_0_5BA2:    Ds.l 1
00046B66 <PED.ab2@11703> AL_0_5BA6:    Ds.l 1
00046B6A <PED.ab2@11704> AL_0_5BAA:    Ds.l 1
00046B6E <PED.ab2@11705> expandstore:  Ds.l 1
00046B72 <PED.ab2@11706> AL_0_5BB2:    Ds.l 1
00046B78 <PED.ab2@11709>   TST.w comWord_CursorInMarkedBlock
00046B7C <PED.ab2@11710>   BEQ.w JL_0_5BF4
00046BA6 <PED.ab2@11711>   !basic
00046C00 <PED.ab2@11712>   Request "","JL_0_5BB6","OK"
00046C1E <PED.ab2@11713>   !asm
00046C22 <PED.ab2@11715>   MOVEM.l D0-D1/A0,-(A7)
00046C28 <PED.ab2@11716>   MOVEA.l _graphicsbase,A6
00046C2E <PED.ab2@11717>   MOVEA.l rp_sourcewindow,A1
00046C30 <PED.ab2@11718>   MOVEQ.l #$03,D0
00046C34 <PED.ab2@11719>   JSR _SetBPen(A6)
00046C38 <PED.ab2@11720>   MOVEM.l (A7)+,D0-D1/A0
00046C3A <PED.ab2@11722>   MOVEQ.l #$01,D2
00046C40 <PED.ab2@11723>   MOVE.w othercolor,D3
00046C46 <PED.ab2@11724>   JSR print_text                     ;type
00046C4C <PED.ab2@11725>   MOVEA.l rp_sourcewindow,A1
00046C52 <PED.ab2@11726>   MOVE.l backgroundcolor,D0
00046C56 <PED.ab2@11727> JMP _SetBPen(A6)
00046C58 <PED.ab2@11730>   MOVEQ.l #$01,D2
00046C5A <PED.ab2@11731>   MOVEQ.l #$00,D3
00046C5C <PED.ab2@11732>   TST.w (A0)
00046C60 <PED.ab2@11733>    BPL.w JL_0_5C0C
00046C66 <PED.ab2@11734>   TST.w instru
00046C6A <PED.ab2@11735>    BEQ 'l1
00046C6E <PED.ab2@11736>   BCLR #$7,(A0)                      ;morechar ok
00046C74 <PED.ab2@11738>   MOVE.w classiccolor,D3
00046C78 <PED.ab2@11739>   BRA.w print_text
00046C7E <PED.ab2@11742>   MOVE.w othercolor,D3
00046C84 <PED.ab2@11743>   JSR print_text
00046C86 <PED.ab2@11744> RTS
00046C88 <PED.ab2@11748>   MOVE.l D2,-(A7)
00046C8E <PED.ab2@11749>   MOVEA.l AL_0_5BAA,A2
00046C94 <PED.ab2@11750>   MOVE.l #MAX_Columns/4,D2
00046C96 <PED.ab2@11751>   SUBQ.l #1,d2
00046C98 <PED.ab2@11753>     CLR.l (A2)+
00046C9C <PED.ab2@11754>   DBF D2,JL_0_5C20
00046CA2 <PED.ab2@11756>   MOVEA.l _intuibase,A6
00046CA8 <PED.ab2@11758>   TST.w comWord_DoTokenize
00046CAC <PED.ab2@11759>   BNE.w tokenized_text
00046CB2 <PED.ab2@11761>   JSR print_standard_text            ; print standard, non-tokenized text
00046CB6 <PED.ab2@11762>   BRA.w exit_print_complete_line
00046CBC <PED.ab2@11765>   MOVE.w comWord_MaxColumns,D4
00046CBE <PED.ab2@11766>   SUBQ.w #1,D4
00046CC4 <PED.ab2@11767>   MOVEA.l AL_0_5BA6,A1
00046CC6 <PED.ab2@11770>     MOVE.b (A0)+,(A1)+               ;copy text to tempbuffer
00046CCA <PED.ab2@11771>     BEQ.w JL_0_5C52
00046CCE <PED.ab2@11772>   DBF D4,JL_0_5C48
00046CD2 <PED.ab2@11775>   MOVE.b #$0,(A1)+
00046CD8 <PED.ab2@11776>   JSR print_tokenized_text
00046CDE <PED.ab2@11779>   TST.l BetterRefresh_FillEndOfLine
00046CE2 <PED.ab2@11780>   BEQ skip_clearendofline
00046CE6 <PED.ab2@11782>   MOVEM.l D0-D7/A0-A6,-(A7)
00046CEC <PED.ab2@11783>   MOVE.l backgroundcolor,d0 ;: ADD.l #1,d0
00046CF2 <PED.ab2@11784>   MOVEA.l _graphicsbase,A6
00046CF8 <PED.ab2@11785>   MOVEA.l rp_sourcewindow,A1
00046CFC <PED.ab2@11786>   JSR _SetAPen(A6)
00046D02 <PED.ab2@11788>   MOVEA.l _graphicsbase,A6
00046D08 <PED.ab2@11789>   MOVEA.l rp_sourcewindow,A1
00046D0E <PED.ab2@11791>   MOVE.l comLong_DisplayLine,D1 ; calculate line y
00046D14 <PED.ab2@11792>   MULU fontheight,D1
00046D18 <PED.ab2@11808>   MOVE.w $24(A1),D0
00046D1E <PED.ab2@11811>   MOVE.w win_InnerWidth,D2
00046D20 <PED.ab2@11812>   MOVE.w D1,D3
00046D26 <PED.ab2@11813>   ADD.w  font_Heightm1,D3
00046D2A <PED.ab2@11815>   JSR _RectFill(A6)                  ;A1:rp,  D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00046D2E <PED.ab2@11816>   MOVEM.l (a7)+,D0-D7/A0-A6
00046D30 <PED.ab2@11818>   MOVE.l (A7)+,D2
00046D36 <PED.ab2@11819>   CLR.w comWord__AL_0_8660
00046D38 <PED.ab2@11820> RTS
00046D3C <PED.ab2@11824> Dc.l 0
00046D42 <PED.ab2@11828>   MOVEA.l AL_0_5BA6,A0
00046D48 <PED.ab2@11829>   MOVEA.l AL_0_5BAA,A1
00046D4C <PED.ab2@11831>   MOVEM.l D0-D1/A1,-(A7)
00046D52 <PED.ab2@11832>   JSR JL_0_5060                      ;copy whole line from A0 to A1
00046D56 <PED.ab2@11833>   MOVEM.l (A7)+,D0-D1/A1
00046D5C <PED.ab2@11835>   TST.b keepstring
00046D60 <PED.ab2@11836>    BNE 'l3
00046D66 <PED.ab2@11837>   CLR.b instring2
00046D6C <PED.ab2@11838>   MOVEA.l AL_0_5BA6,A0
00046D70 <PED.ab2@11839>   MOVE.w #0,d2
00046D74 <PED.ab2@11840>   MOVEM.l d0/d1,-(a7)
00046D7A <PED.ab2@11841>   CMP.l #0,a0
00046D7E <PED.ab2@11842>   BEQ 'l2b
00046D84 <PED.ab2@11844>     CMP.w comWord_ColumnsOffset,d2
00046D88 <PED.ab2@11845>     BGE 'l2b
00046D8A <PED.ab2@11846>     MOVE.b (a0)+,d0
00046D8E <PED.ab2@11847>     CMP.b #$22,d0
00046D92 <PED.ab2@11848>     BNE 'l2
00046D98 <PED.ab2@11849>     NOT.b instring2
00046D9A <PED.ab2@11851>     ADDQ.w #1,d2
00046D9E <PED.ab2@11852>   BRA 'l1
00046DA2 <PED.ab2@11854>   MOVEM.l (a7)+,d0/d1
00046DA8 <PED.ab2@11856>   ADDA.w comWord__AL_0_869A,A1                ;offset
00046DAE <PED.ab2@11857>   MOVE.w visiblecolumns,D4
00046DB6 <PED.ab2@11858>   MOVE.b $0(A1,D4.W),comByte__AL_0_8662
00046DBA <PED.ab2@11859>   MOVEM.l D4/A1,-(A7)
00046DC0 <PED.ab2@11860>   MOVE.b #$0,$0(A1,D4.W)
00046DC6 <PED.ab2@11861>   MOVEA.l expandstore,A2
00046DC8 <PED.ab2@11862>   MOVEA.l A1,A0
00046DCA <PED.ab2@11864>   EXT.l d0
00046DD0 <PED.ab2@11865>   DIVU fontwidth,d0
00046DD2 <PED.ab2@11868>   MOVE.b (A1)+,D2
00046DD6 <PED.ab2@11869>    BEQ.w JL_0_5CAA
00046DDA <PED.ab2@11870>     CMP.b #$22,d2
00046DDE <PED.ab2@11871>     BNE 'l10
00046DE4 <PED.ab2@11872>     NOT.b instring2
00046DEA <PED.ab2@11874>     TST.b instring2
00046DEE <PED.ab2@11875>     BNE 'l11
00046DF0 <PED.ab2@11876>     TST.b d2
00046DF4 <PED.ab2@11877>     BMI.w JL_0_5CAA                     ;morechar
00046DF6 <PED.ab2@11879>     MOVE.b D2,(A2)+
00046DFA <PED.ab2@11880>   BRA.b JL_0_5C9C
00046DFE <PED.ab2@11883>   MOVE.b #$0,(A2)
00046E04 <PED.ab2@11884>   CMPA.l expandstore,A2
00046E08 <PED.ab2@11885>    BEQ.w JL_0_5CE6
00046E0A <PED.ab2@11886>   MOVE.w D0,-(A7)
00046E10 <PED.ab2@11888>   MULU fontwidth,d0
00046E12 <PED.ab2@11889>   MOVEA.l A1,A2
00046E14 <PED.ab2@11890>   SUBA.l A0,A2
00046E16 <PED.ab2@11891>   MOVE.b D2,D4
00046E18 <PED.ab2@11892>   MOVE.w A2,D2
00046E1A <PED.ab2@11893>   MOVE.w D2,D5
00046E1C <PED.ab2@11894>   SUBQ.w #1,D2
00046E22 <PED.ab2@11895>   MOVE.w othercolor,D3
00046E28 <PED.ab2@11896>   MOVEA.l expandstore,A0
00046E2E <PED.ab2@11897>   JSR print_text
00046E30 <PED.ab2@11898>   MOVE.w (A7)+,D0
00046E32 <PED.ab2@11899>   MOVE.b D4,D2
00046E34 <PED.ab2@11900>   ADD.w D5,D0
00046E36 <PED.ab2@11901>   SUBQ.w #1,D0
00046E38 <PED.ab2@11902>   TST.b D2
00046E3C <PED.ab2@11903>    BEQ.w exit_print_tokenized_text
00046E3E <PED.ab2@11906>   TST.b D2
00046E42 <PED.ab2@11907>    BEQ.w exit_print_tokenized_text
00046E44 <PED.ab2@11909>   SUBQ.w #1,A1
00046E46 <PED.ab2@11910>   MOVEA.l A1,A0
00046E4C <PED.ab2@11911>   MOVEA.l expandstore,A2
00046E4E <PED.ab2@11912>   TST.b D2
00046E52 <PED.ab2@11913>    BPL.b JL_0_5C9C
00046E54 <PED.ab2@11916>     MOVE.b (A1)+,D2
00046E58 <PED.ab2@11917>     BEQ.w JL_0_5D0A
00046E5C <PED.ab2@11918>     BPL.w JL_0_5D0A
00046E60 <PED.ab2@11919>     BCLR #$7,D2
00046E62 <PED.ab2@11920>     MOVE.b D2,(A2)+
00046E66 <PED.ab2@11921>   BRA.b a_loop
00046E6A <PED.ab2@11924>   MOVE.b #$0,(A2)
00046E70 <PED.ab2@11925>   CMPA.l expandstore,A2
00046E74 <PED.ab2@11926>    BEQ.w exit_print_tokenized_text
00046E76 <PED.ab2@11928>   MOVE.w D0,-(A7)
00046E7C <PED.ab2@11930>   MULU fontwidth,d0
00046E7E <PED.ab2@11931>   MOVEA.l A1,A2
00046E80 <PED.ab2@11932>   SUBA.l A0,A2
00046E82 <PED.ab2@11933>   MOVE.b D2,D4
00046E84 <PED.ab2@11934>   MOVE.w A2,D2
00046E86 <PED.ab2@11935>   MOVE.w D2,D5
00046E88 <PED.ab2@11936>   SUBQ.w #1,D2
00046E8A <PED.ab2@11937>   MOVEQ.l #$00,D3
00046E90 <PED.ab2@11938>   MOVE.w tokencolor,D3               ; echte tokenfarbe
00046E96 <PED.ab2@11939>   MOVEA.l expandstore,A0
00046EA0 <PED.ab2@11940>   CMP.l #99,classiccolor
00046EA4 <PED.ab2@11941>   BEQ 'no2
00046EA8 <PED.ab2@11942>   MOVEM.l d0/d1/a1/a0,-(a7)
00046EAA <PED.ab2@11943>   MOVE.l a0,d0
00046EB0 <PED.ab2@11944>   JSR ascii_to_token
00046EB2 <PED.ab2@11945>   MOVE.l d0,-(a7)
00046EB4 <PED.ab2@11946>   ASR.l #7,d0
00046EBA <PED.ab2@11948>   LEA classiccommands,a0
00046EBC <PED.ab2@11950>     MOVE.w (a0)+,d1
00046EC0 <PED.ab2@11951>     BEQ 'nomore
00046EC2 <PED.ab2@11952>     CMP.w d1,d0
00046EC6 <PED.ab2@11953>   BNE 'again
00046ECC <PED.ab2@11954>   MOVE.l classiccolor,d3
00046ECE <PED.ab2@11956>   MOVE.l (a7)+,d0
00046ED0 <PED.ab2@11959>     MOVE.w (a0)+,d1
00046ED4 <PED.ab2@11960>     BEQ 'no2
00046ED6 <PED.ab2@11961>     CMP.w d0,d1
00046EDA <PED.ab2@11962>   BNE 'l2
00046EE0 <PED.ab2@11963>   MOVE.l classiccolor,d3
00046EE4 <PED.ab2@11965>   MOVEM.l (a7)+,d0/d1/a0/a1
00046EE8 <PED.ab2@11966>   MOVEM.l a6/d0-d1/a0/a1,-(a7)
00046EEE <PED.ab2@11967>   MOVE.l tokenbackground,D0
00046EF4 <PED.ab2@11968>   MOVEA.l _graphicsbase,A6
00046EFA <PED.ab2@11969>   MOVEA.l rp_sourcewindow,A1
00046EFE <PED.ab2@11970>   JSR _SetBPen(A6)
00046F04 <PED.ab2@11972>   TST.w bold_tokens
00046F08 <PED.ab2@11973>   BEQ.b 'no_bold
00046F0E <PED.ab2@11975>   MOVEA.l rp_sourcewindow,A1
00046F14 <PED.ab2@11976>   MOVEA.l ptr_sourcefontb,A0
00046F18 <PED.ab2@11977>   JSR _SetFont(A6)
00046F1E <PED.ab2@11979>   MOVEA.l rp_sourcewindow,A1
00046F24 <PED.ab2@11980>   MOVE.l #FSF_BOLD,D0
00046F2A <PED.ab2@11981>   MOVE.l #FSF_BOLD,D1
00046F2E <PED.ab2@11982>   JSR _SetSoftStyle(A6)
00046F32 <PED.ab2@11985>   MOVEM.l (a7),a6/d0-d1/a0/a1
00046F38 <PED.ab2@11986>   JSR print_text                     ; print token
00046F3E <PED.ab2@11987>   MOVE.l backgroundcolor,d0
00046F44 <PED.ab2@11988>   MOVEA.l _graphicsbase,A6
00046F4A <PED.ab2@11989>   MOVEA.l rp_sourcewindow,A1
00046F4E <PED.ab2@11990>   JSR _SetBPen(A6)
00046F54 <PED.ab2@11992>   TST.w bold_tokens
00046F58 <PED.ab2@11993>   BEQ.b 'no_bold2
00046F5E <PED.ab2@11995>   MOVEA.l rp_sourcewindow,A1
00046F64 <PED.ab2@11996>   MOVEA.l ptr_sourcefont,A0
00046F68 <PED.ab2@11997>   JSR _SetFont(A6)
00046F6E <PED.ab2@11999>   MOVEA.l rp_sourcewindow,A1
00046F74 <PED.ab2@12000>   MOVE.l #FS_NORMAL,D0
00046F7A <PED.ab2@12001>   MOVE.l #FSF_BOLD,D1
00046F7E <PED.ab2@12002>   JSR _SetSoftStyle(A6)
00046F82 <PED.ab2@12005>   MOVEM.l (a7)+,a6/d0-d1/a0/a1
00046F84 <PED.ab2@12006>   MOVE.w (A7)+,D0
00046F86 <PED.ab2@12007>   MOVE.b D4,D2
00046F88 <PED.ab2@12008>   ADD.w D5,D0
00046F8A <PED.ab2@12009>   SUBQ.w #1,D0
00046F8C <PED.ab2@12010>   TST.b D2
00046F90 <PED.ab2@12011>   BEQ.w exit_print_tokenized_text
00046F92 <PED.ab2@12012>   SUBQ.w #1,A1
00046F94 <PED.ab2@12013>   MOVEA.l A1,A0
00046F9A <PED.ab2@12014>   MOVEA.l expandstore,A2
00046F9E <PED.ab2@12015>   BRA.w JL_0_5C9C
00046FA2 <PED.ab2@12019>   MOVEM.l (A7)+,D4/A1
00046FAA <PED.ab2@12020>   MOVE.b comByte__AL_0_8662,$0(A1,D4.W)
00046FAC <PED.ab2@12021> RTS
00046FB0 <PED.ab2@12024>   MOVEM.l D0-D4/A0-A1/A4/A6,-(A7)
00046FB6 <PED.ab2@12025>   MOVEA.l _graphicsbase,A6
00046FBC <PED.ab2@12026>   CMP.l textlinestart,a0
00046FC0 <PED.ab2@12027>   BGE 'c1
00046FC6 <PED.ab2@12028>   MOVE.l textlinestart,d4
00046FC8 <PED.ab2@12029>   SUB.l a0,d4
00046FCA <PED.ab2@12030>   SUB.l d4,d2
00046FD0 <PED.ab2@12031>   MOVE.l textlinestart,a0
00046FD2 <PED.ab2@12032>   MOVEQ #0,d0
00046FD6 <PED.ab2@12033>   BRA 'c2
00046FDC <PED.ab2@12035>   SUB.w comWord_ColumnsOffset,d0
00046FDE <PED.ab2@12037>   MOVE.l A0,-(A7)
00046FE4 <PED.ab2@12038>   MOVE.l comLong_DisplayLine,D1
00046FEA <PED.ab2@12039>   MULU fontheight,D1
00046FEC <PED.ab2@12040>   MOVEQ #0,d4
00046FEE <PED.ab2@12041>   MOVE.w d0,d4
00046FF4 <PED.ab2@12043>   MULU fontwidth,d0
00046FFA <PED.ab2@12044>   ADD.w font_Baseline,D1
00047000 <PED.ab2@12045>   MOVEA.l rp_sourcewindow,A1
00047004 <PED.ab2@12046>   JSR _Move(A6)
00047006 <PED.ab2@12048>   MOVE.l (a7),a0
00047008 <PED.ab2@12049>   MOVE.l D3,D0
0004700E <PED.ab2@12050>   MOVEA.l rp_sourcewindow,A1
00047012 <PED.ab2@12051>   JSR _SetAPen(A6)
00047018 <PED.ab2@12059>   MOVEA.l rp_sourcewindow,A1
0004701A <PED.ab2@12060>   MOVEA.l (A7)+,A0
0004701C <PED.ab2@12061>   MOVE.l D2,D0
00047020 <PED.ab2@12062>   BMI 'x1
00047022 <PED.ab2@12063>   MOVE.l d4,d3
00047024 <PED.ab2@12064>   ADD.l d0,d4
0004702A <PED.ab2@12065>   CMP.w visiblecolumns,D4
0004702E <PED.ab2@12066>   BLE.w 'l1
00047034 <PED.ab2@12068>   MOVE.w visiblecolumns,D0
00047036 <PED.ab2@12069>   SUB.l d3,d0
0004703A <PED.ab2@12070>   BMI 'x1
0004703E <PED.ab2@12072>   JSR _Text(A6)
00047042 <PED.ab2@12080>   MOVEM.l (A7)+,D0-D4/A0-A1/A4/A6
00047044 <PED.ab2@12081> RTS
00047048 <PED.ab2@12091>   MOVEM.l D0-D2/A0-A1/A4/A6,-(A7)
0004704E <PED.ab2@12092>   MOVEA.l _graphicsbase,A6
00047050 <PED.ab2@12093>   MOVE.l A0,-(A7)
00047056 <PED.ab2@12094>   ADD.w font_Baseline,D1
0004705C <PED.ab2@12095>   MOVEA.l rp_sourcewindow,A1
00047060 <PED.ab2@12096>   JSR _Move(A6)
00047062 <PED.ab2@12098>   MOVE.l (a7),a0
00047064 <PED.ab2@12099>   MOVE.l D3,D0
0004706A <PED.ab2@12101>   MOVEA.l rp_sourcewindow,A1
0004706E <PED.ab2@12102>   JSR _SetAPen(A6)
00047074 <PED.ab2@12103>   MOVEA.l rp_sourcewindow,A1
00047076 <PED.ab2@12104>   MOVEA.l (A7)+,A0
00047078 <PED.ab2@12107>   MOVE.l D2,D0
0004707C <PED.ab2@12108>   BMI 'l1
00047082 <PED.ab2@12109>   CMP.w visiblecolumns,D0
00047086 <PED.ab2@12110>   BLE.w skip_clipping
0004708C <PED.ab2@12112>   MOVE.w visiblecolumns,D0
00047092 <PED.ab2@12115>   TST.l remarkcolor
00047096 <PED.ab2@12116>    BNE check_comments_basic
0004709C <PED.ab2@12117>   TST.l remarkbgcolor
000470A0 <PED.ab2@12118>    BNE check_comments_basic
000470A6 <PED.ab2@12121>   MOVEA.l rp_sourcewindow,A1
000470AA <PED.ab2@12122>   JSR _Text(A6)
000470AE <PED.ab2@12124>   MOVEM.l (A7)+,D0-D2/A0-A1/A4/A6
000470B0 <PED.ab2@12125> RTS
000470B2 <PED.ab2@12129>   MOVE.l a0,a4
000470B4 <PED.ab2@12130>   MOVE.l d0,-(a7)
000470B6 <PED.ab2@12133>   MOVE.l a0,-(a7)
000470E0 <PED.ab2@12134>   !basic
000470E4 <PED.ab2@12135>   str_length.w = PutD0
000470EA <PED.ab2@12136>   MOVE.l (a7)+,d0 : *textaddr.l = PutD0
000470F0 <PED.ab2@12138>   semi_position.w = 0
000470F6 <PED.ab2@12139>   in_string.b = 0
00047106 <PED.ab2@12140>   columnsoff.w = Peek.w(?comWord_ColumnsOffset)
0004712E <PED.ab2@12151>     mytext$ = Peek$(*textaddr)
00047134 <PED.ab2@12155>   CLR.w semipos
0004718C <PED.ab2@12157>   semi_position = Instr(mytext$,";",semi_position+1)
0004719A <PED.ab2@12158>   If semi_position > 0
000471A0 <PED.ab2@12161>     acount.b = 0
000471CA <PED.ab2@12162>     For i = 1 To semi_position
0004723E <PED.ab2@12163>       If Mid$(mytext$,i,1)=Chr$($22) Then acount + 1
0004724E <PED.ab2@12164>     Next i
00047268 <PED.ab2@12165>     If (acount MOD 2) = 1
0004726E <PED.ab2@12167>       semi_position = 0
00047274 <PED.ab2@12168>     Else
000472DC <PED.ab2@12169>       If Mid$(mytext$,semi_position+1,2)=":@"
000472E2 <PED.ab2@12171>         Goto search_again
00047300 <PED.ab2@12174>     If semi_position<=str_length Then Poke.w ?semipos,semi_position
0004731E <PED.ab2@12176>   !asm
00047320 <PED.ab2@12177>   MOVE.l (a7)+,d0
00047322 <PED.ab2@12178>   MOVE.l d0,d2
00047324 <PED.ab2@12179>   MOVE.l a4,a0
0004732A <PED.ab2@12180>   TST.w semipos
0004732E <PED.ab2@12181>    BNE semifound
00047332 <PED.ab2@12182> BRA exit_check_comments
00047338 <PED.ab2@12247>   MOVE.w semipos,d0
0004733C <PED.ab2@12249>   CMP.w #1,d0
00047340 <PED.ab2@12250>    BLT skip_sub
00047348 <PED.ab2@12251>   SUB.w #1,semipos
0004734E <PED.ab2@12252>   MOVE.w semipos,d0
00047350 <PED.ab2@12255>   MOVE.l a4,a0
00047352 <PED.ab2@12256>   MOVE.l d0,-(a7)
00047358 <PED.ab2@12257>   MOVEA.l rp_sourcewindow,A1
0004735C <PED.ab2@12258>   JSR _Text(A6)
0004735E <PED.ab2@12261>   MOVEQ #0,d0
00047364 <PED.ab2@12262>   MOVE.l remarkcolor,D0
0004736A <PED.ab2@12263>   MOVEA.l rp_sourcewindow,A1
0004736E <PED.ab2@12264>   JSR _SetAPen(A6)
00047374 <PED.ab2@12265>   MOVE.l remarkbgcolor,D0
0004737A <PED.ab2@12266>   MOVEA.l rp_sourcewindow,A1
0004737E <PED.ab2@12267>   JSR _SetBPen(A6)
00047384 <PED.ab2@12270>   TST.w italic_remarks
00047388 <PED.ab2@12271>   BEQ.b 'no_italic
0004738E <PED.ab2@12274>   MOVEA.l rp_sourcewindow,A1
00047394 <PED.ab2@12275>   MOVEA.l ptr_sourcefonti,A0
00047398 <PED.ab2@12276>   JSR _SetFont(a6)
0004739E <PED.ab2@12277>   MOVEA.l rp_sourcewindow,A1
000473A4 <PED.ab2@12278>   MOVE.l #FSF_ITALIC,D0
000473AA <PED.ab2@12279>   MOVE.l #FSF_ITALIC,D1
000473AE <PED.ab2@12280>   JSR _SetSoftStyle(A6)
000473B0 <PED.ab2@12285>   MOVE.l (a7)+,d0
000473B2 <PED.ab2@12286>   SUB.l d0,d2
000473B6 <PED.ab2@12287>   LEA 0(a4,d0),a0
000473B8 <PED.ab2@12288>   MOVE.l d2,d0
000473BE <PED.ab2@12289>   MOVEA.l rp_sourcewindow,A1
000473C2 <PED.ab2@12290>   JSR _Text(A6)
000473C8 <PED.ab2@12293>   MOVE.l backgroundcolor,D0
000473CE <PED.ab2@12294>   MOVEA.l rp_sourcewindow,A1
000473D2 <PED.ab2@12295>   JSR _SetBPen(A6)
000473D8 <PED.ab2@12298>   TST.w italic_remarks
000473DC <PED.ab2@12299>   BEQ.b 'no_italic2
000473E2 <PED.ab2@12301>   MOVEA.l rp_sourcewindow,A1
000473E8 <PED.ab2@12302>   MOVEA.l ptr_sourcefont,A0
000473EC <PED.ab2@12303>   JSR _SetFont(a6)
000473F2 <PED.ab2@12305>   MOVEA.l rp_sourcewindow,A1
000473F8 <PED.ab2@12306>   MOVE.l #FS_NORMAL,D0
000473FE <PED.ab2@12307>   MOVE.l #FSF_ITALIC,D1
00047402 <PED.ab2@12308>   JSR _SetSoftStyle(A6)
00047406 <PED.ab2@12313>   MOVEM.l (A7)+,D0-D2/A0-A1/A4/A6
00047408 <PED.ab2@12314> RTS
0004740E <PED.ab2@12318>   MOVEA.l _graphicsbase,A6
00047414 <PED.ab2@12319>   MOVEA.l AL_0_5BAA,A1
0004741A <PED.ab2@12320>   MOVE.w comWord_MaxColumns,D3
0004741C <PED.ab2@12323>     MOVE.b (A0)+,(A1)+
00047420 <PED.ab2@12324>     BEQ.w JL_0_5Dca2
00047424 <PED.ab2@12325>   DBF D3,JL_0_5DB8
0004742A <PED.ab2@12328>   MOVE.b #$0,-$1(A1)
00047430 <PED.ab2@12329>   MOVEA.l rp_sourcewindow,A1
00047434 <PED.ab2@12330>   ANDI.w #$FFFF,D1
0004743A <PED.ab2@12331>   ADD.w font_Baseline,D1
0004743C <PED.ab2@12332>   SUBQ.w #1,D1
00047440 <PED.ab2@12333>   JSR _Move(A6)
00047446 <PED.ab2@12335>   MOVEA.l rp_sourcewindow,A1
00047448 <PED.ab2@12336>   MOVEQ #0,d0
0004744E <PED.ab2@12337>   MOVE.w othercolor,D0
00047452 <PED.ab2@12338>   JSR _SetAPen(A6)
00047458 <PED.ab2@12340>   MOVEA.l rp_sourcewindow,A1
0004745E <PED.ab2@12341>   MOVEA.l AL_0_5BAA,A0
00047464 <PED.ab2@12342>   ADDA.w comWord__AL_0_869A,A0
00047466 <PED.ab2@12343>   MOVEQ.l #$00,D0
0004746C <PED.ab2@12344>   MOVE.w comWord_MaxColumns,D0
0004746E <PED.ab2@12345>   ADDQ.w #1,D3
00047470 <PED.ab2@12346>   SUB.w D3,D0
00047472 <PED.ab2@12347>   ADDQ.w #1,D0
00047478 <PED.ab2@12348>   SUB.w comWord__AL_0_869A,D0
0004747E <PED.ab2@12349>   CMP.w visiblecolumns,D0
00047482 <PED.ab2@12350>   BLE.w JL_0_5E1C
00047488 <PED.ab2@12351>   MOVE.w visiblecolumns,D0
0004748A <PED.ab2@12354>   MOVE.l D0,-(A7)
0004748E <PED.ab2@12355>   JSR _Text(A6)
00047490 <PED.ab2@12357>   MOVE.l (A7)+,D0
00047492 <PED.ab2@12358> RTS
00047498 <PED.ab2@12363>   CMPA.l #$0,A2
0004749C <PED.ab2@12364>   BNE.w JL_0_5E32
0004749E <PED.ab2@12365>   RTS
000474A2 <PED.ab2@12368>   LEA $9(A2),A2
000474A8 <PED.ab2@12369>   MOVEA.l textbufferaddr,A3
000474AE <PED.ab2@12370>   ADDA.w comWord_TextBufferOffset,A3
000474B0 <PED.ab2@12371>   TST.b (A2)
000474B4 <PED.ab2@12372>    BEQ.w JL_0_5E72
000474B8 <PED.ab2@12374>   MOVEM.l D1/A0-A3/A6,-(A7)
000474BA <PED.ab2@12375>   MOVEA.l A2,A0
000474BC <PED.ab2@12376>   MOVEQ.l #$00,D0
000474BE <PED.ab2@12377>   MOVEQ.l #$00,D1
000474C4 <PED.ab2@12378>   MOVE.l comLong_DisplayLine,D1
000474CA <PED.ab2@12379>   MULU fontheight,D1
000474D4 <PED.ab2@12380>   MOVE.w comWord_ColumnsOffset,comWord__AL_0_869A
000474DE <PED.ab2@12381>   MOVE.l AL_0_5BAA,templine
000474E4 <PED.ab2@12382>   JSR print_complete_line
000474EA <PED.ab2@12383>   CLR.l templine
000474EE <PED.ab2@12384>   MOVEM.l (A7)+,D1/A0-A3/A6
000474F4 <PED.ab2@12385>   MOVEA.l AL_0_5BAA,A2
000474F8 <PED.ab2@12386>   BRA.w JL_0_5E78
000474FE <PED.ab2@12391>   MOVE.l backgroundcolor,d0 ;: ADD.l #2,d0
00047504 <PED.ab2@12392>   MOVEA.l _graphicsbase,A6
0004750A <PED.ab2@12393>   MOVEA.l rp_sourcewindow,A1
0004750E <PED.ab2@12394>   JSR _SetAPen(A6)
00047514 <PED.ab2@12395>   MOVEA.l _graphicsbase,A6
0004751A <PED.ab2@12396>   MOVEA.l rp_sourcewindow,A1
0004751E <PED.ab2@12397>   MOVE.w #0,D0
00047524 <PED.ab2@12398>   MOVE.l comLong_DisplayLine,D1
0004752A <PED.ab2@12399>   MULU fontheight,D1
00047530 <PED.ab2@12400>   MOVE.w win_InnerWidth,D2
00047532 <PED.ab2@12401>   MOVE.w D1,D3
00047538 <PED.ab2@12402>   ADD.w  font_Heightm1,D3            ;font_Heightm1
0004753C <PED.ab2@12403>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00047542 <PED.ab2@12405>   MOVEA.l _graphicsbase,A6           ; move to next line
00047548 <PED.ab2@12406>   MOVEA.l rp_sourcewindow,A1
0004754C <PED.ab2@12407>   MOVE.w #0,D0
00047552 <PED.ab2@12408>   MOVE.l comLong_DisplayLine,D1
00047558 <PED.ab2@12409>   MULU fontheight,D1
0004755E <PED.ab2@12410>   ADD.w  fontheight,D1
00047562 <PED.ab2@12411>   JSR _Move(a6)
00047568 <PED.ab2@12413>   MOVEA.l AL_0_5BAA,A2
0004756A <PED.ab2@12414>   CLR.l (A2)
00047570 <PED.ab2@12416>   MOVE.w comWord_Column,-(A7)
00047572 <PED.ab2@12417>   MOVEQ.l #$00,D3
00047574 <PED.ab2@12418>   MOVEQ.l #$00,D2
00047576 <PED.ab2@12419>   MOVE.b (A2)+,D0
0004757A <PED.ab2@12420>    BEQ.w JL_0_5EA0
00047580 <PED.ab2@12421>   CMP.b comByte_LabelIdentifier,D0
00047584 <PED.ab2@12422>   BNE.w JL_0_5E9A
0004758A <PED.ab2@12423>   JSR JL_0_5EE0
0004758C <PED.ab2@12426>     ADDQ.w #1,D2
0004758E <PED.ab2@12427>     MOVE.b (A2)+,D0                  ;copy to viewbuffer
00047592 <PED.ab2@12428>     BEQ.w JL_0_5EA0
00047598 <PED.ab2@12430>     JSR JL_0_5EE0
0004759C <PED.ab2@12431>   BRA.b JL_0_5E92
000475A2 <PED.ab2@12435>   TST.l stringcolor
000475A6 <PED.ab2@12436>   BEQ ready
000475AA <PED.ab2@12437>   MOVEM.l a2/d2/a1,-(a7)
000475AC <PED.ab2@12438>   SUBQ.l #1,a2
000475AE <PED.ab2@12439>   MOVE.l a2,a0
000475B0 <PED.ab2@12440>   MOVE.l d2,d1
000475B2 <PED.ab2@12441>   MOVEQ #0,d0
000475B6 <PED.ab2@12442>   BRA 'l1
000475B8 <PED.ab2@12444>     MOVE.b (a2),d0
000475BC <PED.ab2@12445>     CMP.b #$22,d0
000475C0 <PED.ab2@12446>     BEQ 'l3
000475C2 <PED.ab2@12448>     ADDQ #1,d2
000475C6 <PED.ab2@12449>     CMP.w #MAX_Columns,d2            ; check the full line
000475CA <PED.ab2@12450>     BEQ 'r1
000475CC <PED.ab2@12451>     ADDQ #1,a2
000475D0 <PED.ab2@12452>   BRA 'l2b
000475D2 <PED.ab2@12454>   ADDQ #1,d2
000475D4 <PED.ab2@12455>   SUB.l d1,d2
000475D6 <PED.ab2@12456>   MOVE.l d1,d0
000475DC <PED.ab2@12457>   MOVE.l stringcolor,d3
000475E2 <PED.ab2@12458>   MOVE.l #0,D5
000475E6 <PED.ab2@12459>   BSR print_hightlight
000475E8 <PED.ab2@12460>   SUBQ.l #1,d2
000475EC <PED.ab2@12461>   ADD.l d2,0(a7)
000475F0 <PED.ab2@12462>   ADD.l d2,8(a7)
000475F4 <PED.ab2@12465>   MOVEM.l (a7)+,d2/a2/a1
000475FA <PED.ab2@12466>   CLR.b instring
000475FE <PED.ab2@12467> BRA ready
00047604 <PED.ab2@12471>   TST.l macrocolor
00047608 <PED.ab2@12472>   BEQ ready
0004760C <PED.ab2@12473>   MOVEM.l a2/d2/a1,-(a7)
0004760E <PED.ab2@12474>   SUBQ.l #1,a2
00047610 <PED.ab2@12475>   MOVE.l a2,a0
00047612 <PED.ab2@12476>   MOVE.l d2,d1
00047618 <PED.ab2@12478>     LEA chartab,a1
0004761A <PED.ab2@12479>     MOVEQ #0,d0
0004761C <PED.ab2@12480>     MOVE.b (a2),d0
00047620 <PED.ab2@12481>     TST.b 0(a1,d0)
00047624 <PED.ab2@12482>     BNE 'l3
00047626 <PED.ab2@12484>     ADDQ #1,d2
0004762A <PED.ab2@12485>     CMP.w #MAX_Columns,d2            ; check the full line
0004762E <PED.ab2@12486>     BEQ 'r1
00047630 <PED.ab2@12487>     ADDQ #1,a2
00047634 <PED.ab2@12488>   BRA 'l2b
00047636 <PED.ab2@12490>   SUB.l d1,d2
00047638 <PED.ab2@12491>   MOVE.l d1,d0
0004763E <PED.ab2@12492>   MOVE.l macrocolor,d3
00047644 <PED.ab2@12493>   MOVE.l #0,D5
00047648 <PED.ab2@12494>   BSR print_hightlight
0004764C <PED.ab2@12497>   MOVEM.l (a7)+,d2/a2/a1
00047652 <PED.ab2@12498>   CLR.b instring
00047656 <PED.ab2@12499> BRA ready
0004765C <PED.ab2@12502>   TST.l newtypecolor
00047660 <PED.ab2@12503>   BEQ ready
00047664 <PED.ab2@12504>   MOVEM.l a2/d2/a1,-(a7)
00047666 <PED.ab2@12505>   SUBQ.l #1,a2
00047668 <PED.ab2@12506>   MOVE.l a2,a0
0004766A <PED.ab2@12507>   MOVE.l d2,d1
00047670 <PED.ab2@12509>     LEA chartab,a1
00047672 <PED.ab2@12510>     MOVEQ #0,d0
00047674 <PED.ab2@12511>     MOVE.b (a2),d0
00047678 <PED.ab2@12512>     CMP.b #$22,d0
0004767C <PED.ab2@12513>     BNE 'ls1
00047682 <PED.ab2@12514>     NOT.b instring
00047688 <PED.ab2@12516>     TST.b instring
0004768C <PED.ab2@12517>     BNE 'l1
00047690 <PED.ab2@12518>     CMP.b #"\",d0
00047694 <PED.ab2@12519>     BEQ 'l1
00047698 <PED.ab2@12520>     TST.b 0(a1,d0)
0004769C <PED.ab2@12521>     BNE 'l3
0004769E <PED.ab2@12523>     ADDQ #1,d2
000476A2 <PED.ab2@12524>     CMP.w #MAX_Columns,d2
000476A6 <PED.ab2@12525>     BEQ 'r1
000476A8 <PED.ab2@12526>     ADDQ #1,a2
000476AC <PED.ab2@12527>   BRA 'l2b
000476AE <PED.ab2@12529>   SUB.l d1,d2
000476B0 <PED.ab2@12530>   MOVE.l d1,d0
000476B6 <PED.ab2@12531>   MOVE.l newtypecolor,d3
000476BC <PED.ab2@12532>   MOVE.l #0,D5
000476C0 <PED.ab2@12533>   BSR print_hightlight
000476C4 <PED.ab2@12536>   MOVEM.l (a7)+,d2/a2/a1
000476CA <PED.ab2@12537>   CLR.b instring
000476CE <PED.ab2@12538> BRA ready
000476D4 <PED.ab2@12541>   TST.l constantcolor
000476D8 <PED.ab2@12542>   BEQ ready
000476DC <PED.ab2@12543>   MOVEM.l a2/d2/a1,-(a7)
000476DE <PED.ab2@12544>   SUBQ.l #1,a2
000476E0 <PED.ab2@12545>   MOVE.l a2,a0
000476E2 <PED.ab2@12546>   MOVE.l d2,d1
000476E8 <PED.ab2@12548>     LEA chartab,a1
000476EA <PED.ab2@12549>     MOVEQ #0,d0
000476EC <PED.ab2@12550>     MOVE.b (a2),d0
000476F0 <PED.ab2@12551>     CMP.b #$22,d0
000476F4 <PED.ab2@12552>     BNE 'ls1
000476FA <PED.ab2@12553>     NOT.b instring
00047700 <PED.ab2@12555>     TST.b instring
00047704 <PED.ab2@12556>     BNE 'l1
00047708 <PED.ab2@12557>     CMP.b #"$",d0
0004770C <PED.ab2@12558>     BEQ 'l1
00047710 <PED.ab2@12559>     CMP.b #"%",d0
00047714 <PED.ab2@12560>     BEQ 'l1
00047718 <PED.ab2@12561>     CMP.b #"-",d0
0004771C <PED.ab2@12563>     TST.b 0(a1,d0)
00047720 <PED.ab2@12564>     BNE 'l3
00047722 <PED.ab2@12566>     ADDQ #1,d2
00047726 <PED.ab2@12567>     CMP.w #MAX_Columns,d2
0004772A <PED.ab2@12568>     BEQ 'r1
0004772C <PED.ab2@12569>     ADDQ #1,a2
00047730 <PED.ab2@12570>   BRA 'l2b
00047732 <PED.ab2@12572>   SUB.l d1,d2
00047734 <PED.ab2@12573>   MOVE.l d1,d0
0004773A <PED.ab2@12574>   MOVE.l constantcolor,d3
00047740 <PED.ab2@12575>   MOVE.l #1,D5
00047744 <PED.ab2@12576>   BSR print_hightlight
00047748 <PED.ab2@12579>   MOVEM.l (a7)+,d2/a2/a1
0004774E <PED.ab2@12580>   CLR.b instring
00047752 <PED.ab2@12581> BRA ready
00047758 <PED.ab2@12584>   TST.l functioncolor
0004775C <PED.ab2@12585>   BEQ ready
00047760 <PED.ab2@12586>   MOVEM.l a2/d2,-(a7)
00047762 <PED.ab2@12587>   SUBQ.w #1,a2
00047764 <PED.ab2@12588>   SUBQ.w #1,a2
00047768 <PED.ab2@12590>     CMP.b #32,(a2)
0004776C <PED.ab2@12591>     BNE 'l1
0004776E <PED.ab2@12592>     SUBQ #1,a2
00047770 <PED.ab2@12593>     SUBQ #1,d2
00047774 <PED.ab2@12594>     BEQ dofr1
00047778 <PED.ab2@12595>   BRA 'l2
0004777A <PED.ab2@12597>   MOVE.l d2,d1
00047780 <PED.ab2@12599>     LEA chartab,a0
00047782 <PED.ab2@12600>     MOVE.b (a2),d0
00047786 <PED.ab2@12601>     CMP.b #"!",d0
0004778A <PED.ab2@12602>     BEQ dofr1
0004778E <PED.ab2@12603>     TST.b 0(a0,d0)
00047792 <PED.ab2@12604>     BNE 'l3
00047794 <PED.ab2@12605>     SUBQ #1,d2
00047798 <PED.ab2@12606>     BEQ 'l3b
0004779A <PED.ab2@12607>     SUBQ #1,a2
0004779E <PED.ab2@12608>   BRA 'l2b
000477A0 <PED.ab2@12610>   ADDQ #1,a2
000477A4 <PED.ab2@12612>   CMP.b #$21,d0
000477A8 <PED.ab2@12613>   BEQ dofr1
000477AA <PED.ab2@12614>   SUB.l d2,d1
000477AC <PED.ab2@12615>   MOVE.l d2,d0
000477AE <PED.ab2@12616>   MOVE.l d1,d2
000477B0 <PED.ab2@12617>   MOVE.l a2,a0
000477B6 <PED.ab2@12630>   MOVE.l functioncolor,d3
000477BC <PED.ab2@12631>   MOVE.l #0,D5
000477C0 <PED.ab2@12632>   BSR print_hightlight
000477C4 <PED.ab2@12634>   MOVEM.l (a7)+,d2/a2
000477C8 <PED.ab2@12635> BRA ready
000477CC <PED.ab2@12638>   MOVEM.l a2/d2,-(a7)
000477D2 <PED.ab2@12639>   CLR.b instring
000477D8 <PED.ab2@12640>   MOVEA.l textbufferaddr,A0
000477DE <PED.ab2@12641>   ADDA.w comWord_TextBufferOffset,A0
000477E0 <PED.ab2@12642>   MOVE.l a0,a2
000477E6 <PED.ab2@12643>   MOVE.l a2,textlinestart
000477E8 <PED.ab2@12644>   MOVEQ #0,d0
000477EE <PED.ab2@12645>   MOVE.w comWord_ColumnsOffset,d0
000477F4 <PED.ab2@12646>   ADD.l d0,textlinestart
000477F6 <PED.ab2@12647>   MOVEQ #0,d2
000477F8 <PED.ab2@12649>     MOVE.b (a2)+,d0
000477FC <PED.ab2@12650>     CMP.b #";",d0
00047800 <PED.ab2@12651>     BEQ skipsyntax
00047804 <PED.ab2@12652>     CMP.b #$22,d0
00047808 <PED.ab2@12653>     BEQ dostring
0004780C <PED.ab2@12658>     CMP.b #"{",d0
00047810 <PED.ab2@12659>     BEQ dofunction
00047814 <PED.ab2@12660>     CMP.b #"!",d0
00047818 <PED.ab2@12661>     BEQ domacro
0004781C <PED.ab2@12663>     CMP.b #"#",d0
00047820 <PED.ab2@12664>     BEQ doconstant
00047824 <PED.ab2@12665>     CMP.b #"\",d0
00047828 <PED.ab2@12666>     BEQ donewtype
0004782A <PED.ab2@12668>     ADDQ.l #1,d2
0004782E <PED.ab2@12669>     CMP.w #MAX_Columns,d2
00047832 <PED.ab2@12670>   BLE hl1
00047838 <PED.ab2@12672>   CLR.b instring
0004783C <PED.ab2@12674>   MOVEM.l (a7)+,a2/d2
0004783E <PED.ab2@12675> RTS
00047842 <PED.ab2@12678>   BSR process_highlightning
0004784C <PED.ab2@12679>   CMPI.l #$ffffFFFF,comLong_BlockEndY
00047850 <PED.ab2@12680>    BEQ.w JL_0_5ED8
00047856 <PED.ab2@12681>   MOVE.l comLong_DisplayLineOffset,D0
0004785C <PED.ab2@12682>   ADD.l comLong_DisplayLine,D0
00047862 <PED.ab2@12683>   CMP.l comLong_BlockStartY,D0
00047866 <PED.ab2@12684>    BCS.w JL_0_5ED8
0004786C <PED.ab2@12685>   CMP.l comLong_BlockEndY,D0
00047870 <PED.ab2@12686>    BHI.w JL_0_5ED8
00047876 <PED.ab2@12689>     CMP.w visiblecolumns,D3
0004787A <PED.ab2@12690>     BCC.w JL_0_5ED8
0004787C <PED.ab2@12691>     MOVEQ.l #$20,D0
00047882 <PED.ab2@12692>     MOVE.w D3,comWord_Column
00047884 <PED.ab2@12693>     ADDQ.w #1,D3
00047888 <PED.ab2@12694>   BRA.b JL_0_5EC4
0004788E <PED.ab2@12697>   MOVE.w (A7)+,comWord_Column
00047890 <PED.ab2@12698> RTS
00047894 <PED.ab2@12703>   MOVE.b D0,$0(A3,D2.W)
0004789A <PED.ab2@12705>   CMP.w comWord_ColumnsOffset,D2
0004789E <PED.ab2@12706>    BCS.w JL_0_5EFC
000478A4 <PED.ab2@12707>   CMP.w visiblecolumns,D3
000478A8 <PED.ab2@12708>    BCC.w JL_0_5EFC
000478AE <PED.ab2@12709>   MOVE.w D3,comWord_Column
000478B0 <PED.ab2@12710>   ADDQ.w #1,D3
000478B2 <PED.ab2@12712> RTS
000478B8 <PED.ab2@12715>   TST.w comWord_DoTokenize
000478BC <PED.ab2@12716>    BEQ.b JL_0_5EE0
000478BE <PED.ab2@12717>   TST.b D0
000478C2 <PED.ab2@12718>    BPL.b JL_0_5EE0
000478C4 <PED.ab2@12719>   LSL.w #8,D0
000478C6 <PED.ab2@12720>   MOVE.b (A2)+,D0
000478C8 <PED.ab2@12721>   EXG.l A5,A3
000478CE <PED.ab2@12722>    JSR token_to_ascii
000478D0 <PED.ab2@12723>   EXG.l A5,A3
000478D2 <PED.ab2@12726>     MOVE.b (A5)+,D0
000478D6 <PED.ab2@12727>     BEQ.w JL_0_5F2C
000478DA <PED.ab2@12728>     MOVE.b D0,$0(A3,D2.W)
000478E0 <PED.ab2@12729>     BSET #$7,$0(A3,D2.W)
000478E4 <PED.ab2@12730>     BSR.b JL_0_5EE4
000478E6 <PED.ab2@12731>     ADDQ.w #1,D2
000478EA <PED.ab2@12732>   BRA.b JL_0_5F16
000478EC <PED.ab2@12735>   SUBQ.w #1,D2
000478EE <PED.ab2@12736> RTS
000478F4 <PED.ab2@12739>   MOVEA.l comPtr_Temp_TokenString1,A1
000478F6 <PED.ab2@12740>   MOVE.l A1,-(A7)
000478FC <PED.ab2@12741>   MOVE.w comWord_MaxColumns,D1
000478FE <PED.ab2@12742>   SUBQ.w #1,D1
00047904 <PED.ab2@12743>   MOVE.w comWord_DoTokenize,D0
00047908 <PED.ab2@12744>   BNE.w JL_0_5F68
0004790A <PED.ab2@12746>   MOVEA.l A1,A0
0004790C <PED.ab2@12748>     MOVE.b (A2)+,(A0)+
00047912 <PED.ab2@12749>     CMPI.b #$20,-$1(A0)
00047916 <PED.ab2@12750>      BEQ.w JL_0_5F56
00047918 <PED.ab2@12751>     MOVEA.l A0,A1
0004791C <PED.ab2@12753>   DBF D1,JL_0_5F48
0004791E <PED.ab2@12756>   CLR.b (A1)+
00047920 <PED.ab2@12757>   MOVE.l A1,D5
00047922 <PED.ab2@12758>   SUB.l (A7)+,D5
00047924 <PED.ab2@12759>   RTS
00047926 <PED.ab2@12762>   MOVE.l A1,-(A7)
0004792A <PED.ab2@12763>   BRA.w JL_0_5F72
00047930 <PED.ab2@12766>   CMPI.b #$20,$0(A2,D1.W)
00047934 <PED.ab2@12767>   BNE.w JL_0_5F7E
00047936 <PED.ab2@12770>   SUBQ.w #1,D1
0004793A <PED.ab2@12771>    BPL.b JL_0_5F68
0004793C <PED.ab2@12772>   ADDQ.w #4,A7
0004793E <PED.ab2@12773>   CLR.b (A1)
00047940 <PED.ab2@12774>   MOVEQ.l #$01,D5
00047942 <PED.ab2@12775>   RTS
00047944 <PED.ab2@12778>   MOVE.l A4,-(A7)
00047946 <PED.ab2@12779>   MOVEQ.l #$00,D0
0004794C <PED.ab2@12780>   MOVE.w D0,comWord__AL_0_86B8
00047952 <PED.ab2@12781>   CLR.b instring2
00047954 <PED.ab2@12784>     MOVE.b (A2)+,D2
00047958 <PED.ab2@12785>     CMP.b #$22,d2
0004795C <PED.ab2@12786>     BNE 'l10
00047962 <PED.ab2@12787>     NOT.b instring2
00047968 <PED.ab2@12789>     TST.b instring2
0004796C <PED.ab2@12790>     BNE 'l11
00047970 <PED.ab2@12792>     BCLR #$7,D2                      ;morechar
00047976 <PED.ab2@12794>     CMP.b comByte__L_0_8BCD,D2
0004797A <PED.ab2@12795>     BNE.w JL_0_5FA2
00047980 <PED.ab2@12798>     NOT.w comWord__AL_0_86B8
00047986 <PED.ab2@12801>     JSR JL_0_60B2
0004798A <PED.ab2@12802>     BRA.b JL_0_5F88
00047990 <PED.ab2@12805>     MOVE.w comWord__AL_0_86B8,D4
00047994 <PED.ab2@12806>     BNE.b JL_0_5F9C
0004799A <PED.ab2@12807>     JSR JL_0_60C6
0004799E <PED.ab2@12808>     BEQ.w JL_0_6030
000479A2 <PED.ab2@12811>     CMP.b #$30,d2                    ;number 0-9
000479A6 <PED.ab2@12812>      BLT 'l10
000479AA <PED.ab2@12813>     CMP.b #$39,d2
000479AE <PED.ab2@12814>      BGT 'l10
000479B2 <PED.ab2@12815>     BRA JL_0_6066
000479B6 <PED.ab2@12817>     CMP.b #"_",D2
000479BA <PED.ab2@12818>      BEQ.w JL_0_6066
000479BE <PED.ab2@12819>     CMP.b #$2E,D2
000479C2 <PED.ab2@12820>      BEQ.w JL_0_6066
000479C6 <PED.ab2@12821>     CMP.b #"\",D2
000479CA <PED.ab2@12822>      BEQ.w JL_0_6066
000479D0 <PED.ab2@12823>     CMP.b comByte__L_0_8BCF,D2
000479D4 <PED.ab2@12824>      BNE.w JL_0_5FDC
000479DA <PED.ab2@12827>       JSR JL_0_60B2
000479DC <PED.ab2@12828>       MOVE.b (A2)+,D2
000479E0 <PED.ab2@12829>       BCLR #$7,D2
000479E4 <PED.ab2@12830>     BRA.b JL_0_5FD0
000479E8 <PED.ab2@12833>     CMP.b #"'",d2
000479EC <PED.ab2@12834>      BEQ JL_0_5FE4
000479F0 <PED.ab2@12835>     CMP.b #"#",D2
000479F4 <PED.ab2@12836>      BEQ.w JL_0_5FE4                 ;jump notokenize
000479F8 <PED.ab2@12837>     CMP.b #"$",D2                    ;tokenize $ #
000479FC <PED.ab2@12838>      BNE.w JL_0_6018
00047A02 <PED.ab2@12841>       JSR JL_0_60B2
00047A04 <PED.ab2@12842>       MOVE.b (A2)+,D2
00047A08 <PED.ab2@12843>       BCLR #$7,D2
00047A0C <PED.ab2@12844>       CMP.b #$22,d2
00047A10 <PED.ab2@12845>       BNE 'l10
00047A14 <PED.ab2@12846>       BRA JL_0_5FE4
00047A18 <PED.ab2@12848>       CMP.b #"_",d2
00047A1C <PED.ab2@12849>        BEQ JL_0_5FE4
00047A20 <PED.ab2@12850>       CMP.b #"0",D2
00047A24 <PED.ab2@12851>        BCS.w JL_0_6018
00047A28 <PED.ab2@12852>       CMP.b #"z",D2                  ;f
00047A2C <PED.ab2@12853>        BHI.w JL_0_6018
00047A30 <PED.ab2@12854>       CMP.b #"9",D2
00047A34 <PED.ab2@12855>        BLS.b JL_0_5FE4
00047A38 <PED.ab2@12856>       CMP.b #"A",D2
00047A3C <PED.ab2@12857>        BCS.w JL_0_6018
00047A40 <PED.ab2@12858>       CMP.b #"a",D2
00047A44 <PED.ab2@12859>        BCC.b JL_0_5FE4
00047A48 <PED.ab2@12860>       CMP.b #"Z",D2                  ;F
00047A4C <PED.ab2@12861>     BLS.b JL_0_5FE4
00047A52 <PED.ab2@12864>     JSR JL_0_60B2
00047A54 <PED.ab2@12865>     MOVE.b (A2)+,D2
00047A58 <PED.ab2@12866>     CMP.b #$22,d2
00047A5C <PED.ab2@12867>      BNE 'l10
00047A62 <PED.ab2@12868>     NOT.b instring2
00047A68 <PED.ab2@12870>     TST.b instring2
00047A6C <PED.ab2@12871>      BNE 'l11
00047A70 <PED.ab2@12872>     BCLR #$7,D2                      ;morechar
00047A76 <PED.ab2@12874>     CMP.b comByte__L_0_8BCD,D2
00047A7A <PED.ab2@12875>      BEQ.w JL_0_5F96
00047A80 <PED.ab2@12876>     JSR JL_0_60C6
00047A84 <PED.ab2@12877>     BNE.b JL_0_5FB0
00047A86 <PED.ab2@12880>     SUBQ.w #1,A2
00047A8C <PED.ab2@12881>     MOVEA.l comPtr_TokenBase,A3
00047A8E <PED.ab2@12884>     MOVEA.l A2,A4
00047A90 <PED.ab2@12885>     MOVE.l A3,-(A7)
00047A92 <PED.ab2@12886>     ADDQ.w #6,A3
00047A94 <PED.ab2@12889>     MOVE.b (A3)+,D3
00047A98 <PED.ab2@12890>      BEQ.w JL_0_6082
00047A9A <PED.ab2@12891>     MOVE.b (A4)+,D2
00047A9E <PED.ab2@12892>     BCLR #$7,D2
00047AA2 <PED.ab2@12893>     ORI.b #$20,D3
00047AA6 <PED.ab2@12894>     ORI.b #$20,D2
00047AA8 <PED.ab2@12895>     CMP.b D3,D2
00047AAC <PED.ab2@12896>     BEQ.b JL_0_603C
00047AAE <PED.ab2@12899>     MOVEA.l (A7)+,A3
00047AB0 <PED.ab2@12900>     MOVE.l (A3),D3
00047AB4 <PED.ab2@12901>      BEQ.w JL_0_6060
00047AB6 <PED.ab2@12902>     MOVEA.l D3,A3
00047ABA <PED.ab2@12903>     BRA.b JL_0_6036
00047ABC <PED.ab2@12906>     MOVE.b (A2)+,D2
00047AC0 <PED.ab2@12907>     BCLR #$7,D2
00047AC6 <PED.ab2@12910>      JSR JL_0_60B2
00047AC8 <PED.ab2@12911>     MOVE.b (A2)+,D2
00047ACC <PED.ab2@12912>     CMP.b #$22,d2
00047AD0 <PED.ab2@12913>     BNE 'l10
00047AD6 <PED.ab2@12914>     NOT.b instring2
00047ADC <PED.ab2@12916>     TST.b instring2
00047AE0 <PED.ab2@12917>      BNE 'l11
00047AE4 <PED.ab2@12918>     BCLR #$7,D2            ;morechar
00047AEA <PED.ab2@12920>     CMP.b comByte__L_0_8BCD,D2
00047AEE <PED.ab2@12921>      BEQ.w JL_0_5F96
00047AF4 <PED.ab2@12922>     JSR JL_0_60C6
00047AF8 <PED.ab2@12923>     BEQ.b JL_0_6066
00047AFC <PED.ab2@12924>     BRA.w JL_0_5FB0
00047AFE <PED.ab2@12927>     MOVE.b (A4),D2
00047B02 <PED.ab2@12928>     BCLR #$7,D2
00047B08 <PED.ab2@12929>     JSR JL_0_60C6            ;ascii to token
00047B0C <PED.ab2@12930>      BEQ.b JL_0_6054
00047B10 <PED.ab2@12931>     CMP.b #$30,d2            ;number 0-9
00047B14 <PED.ab2@12932>      BLT 'l10
00047B18 <PED.ab2@12933>     CMP.b #$39,d2
00047B1C <PED.ab2@12934>      BGT 'l10
00047B20 <PED.ab2@12935>     BRA JL_0_6054
00047B24 <PED.ab2@12937>     CMP.b #"_",D2
00047B28 <PED.ab2@12938>      BEQ.b JL_0_6054
00047B2A <PED.ab2@12939>     MOVEA.l (A7)+,A3
00047B2C <PED.ab2@12940>     ADDQ.w #4,A3
00047B2E <PED.ab2@12941>     MOVE.b (A3)+,(A1)
00047B32 <PED.ab2@12942>     BSET #$7,(A1)+
00047B34 <PED.ab2@12943>     MOVE.b (A3),(A1)+
00047B36 <PED.ab2@12944>     MOVE.l A4,D4
00047B38 <PED.ab2@12945>     SUB.l A2,D4
00047B3A <PED.ab2@12946>     ADD.w D4,D0
00047B3C <PED.ab2@12947>     CMP.w D1,D0
00047B40 <PED.ab2@12948>      BHI.w JL_0_60C0
00047B42 <PED.ab2@12949>     MOVEA.l A4,A2
00047B46 <PED.ab2@12950>   BRA.w JL_0_5F88
00047B48 <PED.ab2@12953>   MOVE.b D2,(A1)+
00047B4A <PED.ab2@12954>   ADDQ.w #1,D0
00047B4C <PED.ab2@12955>   CMP.w D1,D0
00047B50 <PED.ab2@12956>   BHI.w JL_0_60BE
00047B52 <PED.ab2@12957> RTS
00047B54 <PED.ab2@12960>   ADDQ.w #4,A7
00047B56 <PED.ab2@12963>   MOVEA.l (A7)+,A4
00047B5A <PED.ab2@12964> BRA.w JL_0_5F5A
00047B5E <PED.ab2@12967>   CMP.b #"A",D2
00047B62 <PED.ab2@12968>    BCS.w JL_0_60E8
00047B66 <PED.ab2@12969>   CMP.b #"z",D2
00047B6A <PED.ab2@12970>    BHI.w JL_0_60E8
00047B6E <PED.ab2@12971>   CMP.b #"[",D2
00047B72 <PED.ab2@12972>    BCS.w JL_0_60E6
00047B76 <PED.ab2@12973>   CMP.b #"a",D2
00047B7A <PED.ab2@12974>    BCS.w JL_0_60E8
00047B7C <PED.ab2@12977>   CMP.w D2,D2
00047B7E <PED.ab2@12980> RTS
00047B80 <PED.ab2@12983>   EXG.l D0,D2
00047B84 <PED.ab2@12984>   BSR.b JL_0_60C6
00047B86 <PED.ab2@12985>   EXG.l D0,D2
00047B88 <PED.ab2@12986> RTS
00047B8A <PED.ab2@12989>   MOVEQ.l #$00,D7
00047B90 <PED.ab2@12991>   JSR source_scroll_down
00047B96 <PED.ab2@12992>   JSR JL_0_6290
00047B98 <PED.ab2@12993> RTS
00047B9E <PED.ab2@12996>   TST.l comLong_BlockEndY
00047BA2 <PED.ab2@12997>    BMI.w JL_0_612A
00047BA8 <PED.ab2@12998>   MOVE.w comWord_Column,D0
00047BAE <PED.ab2@12999>   MOVE.l viewablelines_m1,D1
00047BB4 <PED.ab2@13000>   ADD.w comWord_ColumnsOffset,D0
00047BBA <PED.ab2@13001>   ADD.l comLong_DisplayLineOffset,D1
00047BC0 <PED.ab2@13002>   MOVE.l viewablelines_m1,D6
00047BC4 <PED.ab2@13003>   BRA.w JL_0_6150
00047BC6 <PED.ab2@13006> RTS
00047BCC <PED.ab2@13009>   TST.l comLong_BlockEndY
00047BD0 <PED.ab2@13010>    BMI.w JL_0_614E
00047BD6 <PED.ab2@13011>   MOVE.w comWord_Column,D0
00047BDC <PED.ab2@13012>   MOVE.l comLong_DisplayLineOffset,D1
00047BE2 <PED.ab2@13013>   ADD.w comWord_ColumnsOffset,D0
00047BE4 <PED.ab2@13014>   MOVEQ.l #$00,D6
00047BE8 <PED.ab2@13015>  BRA.w JL_0_6150
00047BEA <PED.ab2@13018> RTS
00047BF0 <PED.ab2@13021>   MOVE.w comLong_BlockStartX,D4
00047BF6 <PED.ab2@13022>   SUB.w comWord_ColumnsOffset,D4
00047BFA <PED.ab2@13023>   BPL.w JL_0_6162
00047BFC <PED.ab2@13024>   MOVEQ.l #$00,D4
00047C02 <PED.ab2@13027>   MOVE.w comLong_BlockEndX,D5
00047C08 <PED.ab2@13028>   SUB.w comWord_ColumnsOffset,D5
00047C0C <PED.ab2@13029>   BPL.w JL_0_6174
00047C0E <PED.ab2@13030>   MOVEQ.l #$00,D5
00047C14 <PED.ab2@13033>   CMP.w visiblecolumns,D5
00047C18 <PED.ab2@13034>   BLT.w JL_0_6184
00047C1E <PED.ab2@13035>   MOVE.w comWord__AL_0_8670,D5
00047C24 <PED.ab2@13038>   MOVE.l comLong_BlockStartY,D2
00047C2A <PED.ab2@13039>   MOVE.l comLong_BlockEndY,D3
00047C30 <PED.ab2@13040>   MOVEA.l comPtr_SourceAreaRastPort,A1
00047C36 <PED.ab2@13041>   MOVEA.l _graphicsbase,A6
00047C38 <PED.ab2@13042>   CMP.l D2,D1
00047C3C <PED.ab2@13043>    BLT.w JL_0_61D0
00047C40 <PED.ab2@13044>    BEQ.w JL_0_61D2
00047C42 <PED.ab2@13045>   CMP.l D3,D1
00047C46 <PED.ab2@13046>    BGT.w JL_0_61D0
00047C4A <PED.ab2@13047>    BEQ.w JL_0_6220
00047C4C <PED.ab2@13048>   MOVE.l D6,D1
00047C50 <PED.ab2@13049>    BEQ.w JL_0_61BA
00047C56 <PED.ab2@13050>   MULU fontheight,D1
00047C58 <PED.ab2@13052>   MOVEQ.l #$00,D0
00047C5E <PED.ab2@13053>   MOVE.w visiblecolumns,D2
00047C64 <PED.ab2@13055>   MULU fontwidth,d2
00047C66 <PED.ab2@13056>   SUBQ.w #1,D2
00047C68 <PED.ab2@13057>   MOVE.l D1,D3
00047C6E <PED.ab2@13058>   ADD.w font_Heightm1,D3
00047C72 <PED.ab2@13059>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00047C74 <PED.ab2@13062> RTS
00047C7A <PED.ab2@13066>   CMP.l comLong_BlockEndY,D1
00047C7E <PED.ab2@13067>    BNE.w JL_0_61FC
00047C80 <PED.ab2@13068>   MOVE.w D4,D0
00047C86 <PED.ab2@13070>   MULU fontwidth,d0
00047C88 <PED.ab2@13071>   MOVE.w D6,D1
00047C8C <PED.ab2@13072>    BEQ.w JL_0_61EA
00047C92 <PED.ab2@13073>   MULU fontheight,D1
00047C94 <PED.ab2@13075>   MOVE.w D5,D2
00047C9A <PED.ab2@13077>   MULU fontwidth,d2
00047C9C <PED.ab2@13078>   ADDQ.w #7,D2
00047C9E <PED.ab2@13079>   MOVE.l D1,D3
00047CA4 <PED.ab2@13080>   ADD.w font_Heightm1,D3
00047CA8 <PED.ab2@13081>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00047CAA <PED.ab2@13082> RTS
00047CAC <PED.ab2@13085>   MOVE.w D4,D0
00047CB2 <PED.ab2@13087>   MULU fontwidth,d0
00047CB4 <PED.ab2@13088>   MOVE.w D6,D1
00047CB8 <PED.ab2@13089>    BEQ.w JL_0_620A
00047CBE <PED.ab2@13090>   MULU fontheight,D1
00047CC4 <PED.ab2@13093>   MOVE.w visiblecolumns,D2
00047CCA <PED.ab2@13095>   MULU fontwidth,d2
00047CCC <PED.ab2@13096>   SUBQ.w #1,D2
00047CCE <PED.ab2@13097>   MOVE.l D1,D3
00047CD4 <PED.ab2@13098>   ADD.w font_Heightm1,D3
00047CD8 <PED.ab2@13099>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00047CDA <PED.ab2@13100> RTS
00047CDC <PED.ab2@13103>   MOVE.w D5,D2
00047CE2 <PED.ab2@13104>   CMP.w visiblecolumns,D2
00047CE6 <PED.ab2@13105>    BLE.w JL_0_6234
00047CEC <PED.ab2@13106>   MOVE.w visiblecolumns,D2
00047CEE <PED.ab2@13107>   SUBQ.w #1,D2
00047CF4 <PED.ab2@13111>   MULU fontwidth,d2
00047CF6 <PED.ab2@13112>   MOVE.w D6,D1
00047CFA <PED.ab2@13113>    BEQ.w JL_0_6240
00047D00 <PED.ab2@13114>   MULU fontheight,D1
00047D02 <PED.ab2@13117>   ADDQ.w #7,D2
00047D04 <PED.ab2@13118>   MOVE.l D1,D3
00047D0A <PED.ab2@13119>   ADD.w font_Heightm1,D3
00047D0C <PED.ab2@13120>   MOVEQ.l #$00,D0
00047D10 <PED.ab2@13121>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00047D12 <PED.ab2@13122> RTS
00047D16 <PED.ab2@13125>   MOVEM.l D0-D7/A0-A6,-(A7)
00047D18 <PED.ab2@13126>   MOVE.w D7,D3
00047D1E <PED.ab2@13127>   MOVE.l viewablelines,D5
00047D24 <PED.ab2@13128>   MULU fontheight,D3                 ;ymin
00047D2A <PED.ab2@13129>   MULU fontheight,D5                 ;ymax
00047D2C <PED.ab2@13130>   SUBQ.l #1,D5
00047D32 <PED.ab2@13131>   MOVEA.l rp_sourcewindow,A1
00047D34 <PED.ab2@13132>   MOVEQ.l #$00,D0                    ;dx
00047D3A <PED.ab2@13133>   MOVE.w fontheight,D1               ;dy
00047D3C <PED.ab2@13134>   MOVEQ.l #$00,D2                    ;xmin
00047D42 <PED.ab2@13135>   MOVE.w visiblecolumns,D4
00047D48 <PED.ab2@13136>   MULU fontwidth,d4                  ;xmax
00047D4A <PED.ab2@13137>   SUBQ.w #1,D4
00047D50 <PED.ab2@13138>   MOVEA.l _graphicsbase,A6
00047D54 <PED.ab2@13139>   JSR _ScrollRaster(A6)              ;A1:rp, D0:dx D1:dy D2:xmin D3:ymin D4:xmax D5:ymax
00047D58 <PED.ab2@13140>   JSR _WaitBlit(A6)
00047D5E <PED.ab2@13141>   JSR delay
00047D62 <PED.ab2@13142>   MOVEM.l (A7)+,D0-D7/A0-A6
00047D64 <PED.ab2@13143> RTS
00047D6A <PED.ab2@13146>   MOVE.l viewablelines,D6
00047D6C <PED.ab2@13147>   SUB.l D7,D6
00047D6E <PED.ab2@13148>   SUBQ.l #1,D6
00047D70 <PED.ab2@13149>   TST.l D6
00047D74 <PED.ab2@13150>   BEQ.w fill2
00047D76 <PED.ab2@13151>   MOVE.l D7,D0
00047D7C <PED.ab2@13152>   MOVE.w comWord_MaxColumns,D1
00047D7E <PED.ab2@13153>   MULU D1,D0
00047D84 <PED.ab2@13154>   MOVEA.l textbufferaddr,A0
00047D86 <PED.ab2@13155>   ADDA.l D0,A0
00047D88 <PED.ab2@13156>   MOVE.l A0,a1
00047D8A <PED.ab2@13157>   ADDA.w D1,A1
00047D8C <PED.ab2@13158>   MOVE.l d6,d0
00047D8E <PED.ab2@13159>   MULS d1,d0
00047D90 <PED.ab2@13160>   ASR.l #1,d0
00047D92 <PED.ab2@13162>     MOVE.w (a1)+,(a0)+
00047D94 <PED.ab2@13163>     SUBQ.l #1,d0
00047D98 <PED.ab2@13164>   BNE 'loop
00047D9E <PED.ab2@13167>   MOVE.l viewablelines,D0
00047DA0 <PED.ab2@13168>   SUBQ.l #1,D0
00047DA6 <PED.ab2@13169>   MULU comWord_MaxColumns,D0
00047DAC <PED.ab2@13170>   MOVEA.l textbufferaddr,A0
00047DAE <PED.ab2@13171>   ADDA.w D0,A0
00047DB2 <PED.ab2@13172>   MOVE.w #$2020,d1
00047DB8 <PED.ab2@13173>   MOVE.l #MAX_Columns/2,d0
00047DBA <PED.ab2@13175>     MOVE.w d1,(a0)+
00047DBC <PED.ab2@13176>     SUBQ.l #1,d0
00047DC0 <PED.ab2@13177>   BNE 'loop
00047DC2 <PED.ab2@13178> RTS
00047DC4 <PED.ab2@13181>   MOVEQ.l #$00,D7
00047DCA <PED.ab2@13183>   JSR source_scroll_up
00047DD0 <PED.ab2@13184>   JSR JL_0_6358
00047DD2 <PED.ab2@13185> RTS
00047DD6 <PED.ab2@13188>   MOVEM.l D0-D7/A0-A6,-(A7)
00047DD8 <PED.ab2@13189>   MOVE.w D7,D3
00047DDE <PED.ab2@13190>   MOVE.l viewablelines,D5
00047DE4 <PED.ab2@13191>   MULU fontheight,D3
00047DEA <PED.ab2@13192>   MULU fontheight,D5
00047DEC <PED.ab2@13193>   SUBQ.w #1,D5
00047DF2 <PED.ab2@13194>   MOVEA.l rp_sourcewindow,A1
00047DF4 <PED.ab2@13195>   MOVEQ.l #$00,D0
00047DFA <PED.ab2@13196>   MOVE.w fontheight,D1
00047DFC <PED.ab2@13197>   NEG.w D1
00047DFE <PED.ab2@13198>   MOVEQ.l #$00,D2
00047E04 <PED.ab2@13199>   MOVE.w visiblecolumns,D4
00047E0A <PED.ab2@13201>   MULU fontwidth,d4
00047E0C <PED.ab2@13202>   SUBQ.w #1,D4
00047E12 <PED.ab2@13203>   MOVEA.l _graphicsbase,A6
00047E16 <PED.ab2@13204>   JSR _ScrollRaster(A6)              ;A1:rp, D0:dx D1:dy D2:xmin D3:ymin D4:xmax D5:ymax
00047E1A <PED.ab2@13205>   JSR _WaitBlit(A6)
00047E20 <PED.ab2@13206>   JSR delay
00047E24 <PED.ab2@13207>   MOVEM.l (A7)+,D0-D7/A0-A6
00047E26 <PED.ab2@13208> RTS
00047E2C <PED.ab2@13213>   MOVE.l viewablelines,D6
00047E2E <PED.ab2@13214>   SUB.l D7,D6
00047E30 <PED.ab2@13215>   SUBQ.l #1,D6
00047E34 <PED.ab2@13216>    BEQ.w fill
00047E3A <PED.ab2@13217>   MOVE.w comWord_MaxColumns,D1
00047E3C <PED.ab2@13218>   MOVE.w D1,D0
00047E42 <PED.ab2@13219>   MULU viewablelines+2,D0
00047E48 <PED.ab2@13220>   MOVEA.l textbufferaddr,A0
00047E4A <PED.ab2@13221>   ADDA.l D0,A0
00047E4C <PED.ab2@13222>   SUBQ.w #2,A0
00047E4E <PED.ab2@13223>   MOVE.l A0,a1          ;destaddr
00047E50 <PED.ab2@13224>   SUBA.w D1,A1
00047E52 <PED.ab2@13225>   MOVE.l d6,d0
00047E54 <PED.ab2@13226>   MULS d1,d0
00047E56 <PED.ab2@13227>   ASR.l #1,d0
00047E58 <PED.ab2@13229>     MOVE.w -(a1),-(a0)
00047E5A <PED.ab2@13230>     SUBQ.l #1,d0
00047E5E <PED.ab2@13231>   BNE 'loop
00047E64 <PED.ab2@13233>   MULU comWord_MaxColumns,D7
00047E6A <PED.ab2@13234>   MOVEA.l textbufferaddr,A0
00047E6C <PED.ab2@13235>   ADDA.l D7,A0
00047E70 <PED.ab2@13236>   MOVE.w #$2020,d1
00047E76 <PED.ab2@13237>   MOVE.l #MAX_Columns/2,d0
00047E78 <PED.ab2@13239>     MOVE.w d1,(a0)+
00047E7A <PED.ab2@13240>     SUBQ.l #1,d0
00047E7E <PED.ab2@13241>   BNE 'loop
00047E80 <PED.ab2@13242> RTS
00047E86 <PED.ab2@13246>   ADDQ.l #1,comLong_DisplayLine
00047E88 <PED.ab2@13247>   MOVEQ.l #$00,D0
00047E8E <PED.ab2@13250>   MOVE.w comWord_MaxColumns,D0
00047E94 <PED.ab2@13251>   ADD.w D0,comWord_TextBufferOffset
00047E96 <PED.ab2@13252> RTS
00047E9C <PED.ab2@13255>   SUBQ.l #1,comLong_DisplayLine
00047E9E <PED.ab2@13256>   MOVEQ.l #$00,D0
00047EA4 <PED.ab2@13259>   MOVE.w comWord_MaxColumns,D0
00047EAA <PED.ab2@13260>   SUB.w D0,comWord_TextBufferOffset
00047EAC <PED.ab2@13261> RTS
00047EB2 <PED.ab2@13264>   MOVEA.l rp_sourcewindow,A1
00047EB8 <PED.ab2@13265>   MOVE.w comWord_Column,D0
00047EBE <PED.ab2@13266>   ADD.w comWord_ColumnsOffset,D0
00047EC4 <PED.ab2@13267>   MOVE.l comLong_DisplayLine,D1
00047ECA <PED.ab2@13268>   ADD.l comLong_DisplayLineOffset,D1
00047ED0 <PED.ab2@13270>   TST.l comLong_BlockEndY
00047ED4 <PED.ab2@13271>    BMI.w source_scroll_line_to_right
00047EDA <PED.ab2@13272>   CMP.l comLong_BlockEndY,D1
00047EDE <PED.ab2@13273>    BGT.w source_scroll_line_to_right
00047EE4 <PED.ab2@13274>   CMP.l comLong_BlockStartY,D1
00047EE8 <PED.ab2@13275>    BLT.w source_scroll_line_to_right
00047EEC <PED.ab2@13276>    BNE.w JL_0_6498
00047EF2 <PED.ab2@13277>   CMP.w comLong_BlockStartX,D0
00047EF6 <PED.ab2@13278>    BGE.w JL_0_6498
00047EFC <PED.ab2@13279>   SUBQ.w #1,comLong_BlockStartX
00047F04 <PED.ab2@13282>   CMPI.w #MAX_Columns-1,comLong_BlockEndX
00047F08 <PED.ab2@13283>    BEQ.w JL_0_64CA
00047F0E <PED.ab2@13284>   CMP.w comLong_BlockEndX,D0
00047F12 <PED.ab2@13285>    BGT.w source_scroll_line_to_right
00047F18 <PED.ab2@13286>   SUBQ.w #1,comLong_BlockEndX
00047F1E <PED.ab2@13287>   MOVE.w visiblecolumns,D1
00047F24 <PED.ab2@13288>   ADD.w comWord_ColumnsOffset,D1
00047F2A <PED.ab2@13289>   CMP.w comLong_BlockEndX,D1
00047F2E <PED.ab2@13290>    BGT.w source_scroll_line_to_right
00047F32 <PED.ab2@13293>   MOVEM.l D0-D1/A0-A1,-(A7)
00047F38 <PED.ab2@13294>   MOVEA.l rp_sourcewindow,A1
00047F3A <PED.ab2@13295>   MOVEQ.l #$03,D0
00047F40 <PED.ab2@13296>   MOVEA.l _graphicsbase,A6
00047F44 <PED.ab2@13297>   JSR _SetBPen(A6)
00047F48 <PED.ab2@13298>   MOVEM.l (A7)+,D0-D1/A0-A1
00047F4A <PED.ab2@13301>   MOVE.w D7,-(A7)
00047F4C <PED.ab2@13303>   MOVEQ #0,d0
00047F52 <PED.ab2@13304>   MOVE.w fontwidth,d0
00047F58 <PED.ab2@13305>    JSR source_scroll_line
00047F5A <PED.ab2@13306>   MOVE.w (A7)+,D7
00047F5C <PED.ab2@13307> RTS
00047F5E <PED.ab2@13310>   MOVE.w D7,-(A7)
00047F60 <PED.ab2@13312>   MOVEQ #0,d0
00047F66 <PED.ab2@13313>   SUB.w fontwidth,d0
00047F68 <PED.ab2@13314>   EXT.l d0
00047F6E <PED.ab2@13315>   JSR source_scroll_line
00047F70 <PED.ab2@13316>   MOVE.w (A7)+,D7
00047F72 <PED.ab2@13317> RTS
00047F78 <PED.ab2@13320>   MOVEA.l rp_sourcewindow,A1
00047F7A <PED.ab2@13321>   MOVEQ.l #$00,D1
00047F7C <PED.ab2@13322>   MOVEQ.l #$00,D2
00047F7E <PED.ab2@13323>   MOVEQ.l #$00,D3
00047F80 <PED.ab2@13324>   MOVEQ.l #$00,D4
00047F86 <PED.ab2@13325>   MOVE.w comWord_Column,D2
00047F8C <PED.ab2@13326>   MULU fontwidth,d2                  ; xmin
00047F92 <PED.ab2@13328>   MOVE.l comLong_DisplayLine,D3
00047F98 <PED.ab2@13329>   MULU fontheight,D3                 ; ymin
00047F9E <PED.ab2@13331>   MOVE.w visiblecolumns,D4
00047FA4 <PED.ab2@13332>   MULU fontwidth,d4
00047FA6 <PED.ab2@13333>   SUBQ.w #1,D4                       ; xmax
00047FA8 <PED.ab2@13335>   MOVE.l D3,D5
00047FAE <PED.ab2@13336>   ADD.w fontheight,D5
00047FB0 <PED.ab2@13337>   SUBQ.w #1,D5                       ; ymax
00047FB6 <PED.ab2@13339>   MOVEA.l _graphicsbase,A6
00047FBA <PED.ab2@13340>   JSR _ScrollRaster(A6)              ;A1:rp, D0:dx D1:dy D2:xmin D3:ymin D4:xmax D5:ymax
00047FBE <PED.ab2@13341>   JSR _WaitBlit(A6)
00047FC4 <PED.ab2@13342>   JSR delay
00047FC6 <PED.ab2@13343> RTS
00047FCC <PED.ab2@13346>   TST.l comLong_BlockEndY
00047FD0 <PED.ab2@13347>    BMI.w JL_0_65A4
00047FD2 <PED.ab2@13348>   MOVEQ.l #$00,D0
00047FD8 <PED.ab2@13349>   MOVE.w comWord_Column,D0
00047FDE <PED.ab2@13350>   MOVE.l comLong_DisplayLine,D1
00047FE4 <PED.ab2@13351>   ADD.w comWord_ColumnsOffset,D0
00047FEA <PED.ab2@13352>   ADD.l comLong_DisplayLineOffset,D1
00047FF0 <PED.ab2@13353>   CMP.l comLong_BlockStartY,D1
00047FF4 <PED.ab2@13354>    BLT.w JL_0_65A4
00047FFA <PED.ab2@13355>   CMP.l comLong_BlockEndY,D1
00047FFE <PED.ab2@13356>    BGT.w JL_0_65A4
00048004 <PED.ab2@13357>   CMP.w comLong_BlockStartX,D0
00048008 <PED.ab2@13358>    BLT.w JL_0_65A4
0004800E <PED.ab2@13359>   CMP.w comLong_BlockEndX,D0
00048012 <PED.ab2@13360>    BGT.w JL_0_65A4
00048018 <PED.ab2@13361>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004801E <PED.ab2@13363>   MULU fontwidth,d0
00048020 <PED.ab2@13364>   MOVE.l D0,D2
00048022 <PED.ab2@13365>   ADDQ.w #7,D2
00048028 <PED.ab2@13367>   MULU fontheight,D1
0004802A <PED.ab2@13368>   MOVE.l D1,D3
00048030 <PED.ab2@13369>   ADD.w font_Heightm1,D3
00048034 <PED.ab2@13370>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00048036 <PED.ab2@13373> RTS
00048040 <PED.ab2@13377>   MOVE.l #1,blockmarking
00048046 <PED.ab2@13378>   JSR source_scroll_to_left          ; scroll source to left <-
0004804C <PED.ab2@13379>   JSR source_draw_new_columns        ; draw text after scroll
00048052 <PED.ab2@13380>   JSR source_update_blockmark        ; blockmark selected text after scrolling
0004805C <PED.ab2@13381>   MOVE.l #0,blockmarking
0004805E <PED.ab2@13382> RTS
00048064 <PED.ab2@13386>   TST.l comLong_BlockEndY
00048068 <PED.ab2@13387>    BMI.w exit_update_blockmark
0004806E <PED.ab2@13389>   MOVEA.l _graphicsbase,A6
00048074 <PED.ab2@13390>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004807A <PED.ab2@13392>   MOVE.l comLong_DisplayLineOffset,D1
0004807C <PED.ab2@13393>   MOVE.w D1,D2
00048082 <PED.ab2@13394>   ADD.l viewablelines,D2
00048088 <PED.ab2@13395>   MOVE.w comWord_ColumnsOffset,D0    ; D0
0004808E <PED.ab2@13397>   CMP.l comLong_BlockEndY,D1
00048092 <PED.ab2@13398>    BGT.w exit_update_blockmark
00048098 <PED.ab2@13400>   CMP.l comLong_BlockStartY,D2
0004809C <PED.ab2@13401>    BLT.w exit_update_blockmark
000480A2 <PED.ab2@13403>   MOVE.l comLong_BlockStartY,D4
000480A8 <PED.ab2@13404>   CMP.l comLong_BlockEndY,D4
000480AC <PED.ab2@13405>   BEQ.w JL_0_66F2
000480B2 <PED.ab2@13407>   JSR JL_0_6658                      ; blockmark first line of selected block until mousex
000480B8 <PED.ab2@13409>   MOVE.l comLong_BlockStartY,D1              ; ymin
000480BE <PED.ab2@13410>   SUB.l comLong_DisplayLineOffset,D1          ; ymin
000480C0 <PED.ab2@13411>   ADDQ.l #1,D1                       ; ymin
000480C6 <PED.ab2@13413>   MOVE.l comLong_BlockEndY,D3                ; ymax
000480CC <PED.ab2@13414>   SUB.l comLong_DisplayLineOffset,D3          ; ymax
000480D2 <PED.ab2@13415>   CMP.l viewablelines,D3             ; ymax
000480D6 <PED.ab2@13416>    BLE.w JL_0_6630
000480DC <PED.ab2@13417>   MOVE.l viewablelines,D3            ; ymax
000480DE <PED.ab2@13420>   CMP.l D1,D3                        ; ymin
000480E2 <PED.ab2@13421>    BLE.w JL_0_669A
000480E8 <PED.ab2@13423>   JSR JL_0_669A
00048112 <PED.ab2@13425>   !basic
00048152 <PED.ab2@13426>   xmin.w = (Peek.w(?comWord_ColumnsOffset)-Peek.w(?comWord_ColumnsOffset)) * Peek.w(?fontwidth)
0004819C <PED.ab2@13427>   ymin.w = (Peek.l(?comLong_BlockStartY)-Peek.l(?comLong_DisplayLineOffset) + 1) * Peek.w(?fontheight)
000481C4 <PED.ab2@13428>   ymax.w =  Peek.l(?comLong_BlockEndY ) -Peek.l(?comLong_DisplayLineOffset)
000481FE <PED.ab2@13429>   If ymax > Peek.l(?viewablelines) Then ymax = Peek.l(?viewablelines)
0004822C <PED.ab2@13430>   xmax.w = xmin + Peek.w(?fontwidth)*2 - 1   ; warum 15 ?? muesste eigentlich die Fontbreite sein
00048252 <PED.ab2@13431>   ymax.w = ymax * Peek.w(?fontheight) - 1
00048292 <PED.ab2@13432>   RectFill_ Peek.l(?comPtr_SourceAreaRastPort),xmin,ymin,xmax,ymax
000482B0 <PED.ab2@13433>   !asm
000482B2 <PED.ab2@13436> RTS
000482B8 <PED.ab2@13440>   CMP.w comLong_BlockStartX,D0
000482BC <PED.ab2@13441>    BLT.w JL_0_6698
000482C0 <PED.ab2@13443>   MOVEM.l D0-D3/A1,-(A7)
000482EA <PED.ab2@13444>   !basic
0004832A <PED.ab2@13445>   xmin.w = (Peek.w(?comWord_ColumnsOffset)-Peek.w(?comWord_ColumnsOffset)) * Peek.w(?fontwidth)
00048358 <PED.ab2@13446>   xmax.w = xmin + Peek.w(?fontwidth)*2 - 1
0004839C <PED.ab2@13448>   ymin.w = (Peek.l(?comLong_BlockStartY)-Peek.l(?comLong_DisplayLineOffset)) * Peek.w(?fontheight)
000483BE <PED.ab2@13449>   ymax.w = ymin + Peek.w(?font_Heightm1)
000483FE <PED.ab2@13450>   RectFill_ Peek.l(?comPtr_SourceAreaRastPort),xmin,ymin,xmax,ymax
0004841C <PED.ab2@13451>   !asm
00048420 <PED.ab2@13452>   MOVEM.l (A7)+,D0-D3/A1
00048422 <PED.ab2@13455> RTS
00048426 <PED.ab2@13459>   MOVEM.l D0-D3/A1,-(A7)
0004842C <PED.ab2@13460>   CMP.w comLong_BlockEndX,D0
00048430 <PED.ab2@13461>    BGT.w JL_0_66EC
0004845A <PED.ab2@13462>   !basic
0004849A <PED.ab2@13463>     xmin.w      = (Peek.w(?comWord_ColumnsOffset)-Peek.w(?comWord_ColumnsOffset)) * Peek.w(?fontwidth)
000484EC <PED.ab2@13464>     xmax_temp.w = (Peek.l(?comLong_BlockEndX)-Peek.w(?comWord_ColumnsOffset)+1) * Peek.w(?fontwidth) -1
0004853E <PED.ab2@13465>     If xmax_temp <(Peek.w(?fontwidth)*2-1) Then xmax_temp = Peek.w(?fontwidth)*2 - 1
0004854E <PED.ab2@13466>     xmax.w      = xmin + xmax_temp
00048592 <PED.ab2@13467>     ymin.w      = (Peek.l(?comLong_BlockEndY)-Peek.l(?comLong_DisplayLineOffset)) * Peek.w(?fontheight)
000485B4 <PED.ab2@13468>     ymax.w      = ymin + Peek.w(?font_Heightm1)
000485F4 <PED.ab2@13470>     RectFill_ Peek.l(?comPtr_SourceAreaRastPort),xmin,ymin,xmax,ymax
00048612 <PED.ab2@13471>   !asm
00048616 <PED.ab2@13474>   MOVEM.l (A7)+,D0-D3/A1
00048618 <PED.ab2@13475> RTS
0004861E <PED.ab2@13478>   CMP.w comLong_BlockStartX,D0
00048622 <PED.ab2@13479>    BLT.w exit_update_blockmark
00048628 <PED.ab2@13481>   CMP.w comLong_BlockEndX,D0
0004862C <PED.ab2@13482>    BGT.w exit_update_blockmark
00048656 <PED.ab2@13483>   !basic
00048696 <PED.ab2@13484>   xmin.w      = (Peek.w(?comWord_ColumnsOffset)-Peek.w(?comWord_ColumnsOffset)) * Peek.w(?fontwidth)
000486E8 <PED.ab2@13485>   xmax_temp.w = (Peek.l(?comLong_BlockEndX)-Peek.w(?comWord_ColumnsOffset)+1) * Peek.w(?fontwidth) -1
00048722 <PED.ab2@13486>   If xmax_temp < $2 Then xmax_temp = $2 * Peek.w(?fontwidth) -1
00048732 <PED.ab2@13487>   xmax.w      = xmin + xmax_temp
00048776 <PED.ab2@13488>   ymin.w      = (Peek.l(?comLong_BlockStartY)-Peek.l(?comLong_DisplayLineOffset)) * Peek.w(?fontheight)
00048798 <PED.ab2@13489>   ymax.w      = ymin + Peek.w(?font_Heightm1)
000487D8 <PED.ab2@13490>   RectFill_ Peek.l(?comPtr_SourceAreaRastPort),xmin,ymin,xmax,ymax
000487F6 <PED.ab2@13491>   !asm
000487F8 <PED.ab2@13492> RTS
000487FA <PED.ab2@13497>   MOVEQ #0,d0
00048800 <PED.ab2@13498>   MOVE.w fontwidth,d0
00048804 <PED.ab2@13499>   MULS.w #2,d0
00048806 <PED.ab2@13500>   NEG.l d0
0004880C <PED.ab2@13501>   MOVEA.l rp_sourcewindow,A1
0004880E <PED.ab2@13502>   MOVEQ.l #$00,D1
00048810 <PED.ab2@13503>   MOVEQ.l #$00,D2
00048812 <PED.ab2@13504>   MOVEQ.l #$00,D3
00048814 <PED.ab2@13505>   MOVEQ.l #$00,D4
00048816 <PED.ab2@13506>   MOVEQ.l #$00,D5
0004881C <PED.ab2@13507>   MOVE.w visiblecolumns,D4
00048822 <PED.ab2@13509>   MULU fontwidth,d4
00048824 <PED.ab2@13510>   SUBQ.w #1,D4
0004882A <PED.ab2@13511>   MOVE.l viewablelines,D5
00048830 <PED.ab2@13512>   MULU fontheight,D5
00048832 <PED.ab2@13513>   SUBQ.w #1,D5
00048838 <PED.ab2@13514>   MOVEA.l _graphicsbase,A6
0004883C <PED.ab2@13515>   JSR _ScrollRaster(A6)              ; A1:rp, D0:dx D1:dy D2:xmin D3:ymin D4:xmax D5:ymax
00048840 <PED.ab2@13516>   JSR _WaitBlit(A6)
00048846 <PED.ab2@13517>   JSR delay
00048848 <PED.ab2@13518> RTS
0004884E <PED.ab2@13522>   JSR save_cursorposition
00048854 <PED.ab2@13524>   CLR.w comWord_Column
0004885A <PED.ab2@13525>   CLR.l comLong_DisplayLine
00048860 <PED.ab2@13527>   CLR.w comWord_TextBufferOffset
00048866 <PED.ab2@13528>   MOVEA.l textbufferaddr,A5
0004886C <PED.ab2@13529>   ADDA.w comWord_ColumnsOffset,A5
00048872 <PED.ab2@13530>   MOVE.l viewablelines,D2
00048874 <PED.ab2@13531>   SUBQ.w #1,D2
0004887A <PED.ab2@13532>   CLR.w comWord__AL_0_869A
00048880 <PED.ab2@13535>     MOVEA.l AL_0_5B9E,A0
00048882 <PED.ab2@13536>     MOVE.b (A5),(A0)
00048888 <PED.ab2@13537>     MOVE.b $1(A5),$1(A0)
0004888A <PED.ab2@13538>     MOVEQ.l #$00,D0
00048890 <PED.ab2@13539>     MOVE.w comWord_Column,D0
00048896 <PED.ab2@13540>     MOVE.l comLong_DisplayLine,D1
0004889C <PED.ab2@13541>     MULU fontheight,D1
000488A2 <PED.ab2@13543>     MULU fontwidth,d0
000488A8 <PED.ab2@13544>     ST comWord__AL_0_8668
000488AC <PED.ab2@13546>     MOVEM.l D2/A5,-(A7)
000488B0 <PED.ab2@13547>     MOVEM.l d0-d2/a0,-(a7)
000488B6 <PED.ab2@13548>     MOVE.l textbufferaddr,a0
000488BC <PED.ab2@13549>     ADD.w comWord_TextBufferOffset,a0
000488C2 <PED.ab2@13550>     CLR.b instring2
000488C6 <PED.ab2@13551>     MOVE.w #0,d2
000488CC <PED.ab2@13552>     CMP.l #0,a0
000488D0 <PED.ab2@13553>     BEQ 'l2b
000488D6 <PED.ab2@13554>     MOVE.w comWord_ColumnsOffset,d1
000488D8 <PED.ab2@13556>       CMP.w d1,d2
000488DC <PED.ab2@13557>       BGE 'l2b
000488DE <PED.ab2@13558>       MOVE.b (a0)+,d0
000488E2 <PED.ab2@13559>       CMP.b #$22,d0
000488E6 <PED.ab2@13560>       BNE 'l2
000488EC <PED.ab2@13561>       NOT.b instring2
000488EE <PED.ab2@13563>       ADDQ.w #1,d2
000488F2 <PED.ab2@13564>     BRA 'l1
000488F6 <PED.ab2@13566>     MOVEM.l (a7)+,d0-d2/a0
000488FE <PED.ab2@13568>     MOVE.b #$1,keepstring
00048904 <PED.ab2@13569>     JSR print_complete_line          ; print the text
0004890A <PED.ab2@13570>     CLR.b keepstring
0004890E <PED.ab2@13571>     MOVEM.l (A7)+,D2/A5
00048912 <PED.ab2@13572>     BSR process_highlightning        ; beim markieren nicht verwenden, da sonst
00048918 <PED.ab2@13575>     SF comWord__AL_0_8668
0004891A <PED.ab2@13576>     MOVEQ.l #$00,D0
00048920 <PED.ab2@13579>     MOVE.w comWord_MaxColumns,D0
00048922 <PED.ab2@13580>     ADDA.w D0,A5
00048928 <PED.ab2@13581>     ADD.w D0,comWord_TextBufferOffset
0004892E <PED.ab2@13582>     ADDQ.l #1,comLong_DisplayLine
00048932 <PED.ab2@13583>   DBF D2,JL_0_67AA
00048938 <PED.ab2@13584>   JSR restore_cursorposition
0004893A <PED.ab2@13585> RTS
00048940 <PED.ab2@13589>   JSR source_scroll_to_right
00048946 <PED.ab2@13590>   JSR draw_new_columns
0004894C <PED.ab2@13591>   JSR update_blockmark2
0004894E <PED.ab2@13592> RTS
00048954 <PED.ab2@13595>   TST.l comLong_BlockEndY
00048958 <PED.ab2@13596>    BMI.w JL_0_68C2
0004895E <PED.ab2@13597>   MOVEA.l _graphicsbase,A6
00048964 <PED.ab2@13598>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004896A <PED.ab2@13599>   MOVE.l comLong_DisplayLineOffset,D1
0004896C <PED.ab2@13600>   MOVE.l D1,D2
00048972 <PED.ab2@13601>   ADD.l viewablelines,D2
00048978 <PED.ab2@13602>   MOVE.w comWord_ColumnsOffset,D0
0004897E <PED.ab2@13603>   ADD.w visiblecolumns,D0
00048980 <PED.ab2@13604>   SUBQ.w #2,D0
00048986 <PED.ab2@13605>   CMP.l comLong_BlockEndY,D1
0004898A <PED.ab2@13606>    BGT.w JL_0_68C2
00048990 <PED.ab2@13607>   CMP.l comLong_BlockStartY,D2
00048994 <PED.ab2@13608>    BLT.w JL_0_68C2
0004899A <PED.ab2@13609>   MOVE.l comLong_BlockStartY,D4
000489A0 <PED.ab2@13610>   CMP.l comLong_BlockEndY,D4
000489A4 <PED.ab2@13611>    BEQ.w JL_0_695E
000489AA <PED.ab2@13612>    JSR JL_0_68C4
000489B0 <PED.ab2@13613>   MOVE.l comLong_BlockStartY,D1
000489B6 <PED.ab2@13614>   SUB.l comLong_DisplayLineOffset,D1
000489B8 <PED.ab2@13615>   ADDQ.l #1,D1
000489BE <PED.ab2@13616>   MOVE.l comLong_BlockEndY,D3
000489C4 <PED.ab2@13617>   SUB.l comLong_DisplayLineOffset,D3
000489CA <PED.ab2@13618>   CMP.l viewablelines,D3
000489CE <PED.ab2@13619>    BLE.w JL_0_689C
000489D4 <PED.ab2@13620>   MOVE.l viewablelines,D3
000489D6 <PED.ab2@13623>   CMP.w D1,D3
000489DA <PED.ab2@13624>    BLE.w JL_0_6906
000489E0 <PED.ab2@13625>    JSR JL_0_6906
000489E6 <PED.ab2@13626>   SUB.w comWord_ColumnsOffset,D0
000489EC <PED.ab2@13628>   MULU fontwidth,d0
000489EE <PED.ab2@13629>   MOVE.w D0,D2
000489F2 <PED.ab2@13630>   ADDI.w #$F,D2
000489F8 <PED.ab2@13631>   MULU fontheight,D1
000489FE <PED.ab2@13632>   MULU fontheight,D3
00048A00 <PED.ab2@13633>   SUBQ.w #1,D3
00048A04 <PED.ab2@13634>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00048A06 <PED.ab2@13637> RTS
00048A0C <PED.ab2@13641>   CMP.w comLong_BlockStartX,D0
00048A10 <PED.ab2@13642>    BLT.w JL_0_6904
00048A14 <PED.ab2@13643>   MOVEM.l D0-D3/A1,-(A7)
00048A1A <PED.ab2@13644>   SUB.w comWord_ColumnsOffset,D0
00048A20 <PED.ab2@13646>   MULU fontwidth,d0
00048A22 <PED.ab2@13647>   MOVE.w D0,D2
00048A26 <PED.ab2@13648>   ADDI.w #$F,D2
00048A2C <PED.ab2@13649>   MOVE.l comLong_BlockStartY,D1
00048A32 <PED.ab2@13650>   SUB.l comLong_DisplayLineOffset,D1
00048A34 <PED.ab2@13651>   MOVE.l D1,D3
00048A3A <PED.ab2@13652>   MULU fontheight,D1
00048A40 <PED.ab2@13653>   MULU fontheight,D3
00048A46 <PED.ab2@13654>   ADD.w font_Heightm1,D3
00048A4A <PED.ab2@13655>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00048A4E <PED.ab2@13656>   MOVEM.l (A7)+,D0-D3/A1
00048A50 <PED.ab2@13659> RTS
00048A54 <PED.ab2@13663>   MOVEM.l D0-D3/A1,-(A7)
00048A5A <PED.ab2@13664>   CMP.w comLong_BlockEndX,D0
00048A5E <PED.ab2@13665>    BGT.w JL_0_6958
00048A64 <PED.ab2@13666>   MOVE.w comLong_BlockEndX,D5
00048A66 <PED.ab2@13667>   SUB.w D0,D5
00048A68 <PED.ab2@13668>   ADDQ.w #1,D5
00048A6E <PED.ab2@13670>   MULU fontwidth,d5
00048A72 <PED.ab2@13671>   CMP.w #$10,D5
00048A76 <PED.ab2@13672>    BLE.w JL_0_692A
00048A78 <PED.ab2@13673>   MOVEQ.l #$10,D5
00048A7E <PED.ab2@13676>   SUB.w comWord_ColumnsOffset,D0
00048A84 <PED.ab2@13678>   MULU fontwidth,d0
00048A86 <PED.ab2@13679>   MOVE.w D0,D2
00048A88 <PED.ab2@13680>   ADD.w D5,D2
00048A8A <PED.ab2@13681>   SUBQ.w #1,D2
00048A90 <PED.ab2@13682>   MOVE.l comLong_BlockEndY,D1
00048A96 <PED.ab2@13683>   SUB.l comLong_DisplayLineOffset,D1
00048A98 <PED.ab2@13684>   MOVE.l D1,D3
00048A9E <PED.ab2@13685>   MULU fontheight,D1
00048AA4 <PED.ab2@13686>   MULU fontheight,D3
00048AAA <PED.ab2@13687>   ADD.w font_Heightm1,D3
00048AAE <PED.ab2@13688>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
00048AB2 <PED.ab2@13691>   MOVEM.l (A7)+,D0-D3/A1
00048AB4 <PED.ab2@13692> RTS
00048ABA <PED.ab2@13696>   CMP.w comLong_BlockStartX,D0
00048ABE <PED.ab2@13697>    BLT.w JL_0_68C2
00048AC4 <PED.ab2@13698>   CMP.w comLong_BlockEndX,D0
00048AC8 <PED.ab2@13699>    BGT.w JL_0_68C2
00048ACE <PED.ab2@13700>   MOVE.w comLong_BlockEndX,D4
00048AD0 <PED.ab2@13701>   ADDQ.w #1,D4
00048AD2 <PED.ab2@13702>   SUB.w D0,D4
00048AD6 <PED.ab2@13703>   CMP.w #$2,D4
00048ADA <PED.ab2@13704>    BLT.w JL_0_6986
00048ADC <PED.ab2@13705>   MOVEQ.l #$02,D4
00048AE2 <PED.ab2@13709>   MULU fontwidth,d4
00048AE4 <PED.ab2@13710>   SUBQ.w #1,D4
00048AEA <PED.ab2@13711>   SUB.w comWord_ColumnsOffset,D0
00048AF0 <PED.ab2@13713>   MULU fontwidth,d0
00048AF2 <PED.ab2@13714>   MOVE.w D0,D2
00048AF4 <PED.ab2@13715>   ADD.w D4,D2
00048AFA <PED.ab2@13716>   MOVE.l comLong_BlockStartY,D1
00048B00 <PED.ab2@13717>   SUB.l comLong_DisplayLineOffset,D1
00048B02 <PED.ab2@13718>   MOVE.w D1,D3
00048B08 <PED.ab2@13719>   MULU fontheight,D1
00048B0E <PED.ab2@13720>   MULU fontheight,D3
00048B14 <PED.ab2@13721>   ADD.w font_Heightm1,D3
00048B18 <PED.ab2@13722>   JSR _RectFill(A6)                  ;A1:rp, D0:xmin, D1:ymin, D2:xmax, D3:ymax  d0-d3:16  JSR _RectFill(A6)
00048B1A <PED.ab2@13723> RTS
00048B1C <PED.ab2@13728>   MOVEQ #0,d0
00048B22 <PED.ab2@13729>   MOVE.w fontwidth,d0
00048B26 <PED.ab2@13730>   MULS.w #2,d0                       ; dx: fontwidth*2
00048B2C <PED.ab2@13731>   MOVEA.l rp_sourcewindow,A1
00048B2E <PED.ab2@13732>   MOVEQ.l #$00,D1
00048B30 <PED.ab2@13733>   MOVEQ.l #$00,D2
00048B32 <PED.ab2@13734>   MOVEQ.l #$00,D3
00048B34 <PED.ab2@13735>   MOVEQ.l #$00,D4
00048B36 <PED.ab2@13736>   MOVEQ.l #$00,D5
00048B3C <PED.ab2@13737>   MOVE.w visiblecolumns,D4
00048B42 <PED.ab2@13738>   MULU fontwidth,d4
00048B44 <PED.ab2@13739>   SUBQ.w #1,D4                      ; xmax: visiblecolumns*fontwidth
00048B4A <PED.ab2@13741>   MOVE.l viewablelines,D5
00048B50 <PED.ab2@13742>   MULU fontheight,D5
00048B52 <PED.ab2@13743>   SUBQ.w #1,D5                      ; ymax: visiblelines*fontheight
00048B58 <PED.ab2@13745>   MOVEA.l _graphicsbase,A6
00048B5C <PED.ab2@13746>   JSR _ScrollRaster(A6)             ; A1:rp, D0:dx D1:dy D2:xmin D3:ymin D4:xmax D5:ymax
00048B60 <PED.ab2@13747>   JSR _WaitBlit(A6)
00048B66 <PED.ab2@13748>   JSR delay
00048B68 <PED.ab2@13749> RTS
00048B6E <PED.ab2@13752>   JSR save_cursorposition                   ;scroll right
00048B74 <PED.ab2@13753>   MOVE.w visiblecolumns,D0
00048B76 <PED.ab2@13754>   SUBQ.w #2,D0
00048B7C <PED.ab2@13755>   MOVE.w D0,comWord_Column
00048B82 <PED.ab2@13756>   CLR.l comLong_DisplayLine
00048B88 <PED.ab2@13758>   CLR.w comWord_TextBufferOffset
00048B8E <PED.ab2@13759>   MOVEA.l textbufferaddr,A5
00048B94 <PED.ab2@13760>   ADDA.w comWord_ColumnsOffset,A5
00048B96 <PED.ab2@13761>   ADDA.w D0,A5
00048B9C <PED.ab2@13762>   MOVE.l viewablelines,D2
00048B9E <PED.ab2@13763>   SUBQ.w #1,D2
00048BA4 <PED.ab2@13764>   CLR.w comWord__AL_0_869A
00048BAA <PED.ab2@13767>     MOVEA.l AL_0_5B9E,A0
00048BAC <PED.ab2@13768>     MOVE.b (A5),(A0)
00048BB2 <PED.ab2@13769>     MOVE.b $1(A5),$1(A0)
00048BB4 <PED.ab2@13770>     MOVEQ.l #$00,D0
00048BBA <PED.ab2@13771>     MOVE.w comWord_Column,D0
00048BC0 <PED.ab2@13772>     MOVE.l comLong_DisplayLine,D1
00048BC6 <PED.ab2@13773>     MULU fontheight,D1
00048BCC <PED.ab2@13775>     MULU fontwidth,d0
00048BD2 <PED.ab2@13776>     ST comWord__AL_0_8668
00048BD6 <PED.ab2@13777>     MOVEM.l d0-d2/a0,-(a7)
00048BDC <PED.ab2@13778>     MOVE.l textbufferaddr,a0
00048BE2 <PED.ab2@13779>     ADD.w comWord_TextBufferOffset,a0
00048BE8 <PED.ab2@13780>     CLR.b instring2
00048BEC <PED.ab2@13781>     MOVE.w #0,d2
00048BF2 <PED.ab2@13782>     CMP.l #0,a0
00048BF6 <PED.ab2@13783>     BEQ 'l2b
00048BFC <PED.ab2@13784>     MOVE.w comWord_ColumnsOffset,d1
00048C02 <PED.ab2@13785>     ADD.w visiblecolumns,d1
00048C04 <PED.ab2@13786>     SUBQ.w #1,d1
00048C06 <PED.ab2@13788>       CMP.w d1,d2
00048C0A <PED.ab2@13789>       BGE 'l2b
00048C0C <PED.ab2@13790>       MOVE.b (a0)+,d0
00048C10 <PED.ab2@13791>       CMP.b #$22,d0
00048C14 <PED.ab2@13792>       BNE 'l2
00048C1A <PED.ab2@13793>       NOT.b instring2
00048C1C <PED.ab2@13795>       ADDQ.w #1,d2
00048C20 <PED.ab2@13796>     BRA 'l1
00048C24 <PED.ab2@13798>     MOVEM.l (a7)+,d0-d2/a0
00048C2C <PED.ab2@13800>     MOVE.b #1,keepstring
00048C32 <PED.ab2@13801>     JSR print_complete_line
00048C38 <PED.ab2@13802>     CLR.b keepstring
00048C3C <PED.ab2@13803>     BSR process_highlightning
00048C42 <PED.ab2@13804>     SF comWord__AL_0_8668
00048C44 <PED.ab2@13805>     MOVEQ.l #$00,D0
00048C4A <PED.ab2@13808>     MOVE.w comWord_MaxColumns,D0
00048C4C <PED.ab2@13809>     ADDA.w D0,A5
00048C52 <PED.ab2@13810>     ADD.w D0,comWord_TextBufferOffset
00048C58 <PED.ab2@13811>     ADDQ.l #1,comLong_DisplayLine
00048C5C <PED.ab2@13812>   DBF D2,JL_0_6AFA
00048C62 <PED.ab2@13813>   JSR restore_cursorposition
00048C64 <PED.ab2@13814> RTS
00048C66 <PED.ab2@13820>   MOVEQ.l #$0A,D0
00048C68 <PED.ab2@13821>   MOVEQ.l #$01,D1
00048C6E <PED.ab2@13822>   MOVEA.l _execbase,A6
00048C76 <PED.ab2@13823>   MOVE.w #$FFFF,comWord__AL_0_86C0
00048C98 <PED.ab2@13824>   !newalloc;JSR _AllocVec(A6)
00048C9A <PED.ab2@13825>   TST.l D0
00048C9E <PED.ab2@13826>   BEQ.w JL_0_6B7A
00048CA0 <PED.ab2@13827>   MOVEA.l D0,A0
00048CA2 <PED.ab2@13828>   CLR.l (A0)
00048CA6 <PED.ab2@13829>   CLR.l $4(A0)
00048CAC <PED.ab2@13830>   MOVE.w #$0100,$8(A0)
00048CAE <PED.ab2@13833> RTS
00048CB4 <PED.ab2@13836>   JSR JL_0_572C
00048CBA <PED.ab2@13838>   CLR.w comWord_Column
00048CC0 <PED.ab2@13839>   CLR.l comLong_DisplayLine
00048CC6 <PED.ab2@13841>   CLR.w comWord_TextBufferOffset
00048CCC <PED.ab2@13842>   CLR.l comLong_DisplayLineOffset
00048CD2 <PED.ab2@13843>   CLR.w comWord_ColumnsOffset
00048CD8 <PED.ab2@13844>   CLR.w comWord_SourceChanged
00048CDE <PED.ab2@13845>   CLR.l comPtr_LabelList
00048CE4 <PED.ab2@13846>   CLR.w comWord_LabelCounter
00048CEA <PED.ab2@13847>   CLR.b comStr_SourceName
00048CF4 <PED.ab2@13848>   MOVE.l #$0001,comLong_TotalLines
00048CFA <PED.ab2@13849>   JSR JL_0_5B00
00048D00 <PED.ab2@13850>   JSR update_horizscroller
00048D06 <PED.ab2@13851>   JSR update_modifiermark
00048D0C <PED.ab2@13852>   JSR update_vertscroller
00048D12 <PED.ab2@13853>   JSR update_statusline
00048D14 <PED.ab2@13854>   MOVEQ.l #-$01,D0
00048D16 <PED.ab2@13855> RTS
00048D1C <PED.ab2@13858>   MOVEA.l comPtr_CurrentSourceLine,A1
00048D22 <PED.ab2@13859>   MOVE.b comByte_LabelIdentifier,D0
00048D26 <PED.ab2@13860>   MOVEM.l D0/A0-A2,-(A7)
00048D2A <PED.ab2@13861>   LEA $9(A1),A2
00048D30 <PED.ab2@13862>   MOVEA.l AL_0_5BB2,A0
00048D32 <PED.ab2@13863>   TST.b (A2)
00048D36 <PED.ab2@13864>    BEQ.b JL_0_6BFE
00048D38 <PED.ab2@13865>   MOVEQ.l #$00,D0
00048D3C <PED.ab2@13866>   MOVE.b $8(A1),D0
00048D42 <PED.ab2@13867>   MOVE.w D0,comWord__AL_0_8A6A
00048D44 <PED.ab2@13868>   SUBQ.w #1,D0
00048D46 <PED.ab2@13871>     MOVE.b (A2)+,(A0)+
00048D4A <PED.ab2@13872>   DBF D0,JL_0_6BF8
00048D4E <PED.ab2@13874>   MOVEM.l (A7)+,D0/A0-A2
00048D52 <PED.ab2@13875>   BRA.b JL_0_6C0C
00048D58 <PED.ab2@13878>   MOVEA.l comPtr_CurrentSourceLine,A1
00048D5E <PED.ab2@13879>   MOVE.b comByte_LabelIdentifier,D0
00048D60 <PED.ab2@13882>   MOVE.l A1,-(A7)
00048D64 <PED.ab2@13883>   LEA $9(A1),A1
00048D68 <PED.ab2@13885>   CMPI.b #$20,(A1)+
00048D6C <PED.ab2@13886>    BEQ.b JL_0_6C12
00048D6E <PED.ab2@13887>   CMP.b -(A1),D0
00048D72 <PED.ab2@13889>   BEQ 'l10
00048D74 <PED.ab2@13891>   MOVE.b (a1),d0                       ;pre clicksort
00048D78 <PED.ab2@13892>   BEQ JL_0_6C24
00048D7C <PED.ab2@13893>   CMP.b #";",d0
00048D80 <PED.ab2@13894>   BEQ 'l10
00048D84 <PED.ab2@13895>   CMP.b #$80,d0
00048D88 <PED.ab2@13896>   BNE 'l15
00048D8E <PED.ab2@13897>   CMP.b #$2d,1(a1)
00048D92 <PED.ab2@13898>   BEQ 'l10
00048D94 <PED.ab2@13900>   ADDQ.l #1,a1
00048D98 <PED.ab2@13901>   BRA 'l20
00048D9E <PED.ab2@13904>   JSR JL_0_472A
00048DA0 <PED.ab2@13907>   MOVEA.l (A7)+,A1
00048DA6 <PED.ab2@13908>   MOVEA.l _execbase,A6
00048DAC <PED.ab2@13909>   ST comWord__AL_0_86C0
00048DBE <PED.ab2@13910>   !newfree
00048DC0 <PED.ab2@13911> RTS
00048DC6 <PED.ab2@13914>   MOVEA.l _execbase,A6
00048DCC <PED.ab2@13915>   MOVEA.l comPtr_FirstSourceLine,A2
00048DD2 <PED.ab2@13916>   MOVE.l comLong_TotalLines,D2
00048DD6 <PED.ab2@13917>   BEQ skip_freesource
00048DD8 <PED.ab2@13918>   SUBQ.l #1,D2
00048DDA <PED.ab2@13924>     MOVEA.l A2,A1
00048DDC <PED.ab2@13925>     MOVEA.l (A1),A2
00048DEE <PED.ab2@13926>     !newfree
00048DF2 <PED.ab2@13927>   DBF D2,JL_0_6C40
00048DF8 <PED.ab2@13929>   ST comWord__AL_0_86C0
00048DFE <PED.ab2@13930>   JSR clear_labellist
00048E00 <PED.ab2@13931> RTS
00048E06 <PED.ab2@13935>   JSR open_gui
00048E0A <PED.ab2@13936>    BMI.w JUMP_close_libraries
00048E10 <PED.ab2@13937>   JSR update_vertscroller
00048E16 <PED.ab2@13938>   JSR update_horizscroller
00048E1A <PED.ab2@13939> BRA.w _redraw
00048E20 <PED.ab2@13942> JMP close_libraries
00048E24 <PED.ab2@13945> ptr_visualinfo: Ds.l 1
00048E40 <PED.ab2@13949>     WbToScreen 0                                      ; set WB to screen 0
00048E58 <PED.ab2@13950>     *scr.Screen=Peek.l(Addr Screen(0))                ; get pointer of this screen
00048E6A <PED.ab2@13951>     If *scr<>0                                        ; check if we get a screenstructure
00048E78 <PED.ab2@13953>       *scrfont.TextAttr=*scr\Font                     ; try to get the font out of the screenstructur
00048E8A <PED.ab2@13954>       If *scrfont<>0                                  ; check if we get a TextAttrstructure
00048E98 <PED.ab2@13957>         guifontsize.w=(*scrfont.TextAttr\ta_YSize)    ; get size of the font
00048EC2 <PED.ab2@13958>         guifont$=Peek$(*scrfont.TextAttr\ta_Name)     ; get name of the font
00048EC4 <PED.ab2@13964> Return
00048EEE <PED.ab2@13968>   !basic
00048F2C <PED.ab2@13970>   If (use_wbfont = True)  OR  (Peek.b(?use_wbscreen)<>0)              ; check if we use workbench fonts or screen for Gui tomsmart1
00048F38 <PED.ab2@13974>     screen_SetDefaultSysFont{#scr_sysfont_wb_prop}                    ; switch on sysfont overwrite for use Workbench screen font  tomsmart1
00048F3E <PED.ab2@13976>   Else
00048F4A <PED.ab2@13978>     screen_SetDefaultSysFont{#scr_sysfont_wb_off}                     ; switch off sysfont overwrite we want to use the selected font for the Gui  tomsmart1
00048F82 <PED.ab2@13980>     If guifont$<>""
00048F96 <PED.ab2@13981>       If guifontsize <= 0 Then guifontsize = 6
00048FD8 <PED.ab2@13982>       *guifont.TextFont = screen_SetDefaultFont{guifont$,guifontsize} ; try to set selected font for the Gui  tomsmart1
00048FEA <PED.ab2@13985>     If *guifont = 0                                                   ; unable to open font => use system default
00049040 <PED.ab2@13986>       error{!TRANS{"Use of the selected font for the Gui fails,\\nwe try to get and use the font of the Workbench!"} }
00049046 <PED.ab2@13987>       Gosub SetGuiFontToWBScreenFont                                  ; try to get the workbench screen font settinge out of the screen structure tomsmart1
00049088 <PED.ab2@13988>       *guifont = screen_SetDefaultFont{guifont$,guifontsize}          ; and try to use it for the Gui of oure own screen  tomsmart1
00049092 <PED.ab2@13991>     If *guifont
00049098 <PED.ab2@13993>     Else
000490EE <PED.ab2@13994>       error{!TRANS{"We fail also to get and use the font of the Workbench,\\nwe use now the default font."} }
000490FA <PED.ab2@13995>       screen_SetDefaultSysFont{#scr_sysfont_wb_prop}                  ; switch on sysfont overwrite for use Workbench screen font  tomsmart1
00049126 <PED.ab2@14001>   Poke$ ?str_screentitle,"AmiBlitz3 - PED V\\__VER_MAJOR.\\__VER_MINOR"
00049150 <PED.ab2@14002>   scrname$ = Peek$(?str_screentitle)
0004916E <PED.ab2@14003>   If Peek.b(?use_wbscreen)<>0                                    ; -- use workbench here
000491CC <PED.ab2@14004>     If screen_Open{scrname$,#scr_mode_wb_use} = False
000491EA <PED.ab2@14005>       !asm
000491F0 <PED.ab2@14006>       JMP error_openscreen
000491F6 <PED.ab2@14007>     Else
00049222 <PED.ab2@14008>       Poke$ ?screen_number,"WB"
00049228 <PED.ab2@14010>   Else
00049244 <PED.ab2@14011>     If Peek.w(?use_pubscreen)<>0                                 ; -- searching for already opened ab3-screens
00049250 <PED.ab2@14012>       screen_ziffer.b = 1 : exit_screensearch.b = False
000492BC <PED.ab2@14014>         GetPubScreen 2,Peek$(?str_defaultpubscreen) + Str$(screen_ziffer)
000492E4 <PED.ab2@14015>         If Peek.l(Addr Screen(2))<>0
00049300 <PED.ab2@14016>           ReleasePubScreen 2
0004930E <PED.ab2@14017>           screen_ziffer + 1
00049314 <PED.ab2@14018>         Else
0004931A <PED.ab2@14019>           exit_screensearch = True
00049328 <PED.ab2@14021>       Until exit_screensearch
0004936C <PED.ab2@14022>       Poke$ ?screen_number,Str$(screen_ziffer)
00049390 <PED.ab2@14023>       screen_SetPubName{Peek$(?str_defaultpubscreen)}
000493AC <PED.ab2@14024>       WbToScreen 0 ; we need this, because GetPubScreen is steeling us the focus on screen 0
000493CA <PED.ab2@14027>     If Peek.b(?clone_wbscreen)<>0                                ; -- clone the workbench for one screen
00049428 <PED.ab2@14028>       If screen_Open{scrname$,#scr_mode_wb_clone} = False
00049446 <PED.ab2@14029>         !asm
0004944C <PED.ab2@14030>         JMP error_openscreen
00049452 <PED.ab2@14032>     Else
000494F6 <PED.ab2@14033>       If screen_Open{scrname$,Peek.l(?ownscreen_modeid),Peek.w(?ownscreen_width),Peek.w(?ownscreen_height),Peek.w(?ownscreen_depth)} = False
000495B6 <PED.ab2@14034>         dummy.l= RTEZRequest( "",!TRANS{"Could not open selected screen.\\nTrying to open default screen."},!TRANS{"Ok"})
000495C6 <PED.ab2@14035>         Poke.b ?clone_wbscreen, 1    ;try Clone Wbscreen
00049624 <PED.ab2@14036>         If screen_Open{scrname$,#scr_mode_wb_clone} = False
000496E4 <PED.ab2@14037>           dummy.l= RTEZRequest( "",!TRANS{"Could not open any screen, using WB."},!TRANS{"OK"})
000496F4 <PED.ab2@14038>           Poke.b ?clone_wbscreen, 0  ; no clone Wbscreen
00049704 <PED.ab2@14039>           Poke.b ?use_wbscreen,   1  ; try use Wbscreen
00049762 <PED.ab2@14040>           If screen_Open{scrname$,#scr_mode_wb_use} = False
00049780 <PED.ab2@14041>             !asm
00049786 <PED.ab2@14042>             JMP error_openscreen     ; no Screen can use => exit.
00049790 <PED.ab2@14048>         myscreen_Width  = screen_GetWidth{}
0004979A <PED.ab2@14049>         myscreen_Height = screen_GetHeight{}
000497A4 <PED.ab2@14050>         myscreen_Depth  = screen_GetDepth{}
000497BA <PED.ab2@14051>         myscreen_modeid = screen_GetBestModeID{myscreen_Width,myscreen_Height,myscreen_Depth}
000497CA <PED.ab2@14053>         Poke.l ?ownscreen_modeid ,myscreen_modeid
000497DA <PED.ab2@14054>         Poke.w ?ownscreen_height ,myscreen_Height
000497EA <PED.ab2@14055>         Poke.w ?ownscreen_width  ,myscreen_Width
000497FA <PED.ab2@14056>         Poke.w ?ownscreen_depth  ,myscreen_Depth
00049800 <PED.ab2@14057>       Else
00049814 <PED.ab2@14063>   If (screen_GetDepth{}<4); AND (Peek.b(?newcolormode)<>0)
000498D4 <PED.ab2@14064>     dummy.l = RTEZRequest("",!TRANS{"It is recommended to open a screen with\\nat least 16 colors."},!TRANS{"Ok"})
0004990C <PED.ab2@14066>   Poke.s ?str_pedscreenname,Peek$(?str_screentitle)
00049936 <PED.ab2@14067>   Poke.l ?ptr_pedscreen    ,Peek.l(Addr Screen(0))
0004994A <PED.ab2@14069>   If screen_GetModeID{}<>#scr_mode_wb_use
00049966 <PED.ab2@14073>     If Peek.w(?use_default_pubscreen)<>0
00049978 <PED.ab2@14074>       SetDefaultPubScreen_ ?str_defaultpubscreen
0004997E <PED.ab2@14081>   Gosub set_storedcolors
0004999C <PED.ab2@14082>   !asm
000499A2 <PED.ab2@14085>   MOVE.l ptr_pedscreen,D0
000499A8 <PED.ab2@14086>   MOVEA.l _gadtoolsbase,A6
000499AA <PED.ab2@14087>   MOVEA.l D0,A0
000499B0 <PED.ab2@14088>   MOVEA.l #0,A1
000499B4 <PED.ab2@14089>   JSR _GetVisualInfoA(A6)
000499BA <PED.ab2@14090>   MOVE.l D0,ptr_visualinfo
000499C0 <PED.ab2@14094>   JSR arexx_send_openwindow
000499EA <PED.ab2@14096>   !basic
000499F0 <PED.ab2@14097>   Gosub init_menus
000499F6 <PED.ab2@14098>   Gosub load_windowlayouts
00049A1A <PED.ab2@14099>   If autolayout><-1 Then AutoLayout{&wtemp,autolayout}
00049A20 <PED.ab2@14100>   Gosub do_windowlayout
00049A3E <PED.ab2@14101>   !asm
00049A44 <PED.ab2@14102>   MOVE.l #$00,D0
00049A46 <PED.ab2@14103> RTS
00049A48 <PED.ab2@14105> win_BorTop:   Dc.w 0
00049A4A <PED.ab2@14106> win_BorBot:   Dc.w 0
00049A4C <PED.ab2@14107> win_BorLef:   Dc.w 0
00049A4E <PED.ab2@14108> win_BorRig:   Dc.w 0
00049A50 <PED.ab2@14109> win_TopLeft:  Dc.w 0
00049A52 <PED.ab2@14110> win_Width:    Dc.w 1000
00049A54 <PED.ab2@14111> win_Height:   Dc.w 200
00049A58 <PED.ab2@14114>   MOVEM.l D0-D7/A0-A6,-(A7)
00049A5E <PED.ab2@14117>     MOVEA.l _execbase,A6
00049A64 <PED.ab2@14118>     MOVEA.l struct_ArexxMsgPort,A0
00049A6A <PED.ab2@14119>     CMPA.l #$0,A0
00049A6E <PED.ab2@14120>      BEQ.w no_arexx_message
00049A72 <PED.ab2@14121>     JSR _GetMsg(A6)
00049A74 <PED.ab2@14122>     TST.l D0
00049A78 <PED.ab2@14123>      BEQ.w no_arexx_message
00049A7E <PED.ab2@14124>     MOVE.l D0,struct_RexxMsg
00049A84 <PED.ab2@14125>     JSR event_arexx
00049A88 <PED.ab2@14126>   BRA.b JL_0_6EEC
00049A8A <PED.ab2@14130>   MOVEQ #0,d0
00049A90 <PED.ab2@14131>   MOVE.w sourcefontsize,D0
00049A96 <PED.ab2@14132>   MOVE.w D0,fontheight
00049A9C <PED.ab2@14133>   MOVE.l D0,fontheightl
00049A9E <PED.ab2@14134>   SUBQ.w #1,D0
00049AA4 <PED.ab2@14135>   MOVE.w D0,font_Heightm1
00049AAA <PED.ab2@14136>   MOVEA.l ptr_sourcefont,A0
00049AB2 <PED.ab2@14137>   MOVE.w $18(A0),fontwidth
00049AB6 <PED.ab2@14138>   MOVE.w $1A(A0),D0
00049ABC <PED.ab2@14139>   MOVE.w D0,font_Baseline
00049AE6 <PED.ab2@14141>   !basic
00049B0A <PED.ab2@14147>   Dim GTags.TagItem(4) ; -- Tags for getting the size gadget image
00049B4A <PED.ab2@14148>   If Used Screen < 0 Then WbToScreen 0
00049B78 <PED.ab2@14149>   *myscreen = Peek.l(Addr Screen(Used Screen))
00049B8A <PED.ab2@14150>   If *myscreen <> 0
00049BA2 <PED.ab2@14151>     Poke.b ?comByte_ScreenBarHeight, *myscreen\BarHeight
00049BF0 <PED.ab2@14152>     If Peek.w(?win_Width)<32  Then Poke.w ?win_Width, (*myscreen\Width - Peek.w(?win_TopLeft)-1)
00049C3E <PED.ab2@14153>     If Peek.w(?win_Height)<32 Then Poke.w ?win_Height ,(*myscreen\Height - Peek.w(?win_TopEdge)-1)
00049CAC <PED.ab2@14154>     If Peek.w(?win_TopEdge)+Peek.w(?win_Height )> *myscreen\Height Then Poke.w ?win_Height ,*myscreen\Height-Peek.w(?win_TopEdge)
00049D1A <PED.ab2@14155>     If Peek.w(?win_TopLeft)+Peek.w(?win_Width) > *myscreen\Width  Then Poke.w ?win_Width, *myscreen\Width-Peek.w(?win_TopLeft)
00049D4A <PED.ab2@14157>     Poke.w ?win_BorTop, *myscreen\WBorTop + *myscreen\Font\ta_YSize + 1
00049D5A <PED.ab2@14158>     Poke.w ?win_BorBot, 10
00049D6A <PED.ab2@14159>     Poke.w ?win_BorRig, 18
00049D82 <PED.ab2@14160>     Poke.w ?win_BorLef, *myscreen\WBorLeft
00049D96 <PED.ab2@14162>     *drawinfo = GetScreenDrawInfo_(*myscreen)
00049DA0 <PED.ab2@14163>     If *drawinfo
00049DCE <PED.ab2@14164>       If (*myscreen\Flags & #SCREENHIRES) Then sis.l=#SYSISIZE_HIRES Else sis=#SYSISIZE_MEDRES
00049DEE <PED.ab2@14165>       GTags(0)\ti_Tag = #SYSIA_DrawInfo,*drawinfo
00049E10 <PED.ab2@14166>       GTags(1)\ti_Tag = #SYSIA_Which,#SIZEIMAGE
00049E30 <PED.ab2@14167>       GTags(2)\ti_Tag = #SYSIA_Size,sis
00049E46 <PED.ab2@14168>       GTags(3)\ti_Tag = #TAG_DONE
00049E8E <PED.ab2@14169>       *img = NewObjectA_(0,"sysiclass",&GTags(0))
00049E98 <PED.ab2@14170>       If *img
00049EAE <PED.ab2@14171>         Poke.w ?win_BorRig, *img\Width
00049EC4 <PED.ab2@14172>         Poke.w ?win_BorBot, *img\Height
00049ED4 <PED.ab2@14173>         DisposeObject_ *img
00049EEC <PED.ab2@14175>       FreeScreenDrawInfo_ *myscreen,*drawinfo
00049EF2 <PED.ab2@14177>   Else
00049F10 <PED.ab2@14178>     !asm
00049F16 <PED.ab2@14179>     JSR close_gui
00049F1C <PED.ab2@14180>     JMP error_openscreen
00049F3A <PED.ab2@14182>   !asm
00049F3E <PED.ab2@14183>   MOVEM.l (A7)+,D0-D7/A0-A6
00049F42 <PED.ab2@14186>   MOVEM.l D2-D7/A2-A6,-(A7)
00049F48 <PED.ab2@14187>   TST.l ptr_sourcewindow
00049F4C <PED.ab2@14188>    BNE.w win_already_open
00049F52 <PED.ab2@14192>   JSR sub_calculatedimensions
00049F56 <PED.ab2@14196>   BSR allocate_textbuffer
00049F80 <PED.ab2@14201>   !basic
00049F94 <PED.ab2@14209>   *drawinfo = GetScreenDrawInfo_(*myscreen)
00049FAC <PED.ab2@14210>   If (*myscreen\Flags & #SCREENHIRES)
00049FB2 <PED.ab2@14211>     syssize.b = #SYSISIZE_MEDRES
00049FB8 <PED.ab2@14212>   Else
00049FBE <PED.ab2@14213>     syssize = #SYSISIZE_LOWRES
00049FF2 <PED.ab2@14215>   *sizeimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#SIZEIMAGE,@@
0004A004 <PED.ab2@14216>   *sizeimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#SIZEIMAGE,@@
0004A012 <PED.ab2@14217>   *sizeimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#SIZEIMAGE,@@
0004A048 <PED.ab2@14218>   *sizeimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#SIZEIMAGE,@@
0004A052 <PED.ab2@14219>   If (*sizeimage)
0004A076 <PED.ab2@14220>     GetAttr_ #IA_Width,*sizeimage ,&sizew
0004A09A <PED.ab2@14221>     GetAttr_ #IA_Height,*sizeimage,&sizeh
0004A0AA <PED.ab2@14222>     DisposeObject_ *sizeimage
0004A0B0 <PED.ab2@14223>   Else
0004A0B8 <PED.ab2@14224>     sizew = 18
0004A0C0 <PED.ab2@14225>     sizeh = 10
0004A0F4 <PED.ab2@14228>   *darrowimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#DOWNIMAGE,@@
0004A106 <PED.ab2@14229>   *darrowimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#DOWNIMAGE,@@
0004A114 <PED.ab2@14230>   *darrowimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#DOWNIMAGE,@@
0004A14A <PED.ab2@14231>   *darrowimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#DOWNIMAGE,@@
0004A154 <PED.ab2@14232>   If (*darrowimage)
0004A178 <PED.ab2@14233>     GetAttr_ #IA_Width ,*darrowimage,&w
0004A19C <PED.ab2@14234>     GetAttr_ #IA_Height,*darrowimage,&h
0004A1D0 <PED.ab2@14237>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A1E6 <PED.ab2@14238>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A202 <PED.ab2@14239>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A210 <PED.ab2@14240>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A21E <PED.ab2@14241>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A22A <PED.ab2@14242>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A236 <PED.ab2@14243>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A244 <PED.ab2@14244>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A250 <PED.ab2@14245>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A25C <PED.ab2@14246>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A26A <PED.ab2@14247>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A2A0 <PED.ab2@14248>   *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
0004A2D4 <PED.ab2@14251>   *uarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A2E6 <PED.ab2@14252>   *uarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A2F4 <PED.ab2@14253>   *uarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A32A <PED.ab2@14254>   *uarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A334 <PED.ab2@14256>   If (*uarrowimage)
0004A358 <PED.ab2@14257>     GetAttr_ #IA_Width ,*uarrowimage,&w
0004A37C <PED.ab2@14258>     GetAttr_ #IA_Height,*uarrowimage,&h
0004A3AE <PED.ab2@14262>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A3BE <PED.ab2@14263>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A3D4 <PED.ab2@14264>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A3F6 <PED.ab2@14265>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A404 <PED.ab2@14266>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A412 <PED.ab2@14267>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A41E <PED.ab2@14268>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A42A <PED.ab2@14269>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A438 <PED.ab2@14270>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A444 <PED.ab2@14271>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A450 <PED.ab2@14272>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A45E <PED.ab2@14273>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A494 <PED.ab2@14274>   *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A4BA <PED.ab2@14276>   barh = *myscreen\WBorTop+*myscreen\RastPort\TxHeight+2
0004A4EC <PED.ab2@14279>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A4FC <PED.ab2@14280>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A512 <PED.ab2@14281>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A520 <PED.ab2@14282>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A534 <PED.ab2@14283>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A55C <PED.ab2@14284>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A568 <PED.ab2@14285>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A574 <PED.ab2@14286>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A582 <PED.ab2@14287>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A58E <PED.ab2@14288>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A59A <PED.ab2@14289>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A5AA <PED.ab2@14290>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A5B6 <PED.ab2@14291>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A5C2 <PED.ab2@14292>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A5D2 <PED.ab2@14293>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A5E2 <PED.ab2@14294>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A618 <PED.ab2@14295>   *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
0004A64C <PED.ab2@14298>   *rarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A65E <PED.ab2@14299>   *rarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A66C <PED.ab2@14300>   *rarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A6A2 <PED.ab2@14301>   *rarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A6AC <PED.ab2@14303>   If (*rarrowimage)
0004A6D0 <PED.ab2@14304>     GetAttr_ #IA_Width ,*rarrowimage,&w
0004A6F4 <PED.ab2@14305>     GetAttr_ #IA_Height,*rarrowimage,&h
0004A726 <PED.ab2@14309>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A736 <PED.ab2@14310>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A752 <PED.ab2@14311>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A768 <PED.ab2@14312>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A776 <PED.ab2@14313>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A784 <PED.ab2@14314>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A790 <PED.ab2@14315>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A79C <PED.ab2@14316>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A7AA <PED.ab2@14317>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A7B6 <PED.ab2@14318>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A7C2 <PED.ab2@14319>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A7D0 <PED.ab2@14320>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A806 <PED.ab2@14321>   *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A83A <PED.ab2@14324>   *larrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A84C <PED.ab2@14325>   *larrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A85A <PED.ab2@14326>   *larrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A890 <PED.ab2@14327>   *larrowimage = NewObjectA_(0,"sysiclass",Tags(@@
0004A89A <PED.ab2@14329>   If (*larrowimage)
0004A8BE <PED.ab2@14330>     GetAttr_ #IA_Width ,*larrowimage,&w
0004A8E2 <PED.ab2@14331>     GetAttr_ #IA_Height,*larrowimage,&h
0004A914 <PED.ab2@14335>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A924 <PED.ab2@14336>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A946 <PED.ab2@14337>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A95C <PED.ab2@14338>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A96A <PED.ab2@14339>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A978 <PED.ab2@14340>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A984 <PED.ab2@14341>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A990 <PED.ab2@14342>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A99E <PED.ab2@14343>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A9AA <PED.ab2@14344>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A9B6 <PED.ab2@14345>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A9C4 <PED.ab2@14346>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004A9FA <PED.ab2@14347>   *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
0004AA2C <PED.ab2@14350>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AA3C <PED.ab2@14351>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AA54 <PED.ab2@14352>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AA6A <PED.ab2@14353>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AA9C <PED.ab2@14354>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AAB0 <PED.ab2@14355>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AABC <PED.ab2@14356>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AAC8 <PED.ab2@14357>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AAD6 <PED.ab2@14358>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AAE2 <PED.ab2@14359>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AAEE <PED.ab2@14360>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AAFE <PED.ab2@14361>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AB0A <PED.ab2@14362>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AB16 <PED.ab2@14363>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AB26 <PED.ab2@14364>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AB36 <PED.ab2@14365>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AB6C <PED.ab2@14366>   *horizprop = NewObjectA_(0,"propgclass",Tags(@@
0004AB96 <PED.ab2@14369>   If (*vertiprop=0) OR( *horizprop=0)
0004AC02 <PED.ab2@14370>     dummy= RTEZRequest("",Hex$(*vertiprop),Hex$(*horizprop))
0004AC20 <PED.ab2@14371>     !asm
0004AC26 <PED.ab2@14372>     CLR.l ptr_sourcewindow
0004AC2A <PED.ab2@14373>     BRA.w error_opensourcewindow                   ; bei Fehler ...
0004AC56 <PED.ab2@14376>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004AC6E <PED.ab2@14377>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004AC86 <PED.ab2@14378>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004AC9E <PED.ab2@14379>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004ACB6 <PED.ab2@14380>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004ACC6 <PED.ab2@14381>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004ACD8 <PED.ab2@14382>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004ACE8 <PED.ab2@14383>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004ACFA <PED.ab2@14384>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004AD0A <PED.ab2@14385>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004AD1A <PED.ab2@14386>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004AD28 <PED.ab2@14387>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004AD5A <PED.ab2@14388>   *sourcewin.Window = OpenWindowTagList_(0,Tags(@@
0004AD6C <PED.ab2@14389>   If *sourcewin = 0
0004AD8A <PED.ab2@14390>     !asm
0004AD90 <PED.ab2@14391>     CLR.l ptr_sourcewindow
0004AD94 <PED.ab2@14392>     BRA.w error_opensourcewindow                   ; bei Fehler ...
0004ADA4 <PED.ab2@14395>   Poke.l ?ptr_sourcewindow,*sourcewin
0004ADBA <PED.ab2@14396>   Poke.l ?rp_sourcewindow ,*sourcewin\RPort
0004ADEE <PED.ab2@14399>   If Peek.l(?addr_menustrip) Then SetMenuStrip_ *sourcewin,Peek.l(?addr_menustrip)
0004AE14 <PED.ab2@14402>   SetFont_ *sourcewin\RPort,Peek.l(?ptr_sourcefont)
0004AE32 <PED.ab2@14403>   !asm
0004AE3A <PED.ab2@14405>   MOVE.w #$FFFF,comWord_LabelListChanged     ; was soll das ??
0004AE40 <PED.ab2@14406>   MOVEA.l _execbase,A6
0004AE42 <PED.ab2@14407>   SUBA.l A1,A1
0004AE46 <PED.ab2@14408>   JSR _FindTask(A6)
0004AE48 <PED.ab2@14409>   MOVEA.l D0,A0
0004AE50 <PED.ab2@14410>   MOVE.l $B8(A0),AL_0_7356
0004AE58 <PED.ab2@14411>   MOVE.l ptr_sourcewindow,$B8(A0)
0004AE82 <PED.ab2@14414>   !basic
0004AEA8 <PED.ab2@14416>   SetWindowTitles_ *sourcewin,?str_screentitle,-1
0004AEC6 <PED.ab2@14417>   !asm
0004AECC <PED.ab2@14418>   JSR update_statusline
0004AED2 <PED.ab2@14419>   JSR set_pointernormal
0004AED6 <PED.ab2@14422>   MOVEM.l D0-D1/A0-A1/A6,-(A7)
0004AEDC <PED.ab2@14423>   MOVEA.l _execbase,A6
0004AEDE <PED.ab2@14424>   MOVEQ.l #$64,D0
0004AEE0 <PED.ab2@14425>   MOVEQ.l #$00,D1
0004AF02 <PED.ab2@14426>   !newalloc
0004AF08 <PED.ab2@14427>   MOVE.l D0,comPtr_SourceAreaRastPort
0004AF0E <PED.ab2@14428>   MOVEA.l rp_sourcewindow,A0
0004AF10 <PED.ab2@14429>   MOVEA.l D0,A1
0004AF12 <PED.ab2@14430>   MOVEQ.l #$63,D0
0004AF14 <PED.ab2@14432>     MOVE.b (A0)+,(A1)+
0004AF18 <PED.ab2@14433>   DBF D0,JL_0_7300
0004AF1E <PED.ab2@14434>   MOVEA.l _graphicsbase,A6
0004AF24 <PED.ab2@14435>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004AF26 <PED.ab2@14436>   MOVEQ.l #$02,D0
0004AF2A <PED.ab2@14437>   JSR _SetDrMd(A6)
0004AF2E <PED.ab2@14438>   MOVEM.l (A7)+,D0-D1/A0-A1/A6
0004AF34 <PED.ab2@14440>   JSR _redraw
0004AF3A <PED.ab2@14441>   JSR update_horizscroller
0004AF40 <PED.ab2@14442>   JSR update_vertscroller
0004AF44 <PED.ab2@14443>   MOVEM.l (A7)+,D2-D7/A2-A6
0004AF46 <PED.ab2@14444>   MOVEQ.l #$00,D0
0004AF48 <PED.ab2@14445> RTS
0004AF72 <PED.ab2@14449>   !basic
0004AFC4 <PED.ab2@14450>   Poke.w ?win_InnerHeight, Peek.w(?win_Height ) - Peek.w(?win_BorTop) - Peek.w(?win_BorBot)
0004B016 <PED.ab2@14451>   Poke.w ?win_InnerWidth , Peek.w(?win_Width)   - Peek.w(?win_BorLef) - Peek.w(?win_BorRig)
0004B018 <PED.ab2@14453>   CLR.l d0
0004B022 <PED.ab2@14454>   MOVE.w win_InnerHeight,D0 : wih.l = PutD0
0004B02C <PED.ab2@14455>   MOVE.l fontheightl,D0     : fhl.l = PutD0
0004B042 <PED.ab2@14457>   visibleLines.l = (wih - 8) / fhl          ; 6 Pixel fehlen wg. Trennlinie etc.
0004B05C <PED.ab2@14458>   If visibleLines > 125 Then visibleLines = 125 ; why?
0004B060 <PED.ab2@14459>   GetD0 visibleLines
0004B062 <PED.ab2@14460>   SUBQ.l #1,D0
0004B068 <PED.ab2@14461>   MOVE.l d0,viewablelines
0004B086 <PED.ab2@14462>   !asm
0004B088 <PED.ab2@14463>   SUBQ.l #1,D0                          ;

0004B08E <PED.ab2@14464>   MOVE.l D0,viewablelines_m1
0004B090 <PED.ab2@14465>   ADDQ.l #1,D0
0004B096 <PED.ab2@14466>   MULU fontheight,D0
0004B09C <PED.ab2@14468>   MOVE.w D0,ypos_statusarea             ; Y-Position Statusarea festlegen
0004B0A2 <PED.ab2@14470>   MOVE.w win_Width,D0
0004B0A8 <PED.ab2@14471>   SUB.w fontwidth,d0                    ;

0004B0AA <PED.ab2@14472>   EXT.l d0
0004B0B0 <PED.ab2@14473>   DIVU fontwidth,d0
0004B0B4 <PED.ab2@14474>   BCLR #$0,D0
0004B0BC <PED.ab2@14475>   BCLR #$0,AL_0_B7F4
0004B0C0 <PED.ab2@14478>   BCLR #0,d0
0004B0C2 <PED.ab2@14479>   SUBQ.w #2,D0
0004B0C8 <PED.ab2@14480>   MOVE.w D0,visiblecolumns              ; x pos of clickwin *8+12
0004B0CA <PED.ab2@14481>   SUBQ.w #1,D0
0004B0CE <PED.ab2@14482>   BCLR #0,d0
0004B0D4 <PED.ab2@14483>   MOVE.w D0,comWord__AL_0_8670
0004B0DE <PED.ab2@14486>   MOVE.w comWord_LabelSize,comWord_LabelSizeC
0004B0E0 <PED.ab2@14487> RTS
0004B0E6 <PED.ab2@14491>   JSR free_textbuffer
0004B0EC <PED.ab2@14492>   JSR close_sourcewindow
0004B0F2 <PED.ab2@14493>   JSR error_unable_window
0004B0F8 <PED.ab2@14496>   MOVEA.l ptr_pedscreen,A0
0004B0FE <PED.ab2@14497>   MOVEA.l _intuibase,A6
0004B128 <PED.ab2@14498>   !basic
0004B14A <PED.ab2@14499>   !coutclose
0004B150 <PED.ab2@14500>   Gosub close_bubblehelp
0004B156 <PED.ab2@14501>   Gosub close_popupwindow
0004B18E <PED.ab2@14502>   WZCloseWindow WZID("WIN_AUTODOC")
0004B1C6 <PED.ab2@14503>   WZCloseWindow WZID("WIN_INSTRUCTIONBROWSER")
0004B1FE <PED.ab2@14504>   WZCloseWindow WZID("WIN_NEWTYPE")
0004B236 <PED.ab2@14505>   WZCloseWindow WZID("WIN_LABELS")
0004B26E <PED.ab2@14506>   WZCloseWindow WZID("WIN_HELPDIAG")
0004B2A6 <PED.ab2@14507>   WZCloseWindow WZID("WIN_SHORTCUTS")
0004B2DE <PED.ab2@14508>   WZCloseWindow WZID("WIN_LIBRARYBROWSER")
0004B316 <PED.ab2@14509>   WZCloseWindow WZID("WIN_SEARCH")
0004B34E <PED.ab2@14510>   WZCloseWindow WZID("WIN_HELP")
0004B354 <PED.ab2@14513>     screen_Close{} ;/* screen close knows if it is on wb! */
0004B372 <PED.ab2@14515>   !asm
0004B378 <PED.ab2@14516> JMP close_libraries
0004B37E <PED.ab2@14523>   JSR free_textbuffer
0004B384 <PED.ab2@14524>   JSR error_unable_screen
0004B386 <PED.ab2@14526>   MOVEQ.l #-$01,D0
0004B388 <PED.ab2@14527> RTS
0004B38C <PED.ab2@14529> AL_0_7356:    Ds.l 1
0004B396 <PED.ab2@14532>   MOVE.l #$20202020,str_actualline
0004B3A0 <PED.ab2@14533>   MOVE.l #$20200000,str_actualline+4    ; loeschen von "str_actualline" ; changed form #$20000000 to #$2020000 that the function "format_value" use 6 instead of 5 columns for up to 999999 lines  tomsmart1
0004B3A6 <PED.ab2@14534>   MOVE.l comLong_DisplayLineOffset,D0
0004B3AC <PED.ab2@14535>   ADD.l comLong_DisplayLine,D0
0004B3AE <PED.ab2@14536>   ADDQ.l #1,D0
0004B3B4 <PED.ab2@14537>   LEA str_actualline,A0
0004B3BA <PED.ab2@14538>   JSR format_value
0004B3BC <PED.ab2@14539>   MOVEQ.l #$06,D0                 ; xpos=6 in D0 laden
0004B3C2 <PED.ab2@14540>   LEA str_actualline,A0                 ; text laden
0004B3C8 <PED.ab2@14541>   JSR print_statustext          ; text in statusarea darstellen
0004B3CA <PED.ab2@14542> RTS
0004B3D4 <PED.ab2@14545>   MOVE.l #$20202000,comLong_ActualColumn
0004B3D6 <PED.ab2@14546>   MOVEQ #0,d0
0004B3DC <PED.ab2@14547>   MOVE.w comWord_ColumnsOffset,D0
0004B3E2 <PED.ab2@14548>   ADD.w comWord_Column,D0
0004B3E4 <PED.ab2@14549>   ADDQ.w #1,D0
0004B3EA <PED.ab2@14550>   LEA comLong_ActualColumn,A0
0004B3F0 <PED.ab2@14551>   JSR format_value
0004B3F2 <PED.ab2@14552>   MOVEQ.l #$15,D0                 ; xpos=21   ; added 1 to move the print of the Columnnumber to the right to support up to 999999 Lines  tomsmart1
0004B3F8 <PED.ab2@14553>   LEA comLong_ActualColumn,A0
0004B3FE <PED.ab2@14554>   JSR print_statustext      ; print column in statusarea
0004B400 <PED.ab2@14555> RTS
0004B404 <PED.ab2@14560> text_ptr:   Ds.l 1
0004B40A <PED.ab2@14564>   MULU fontwidth,D0
0004B410 <PED.ab2@14565>   MOVE.l A0,text_ptr
0004B43A <PED.ab2@14566>   !basic
0004B444 <PED.ab2@14567>   xpos_text.l = PutD0 + 2
0004B476 <PED.ab2@14568>   MOVE.l text_ptr,d0 :_d0.l = PutD0 : txt$ = Peek$(_d0)
0004B49A <PED.ab2@14569>   If FLen(txt$)>0
0004B4AA <PED.ab2@14570>     *rastp.RastPort = Peek.l(?rp_sourcewindow)
0004B4BA <PED.ab2@14571>     *swin.Window    = Peek.l(?ptr_sourcewindow)
0004B4CA <PED.ab2@14572>     *tfont.TextFont = Peek.l(?ptr_sourcefont)
0004B4E0 <PED.ab2@14574>     ypos_sa.w = Peek.w(?ypos_statusarea) + 1
0004B502 <PED.ab2@14575>     ypos_text.w = ypos_sa + 2 + *tfont\tf_Baseline + 1
0004B528 <PED.ab2@14577>     SetAPen_ *rastp, AB3Pen(#AB3_screenshine)
0004B54E <PED.ab2@14578>     SetBPen_ *rastp, AB3Pen(#AB3_screenfill)
0004B570 <PED.ab2@14579>     Move_ *rastp, xpos_text, ypos_text
0004B5B4 <PED.ab2@14580>     If Vallong(txt$)= 0
0004B5D4 <PED.ab2@14581>       SetFont_ *rastp,Peek.l(?ptr_sourcefontb)
0004B5F8 <PED.ab2@14582>       SetSoftStyle_ *rastp,#FSF_BOLD,#FSF_BOLD
0004B626 <PED.ab2@14584>     Text_ *rastp,&txt$,FLen(txt$)
0004B646 <PED.ab2@14585>     SetFont_ *rastp,Peek.l(?ptr_sourcefont)
0004B66A <PED.ab2@14586>     SetSoftStyle_ *rastp,#FS_NORMAL,#FSF_BOLD
0004B68A <PED.ab2@14587>     SetBPen_ *rastp,Peek.l(?backgroundcolor)
0004B6A8 <PED.ab2@14589>   !asm
0004B6AA <PED.ab2@14590> RTS
0004B6D4 <PED.ab2@14594>   !basic
0004B6E4 <PED.ab2@14595>   *rastp.RastPort = Peek.l(?rp_sourcewindow)
0004B6F4 <PED.ab2@14596>   *swin.Window    = Peek.l(?ptr_sourcewindow)
0004B704 <PED.ab2@14597>   *tfont.TextFont = Peek.l(?ptr_sourcefont)
0004B71A <PED.ab2@14599>   ypos_sa.w = Peek.w(?ypos_statusarea) + 1
0004B72A <PED.ab2@14600>   Poke.w ?yposlow, ypos_text
0004B750 <PED.ab2@14602>   SetAPen_ *rastp,AB3Pen(#AB3_screenfill)
0004B7A6 <PED.ab2@14603>   RectFill_ *rastp,0,ypos_sa + 2,*swin\Width-1,*swin\Height-12
0004B7CC <PED.ab2@14606>   SetAPen_ *rastp, AB3Pen(#AB3_screenshine)
0004B7F0 <PED.ab2@14607>   Move_ *rastp,0,ypos_sa
0004B820 <PED.ab2@14608>   Draw_ *rastp,*swin\Width-1,ypos_sa
0004B846 <PED.ab2@14609>   SetAPen_ *rastp, AB3Pen(#AB3_screentext)
0004B870 <PED.ab2@14610>   Move_ *rastp,0,ypos_sa + 1
0004B8A6 <PED.ab2@14611>   Draw_ *rastp,*swin\Width-1,ypos_sa + 1
0004B8CC <PED.ab2@14612>   SetAPen_ *rastp, AB3Pen(#AB3_screentext)
0004B8F2 <PED.ab2@14613>   SetBPen_ *rastp, AB3Pen(#AB3_screenfill)
0004B932 <PED.ab2@14615>   xpos_text.l = (#filenamepos-1) * *tfont\tf_XSize - (*tfont\tf_XSize/2)
0004B958 <PED.ab2@14616>   SetAPen_ *rastp, AB3Pen(#AB3_screenshine)
0004B986 <PED.ab2@14617>   Move_ *rastp,xpos_text+1,ypos_sa + 2
0004B9CA <PED.ab2@14618>   Draw_ *rastp,xpos_text+1,ypos_sa + 2 + *tfont\tf_YSize*3
0004B9F0 <PED.ab2@14619>   SetAPen_ *rastp, AB3Pen(#AB3_screentext)
0004BA18 <PED.ab2@14620>   Move_ *rastp,xpos_text,ypos_sa + 2
0004BA56 <PED.ab2@14621>   Draw_ *rastp,xpos_text,ypos_sa + 2 + *tfont\tf_YSize*3
0004BA74 <PED.ab2@14628>   !asm
0004BA76 <PED.ab2@14629>   MOVEQ.l #$00,D0                        ; x postion to print the Line string on the screen
0004BA7C <PED.ab2@14630>   LEA comStr_StatusString,A0             ; "Line"
0004BA82 <PED.ab2@14632>   JSR print_statustext
0004BA84 <PED.ab2@14633>   MOVEQ.l #13,D0                         ; added 2 to the x postion to move it to the right to support up to 999999 Lines  tomsmart1
0004BA8A <PED.ab2@14634>   LEA comStr_StatusString+13,A0          ; "Column" ; also here added 2 to get the new start position of the Column string  tomsmart1
0004BA90 <PED.ab2@14636>   JSR print_statustext
0004BA96 <PED.ab2@14637>   JSR print_actualsourceline
0004BA9C <PED.ab2@14638>   JSR print_actualsourcecolumn
0004BAA2 <PED.ab2@14639>   JSR print_filenames
0004BAA4 <PED.ab2@14640> RTS
0004BAAA <PED.ab2@14645>   TST.l textbufferaddr
0004BAAE <PED.ab2@14646>   BEQ.w JL_0_74AE
0004BAB2 <PED.ab2@14647>   MOVEM.l D0-D1/A0-A1/A6,-(A7)
0004BAB8 <PED.ab2@14648>   MOVEA.l textbufferaddr,A1
0004BABE <PED.ab2@14649>   MOVEA.l _execbase,A6
0004BAC4 <PED.ab2@14650>   ST comWord__AL_0_86C0
0004BAD6 <PED.ab2@14651>   !newfree
0004BADA <PED.ab2@14652>   MOVEM.l (A7)+,D0-D1/A0-A1/A6
0004BADC <PED.ab2@14654> RTS
0004BAE2 <PED.ab2@14657>   MOVEA.l _execbase,A6
0004BAE8 <PED.ab2@14658>   MOVE.w comWord_MaxColumns,D0
0004BAEE <PED.ab2@14659>   MULU viewablelines+2,D0
0004BAF0 <PED.ab2@14660>   MOVEQ.l #$02,D1
0004BAF6 <PED.ab2@14661>   MOVE.w D1,comWord__AL_0_86C0
0004BB18 <PED.ab2@14662>   !newalloc
0004BB1E <PED.ab2@14663>   MOVE.l D0,textbufferaddr
0004BB22 <PED.ab2@14664>   BEQ.w JL_0_7334 ; quit ped
0004BB24 <PED.ab2@14665> RTS
0004BB4E <PED.ab2@14671>   !basic
0004BB54 <PED.ab2@14672>   Gosub kill_menus
0004BB5A <PED.ab2@14673>   Gosub close_bubblehelp
0004BB60 <PED.ab2@14674>   Gosub close_popupwindow
0004BB98 <PED.ab2@14675>   WZCloseWindow WZID("WIN_AUTODOC")
0004BBD0 <PED.ab2@14676>   WZCloseWindow WZID("WIN_INSTRUCTIONBROWSER")
0004BC08 <PED.ab2@14677>   WZCloseWindow WZID("WIN_NEWTYPE")
0004BC40 <PED.ab2@14678>   WZCloseWindow WZID("WIN_LABELS")
0004BC78 <PED.ab2@14679>   WZCloseWindow WZID("WIN_HELPDIAG")
0004BCB0 <PED.ab2@14680>   WZCloseWindow WZID("WIN_SHORTCUTS")
0004BCE8 <PED.ab2@14681>   WZCloseWindow WZID("WIN_LIBRARYBROWSER")
0004BD20 <PED.ab2@14683>   WZCloseWindow WZID("WIN_SEARCH")
0004BD58 <PED.ab2@14684>   WZCloseWindow WZID("WIN_HELP")
0004BD78 <PED.ab2@14685>   If Peek.l(?CLI_output_file)<>0
0004BD90 <PED.ab2@14686>     Close_ Peek.l(?CLI_output_file)
0004BDA2 <PED.ab2@14687>     Poke.l ?CLI_output_file,0
0004BDC0 <PED.ab2@14692>   !asm
0004BDC6 <PED.ab2@14693>   JSR close_sourcewindow
0004BDCC <PED.ab2@14694>   JSR arexx_send_closewindow
0004BDD2 <PED.ab2@14696>   MOVEA.l ptr_visualinfo,A0
0004BDD8 <PED.ab2@14697>   MOVEA.l _gadtoolsbase,A6
0004BDDC <PED.ab2@14698>   JSR _FreeVisualInfo(A6)
0004BDE2 <PED.ab2@14699>   CLR.l ptr_visualinfo
0004BDE8 <PED.ab2@14701>   MOVEA.l _execbase,A6
0004BDEA <PED.ab2@14702>   SUBA.l A1,A1
0004BDEE <PED.ab2@14703>   JSR _FindTask(A6)
0004BDF0 <PED.ab2@14704>   MOVEA.l D0,A0
0004BDF8 <PED.ab2@14705>   MOVE.l AL_0_7356,$B8(A0)
0004BDFC <PED.ab2@14707>   BSR.b free_textbuffer
0004BE02 <PED.ab2@14709>   TST.w use_pubscreen
0004BE06 <PED.ab2@14710>    BEQ.w JL_0_7518
0004BE0C <PED.ab2@14711>   MOVEA.l _intuibase,A6
0004BE12 <PED.ab2@14712>   MOVEA.l ptr_pedscreen,A0
0004BE14 <PED.ab2@14713>   MOVEQ.l #$01,D0
0004BE18 <PED.ab2@14714>   JSR _PubScreenStatus(A6)
0004BE42 <PED.ab2@14717>   !basic
0004BE48 <PED.ab2@14718>   vvblank_Free{}
0004BE4E <PED.ab2@14719>   screen_Close{}   ; this release all pens for us  and close the used font
0004BE6C <PED.ab2@14720>   !asm
0004BE6E <PED.ab2@14721> RTS
0004BE72 <PED.ab2@14725>   MOVEM.l D2-D7/A2-A6,-(A7)
0004BE78 <PED.ab2@14727>   CLR.l messagestore
0004BE7E <PED.ab2@14729>   TST.l ptr_sourcewindow
0004BE82 <PED.ab2@14730>    BEQ.w exit_closesourcewindow
0004BE88 <PED.ab2@14732>   JSR check_intuimsg
0004BEB2 <PED.ab2@14734>   !basic
0004BECA <PED.ab2@14735>   CloseWindow_ *sourcewin : *sourcewin = 0
0004BEDA <PED.ab2@14738>   DisposeObject_ *larrowbutton
0004BEEA <PED.ab2@14739>   DisposeObject_ *larrowimage
0004BEFA <PED.ab2@14740>   DisposeObject_ *rarrowbutton
0004BF0A <PED.ab2@14741>   DisposeObject_ *rarrowimage
0004BF1A <PED.ab2@14742>   DisposeObject_ *horizprop
0004BF2A <PED.ab2@14743>   DisposeObject_ *darrowbutton
0004BF3A <PED.ab2@14744>   DisposeObject_ *darrowimage
0004BF4A <PED.ab2@14745>   DisposeObject_ *uarrowbutton
0004BF5A <PED.ab2@14746>   DisposeObject_ *uarrowimage
0004BF6A <PED.ab2@14747>   DisposeObject_ *vertiprop
0004BF82 <PED.ab2@14748>   FreeScreenDrawInfo_ *myscreen,*drawinfo
0004BFA0 <PED.ab2@14749>   !asm
0004BFA6 <PED.ab2@14750>   CLR.l ptr_sourcewindow
0004BFAC <PED.ab2@14752>   TST.l comPtr_SourceAreaRastPort
0004BFB0 <PED.ab2@14753>    BEQ.w exit_closesourcewindow
0004BFB6 <PED.ab2@14754>   MOVEA.l _execbase,A6
0004BFBC <PED.ab2@14755>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004BFCE <PED.ab2@14756>   !newfree
0004BFD2 <PED.ab2@14759>   MOVEM.l (A7)+,D2-D7/A2-A6
0004BFD4 <PED.ab2@14760> RTS
0004BFDA <PED.ab2@14764>   screen_ReleaseAllPens{} ; release all pens that have been previously obtained by screen.include
0004BFFC <PED.ab2@14766>   If Peek.b(?use_wbscreen) = False
0004C018 <PED.ab2@14767>     screen_SetPenRGB{0             ,AB3RGB(#AB3_screenback) }
0004C034 <PED.ab2@14768>     screen_SetPenRGB{1             ,AB3RGB(#AB3_screentext) }
0004C050 <PED.ab2@14769>     screen_SetPenRGB{2             ,AB3RGB(#AB3_screenshine)}
0004C06C <PED.ab2@14770>     screen_SetPenRGB{3             ,AB3RGB(#AB3_screenfill) }
0004C092 <PED.ab2@14771>     AB3Pen(#AB3_screenback)        = screen_GetPenRGB{AB3RGB(#AB3_screenback) }
0004C0B8 <PED.ab2@14772>     AB3Pen(#AB3_screentext)        = screen_GetPenRGB{AB3RGB(#AB3_screentext) }
0004C0DE <PED.ab2@14773>     AB3Pen(#AB3_screenshine)       = screen_GetPenRGB{AB3RGB(#AB3_screenshine)}
0004C104 <PED.ab2@14774>     AB3Pen(#AB3_screenfill)        = screen_GetPenRGB{AB3RGB(#AB3_screenfill) }
0004C10A <PED.ab2@14775>   Else
0004C11E <PED.ab2@14776>     AB3Pen(#AB3_screenback)        = 0
0004C132 <PED.ab2@14777>     AB3Pen(#AB3_screentext)        = 1
0004C146 <PED.ab2@14778>     AB3Pen(#AB3_screenshine)       = 2
0004C15A <PED.ab2@14779>     AB3Pen(#AB3_screenfill)        = 3
0004C180 <PED.ab2@14782>   AB3Pen(#AB3_cfunction)           = screen_GetPenRGB{AB3RGB(#AB3_cfunction)}
0004C1A6 <PED.ab2@14783>   AB3Pen(#AB3_cmacro)              = screen_GetPenRGB{AB3RGB(#AB3_cmacro)}
0004C1CC <PED.ab2@14784>   AB3Pen(#AB3_cstring)             = screen_GetPenRGB{AB3RGB(#AB3_cstring)}
0004C1F2 <PED.ab2@14785>   AB3Pen(#AB3_cnewtype)            = screen_GetPenRGB{AB3RGB(#AB3_cnewtype)}
0004C218 <PED.ab2@14786>   AB3Pen(#AB3_cconstant)           = screen_GetPenRGB{AB3RGB(#AB3_cconstant)}
0004C23E <PED.ab2@14787>   AB3Pen(#AB3_cremarkforeground)   = screen_GetPenRGB{AB3RGB(#AB3_cremarkforeground)}
0004C264 <PED.ab2@14788>   AB3Pen(#AB3_cremarkbackground)   = screen_GetPenRGB{AB3RGB(#AB3_cremarkbackground)}
0004C28A <PED.ab2@14789>   AB3Pen(#AB3_ctoken)              = screen_GetPenRGB{AB3RGB(#AB3_ctoken)}
0004C2B0 <PED.ab2@14790>   AB3Pen(#AB3_ctokenbackground)    = screen_GetPenRGB{AB3RGB(#AB3_ctokenbackground)}
0004C2D6 <PED.ab2@14791>   AB3Pen(#AB3_cbackground)         = screen_GetPenRGB{AB3RGB(#AB3_cbackground)}
0004C2FC <PED.ab2@14792>   AB3Pen(#AB3_cother)              = screen_GetPenRGB{AB3RGB(#AB3_cother)}
0004C322 <PED.ab2@14793>   AB3Pen(#AB3_cclassic)            = screen_GetPenRGB{AB3RGB(#AB3_cclassic)}
0004C340 <PED.ab2@14795>   Poke.l ?functioncolor            ,AB3Pen(#AB3_cfunction)
0004C35E <PED.ab2@14796>   Poke.l ?macrocolor               ,AB3Pen(#AB3_cmacro)
0004C37C <PED.ab2@14797>   Poke.l ?stringcolor              ,AB3Pen(#AB3_cstring)
0004C39A <PED.ab2@14798>   Poke.l ?newtypecolor             ,AB3Pen(#AB3_cnewtype)
0004C3B8 <PED.ab2@14799>   Poke.l ?constantcolor            ,AB3Pen(#AB3_cconstant)
0004C3D6 <PED.ab2@14800>   Poke.l ?remarkcolor              ,AB3Pen(#AB3_cremarkforeground)
0004C3F4 <PED.ab2@14801>   Poke.l ?remarkbgcolor            ,AB3Pen(#AB3_cremarkbackground)
0004C410 <PED.ab2@14802>   Poke.w ?tokencolor               ,AB3Pen(#AB3_ctoken)
0004C42E <PED.ab2@14803>   Poke.l ?tokenbackground          ,AB3Pen(#AB3_ctokenbackground)
0004C44C <PED.ab2@14804>   Poke.l ?backgroundcolor          ,AB3Pen(#AB3_cbackground)
0004C468 <PED.ab2@14805>   Poke.w ?othercolor               ,AB3Pen(#AB3_cother)
0004C486 <PED.ab2@14806>   Poke.l ?classiccolor             ,AB3Pen(#AB3_cclassic)
0004C488 <PED.ab2@14808> RTS
0004C492 <PED.ab2@14813>   MOVE.w comWord_Column,comWord_StoreColumn
0004C49C <PED.ab2@14814>   MOVE.l comLong_DisplayLine,comLong_StoreDisplayLine
0004C4A6 <PED.ab2@14815>   MOVE.w comWord_TextBufferOffset,comWord_StoreTextBufferOffset
0004C4A8 <PED.ab2@14816> RTS
0004C4B2 <PED.ab2@14819>   MOVE.w comWord_StoreColumn,comWord_Column
0004C4BC <PED.ab2@14820>   MOVE.l comLong_StoreDisplayLine,comLong_DisplayLine
0004C4C6 <PED.ab2@14821>   MOVE.w comWord_StoreTextBufferOffset, comWord_TextBufferOffset
0004C4C8 <PED.ab2@14822> RTS
0004C4CE <PED.ab2@14826>   MOVEA.l _graphicsbase,A6
0004C4D4 <PED.ab2@14827>   MOVEA.l rp_sourcewindow,A1
0004C4DA <PED.ab2@14828>   MOVE.l backgroundcolor,D0
0004C4DE <PED.ab2@14829>   JSR _SetAPen(A6)
0004C4E0 <PED.ab2@14831>   MOVEQ.l #$00,D0
0004C4E2 <PED.ab2@14832>   MOVEQ.l #$00,D1
0004C4E8 <PED.ab2@14833>   MOVE.w win_InnerWidth,D2
0004C4EE <PED.ab2@14834>   MOVE.w ypos_statusarea,D3
0004C4F2 <PED.ab2@14835>   JSR _RectFill(A6)              ;A1:rp, D0:xm in, D1:ymin, D2:xmax, D3:ymax  d0-d3:16
0004C4F8 <PED.ab2@14839>   MOVEA.l textbufferaddr,A0
0004C4FE <PED.ab2@14840>   MOVE.w comWord_MaxColumns,D0
0004C500 <PED.ab2@14841>   LSR.w #1,D0
0004C506 <PED.ab2@14842>   MOVE.l viewablelines,D1
0004C508 <PED.ab2@14843>   MULS d0,d1
0004C50A <PED.ab2@14844>   SUBQ.w #1,D1
0004C50E <PED.ab2@14847>     MOVE.w #$2020,(A0)+
0004C512 <PED.ab2@14848>   DBF D1,JL_0_76A6
0004C514 <PED.ab2@14849>   RTS
0004C516 <PED.ab2@14852> RTS
0004C51C <PED.ab2@14855>   TST.b old_scrolling
0004C520 <PED.ab2@14856>   BNE 'old
0004C54A <PED.ab2@14857>   !basic
0004C558 <PED.ab2@14858>   vvblank_Wait{}
0004C576 <PED.ab2@14861>   !asm
0004C578 <PED.ab2@14863> RTS
0004C57E <PED.ab2@14866>   MOVEA.l textbufferaddr,A0
0004C584 <PED.ab2@14867>   ADDA.w comWord_TextBufferOffset,A0
0004C58A <PED.ab2@14868>   ADDA.w comWord_ColumnsOffset,A0
0004C590 <PED.ab2@14869>   ADDA.w comWord_Column,A0
0004C592 <PED.ab2@14870>   MOVE.b D0,(A0)
0004C598 <PED.ab2@14871>   MOVE.b D0,comByte_EnteredCharacter
0004C59A <PED.ab2@14872>   MOVEQ.l #$00,D0
0004C5A0 <PED.ab2@14873>   MOVE.l comLong_DisplayLine,D1
0004C5A6 <PED.ab2@14874>   MOVE.w comWord_Column,D0
0004C5AC <PED.ab2@14876>   TST.l comLong_BlockEndY
0004C5B0 <PED.ab2@14877>    BMI.w JL_0_7742
0004C5B4 <PED.ab2@14878>   MOVEM.l D0-D1,-(A7)
0004C5BA <PED.ab2@14879>   ADD.w comWord_ColumnsOffset,D0
0004C5C0 <PED.ab2@14880>   ADD.l comLong_DisplayLineOffset,D1
0004C5C6 <PED.ab2@14881>   JSR JL_0_3154
0004C5CA <PED.ab2@14882>   MOVEM.l (A7)+,D0-D1
0004C5D0 <PED.ab2@14883>   TST.b comByte_StateBlockMark
0004C5D4 <PED.ab2@14884>    BEQ.w JL_0_7742
0004C5DA <PED.ab2@14885>   ST comWord_CursorInMarkedBlock
0004C5E0 <PED.ab2@14889>   MULU fontheight,D1
0004C5E6 <PED.ab2@14890>   MULU fontwidth,D0
0004C5EC <PED.ab2@14891>   LEA comByte_EnteredCharacter,A0
0004C5F2 <PED.ab2@14892>   CLR.w comWord__AL_0_869A
0004C5F8 <PED.ab2@14893>   JSR JL_0_5BB6
0004C5FE <PED.ab2@14894>   SF comWord_CursorInMarkedBlock
0004C600 <PED.ab2@14895> RTS
0004C606 <PED.ab2@14901>   MOVE.l comLong_DisplayLine,D1
0004C60C <PED.ab2@14902>   MULU comWord_MaxColumns,D1
0004C612 <PED.ab2@14903>   MOVE.w D1, comWord_TextBufferOffset
0004C614 <PED.ab2@14904> RTS
0004C61A <PED.ab2@14907>   TST.w state_of_cursor
0004C61E <PED.ab2@14908>    BNE.w exit_cursor_on
0004C624 <PED.ab2@14911>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004C62A <PED.ab2@14912>   MOVE.b #3,$18(a1)
0004C630 <PED.ab2@14913>   JSR switch_cursordisplay
0004C636 <PED.ab2@14914>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004C63C <PED.ab2@14915>   MOVE.b #15,$18(a1)
0004C63E <PED.ab2@14918> RTS
0004C644 <PED.ab2@14921>   TST.w state_of_cursor
0004C648 <PED.ab2@14922>   BEQ.w exit_cursor_off
0004C64E <PED.ab2@14924>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004C654 <PED.ab2@14925>   MOVE.b #3,$18(a1)
0004C65A <PED.ab2@14926>   JSR switch_cursordisplay
0004C660 <PED.ab2@14927>   MOVEA.l comPtr_SourceAreaRastPort,A1
0004C666 <PED.ab2@14928>   MOVE.b #15,$18(a1)
0004C668 <PED.ab2@14930> RTS
0004C66A <PED.ab2@14932> state_of_cursor:  Ds.w 1
0004C670 <PED.ab2@14935>   TST.l ptr_sourcewindow
0004C674 <PED.ab2@14936>    BEQ.w exit_switch_cursor
0004C67A <PED.ab2@14937>   NOT state_of_cursor
0004C67E <PED.ab2@14940>   MOVEM.l D0-D3/A0-A1/A6,-(A7)
0004C6A8 <PED.ab2@14941>   !basic
0004C6DE <PED.ab2@14942>   If Peek.l(?comLong_DisplayLine) > Peek.l(?viewablelines)-1
0004C706 <PED.ab2@14943>     Poke.l ?comLong_DisplayLine, Peek.l(?viewablelines)-1
0004C72E <PED.ab2@14945>   xmin.w = Peek.w(?comWord_Column) * Peek.w(?fontwidth)
0004C75A <PED.ab2@14946>   ymin.w = Peek.l(?comLong_DisplayLine) * Peek.w(?fontheight)
0004C782 <PED.ab2@14947>   xmax.w = xmin + Peek.w(?fontwidth) - 1
0004C7A4 <PED.ab2@14948>   ymax.w = ymin + Peek.w(?font_Heightm1)
0004C7E4 <PED.ab2@14949>   RectFill_ Peek.l(?comPtr_SourceAreaRastPort),xmin,ymin,xmax,ymax
0004C802 <PED.ab2@14950>   !asm
0004C806 <PED.ab2@14951>   MOVEM.l (A7)+,D0-D3/A0-A1/A6
0004C808 <PED.ab2@14954> RTS
0004C80C <PED.ab2@14957>   BSR.b print_actualsourceline
0004C836 <PED.ab2@14958>   !basic
0004C840 <PED.ab2@14978>   MOVE.l comLong_DisplayLineOffset,d0  : slider_top.l     = PutD0
0004C84A <PED.ab2@14979>   MOVE.l comLong_TotalLines,d0         : slider_total.l   = PutD0
0004C854 <PED.ab2@14980>   MOVE.l viewablelines,d0              : slider_visible.l = PutD0
0004C866 <PED.ab2@14983>   If slider_total>0
0004C878 <PED.ab2@14984>     If slider_total>=#max_slider_res
0004C904 <PED.ab2@14985>       !mul48f{slider_visible,#max_slider_res,slider_total,slider_visible}  : If slider_visible<1 Then slider_visible=1
0004C976 <PED.ab2@14986>       !mul48f{slider_top    ,#max_slider_res,slider_total,slider_top}
0004C97E <PED.ab2@14987>       slider_total   = #max_slider_res
0004C9A0 <PED.ab2@14990>     SetGadgetAttrsA_ *vertiprop,*sourcewin,0,Tags(@@
0004C9AE <PED.ab2@14991>     SetGadgetAttrsA_ *vertiprop,*sourcewin,0,Tags(@@
0004C9E0 <PED.ab2@14992>     SetGadgetAttrsA_ *vertiprop,*sourcewin,0,Tags(@@
0004C9FE <PED.ab2@14994>   !asm
0004CA00 <PED.ab2@14995> RTS
0004CA04 <PED.ab2@14998>   MOVEM.l D0/A0-A1/A3,-(A7)
0004CA0A <PED.ab2@14999>   TST.w comWord_KeyBeforeReturn
0004CA0E <PED.ab2@15000>   BNE.w JL_0_78B6
0004CA14 <PED.ab2@15001>   TST.w comWord_SourceChanged
0004CA18 <PED.ab2@15002>    BNE.w JL_0_78B6
0004CA20 <PED.ab2@15003>   CMPI.w #$1,comWord_SourceModifiedFlag
0004CA24 <PED.ab2@15004>   BEQ.w JL_0_78F6
0004CA2C <PED.ab2@15005>   MOVE.w #$0001,comWord_SourceModifiedFlag
0004CA36 <PED.ab2@15006>   MOVE.l #$20202020,comStr_Modified               ; clear string  tomsmart1
0004CA40 <PED.ab2@15007>   MOVE.l #$20202020,comStr_Modified+4
0004CA48 <PED.ab2@15008>   MOVE.b #$0,comStr_Modified+8                    ; terminate the string tomsmart
0004CA4C <PED.ab2@15009>   BRA.w JL_0_78E6
0004CA54 <PED.ab2@15012>   CMPI.w #$2,comWord_SourceModifiedFlag
0004CA58 <PED.ab2@15013>   BEQ.w JL_0_78F6
0004CA60 <PED.ab2@15014>   MOVE.w #$0002,comWord_SourceModifiedFlag
0004CA6A <PED.ab2@15015>   MOVE.l #$4D4F4449,comStr_Modified        ;write modified in the strind start with "MODI"
0004CA74 <PED.ab2@15016>   MOVE.l #$46494544,comStr_Modified+4      ;then the rest "FIED"
0004CA7C <PED.ab2@15017>   MOVE.b #$0,comStr_Modified+8             ; terminate the string  tomsmart1
0004CA82 <PED.ab2@15024>   JSR update_statusline
0004CA86 <PED.ab2@15027>   MOVEM.l (A7)+,D0/A0-A1/A3
0004CA88 <PED.ab2@15028> RTS
0004CA8E <PED.ab2@15031>   JSR update_modifiermark
0004CA94 <PED.ab2@15032>   JSR print_actualsourcecolumn
0004CABE <PED.ab2@15033>   !basic
0004CAC0 <PED.ab2@15034>   MOVE d1,d0
0004CAC4 <PED.ab2@15035>   xpot.l = PutD0
0004CAC6 <PED.ab2@15037>   MOVEQ #0,d0
0004CACC <PED.ab2@15038>   MOVE.w comWord_ColumnsOffset,D0
0004CAD2 <PED.ab2@15039>   ADD.w comWord_Column,D0
0004CAD4 <PED.ab2@15040>   ADDQ.w #1,D0
0004CAD8 <PED.ab2@15041>   xact.l = PutD0
0004CAE0 <PED.ab2@15042>   xmax_slider.l = #MAX_Columns
0004CAE6 <PED.ab2@15043>   MOVE.w visiblecolumns,d0
0004CAF2 <PED.ab2@15044>   xvis.w = PutD0 / xmax_slider
0004CB18 <PED.ab2@15045>   SetGadgetAttrsA_ *horizprop,*sourcewin,0,Tags(#PGA_VertPot,-1,@@
0004CB28 <PED.ab2@15046>   SetGadgetAttrsA_ *horizprop,*sourcewin,0,Tags(#PGA_VertPot,-1,@@
0004CB36 <PED.ab2@15047>   SetGadgetAttrsA_ *horizprop,*sourcewin,0,Tags(#PGA_VertPot,-1,@@
0004CB46 <PED.ab2@15048>   SetGadgetAttrsA_ *horizprop,*sourcewin,0,Tags(#PGA_VertPot,-1,@@
0004CB54 <PED.ab2@15049>   SetGadgetAttrsA_ *horizprop,*sourcewin,0,Tags(#PGA_VertPot,-1,@@
0004CB62 <PED.ab2@15050>   SetGadgetAttrsA_ *horizprop,*sourcewin,0,Tags(#PGA_VertPot,-1,@@
0004CB96 <PED.ab2@15051>   SetGadgetAttrsA_ *horizprop,*sourcewin,0,Tags(#PGA_VertPot,-1,@@
0004CBB4 <PED.ab2@15053>   !asm
0004CBB6 <PED.ab2@15054> RTS
0004CBBC <PED.ab2@15057>   JSR save_cursorposition
0004CBC2 <PED.ab2@15058>   CLR.w comWord_TextBufferOffset
0004CBC4 <PED.ab2@15059>   MOVEQ.l #$00,D7
0004CBCA <PED.ab2@15060>   MOVE.l viewablelines,D7
0004CBCC <PED.ab2@15061>   SUBQ.l #1,D7
0004CBD2 <PED.ab2@15062>   CLR.l comLong_DisplayLine
0004CBD8 <PED.ab2@15063>   CLR.w comWord_Column
0004CBDE <PED.ab2@15064>   MOVEA.l textbufferaddr,A5
0004CBE4 <PED.ab2@15065>   ADDA.w comWord_TextBufferOffset,A5
0004CBEA <PED.ab2@15066>   ADDA.w comWord_ColumnsOffset,A5
0004CBEC <PED.ab2@15067>   MOVEQ.l #$00,D6
0004CBF2 <PED.ab2@15068>   CLR.w comWord__AL_0_869A
0004CBF4 <PED.ab2@15071>     MOVEA.l A5,A0
0004CBF6 <PED.ab2@15072>     MOVEQ.l #$00,D0
0004CBF8 <PED.ab2@15073>     MOVE.l D6,D1
0004CBFA <PED.ab2@15074>     MOVEQ.l #$00,D3
0004CBFC <PED.ab2@15075>     MOVE.w D7,-(A7)
0004CC02 <PED.ab2@15076>     ST comWord__AL_0_8668
0004CC06 <PED.ab2@15082>     MOVEM.l d0-d2/a0,-(a7)
0004CC0C <PED.ab2@15083>     MOVE.l textbufferaddr,a0
0004CC12 <PED.ab2@15084>     ADD.w comWord_TextBufferOffset,a0
0004CC18 <PED.ab2@15085>     CLR.b instring2
0004CC1C <PED.ab2@15086>     MOVE.w #0,d2
0004CC22 <PED.ab2@15087>     CMP.l #0,a0
0004CC26 <PED.ab2@15088>     BEQ 'l2b
0004CC2C <PED.ab2@15089>     MOVE.w comWord_ColumnsOffset,d1
0004CC2E <PED.ab2@15091>     CMP.w d1,d2
0004CC32 <PED.ab2@15092>     BGE 'l2b
0004CC34 <PED.ab2@15093>     MOVE.b (a0)+,d0
0004CC38 <PED.ab2@15094>     CMP.b #$22,d0
0004CC3C <PED.ab2@15095>     BNE 'l2
0004CC42 <PED.ab2@15096>     NOT.b instring2
0004CC44 <PED.ab2@15098>     ADDQ.w #1,d2
0004CC48 <PED.ab2@15099>     BRA 'l1
0004CC4C <PED.ab2@15101>     MOVEM.l (a7)+,d0-d2/a0
0004CC54 <PED.ab2@15102>     MOVE.b #$1,keepstring
0004CC5A <PED.ab2@15103>     JSR print_complete_line
0004CC60 <PED.ab2@15104>     CLR.b keepstring
0004CC62 <PED.ab2@15105>     MOVE.w (A7)+,D7
0004CC68 <PED.ab2@15106>     SF comWord__AL_0_8668
0004CC6E <PED.ab2@15107>     JSR process_highlightning
0004CC74 <PED.ab2@15108>     ADDQ.l #1,comLong_DisplayLine
0004CC7C <PED.ab2@15109>     ADD.w #MAX_Columns, comWord_TextBufferOffset
0004CC7E <PED.ab2@15110>     MOVEQ.l #$00,D0
0004CC84 <PED.ab2@15111>     ADD.l #MAX_Columns,A5
0004CC8A <PED.ab2@15112>     ADD.w fontheight,D6
0004CC8E <PED.ab2@15113>   DBF D7,JL_0_799A
0004CC94 <PED.ab2@15114>   JSR restore_cursorposition
0004CC9A <PED.ab2@15115> JMP JL_0_590C
0004CCA0 <PED.ab2@15118>   MOVE.l comLong_DisplayLineOffset,D2
0004CCA6 <PED.ab2@15119>   ADD.l comLong_DisplayLine,D2
0004CCAC <PED.ab2@15120>   CMP.l comLong_BlockStartY,D2
0004CCB0 <PED.ab2@15121>   BNE.w JL_0_79EE
0004CCB6 <PED.ab2@15122>   MOVE.w comWord_Column,D2
0004CCBC <PED.ab2@15123>   ADD.w comWord_ColumnsOffset,D2
0004CCC2 <PED.ab2@15124>   CMP.w comLong_BlockStartX,D2
0004CCC6 <PED.ab2@15125>   BHI.w JL_0_79EE
0004CCC8 <PED.ab2@15126>   MOVEQ.l #$00,D3
0004CCCA <PED.ab2@15129> RTS
0004CCD0 <PED.ab2@15132>   MOVE.l comLong_DisplayLineOffset,D2
0004CCD6 <PED.ab2@15133>   ADD.l comLong_DisplayLine,D2
0004CCDC <PED.ab2@15134>   CMP.l comLong_BlockEndY,D2
0004CCE0 <PED.ab2@15135>   BNE.w JL_0_7A12
0004CCE6 <PED.ab2@15136>   MOVE.w comWord_Column,D2
0004CCEC <PED.ab2@15137>   ADD.w comWord_ColumnsOffset,D2
0004CCF2 <PED.ab2@15138>   CMP.w comLong_BlockEndX,D2
0004CCF6 <PED.ab2@15139>   BHI.w JL_0_7A12
0004CCF8 <PED.ab2@15140>   MOVEQ.l #$00,D3
0004CCFA <PED.ab2@15143> RTS
0004CD00 <PED.ab2@15146>   MOVE.w comLong_BlockStartX,D2
0004CD06 <PED.ab2@15147>   CMP.w comWord_MaxColumns,D2
0004CD0A <PED.ab2@15148>   BCS.w JL_0_7A3C
0004CD10 <PED.ab2@15149>   CLR.w comLong_BlockStartX
0004CD16 <PED.ab2@15150>   ADDQ.l #1,comLong_BlockStartY
0004CD1C <PED.ab2@15151>   MOVE.l comLong_BlockStartY,D2
0004CD22 <PED.ab2@15152>   CMP.l comLong_BlockEndY,D2
0004CD26 <PED.ab2@15153>   BLS.w JL_0_7A3C
0004CD2C <PED.ab2@15154> JMP JL_0_572C
0004CD32 <PED.ab2@15157>   MOVE.w comLong_BlockEndX,D2
0004CD36 <PED.ab2@15158>   BPL.w JL_0_7A66
0004CD3C <PED.ab2@15159>   MOVE.w comWord_MaxColumns,D2
0004CD3E <PED.ab2@15160>   SUBQ.w #1,D2
0004CD44 <PED.ab2@15161>   MOVE.w D2,comLong_BlockEndX
0004CD4A <PED.ab2@15162>   SUBQ.l #1,comLong_BlockEndY
0004CD50 <PED.ab2@15163>   MOVE.l comLong_BlockEndY,D2
0004CD56 <PED.ab2@15164>   CMP.l comLong_BlockStartY,D2
0004CD5A <PED.ab2@15165>   BCC.w JL_0_7A90
0004CD60 <PED.ab2@15167> JMP JL_0_572C
0004CD66 <PED.ab2@15170>   MOVE.l comLong_BlockStartY,D2
0004CD6C <PED.ab2@15171>   CMP.l comLong_BlockEndY,D2
0004CD70 <PED.ab2@15172>   BNE.w JL_0_7A7C
0004CD76 <PED.ab2@15173>   MOVE.w comLong_BlockEndX,D2
0004CD7C <PED.ab2@15174>   CMP.w comLong_BlockStartX,D2
0004CD80 <PED.ab2@15175>   BLT.b JL_0_7A62
0004CD86 <PED.ab2@15178>   CMP.w comWord_MaxColumns,D2
0004CD8A <PED.ab2@15179>   BCS.w JL_0_7A90
0004CD90 <PED.ab2@15180>   MOVE.w comWord_MaxColumns,D2
0004CD92 <PED.ab2@15181>   SUBQ.w #1,D2
0004CD98 <PED.ab2@15182>   MOVE.w D2,comLong_BlockEndX
0004CD9A <PED.ab2@15185> RTS
0004CDA0 <PED.ab2@15189>   CLR.w comWord_KeyBeforeReturn
0004CDA6 <PED.ab2@15190>   JSR cursor_on
0004CDAC <PED.ab2@15194>   JSR checkedit2
0004CDB2 <PED.ab2@15197>   JSR cursor_on
0004CDB8 <PED.ab2@15198>   CLR.b doedit2
0004CDBE <PED.ab2@15200>   JSR update_horizscroller
0004CDC4 <PED.ab2@15201>   JSR print_actualsourceline
0004CDC8 <PED.ab2@15204>   !regs2stack
0004CDF2 <PED.ab2@15205>   !basic
0004CE10 <PED.ab2@15206>   If Peek.b(?use_intellisense)<>0
0004CE50 <PED.ab2@15207>     If WZ_CheckOpen{"WIN_POPUP"} AND last_key = $08
0004CE56 <PED.ab2@15208>       Gosub intellisense
0004CE74 <PED.ab2@15211>   !asm
0004CE78 <PED.ab2@15212>   !stack2regs
0004CE7E <PED.ab2@15215>   JSR general_message_loop
0004CE84 <PED.ab2@15216>   JSR cursor_off
0004CE8A <PED.ab2@15217>   MOVEA.l textbufferaddr,A2
0004CE90 <PED.ab2@15218>   ADDA.w comWord_TextBufferOffset,A2
0004CE96 <PED.ab2@15219>   MOVE.w comWord_Column,D0
0004CE9A <PED.ab2@15222>   !regs2stack
0004CEC4 <PED.ab2@15223>   !basic
0004CEE2 <PED.ab2@15224>   If Peek.b(?use_intellisense)<>0
0004CF34 <PED.ab2@15225>     If WZ_CheckOpen{"WIn_PoPUP"} AND (last_key>$4B AND last_key<$50)
0004CF3A <PED.ab2@15226>       Select last_key
0004CF5E <PED.ab2@15227>       Case $4D : WZ_SetPopUpEntry{popupdata\selected_entry + 1}
0004CF88 <PED.ab2@15228>       Case $4C : WZ_SetPopUpEntry{popupdata\selected_entry - 1}
0004CFA2 <PED.ab2@15229>       Case $4E : Gosub close_popupwindow
0004CFBC <PED.ab2@15230>       Case $4F : Gosub close_popupwindow
0004CFBE <PED.ab2@15231>       End Select
0004CFDC <PED.ab2@15233>       !asm
0004CFE0 <PED.ab2@15234>       !stack2regs
0004CFE4 <PED.ab2@15235>       BRA.w JL_0_7AA0
0004CFEA <PED.ab2@15238>   Gosub close_bubblehelp
0004D008 <PED.ab2@15239>   !asm
0004D00C <PED.ab2@15240>   !stack2regs
0004D00E <PED.ab2@15243>   TST.l D7
0004D012 <PED.ab2@15244>    BMI.w key_delete                      ; negative code
0004D016 <PED.ab2@15245>   BCLR #$1E,D7
0004D01A <PED.ab2@15246>    BNE.w JL_0_7ADA                       ; not equal
0004D01E <PED.ab2@15247>   CMP.w #$20,D7
0004D022 <PED.ab2@15248>    BCS.w key_cursorleft                  ; carry set, lower
0004D026 <PED.ab2@15249>   CMP.w #$7F,D7
0004D02A <PED.ab2@15250>    BLT JL_0_7ADA                         ; less than
0004D030 <PED.ab2@15251>   CMP.l #$8c,d7
0004D034 <PED.ab2@15252>    BLE key_delete                        ; less or equal
0004D03A <PED.ab2@15256>   JSR immediate_syntaxhelp
0004D040 <PED.ab2@15257>   JSR insertchar
0004D044 <PED.ab2@15258> BRA.w JL_0_7AA0
0004D04C <PED.ab2@15264>   MOVE.b #2,doedit2                   ;change to 2 if char should cut block
0004D052 <PED.ab2@15265>   JSR checkedit2
0004D058 <PED.ab2@15266>   MOVEA.l textbufferaddr,A2
0004D05E <PED.ab2@15267>   ADDA.w comWord_TextBufferOffset,A2
0004D064 <PED.ab2@15268>   MOVE.w comWord_Column,D0
0004D06A <PED.ab2@15269>   MOVE.w D7,comWord_KeyBeforeReturn
0004D070 <PED.ab2@15270>   MOVE.w comWord_MaxColumns,D1
0004D076 <PED.ab2@15271>   ADD.w comWord_ColumnsOffset,D0
0004D078 <PED.ab2@15274>     SUBQ.w #1,D1
0004D07A <PED.ab2@15275>     CMP.w D1,D0
0004D07E <PED.ab2@15276>      BCC.w JL_0_7AF8
0004D084 <PED.ab2@15277>     MOVE.b -$1(A2,D1.W),$0(A2,D1.W)   ;insert char
0004D088 <PED.ab2@15278>   BRA.b JL_0_7AE8
0004D08E <PED.ab2@15281>   JSR source_scroll_line_to_left
0004D094 <PED.ab2@15282>   TST.l comLong_BlockEndY
0004D098 <PED.ab2@15283>    BMI.w JL_0_7BB0
0004D09E <PED.ab2@15284>   MOVE.w comWord_Column,D0
0004D0A4 <PED.ab2@15285>   ADD.w comWord_ColumnsOffset,D0
0004D0AA <PED.ab2@15286>   MOVE.l comLong_DisplayLine,D1
0004D0B0 <PED.ab2@15287>   ADD.l comLong_DisplayLineOffset,D1
0004D0B6 <PED.ab2@15288>   JSR JL_0_3154
0004D0BC <PED.ab2@15289>   CMP.l comLong_BlockStartY,D1
0004D0C0 <PED.ab2@15290>    BEQ.w JL_0_7B3A
0004D0C6 <PED.ab2@15291>   CMP.l comLong_BlockEndY,D1
0004D0CA <PED.ab2@15292>    BEQ.w JL_0_7B6C
0004D0CE <PED.ab2@15293>   BRA.w JL_0_7BB0
0004D0D4 <PED.ab2@15296>   CMP.w comLong_BlockStartX,D0
0004D0D8 <PED.ab2@15297>    BLE.w JL_0_7B94
0004D0DE <PED.ab2@15298>   TST.b comByte_StateBlockMark
0004D0E2 <PED.ab2@15299>    BEQ.w JL_0_7BB0
0004D0E8 <PED.ab2@15300>   ADDQ.w #1,comLong_BlockEndX
0004D0F0 <PED.ab2@15301>   CMPI.w #MAX_Columns-1,comLong_BlockEndX
0004D0F4 <PED.ab2@15302>    BLE.w JL_0_7BB0
0004D0FC <PED.ab2@15303>   MOVE.w #MAX_Columns-1,comLong_BlockEndX
0004D100 <PED.ab2@15304>   BRA.w JL_0_7BB0
0004D106 <PED.ab2@15307>   CMP.w comLong_BlockEndX,D0
0004D10A <PED.ab2@15308>    BGT.w JL_0_7BB0
0004D110 <PED.ab2@15309>   ADDQ.w #1,comLong_BlockEndX
0004D118 <PED.ab2@15310>   CMPI.w #MAX_Columns-1,comLong_BlockEndX
0004D11C <PED.ab2@15311>    BLE.w JL_0_7BB0
0004D124 <PED.ab2@15312>   MOVE.w #MAX_Columns-1,comLong_BlockEndX
0004D128 <PED.ab2@15313>   BRA.w JL_0_7BB0
0004D12E <PED.ab2@15316>   ADDQ.w #1,comLong_BlockStartX
0004D134 <PED.ab2@15317>   ADDQ.w #1,comLong_BlockEndX
0004D13C <PED.ab2@15318>   ANDI.w #$7F,comLong_BlockStartX           ;????????
0004D144 <PED.ab2@15319>   ANDI.w #$7F,comLong_BlockEndX             ;????????
0004D146 <PED.ab2@15322>   MOVE.w D7,D0
0004D14C <PED.ab2@15323>   JSR JL_0_76EA
0004D152 <PED.ab2@15324>   MOVE.w comWord_Column,D0
0004D158 <PED.ab2@15325>   JSR JL_0_7F70
0004D15A <PED.ab2@15326> RTS
0004D15E <PED.ab2@15330>   CMP.w #$1F,D7
0004D162 <PED.ab2@15331>     BNE.w key_cursorright
0004D168 <PED.ab2@15333>   MOVE.w message_qualifier,d1
0004D16C <PED.ab2@15334>   AND.w #$8,d1
0004D170 <PED.ab2@15335>    BEQ 'noctrl
0004D174 <PED.ab2@15336>   MOVEM.l d0-d7/a0-a6,-(a7)
0004D17A <PED.ab2@15337>   JSR cursor_off
0004D180 <PED.ab2@15338>   JSR menu_blockuntab                   ;call untab
0004D184 <PED.ab2@15339>   MOVEM.l (a7)+,d0-d7/a0-a6
0004D186 <PED.ab2@15340>   RTS
0004D18C <PED.ab2@15343>   MOVE.w comWord_QualifierStore,D1
0004D190 <PED.ab2@15344>   ANDI.w #$3,D1
0004D194 <PED.ab2@15345>    BEQ.w JL_0_7C1C
0004D196 <PED.ab2@15347>   MOVE.w D0,D1
0004D19C <PED.ab2@15348>   ADD.w comWord_ColumnsOffset,D1
0004D1A0 <PED.ab2@15349>    BEQ.w JL_0_7BE6
0004D1A2 <PED.ab2@15351>   MOVEQ.l #$00,D1
0004D1A6 <PED.ab2@15352> BRA.w JL_0_7C5C
0004D1AE <PED.ab2@15357>   nostring.l = 0
0004D1BE <PED.ab2@15358>   lastcolumn.w = Peek.w(?comWord_Column)
0004D1C4 <PED.ab2@15359>   MOVE.l textbufferaddr,a0
0004D1CA <PED.ab2@15360>   ADD.w comWord_TextBufferOffset,a0
0004D1D0 <PED.ab2@15361>   MOVE.l a0,d0:lineaddr = PutD0
0004D1FC <PED.ab2@15362>   For i.l = lineaddr To lineaddr + #MAX_Columns    ;clear highlight info but dont trash strings
0004D20E <PED.ab2@15363>     If nostring.l = 0
0004D234 <PED.ab2@15364>       Poke.b i,Peek.b(i) AND $7f
0004D258 <PED.ab2@15365>        If Peek.b(i) = $22 Then nostring = 1
0004D25E <PED.ab2@15366>     Else
0004D282 <PED.ab2@15367>       If Peek.b(i) = $22 Then nostring = 0
0004D292 <PED.ab2@15369>   Next
0004D298 <PED.ab2@15370>   MOVE.w comWord_Column,d1
0004D29A <PED.ab2@15371>   SUBQ.w #1,d1
0004D29E <PED.ab2@15372>   BGT 'w1
0004D2A0 <PED.ab2@15373>   MOVEQ #1,d1
0004D2A6 <PED.ab2@15375>   MOVE.l textbufferaddr,a0
0004D2AC <PED.ab2@15376>   ADD.w comWord_TextBufferOffset,a0
0004D2B2 <PED.ab2@15377>   ADD.w comWord_ColumnsOffset,d1
0004D2B4 <PED.ab2@15378>   ADD.w d1,a0
0004D2BA <PED.ab2@15379>   JSR getwordnodetoke
0004D2C0 <PED.ab2@15380>   MOVE.l a0,d0 : i = PutD0
0004D2E8 <PED.ab2@15381>   actualword$ = Peek$(i)
0004D300 <PED.ab2@15382>   cursorposition.l = Peek.w(?comWord_Column)+1
0004D310 <PED.ab2@15383>   Poke.w ?comWord_Column,lastcolumn
0004D312 <PED.ab2@15384> RTS
0004D320 <PED.ab2@15387>   nostring = 0 : already_displayed.b = False
0004D326 <PED.ab2@15389>   MOVE.l textbufferaddr,a0
0004D32C <PED.ab2@15390>   ADD.w comWord_TextBufferOffset,a0
0004D332 <PED.ab2@15391>   MOVE.l a0,d0 : lineaddr = PutD0
0004D35E <PED.ab2@15392>   For i.l = lineaddr To lineaddr + #MAX_Columns    ;clear highlight info but dont trash strings
0004D370 <PED.ab2@15393>     If nostring.l = 0
0004D396 <PED.ab2@15394>       Poke.b i,Peek.b(i) AND $7f
0004D3BA <PED.ab2@15395>        If Peek.b(i) = $22 Then nostring = 1
0004D3C0 <PED.ab2@15396>     Else
0004D3E4 <PED.ab2@15397>       If Peek.b(i) = $22 Then nostring = 0
0004D3F4 <PED.ab2@15399>   Next
0004D420 <PED.ab2@15400>   mytext$ = Peeks$(lineaddr,#MAX_Columns)
0004D438 <PED.ab2@15402>   cursorpos.l = Peek.w(?comWord_Column) + 1
0004D488 <PED.ab2@15403>   aword$ = "" : char$ =""
0004D49C <PED.ab2@15404>   tlen.l = FLen(mytext$)
0004D4C4 <PED.ab2@15405>   strhelp$ = ""
0004D4CE <PED.ab2@15406>   If tlen
0004D4D4 <PED.ab2@15407>     token.l = False
0004D4DA <PED.ab2@15408>     nextpos.l = cursorpos
0004D4E8 <PED.ab2@15409>     backpos.l = cursorpos - 1
0004D53A <PED.ab2@15413>       aword$ = aword$ + char$
0004D590 <PED.ab2@15414>       char$ = Mid$(mytext$,nextpos,1)
0004D59E <PED.ab2@15415>       nextpos + 1
0004D660 <PED.ab2@15416>     Until (Asc(char$)<48)  OR (char$="{") OR (char$="}") OR (nextpos>(tlen+1))
0004D688 <PED.ab2@15419>     char$ = ""
0004D6DA <PED.ab2@15421>       aword$ = char$ + aword$
0004D730 <PED.ab2@15422>       char$ = Mid$(mytext$,backpos,1)
0004D73E <PED.ab2@15423>       backpos - 1
0004D7B0 <PED.ab2@15425>       If char$ = "(" OR char$ = "{"
0004D7E4 <PED.ab2@15426>         tokname$ = aword$
0004D7EA <PED.ab2@15427>         Gosub syntax_help
0004D82E <PED.ab2@15428>         If strhelp$<>"" Then already_displayed.b = True
0004D884 <PED.ab2@15429>         aword$ = "" : char$="" : token = True
0004DA08 <PED.ab2@15431>     Until (Asc(char$)>57 AND Asc(char$)<63) OR (Asc(char$)<48 AND char$<>"" AND char$<>"$") OR (char$="=") OR (backpos<0) OR already_displayed
0004DA3C <PED.ab2@15433>     actualword$ = aword$
0004DA64 <PED.ab2@15434>     mytext$ =""
0004DA66 <PED.ab2@15438> RTS
0004DA90 <PED.ab2@15441>   !basic
0004DA96 <PED.ab2@15443>   Gosub getstring_new2
0004DACE <PED.ab2@15445>   If actualword$<>""
0004DAD4 <PED.ab2@15446>     Gosub instructionbrowser_startguide
0004DADA <PED.ab2@15447>   Else
0004DAE0 <PED.ab2@15448>     Gosub open_instructionbrowser
0004DB0A <PED.ab2@15450>   strhelp$ = Peek$(?str_screentitle)
0004DB38 <PED.ab2@15451>   PrintScreenTitle{strhelp$}
0004DB56 <PED.ab2@15452>   !asm
0004DB58 <PED.ab2@15453> RTS
0004DB82 <PED.ab2@15456>   !basic
0004DB88 <PED.ab2@15458>   _key.l = last_key
0004DB8E <PED.ab2@15459>   MOVE.l A2,d0 : lineaddr.l = PutD0   ; get pointer to current textline
0004DB94 <PED.ab2@15460>   already_displayed.b = False
0004DBD0 <PED.ab2@15462>   If (_key=@" ") OR (_key = @"(") OR (_key = @"{") ;OR (*PreProcessor\tokenFlags[_key&$FF]&#TOKENF_IS); " " "(" "{"
0004DBEC <PED.ab2@15464>     If Peek.w(?comWord_Column) > 0
0004DC1E <PED.ab2@15466>       If WZ_CheckOpen{"WIN_POPUP"} Then Gosub close_popupwindow
0004DC46 <PED.ab2@15467>       strline$ = Peek.s(lineaddr) ;Peeks$(lineaddr,Peek.w(?comWord_Column))
0004DC92 <PED.ab2@15477>       bracketclose1.l = Instr(strline$,")")
0004DCDE <PED.ab2@15478>       bracketclose2.l = Instr(strline$,"}")
0004DD2E <PED.ab2@15480>       bracketopen1.l  = Instr(strline$,"(",bracketclose1)
0004DD7E <PED.ab2@15481>       bracketopen2.l  = Instr(strline$,"{",bracketclose2)
0004DD86 <PED.ab2@15483>       bracketopen.l   = 0
0004DDA6 <PED.ab2@15485>       If bracketopen1>bracketopen2 Then bracketopen=bracketopen1:Else bracketopen=bracketopen2
0004DDB8 <PED.ab2@15487>       searchpos.l = Peek.w(?comWord_Column)
0004DDE0 <PED.ab2@15488>       If bracketopen>0 AND bracketopen<searchpos Then searchpos=bracketopen
0004DE40 <PED.ab2@15490>       tokname$ = preproc_CropToken{*PreProcessor,strline$,searchpos}
0004DE78 <PED.ab2@15491>       If tokname$><""
0004DEA4 <PED.ab2@15492>         If *PreProcessor\tokenFlags[_key&$FF]&#TOKENF_IS
0004DEF0 <PED.ab2@15493>           tokname$+Chr$(_key)
0004DF1C <PED.ab2@15508>       If tokname$
0004DF22 <PED.ab2@15509>         Gosub syntax_help
0004DF5A <PED.ab2@15510>         If strhelp$=""
0004DF60 <PED.ab2@15511>           Gosub intellisense
0004DF66 <PED.ab2@15515>   Else
0004DF6C <PED.ab2@15516>     Select _key
0004DF7A <PED.ab2@15517>     Case $8b ; "HELP"
0004DF80 <PED.ab2@15519>       Gosub getstring_new2
0004DFB4 <PED.ab2@15521>         tokname$ = actualword$
0004DFEC <PED.ab2@15522>         If tokname$ <> ""
0004E046 <PED.ab2@15523>           If StrLower(tokname$) = "endif"
0004E04C <PED.ab2@15524>             Gosub help_checkforif
0004E052 <PED.ab2@15525>           Else
0004E070 <PED.ab2@15526>             !asm
0004E076 <PED.ab2@15527>             JSR help_checkfortype
0004E0A0 <PED.ab2@15528>             !basic
0004E0A4 <PED.ab2@15529>             type_found.b = PutD0
0004E0BE <PED.ab2@15530>             If (type_found = False)
0004E0C4 <PED.ab2@15531>               Gosub syntax_help
0004E0D8 <PED.ab2@15542>      Case $0D ; ENTER
0004E0F6 <PED.ab2@15543>        If Peek.b(?use_intellisense) = 1
0004E122 <PED.ab2@15544>          If WZ_CheckOpen{"WIN_POPUP"}
0004E172 <PED.ab2@15545>            a$ = WZ_GetPopUpEntry{WZ_GetPopUpMenu{}+1}
0004E23A <PED.ab2@15546>            a$ = dos_Trim{Left$(a$,Instr(a$,"{")-1)}
0004E2C6 <PED.ab2@15547>            PrintScreenTitle{a$ + " " + TED_GetIncludeHelp{a$}}
0004E33E <PED.ab2@15548>            a$ = UnRight$(a$,FLen(poptok$)) + "{"
0004E344 <PED.ab2@15549>            Gosub insertstring
0004E34A <PED.ab2@15550>            Gosub close_popupwindow
0004E350 <PED.ab2@15551>            Gosub activatesource
0004E352 <PED.ab2@15552>            Pop Select : Pop If :Pop If
0004E370 <PED.ab2@15553>            !asm
0004E376 <PED.ab2@15554>            MOVE.l #0,d7
0004E378 <PED.ab2@15555>            RTS
0004E37E <PED.ab2@15570>     Default
0004E384 <PED.ab2@15571>       Gosub intellisense
0004E386 <PED.ab2@15572>     End Select
0004E3A4 <PED.ab2@15574>   !asm
0004E3A6 <PED.ab2@15575> RTS
0004E3D0 <PED.ab2@15577> Function.s FindTokenHelpStr{tokname$}
0004E42C <PED.ab2@15579>   If Left$(tokname$,1) = "!"
0004E436 <PED.ab2@15580>     MOVE.l comPtr_MacroBase,d0 : *macrobase.l = PutD0
0004E492 <PED.ab2@15581>     tokname$ = TED_GetMacroName{*macrobase,tokname$}
0004E53A <PED.ab2@15582>     strhelp$ = tokname$ + " "  + TED_GetMacroHelp{*macrobase,tokname$} + " // Macro"
0004E540 <PED.ab2@15583>   Else
0004E54A <PED.ab2@15584>     MOVE.l comPtr_TokenBase,D0  : *tokenbase.l = PutD0
0004E582 <PED.ab2@15585>     tokid.l = TED_GetTokenID{*tokenbase,tokname$}
0004E594 <PED.ab2@15586>     If tokid>=0
0004E5CC <PED.ab2@15587>       tokname$ = TED_GetTokenName{*tokenbase,tokid}
0004E604 <PED.ab2@15588>       libnum.l = TED_GetTokenLibnum{*tokenbase,tokname$}
0004E616 <PED.ab2@15589>       If libnum>=0
0004E6E6 <PED.ab2@15590>         strhelp$ = tokname$ + " " + TED_GetTokenHelp{*tokenbase,tokname$} + " // BlitzLib: "+TED_GetLibname{libnum}
0004E6EC <PED.ab2@15592>     Else
0004E744 <PED.ab2@15593>       tokname$ = TED_GetIncludeFunction{tokname$}
0004E77C <PED.ab2@15594>       If tokname$<>""
0004E86C <PED.ab2@15595>         strhelp$ = tokname$ + " " + TED_GetIncludeHelp{tokname$} + " // File: "+TED_GetIncludeName{tokname$}
0004E8EA <PED.ab2@15599>   strhelp$ = Replace$(strhelp$,"  "," ")
0004E914 <PED.ab2@15600>   Function Return strhelp$
0004E932 <PED.ab2@15601> End Function
0004E95A <PED.ab2@15604>     strhelp$ = ""
0004E992 <PED.ab2@15605>     If tokname$ <> ""
0004E9EA <PED.ab2@15606>       strhelp$ =  FindTokenHelpStr{tokname$}
0004EA22 <PED.ab2@15666>     If strhelp$=""
0004EA28 <PED.ab2@15669>     Else
0004EA56 <PED.ab2@15670>       PrintScreenTitle{strhelp$}
0004EA58 <PED.ab2@15672> RTS
0004EA76 <PED.ab2@15676>   If Peek.b(?use_intellisense) = 1
0004EA92 <PED.ab2@15677>     If Peek.w(?comWord_Column) > 1
0004EA9C <PED.ab2@15679>       If lineaddr.l
0004EADA <PED.ab2@15681>       strline$ = Peeks$(lineaddr,Peek.w(?comWord_Column))
0004EB12 <PED.ab2@15682>       slen.w = Len(strline$) : found.l = False
0004EB62 <PED.ab2@15683>       tokname$ = "" : strhelp$ = ""
0004EB84 <PED.ab2@15684>       While (slen > 0) AND (found = False)
0004EBDC <PED.ab2@15685>         schar$ = Mid$(strline$,slen,1)
0004EC4E <PED.ab2@15686>         If (schar$ = " ") OR (schar$="=")
0004EC54 <PED.ab2@15687>           found = True
0004EC5A <PED.ab2@15688>         Else
0004ECAC <PED.ab2@15689>           tokname$ = schar$ + tokname$
0004ECB8 <PED.ab2@15690>           slen - 1
0004ECBE <PED.ab2@15692>       Wend
0004ED0A <PED.ab2@15695>       tokname$ + Chr$(_key)
0004ED84 <PED.ab2@15697>       If FLen(tokname$) > 2 AND Instr(tokname$,"_")
0004EDF8 <PED.ab2@15698>         poptok$ = LCase$(tokname$): tokenliste$ = ""
0004EE08 <PED.ab2@15699>         ResetList HelpIndexCache() : popfound.w = 0
0004EE1A <PED.ab2@15700>         While NextItemFast(HelpIndexCache())
0004EE8C <PED.ab2@15701>           If Instr(HelpIndexCache()\lname,poptok$) = 1
0004EEEE <PED.ab2@15703>             pophelp$ = HelpIndexCache()\name + HelpIndexCache()\help
0004EF12 <PED.ab2@15704>             If FLen(pophelp$) > 32
0004EF76 <PED.ab2@15705>               pophelp$ = Left$(pophelp$,32) + " ... "
0004EFF2 <PED.ab2@15707>             tokenliste$ + "%%4" + pophelp$ + Chr$(10)
0004F000 <PED.ab2@15708>             popfound + 1
0004F006 <PED.ab2@15710>         Wend
0004F014 <PED.ab2@15712>         If popfound > 0
0004F046 <PED.ab2@15713>           WZ_SetPopUpMenu{tokenliste$,1}
0004F0AE <PED.ab2@15714>           xpos.l = Peek.w(?win_TopLeft)+ Peek.w(?win_BorLef) + (Peek.w (?comWord_Column)-2) * Peek.w (?fontwidth)
0004F12E <PED.ab2@15715>           ypos.l = Peek.w(?win_TopEdge) + Peek.w(?win_BorTop) + Peek.l (?comLong_DisplayLine) * Peek.w(?fontheight) + Peek.w(?fontheight) + 2
0004F148 <PED.ab2@15716>           WZ_PopUp_Nonmodal{xpos,ypos}
0004F14E <PED.ab2@15717>           Gosub activatesource
0004F154 <PED.ab2@15718>         Else
0004F15A <PED.ab2@15719>           Gosub close_popupwindow
0004F160 <PED.ab2@15722>     Else
0004F166 <PED.ab2@15723>       Gosub close_popupwindow
0004F168 <PED.ab2@15726> RTS
0004F170 <PED.ab2@15732>   number_of_lines.l = 0
0004F180 <PED.ab2@15733>   *textline.l = Peek.l(?comPtr_FirstSourceLine)
0004F198 <PED.ab2@15735>   While *textline<>0
0004F1A6 <PED.ab2@15736>     number_of_lines + 1
0004F1B4 <PED.ab2@15737>     *textline.l = Peek.l(*textline)
0004F1BA <PED.ab2@15738>   Wend
0004F1CE <PED.ab2@15739>   If number_of_lines = 0 Then Return
0004F1F8 <PED.ab2@15743>   For i.l = 0 To 65535
0004F208 <PED.ab2@15744>     tokentable(i) = 0
0004F218 <PED.ab2@15745>   Next i
0004F224 <PED.ab2@15746>   HIERARCHY_Clear{&lib_list}
0004F25E <PED.ab2@15748>   Use Window WZID("WIN_LABELS")
0004F2A4 <PED.ab2@15749>   WZPrint "LIBRARY_LIST",0,lib_list
0004F2AE <PED.ab2@15752>   MOVE.l comPtr_TokenBase,D0    : *tokenbase.l = PutD0
0004F2FE <PED.ab2@15762>   WZ_ShowMessage{!TRANS{"Analyzing source..."},0}
0004F316 <PED.ab2@15764>   *textline.l = Peek.l(?comPtr_FirstSourceLine) : zeile.l = 0
0004F32E <PED.ab2@15765>   While *textline<>0
0004F334 <PED.ab2@15766>     bytecount.w = 0
0004F34A <PED.ab2@15767>     anzbytes.w = Peek.b(*textline + 8)
0004F358 <PED.ab2@15768>     testaddr.l = *textline + 9
0004F370 <PED.ab2@15769>     acttoken.w = Peek.w(testaddr) AND $FFFF
0004F388 <PED.ab2@15770>     acttoke2.l = Peek.w(testaddr) AND $FFFF
0004F38E <PED.ab2@15771>     skip_string.b = False
0004F3A2 <PED.ab2@15773>     While (bytecount<=anzbytes)
0004F3BE <PED.ab2@15774>       If (acttoken<0) AND (NOT skip_string)
0004F3D8 <PED.ab2@15775>         If (acttoke2 AND $FF) > 0
0004F576 <PED.ab2@15776>           If (zeile MOD 10)=0 Then !WZ_Update_Gauge{zeile,number_of_lines}
0004F59C <PED.ab2@15778>           If acttoke2 > $8000 Then acttoke2 = acttoke2 - $8000
0004F5BA <PED.ab2@15779>           tokentable(acttoke2) = tokentable(acttoke2) + 1
0004F5D6 <PED.ab2@15780>           bytecount + 1 : testaddr + 1
0004F5F2 <PED.ab2@15791>       testaddr + 1 : bytecount + 1
0004F60A <PED.ab2@15792>       acttoken = Peek.w(testaddr) AND $FFFF
0004F622 <PED.ab2@15793>       acttoke2.l = Peek.w(testaddr) AND $FFFF
0004F632 <PED.ab2@15794>       actbyte.w = acttoke2 LSR 8
0004F672 <PED.ab2@15796>       If actbyte = Asc(";")
0004F680 <PED.ab2@15798>         anzbytes = bytecount + 1
0004F686 <PED.ab2@15799>       Else
0004F694 <PED.ab2@15801>         If actbyte = 34
0004F6C0 <PED.ab2@15802>           If skip_string = False Then skip_string = True Else skip_string = False
0004F6C6 <PED.ab2@15805>     Wend
0004F6E2 <PED.ab2@15806>     *textline.l = Peek.l(*textline) : zeile = zeile + 1
0004F6E8 <PED.ab2@15807>   Wend
0004F738 <PED.ab2@15812>   WZ_ShowMessage{!TRANS{"Building result tree..."},0}
0004F762 <PED.ab2@15813>   For i = 0 To 65535
0004F77A <PED.ab2@15814>     If tokentable(i) > 0
0004F780 <PED.ab2@15815>       acttoke2 = i
0004F7B8 <PED.ab2@15816>       tokname$ = TED_GetTokenName{*tokenbase,acttoke2}
0004F7C8 <PED.ab2@15817>       libnum.l = acttoke2 LSR 7 ;TED_GetTokenLibnumID{*tokenbase,tokname$})
0004F812 <PED.ab2@15818>       libname$ = lib_mapping$(libnum,0)
0004F84A <PED.ab2@15820>       If tokname$<>""
0004F904 <PED.ab2@15821>         entry$ = libname$ + ": " + tokname$ + " ("+Str$(tokentable(i))+")"
0004F950 <PED.ab2@15822>         hpos.w = Instr(entry$,":")
0004F95E <PED.ab2@15823>         If (hpos > 1)
0004F9B6 <PED.ab2@15824>           main$ = Left$(entry$,hpos - 1)
0004FA2A <PED.ab2@15825>           child$= Right$(entry$,FLen(entry$) - hpos - 1)
0004FA5C <PED.ab2@15826>           pid.l = HIERARCHY_GetParentID{main$}
0004FA6E <PED.ab2@15827>           If pid > 0
0004FAA6 <PED.ab2@15828>             HIERARCHY_AddChild{pid,child$}
0004FAAC <PED.ab2@15829>           Else
0004FAEE <PED.ab2@15830>             dummy = HIERARCHY_AddParent{&lib_list,main$}
0004FB26 <PED.ab2@15831>             If child$<>""
0004FB58 <PED.ab2@15832>               pid.l = HIERARCHY_GetParentID{main$}
0004FBA2 <PED.ab2@15833>               If pid<>0 Then HIERARCHY_AddChild{pid,child$}
0004FBA8 <PED.ab2@15836>         Else
0004FBEA <PED.ab2@15837>           dummy = HIERARCHY_AddParent{&lib_list,entry$}
0004FD84 <PED.ab2@15841>     If (i MOD 1024) = 0 Then !WZ_Update_Gauge{i,65535}
0004FD94 <PED.ab2@15842>   Next i
0004FD9A <PED.ab2@15844>   WZ_HideMessage{}
0004FDD4 <PED.ab2@15846>   Use Window WZID("WIN_LABELS")
0004FE1A <PED.ab2@15847>   WZPrint "LIBRARY_LIST",0,lib_list
0004FE1C <PED.ab2@15848> RTS
0004FE22 <PED.ab2@15852>   MOVE.l comLong_DisplayLineOffset,D1
0004FE28 <PED.ab2@15853>   ADD.l comLong_DisplayLine,D1
0004FE2C <PED.ab2@15854>   BEQ.w JL_0_7AA0
0004FE2E <PED.ab2@15856>   MOVE.l A0,-(A7)
0004FE34 <PED.ab2@15857>   MOVEA.l comPtr_CurrentSourceLine,A0
0004FE38 <PED.ab2@15858>   MOVEA.l $4(A0),A0
0004FE3C <PED.ab2@15859>   LEA $9(A0),A0
0004FE3E <PED.ab2@15860>   MOVEQ.l #-$01,D1
0004FE40 <PED.ab2@15863>     TST.b (A0)
0004FE44 <PED.ab2@15864>     BEQ.w JL_0_7C16
0004FE46 <PED.ab2@15865>     ADDQ.w #1,D1
0004FE4A <PED.ab2@15866>     CMPI.b #$20,(A0)+
0004FE4E <PED.ab2@15867>   BEQ.b JL_0_7C02
0004FE50 <PED.ab2@15869>   MOVEA.l (A7)+,A0
0004FE54 <PED.ab2@15870>   BRA.w JL_0_7C5C
0004FE56 <PED.ab2@15873>   MOVEA.l (A7)+,A0
0004FE5A <PED.ab2@15874> BRA.w JL_0_7AA0
0004FE62 <PED.ab2@15877>   MOVE.b #1,doedit2
0004FE68 <PED.ab2@15879>   JSR JL_0_7F40
0004FE6C <PED.ab2@15880> BRA.w JL_0_7AA0
0004FE70 <PED.ab2@15885>   MOVEM.l d0-d1/a0-a2,-(a7)
0004FE76 <PED.ab2@15886>   MOVEA.l textbufferaddr,A2
0004FE7C <PED.ab2@15887>   ADDA.w comWord_TextBufferOffset,A2
0004FE84 <PED.ab2@15888>   MOVE.b #1,doedit2
0004FE88 <PED.ab2@15890>   MOVEM.l D1/A0-A2,-(A7)
0004FE8E <PED.ab2@15891>   JSR JL_0_6448
0004FE92 <PED.ab2@15892>   MOVEM.l (A7)+,D1/A0-A2
0004FE98 <PED.ab2@15893>   MOVE.w comWord_Column,D0
0004FE9E <PED.ab2@15894>   ADD.w comWord_ColumnsOffset,D0
0004FEA0 <PED.ab2@15897>     ADDQ.w #1,D0
0004FEA6 <PED.ab2@15898>     CMP.w comWord_MaxColumns,D0
0004FEAA <PED.ab2@15899>      BCC.w JL_0_7E4Cb
0004FEB0 <PED.ab2@15900>     MOVE.b $0(A2,D0.W),-$1(A2,D0.W)
0004FEB4 <PED.ab2@15901>   BRA.b JL_0_7E3Ab
0004FEBA <PED.ab2@15904>   MOVE.b #$20,-$1(A2,D0.W)
0004FEC0 <PED.ab2@15905>   MOVE.w comWord_Column,-(A7)
0004FEC6 <PED.ab2@15906>   MOVE.w visiblecolumns,D0
0004FEC8 <PED.ab2@15907>   SUBQ.w #1,D0
0004FECE <PED.ab2@15908>   MOVE.w D0,comWord_Column
0004FED4 <PED.ab2@15909>   MOVE.w visiblecolumns,D0
0004FEDA <PED.ab2@15910>   ADD.w comWord_ColumnsOffset,D0
0004FEDC <PED.ab2@15911>   SUBQ.w #1,D0
0004FEDE <PED.ab2@15912>   MOVE.l d0,d1
0004FEE0 <PED.ab2@15913>   MOVE.l d0,-(a7)
0004FEE2 <PED.ab2@15914>   MOVEQ #0,d0
0004FEE8 <PED.ab2@15916>     CMP.b #$22,0(a2,d1.w)      ;hack
0004FEEC <PED.ab2@15917>     BNE 'l1
0004FEEE <PED.ab2@15918>     ADDQ.b #1,d0
0004FEF2 <PED.ab2@15920>   DBF d1,'l2
0004FEF4 <PED.ab2@15922>   MOVE.l d0,d1
0004FEF6 <PED.ab2@15923>   MOVE.l (a7)+,d0
0004FEFA <PED.ab2@15924>   MOVE.b $0(A2,D0.W),D0
0004FF00 <PED.ab2@15925>   CLR.w instru
0004FF04 <PED.ab2@15926>   BTST #0,d1
0004FF08 <PED.ab2@15927>   BNE 'l3
0004FF10 <PED.ab2@15928>   MOVE.w #1,instru
0004FF16 <PED.ab2@15930>   JSR JL_0_76EA
0004FF1C <PED.ab2@15931>   CLR.w instru
0004FF22 <PED.ab2@15932>   MOVE.w (A7)+,comWord_Column
0004FF26 <PED.ab2@15933>   MOVEM.l (a7)+,d0-d1/a0-a2
0004FF2A <PED.ab2@15934> BRA deletekey
0004FF2E <PED.ab2@15939>   CMP.w #$1E,D7
0004FF32 <PED.ab2@15940>    BNE.w key_backspace
0004FF38 <PED.ab2@15942>   MOVE.w message_qualifier,d1
0004FF3C <PED.ab2@15943>   AND.w #$30,d1
0004FF40 <PED.ab2@15944>   BEQ 'noalt
0004FF46 <PED.ab2@15946>   JSR storeline
0004FF4C <PED.ab2@15947>   JSR jump_onclick
0004FF4E <PED.ab2@15948>   RTS
0004FF54 <PED.ab2@15951>   MOVE.w message_qualifier,d1
0004FF58 <PED.ab2@15952>   AND.w #$8,d1
0004FF5C <PED.ab2@15953>   BEQ 'noctrl
0004FF60 <PED.ab2@15955>   MOVEM.l d0-d7/a0-a6,-(a7)
0004FF66 <PED.ab2@15956>   JSR cursor_off
0004FF6C <PED.ab2@15957>   JSR menu_blocktab
0004FF70 <PED.ab2@15958>   MOVEM.l (a7)+,d0-d7/a0-a6
0004FF72 <PED.ab2@15959>   RTS
0004FF78 <PED.ab2@15962>   MOVE.w comWord_QualifierStore,D1
0004FF7C <PED.ab2@15963>   ANDI.w #$3,D1
0004FF80 <PED.ab2@15964>    BEQ.w noshift
0004FF86 <PED.ab2@15966>   MOVE.w comWord_MaxColumns,D1
0004FF88 <PED.ab2@15970>     SUBQ.w #1,D1
0004FF8C <PED.ab2@15971>     BPL.w JL_0_7C48
0004FF8E <PED.ab2@15972>     MOVEQ.l #$00,D1
0004FF92 <PED.ab2@15973>     BRA.w JL_0_7C5C
0004FF98 <PED.ab2@15975>   CMPI.b #$20,$0(A2,D1.W)
0004FF9C <PED.ab2@15976>   BEQ.b JL_0_7C3C
0004FF9E <PED.ab2@15978>   ADDQ.w #1,D1
0004FFA4 <PED.ab2@15979>   CMP.w comWord_MaxColumns,D1
0004FFA8 <PED.ab2@15980>   BCS.w JL_0_7C5C
0004FFAA <PED.ab2@15981>   SUBQ.w #1,D1
0004FFB0 <PED.ab2@15984>   JSR JL_0_7ED2
0004FFB4 <PED.ab2@15985>   BRA.w JL_0_7AA0
0004FFBC <PED.ab2@15989>   MOVE.b #1,doedit2
0004FFC2 <PED.ab2@15991>   JSR JL_0_7F70
0004FFC6 <PED.ab2@15992> BRA.w JL_0_7AA0
0004FFCA <PED.ab2@15996>   CMP.w #$8,D7                  ; BACKSPACE-Key
0004FFCE <PED.ab2@15997>    BNE.w key_tab
0004FFD0 <PED.ab2@15999>   MOVE.w D0,D1
0004FFD6 <PED.ab2@16000>   OR.w comWord_ColumnsOffset,D1
0004FFDA <PED.ab2@16001>   BNE.w 'l1
0004FFE0 <PED.ab2@16003>   TST.b new_editmode
0004FFE4 <PED.ab2@16004>    BEQ JL_0_7AA0
0004FFE8 <PED.ab2@16006>   MOVEM.l a0-a3/a5/d0-d6,-(a7)
0004FFEE <PED.ab2@16007>   MOVE.l comLong_DisplayLineOffset,d0
0004FFF4 <PED.ab2@16008>   ADD.l comLong_DisplayLine,d0
0004FFFE <PED.ab2@16009>   CMPI.l #$ffffFFFF,comLong_BlockEndY
00050002 <PED.ab2@16010>   BEQ.w 'weit
00050006 <PED.ab2@16011>   MOVEM.l (a7)+,a0-a3/a5/d0-d6
0005000A <PED.ab2@16012>   BRA deletekey
00050010 <PED.ab2@16014>   CMP.l #0,d0
00050014 <PED.ab2@16015>    BEQ 'l2
0005001A <PED.ab2@16016>   MOVE.l comPtr_CurrentSourceLine,a4
00050020 <PED.ab2@16017>   JSR storeline
00050026 <PED.ab2@16018>   JSR movelineup
0005002C <PED.ab2@16019>   MOVEA.l textbufferaddr,A2
00050032 <PED.ab2@16020>   ADDA.w comWord_TextBufferOffset,A2
00050038 <PED.ab2@16021>   MOVE.l #MAX_Columns,d0
0005003A <PED.ab2@16022>   SUBQ .l #1,d0
00050040 <PED.ab2@16024>     CMP.b #$20,0(a2,d0.l)
00050044 <PED.ab2@16025>     BNE 'f
00050046 <PED.ab2@16026>     SUBQ.l #1,d0
0005004A <PED.ab2@16027>   BPL 'loop
0005004C <PED.ab2@16029>   ADDQ.l #1,d0
00050052 <PED.ab2@16030>   MOVE.w d0,comWord_Column
00050058 <PED.ab2@16031>   MOVE.l comPtr_CurrentSourceLine,a4
0005005E <PED.ab2@16032>   JSR menu_joinline
00050062 <PED.ab2@16034>   MOVEM.l (a7)+,a0-a3/a5/d0-d6
00050068 <PED.ab2@16035>   JMP JL_0_7AA0
0005006C <PED.ab2@16038>   MOVEM.l A0-A2,-(A7)
00050072 <PED.ab2@16039>   JSR JL_0_7F40
00050076 <PED.ab2@16040>   MOVEM.l (A7)+,A0-A2
0005007C <PED.ab2@16041>   MOVE.w comWord_Column,D0
0005007E <PED.ab2@16042>   MOVEQ.l #$08,D7
00050082 <PED.ab2@16043> BRA.w deletekey
00050086 <PED.ab2@16047>   CMP.w #$9,D7
0005008A <PED.ab2@16048>    BNE.w exit_key_tab
00050090 <PED.ab2@16050>   TST.w tab_size
00050094 <PED.ab2@16051>   BNE 'l1
0005009C <PED.ab2@16052>   MOVE.w #1,tab_size
000500A2 <PED.ab2@16054>   ADD.w comWord_ColumnsOffset,D0
000500A4 <PED.ab2@16055>   MOVE.w D0,D2
000500AA <PED.ab2@16056>   MOVE.w comWord_QualifierStore,D1
000500AE <PED.ab2@16057>   ANDI.w #$3,D1
000500B2 <PED.ab2@16058>   BEQ.w JL_0_7D1C
000500B8 <PED.ab2@16059>   MOVE.w D7,comWord_KeyBeforeReturn
000500BA <PED.ab2@16062>   SUBQ.w #1,D0
000500BE <PED.ab2@16063>   BMI.w JL_0_7AA0
000500C0 <PED.ab2@16064>   MOVEQ.l #$00,D1
000500C2 <PED.ab2@16065>   MOVE.w D0,D1
000500C8 <PED.ab2@16066>   DIVU tab_size,D1
000500CA <PED.ab2@16067>   SWAP D1
000500CC <PED.ab2@16069>   TST.w D1
000500D0 <PED.ab2@16070>   BNE.b JL_0_7CB4
000500DA <PED.ab2@16071>   CMPI.l #$ffffFFFF,comLong_BlockEndY
000500DE <PED.ab2@16072>    BEQ.w JL_0_7CF8
000500E0 <PED.ab2@16073>   MOVE.w D2,-(A7)
000500E2 <PED.ab2@16074>   MOVE.w D2,D4
000500E4 <PED.ab2@16075>   SUB.w D0,D4
000500EA <PED.ab2@16076>   JSR JL_0_79CC
000500EE <PED.ab2@16077>   BNE.w JL_0_7CE8
000500F4 <PED.ab2@16078>   SUB.w D4,comLong_BlockStartX
000500FA <PED.ab2@16081>   JSR JL_0_79F0
000500FE <PED.ab2@16082>   BNE.w JL_0_7CF6
00050104 <PED.ab2@16083>   SUB.w D4,comLong_BlockEndX
00050106 <PED.ab2@16086>   MOVE.w (A7)+,D2
00050108 <PED.ab2@16089>   MOVE.w D0,-(A7)
0005010E <PED.ab2@16092>   MOVE.b $0(A2,D2.W),$0(A2,D0.W)
00050110 <PED.ab2@16093>   ADDQ.w #1,D2
00050112 <PED.ab2@16094>   ADDQ.w #1,D0
00050118 <PED.ab2@16095>   CMP.w comWord_MaxColumns,D2
0005011C <PED.ab2@16096>   BCS.b JL_0_7CFA
00050122 <PED.ab2@16099>   MOVE.b #$20,$0(A2,D0.W)
00050124 <PED.ab2@16100>   ADDQ.w #1,D0
0005012A <PED.ab2@16101>   CMP.w comWord_MaxColumns,D0
0005012E <PED.ab2@16102>   BCS.b JL_0_7D0A
00050132 <PED.ab2@16103>   BRA.w JL_0_7DDC
00050134 <PED.ab2@16106>   ADDQ.w #1,D0
0005013A <PED.ab2@16107>   CMP.w comWord_MaxColumns,D0
0005013E <PED.ab2@16108>   BCC.w JL_0_7AA0
00050140 <PED.ab2@16109>   MOVEQ.l #$00,D1
00050142 <PED.ab2@16110>   MOVE.w D0,D1
00050148 <PED.ab2@16111>   DIVU tab_size,D1
0005014A <PED.ab2@16112>   SWAP D1
0005014C <PED.ab2@16113>   TST.w D1
00050150 <PED.ab2@16114>   BNE.b JL_0_7D1C
00050156 <PED.ab2@16115>   MOVE.w D7,comWord_KeyBeforeReturn
00050158 <PED.ab2@16116>   MOVE.w D0,-(A7)
0005015A <PED.ab2@16117>   SUB.w D2,D0
00050162 <PED.ab2@16118>   CMPI.w #$ffffFFFF,comLong_BlockEndY
00050166 <PED.ab2@16119>    BEQ.w JL_0_7D6E
00050168 <PED.ab2@16120>   MOVE.w D2,-(A7)
0005016E <PED.ab2@16121>   JSR JL_0_79CC
00050172 <PED.ab2@16122>   BNE.w JL_0_7D5A
00050178 <PED.ab2@16123>   ADD.w D0,comLong_BlockStartX
0005017E <PED.ab2@16126>    JSR JL_0_79F0
00050182 <PED.ab2@16127>    BNE.w JL_0_7D68
00050188 <PED.ab2@16128>   ADD.w D0,comLong_BlockEndX
0005018E <PED.ab2@16131>    JSR JL_0_7A14
00050190 <PED.ab2@16132>   MOVE.w (A7)+,D2
00050196 <PED.ab2@16135>   MOVE.w comWord_MaxColumns,D1
00050198 <PED.ab2@16138>     SUBQ.w #1,D1
0005019A <PED.ab2@16139>     MOVE.w D1,D3
0005019C <PED.ab2@16140>     SUB.w D0,D3
000501A0 <PED.ab2@16141>      BMI.w JL_0_7D8A
000501A2 <PED.ab2@16142>     CMP.w D2,D3
000501A6 <PED.ab2@16143>      BCS.w JL_0_7D8A
000501AC <PED.ab2@16144>     MOVE.b $0(A2,D3.W),$0(A2,D1.W)
000501B0 <PED.ab2@16145>   BRA.b JL_0_7D72
000501B2 <PED.ab2@16148>   MOVE.w D1,-(A7)
000501B8 <PED.ab2@16149>   MOVE.w comWord_Column,D7
000501BE <PED.ab2@16150>   ADD.w comWord_ColumnsOffset,D7
000501C4 <PED.ab2@16151>   MOVE.w D7,comWord_Column
000501CA <PED.ab2@16154>   MOVE.b #$20,$0(A2,D1.W)
000501CE <PED.ab2@16155>   MOVE.b $0(A2,D1.W),D0
000501D2 <PED.ab2@16156>   MOVEM.l D0-D2/A0-A2,-(A7)
000501D8 <PED.ab2@16157>    JSR source_scroll_line_to_left
000501DC <PED.ab2@16158>   MOVEM.l (A7)+,D0-D2/A0-A2
000501E0 <PED.ab2@16159>   MOVEM.l D0-D2/A0-A2,-(A7)
000501E6 <PED.ab2@16160>    JSR JL_0_76EA
000501EA <PED.ab2@16161>   MOVEM.l (A7)+,D0-D2/A0-A2
000501EC <PED.ab2@16162>   SUBQ.w #1,D1
000501F0 <PED.ab2@16163>    BMI.w JL_0_7DCA
000501F2 <PED.ab2@16164>   CMP.w D2,D1
000501F6 <PED.ab2@16165>    BCC.b JL_0_7D9E
000501F8 <PED.ab2@16168>   MOVE.w (A7)+,D0
000501FA <PED.ab2@16169>   ADDQ.w #1,D0
00050200 <PED.ab2@16170>   ADD.w D0,comWord_Column
00050202 <PED.ab2@16171>   MOVE.w D0,D1
00050204 <PED.ab2@16172>   MOVE.w (A7)+,D7
00050208 <PED.ab2@16173>   BRA.w JL_0_7C5C
0005020E <PED.ab2@16176>   MOVE.w comWord_Column,-(A7)
00050214 <PED.ab2@16177>   CLR.w comWord_Column
0005021A <PED.ab2@16178>   ADDA.w comWord_ColumnsOffset,A2
00050220 <PED.ab2@16179>   MOVE.w visiblecolumns,D7
00050222 <PED.ab2@16180>   SUBQ.w #1,D7
00050224 <PED.ab2@16183>   MOVE.b (A2)+,D0
00050228 <PED.ab2@16184>   MOVEM.l D7/A2,-(A7)
0005022E <PED.ab2@16185>    JSR JL_0_76EA
00050232 <PED.ab2@16186>   MOVEM.l (A7)+,D7/A2
00050238 <PED.ab2@16187>   ADDQ.w #1,comWord_Column
0005023C <PED.ab2@16188>    DBF D7,JL_0_7DF0
00050242 <PED.ab2@16189>   MOVE.w (A7)+,comWord_Column
00050244 <PED.ab2@16190>   MOVE.w (A7)+,D1
00050248 <PED.ab2@16191>   BRA.w JL_0_7C5C
0005024C <PED.ab2@16194> BRA.w JL_0_7ED0
00050250 <PED.ab2@16199>   CMP.w #$7F,D7                            ; DEL-Key
00050254 <PED.ab2@16200>    BNE.w event_horizslider
0005025C <PED.ab2@16203>   MOVE.b #2,doedit2
00050262 <PED.ab2@16204>   MOVE.w D7,comWord_KeyBeforeReturn
00050268 <PED.ab2@16205>   JSR checkedit2
0005026E <PED.ab2@16206>   TST.b nodelete
00050272 <PED.ab2@16207>    BNE JL_0_7AA0
00050276 <PED.ab2@16209>   MOVEM.l D1/A0-A2,-(A7)
0005027C <PED.ab2@16210>   JSR JL_0_6448
00050280 <PED.ab2@16211>   MOVEM.l (A7)+,D1/A0-A2
00050286 <PED.ab2@16213>   MOVE.w comWord_Column,D0
0005028C <PED.ab2@16214>   ADD.w comWord_ColumnsOffset,D0
0005028E <PED.ab2@16216>     ADDQ.w #1,D0
00050294 <PED.ab2@16217>     CMP.w comWord_MaxColumns,D0
00050298 <PED.ab2@16218>      BCC.w JL_0_7E4C
0005029E <PED.ab2@16219>     MOVE.b $0(A2,D0.W),-$1(A2,D0.W)
000502A2 <PED.ab2@16220>   BRA.b JL_0_7E3A
000502A8 <PED.ab2@16223>   MOVE.b #$20,-$1(A2,D0.W)
000502AE <PED.ab2@16224>   MOVE.w comWord_Column,-(A7)
000502B4 <PED.ab2@16225>   MOVE.w visiblecolumns,D0
000502B6 <PED.ab2@16226>   SUBQ.w #1,D0
000502BC <PED.ab2@16227>   MOVE.w D0,comWord_Column
000502C2 <PED.ab2@16228>   MOVE.w visiblecolumns,D0
000502C8 <PED.ab2@16229>   ADD.w comWord_ColumnsOffset,D0
000502CA <PED.ab2@16230>   SUBQ.w #1,D0
000502CC <PED.ab2@16231>   MOVE.l d0,d1
000502CE <PED.ab2@16232>   MOVE.l d0,-(a7)
000502D0 <PED.ab2@16233>   MOVEQ #0,d0
000502D6 <PED.ab2@16235>     CMP.b #$22,0(a2,d1.w)      ;hack
000502DA <PED.ab2@16236>     BNE 'l1
000502DC <PED.ab2@16237>     ADDQ.b #1,d0
000502E0 <PED.ab2@16239>   DBF d1,'l2
000502E2 <PED.ab2@16240>   MOVE.l d0,d1
000502E4 <PED.ab2@16241>   MOVE.l (a7)+,d0
000502E8 <PED.ab2@16242>   MOVE.b $0(A2,D0.W),D0
000502EE <PED.ab2@16243>   CLR.w instru
000502F2 <PED.ab2@16244>   BTST #0,d1
000502F6 <PED.ab2@16245>    BNE 'l3
000502FE <PED.ab2@16246>   MOVE.w #1,instru
00050304 <PED.ab2@16248>   JSR JL_0_76EA
0005030A <PED.ab2@16249>   CLR.w instru
00050310 <PED.ab2@16250>   MOVE.w (A7)+,comWord_Column
00050316 <PED.ab2@16252>   TST.w comWord_Column
0005031A <PED.ab2@16253>    BNE 'x1
00050320 <PED.ab2@16254>   TST.w comWord_ColumnsOffset
00050324 <PED.ab2@16255>    BEQ 'x5
0005032A <PED.ab2@16258>   MOVE.w message_qualifier,d1
0005032E <PED.ab2@16259>   AND.w #$3,d1
00050332 <PED.ab2@16260>    BEQ JL_0_7AA0
00050338 <PED.ab2@16262>   TST.w comWord_Column
0005033C <PED.ab2@16263>    BEQ 'x4
00050342 <PED.ab2@16264>   SUBQ.w #1,comWord_Column
00050346 <PED.ab2@16265>   BRA deletekey
0005034C <PED.ab2@16267>   TST.w comWord_ColumnsOffset
00050350 <PED.ab2@16268>    BEQ 'x5
00050356 <PED.ab2@16269>   SUBQ.w #1,comWord_ColumnsOffset
0005035A <PED.ab2@16270>   BRA.w deletekey
00050360 <PED.ab2@16272>   JSR JL_0_7962
00050366 <PED.ab2@16273>   JSR cursor_on
0005036A <PED.ab2@16275> BRA JL_0_7AA0
0005036E <PED.ab2@16279>   CMP.w #-$1,D7
00050372 <PED.ab2@16280>    BNE.w menu_addfilename
00050376 <PED.ab2@16281>   CMP.w #GID_XPROP,D6
0005037A <PED.ab2@16282>    BNE.w menu_addfilename
000503A4 <PED.ab2@16285>     !basic
000503C8 <PED.ab2@16286>     DEFTYPE.l pos_hprop : GetAttr_ #PGA_Top,*horizprop,&pos_hprop
000503D8 <PED.ab2@16287>     Poke.l ?pos_horizprop,pos_hprop
000503F6 <PED.ab2@16288>     !asm
000503FC <PED.ab2@16289>     MOVE.l pos_horizprop,D1
00050402 <PED.ab2@16290>     JSR JL_0_7ED2                                  ; calculate new column ?
00050404 <PED.ab2@16292>     MOVE.l a2,-(a7)
0005040A <PED.ab2@16293>     MOVE.l ptr_sourcewindow,a2
0005040E <PED.ab2@16294>     MOVEA.l $56(A2),A2                            ;Window\UserPort
00050410 <PED.ab2@16295>     MOVEA.l A2,A0
00050416 <PED.ab2@16296>     MOVE.l _execbase,A6
0005041A <PED.ab2@16297>     JSR _GetMsg(A6)
0005041C <PED.ab2@16298>     TST.l D0
00050420 <PED.ab2@16299>     BEQ.w 'norep
00050422 <PED.ab2@16300>     MOVE.l d0,a1                                  ;IntuiMessage > A1
00050426 <PED.ab2@16301>     MOVE.l $14(a1),a2                             ;Class
0005042A <PED.ab2@16302>     JSR _ReplyMsg(A6)
00050430 <PED.ab2@16303>     CMP.l #IDCMP_GADGETUP,a2
00050434 <PED.ab2@16304>      BNE 'norep
00050436 <PED.ab2@16305>     MOVE.l (a7)+,a2
0005043A <PED.ab2@16306>     BRA JL_0_7AA0                                 ; exit loop to JL_0_7AA0
0005043C <PED.ab2@16308>     MOVE.l (a7)+,a2
00050440 <PED.ab2@16309> BRA.w horiz_loop
00050442 <PED.ab2@16313>   MOVE.w D6,-(A7)
00050446 <PED.ab2@16315>   CMP.w #-$2,D7
0005044A <PED.ab2@16316>    BNE.w exit_addfilename
00050474 <PED.ab2@16317>   !basic
0005047A <PED.ab2@16321>   CMP.l #$1000,d6           ; insert filename
0005047E <PED.ab2@16322>   BNE 'nofileadd
00050510 <PED.ab2@16323>   aslfr_SetRequesterTitle{0,!TRANS{"Select a filename to insert in source"},"",""}
0005059A <PED.ab2@16324>   aslfr_SetPath{0,aslpath$,aslfile$,ptn$}
000505C0 <PED.ab2@16325>   If aslfr_Request{0,False,False,False}
000505F0 <PED.ab2@16326>     a$ = aslfr_GetNextFile{}
000505F6 <PED.ab2@16328>   Gosub insertstring
000505FC <PED.ab2@16331>   CMP.l #$1001,d6           ; load file under cursor
00050600 <PED.ab2@16332>    BNE 'noload
00050606 <PED.ab2@16333>   JSR getstring
00050608 <PED.ab2@16334>   MOVE.l a0,d0
0005060C <PED.ab2@16335>   i = PutD0
00050616 <PED.ab2@16336>   If i
0005063E <PED.ab2@16337>   a$ = Peek$(i)
0005067A <PED.ab2@16338>   If Exists (a$)
00050680 <PED.ab2@16339>     GetD0 &a$
0005069E <PED.ab2@16340>     !asm
000506A4 <PED.ab2@16341>     JSR loadfile
000506AA <PED.ab2@16342>     JSR StoreXtraData
000506D4 <PED.ab2@16343>     !basic
00050752 <PED.ab2@16345>   a$ = dos_AddPart{includedir$,Peek$(i)}
0005078E <PED.ab2@16346>   If Exists (a$)
00050794 <PED.ab2@16347>     GetD0 &a$
000507B2 <PED.ab2@16348>     !asm
000507B8 <PED.ab2@16349>     JSR loadfile
000507BE <PED.ab2@16350>     JSR StoreXtraData
000507E8 <PED.ab2@16351>     !basic
00050806 <PED.ab2@16361>   !asm
0005080C <PED.ab2@16362>   CMP.l #$D9,D6
00050810 <PED.ab2@16363>    BNE.w exit_addfilename
00050816 <PED.ab2@16364>   MOVE.w (A7)+,comWord_KeyBeforeReturn
0005081C <PED.ab2@16365>   ADD.w comWord_ColumnsOffset,D0
0005081E <PED.ab2@16366>   MOVE.w D0,-(A7)
00050824 <PED.ab2@16369>   MOVE.b #$20,$0(A2,D0.W)
00050826 <PED.ab2@16370>   ADDQ.w #1,D0
0005082C <PED.ab2@16371>   CMP.w comWord_MaxColumns,D0
00050830 <PED.ab2@16372>    BCS.b JL_0_7EBC
00050834 <PED.ab2@16373>   BRA.w JL_0_7DDC
00050836 <PED.ab2@16376>   MOVE.w (A7)+,D6
00050838 <PED.ab2@16379> RTS
0005083E <PED.ab2@16382>   MOVE.w comWord_ColumnsOffset,D4
00050844 <PED.ab2@16383>   MOVE.w visiblecolumns,D2
0005084A <PED.ab2@16384>   SUB.w AL_0_B7F4,D2
0005084C <PED.ab2@16385>   CMP.w D2,D1
00050850 <PED.ab2@16386>   BCC.w JL_0_7EFC
00050856 <PED.ab2@16387>   CLR.w comWord_ColumnsOffset
0005085C <PED.ab2@16388>   MOVE.w D1,comWord_Column
00050862 <PED.ab2@16391>   CMP.w comWord_ColumnsOffset,D4
00050866 <PED.ab2@16392>   BEQ.w JL_0_7F3E
0005086A <PED.ab2@16393>   BRA.w JL_0_7962
00050870 <PED.ab2@16396>   MOVE.w visiblecolumns,D2
00050872 <PED.ab2@16397>   LSR.w #1,D2
00050874 <PED.ab2@16398>   MOVE.w D1,D0
00050876 <PED.ab2@16399>   SUB.w D2,D0
0005087C <PED.ab2@16400>   MOVE.w comWord_MaxColumns,D3
00050882 <PED.ab2@16401>   SUB.w visiblecolumns,D3
00050884 <PED.ab2@16402>   CMP.w D3,D0
00050888 <PED.ab2@16403>   BGT.w JL_0_7F2E
0005088C <PED.ab2@16404>   BTST #$0,D0
00050890 <PED.ab2@16405>   BEQ.w JL_0_7F20
00050892 <PED.ab2@16406>   ADDQ.w #1,D0
00050894 <PED.ab2@16407>   SUBQ.w #1,D2
0005089A <PED.ab2@16410>   MOVE.w D0,comWord_ColumnsOffset
000508A0 <PED.ab2@16411>   MOVE.w D2,comWord_Column
000508A4 <PED.ab2@16412>   BRA.b JL_0_7EF0
000508AA <PED.ab2@16415>   MOVE.w D3,comWord_ColumnsOffset
000508AC <PED.ab2@16416>   SUB.w D3,D1
000508B2 <PED.ab2@16417>   MOVE.w D1,comWord_Column
000508B6 <PED.ab2@16418>   BRA.b JL_0_7EF0
000508B8 <PED.ab2@16420> RTS
000508BE <PED.ab2@16423>   CMP.w AL_0_B7F4,D0
000508C2 <PED.ab2@16424>   BCS.w JL_0_7F50
000508C8 <PED.ab2@16426>   SUBQ.w #1,comWord_Column
000508CA <PED.ab2@16427> RTS
000508D0 <PED.ab2@16430>   MOVE.w comWord_ColumnsOffset,D1
000508D4 <PED.ab2@16431>   CMP.w #1,d1
000508D8 <PED.ab2@16433>   BGT.w JL_0_7F5E
000508DA <PED.ab2@16434>   TST.w d1
000508DE <PED.ab2@16435>   BEQ 'l10
000508E6 <PED.ab2@16436>   MOVE.w #0,comWord_ColumnsOffset
000508EC <PED.ab2@16437>   JSR scroll_right
000508F2 <PED.ab2@16438>   JSR _redraw
000508F4 <PED.ab2@16440>   TST.w D0
000508F8 <PED.ab2@16441>   BNE.b JL_0_7F48
000508FA <PED.ab2@16442> RTS
00050900 <PED.ab2@16445>   SUBQ.w #2,comWord_ColumnsOffset
00050906 <PED.ab2@16446>   JSR scroll_right
0005090C <PED.ab2@16447>   ADDQ.w #1,comWord_Column
0005090E <PED.ab2@16448> RTS
00050914 <PED.ab2@16451>   MOVE.w comWord_ColumnsOffset,D1
0005091A <PED.ab2@16452>   MOVE.w visiblecolumns,D2
0005091C <PED.ab2@16453>   ADD.w D2,D1
00050922 <PED.ab2@16454>   CMP.w comWord_MaxColumns,D1
00050926 <PED.ab2@16455>   BCS.w JL_0_7F8C
00050928 <PED.ab2@16456>   SUBQ.w #1,D2
0005092A <PED.ab2@16457>   CMP.w D2,D0
0005092E <PED.ab2@16458>   BCS.w JL_0_7F9E
00050930 <PED.ab2@16459> RTS
00050936 <PED.ab2@16462>   CMP.w AL_0_B7F4,D0
0005093A <PED.ab2@16463>   BCS.w JL_0_7F9E
00050940 <PED.ab2@16464>   SUB.w AL_0_B7F4,D2
00050942 <PED.ab2@16465>   CMP.w D2,D0
00050946 <PED.ab2@16466>   BCC.w JL_0_7FA6
0005094C <PED.ab2@16468>   ADDQ.w #1,comWord_Column
0005094E <PED.ab2@16469> RTS
00050954 <PED.ab2@16472>   ADDQ.w #2,comWord_ColumnsOffset
0005095A <PED.ab2@16473>   JSR scroll_left
00050960 <PED.ab2@16474>   SUBQ.w #1,comWord_Column
00050962 <PED.ab2@16475> RTS
0005098C <PED.ab2@16487>   !basic
000509E8 <PED.ab2@16488>   dummy = RTEZRequest("","AJL_07FCC called","Ok")
00050A06 <PED.ab2@16489>   !asm
00050A0C <PED.ab2@16490>   TST.w comWord_LabelCounter
00050A12 <PED.ab2@16492>   LEA L_0_808E,A3
00050A14 <PED.ab2@16493>   CLR.l (A3)+
00050A16 <PED.ab2@16494>   CLR.l (A3)+
00050A18 <PED.ab2@16495>   CLR.l (A3)+
00050A1A <PED.ab2@16496>   CLR.l (A3)+
00050A1C <PED.ab2@16497>   CLR.l (A3)+
00050A1E <PED.ab2@16498>   CLR.l (A3)+
00050A20 <PED.ab2@16499>   CLR.l (A3)+
00050A22 <PED.ab2@16500>   CLR.l (A3)+
00050A28 <PED.ab2@16501>   LEA L_0_808E,A3
00050A2A <PED.ab2@16502>   MOVEQ.l #$00,D6
00050A30 <PED.ab2@16503>   MOVEA.l ptr_sourcewindow,A0
00050A34 <PED.ab2@16504>   MOVEA.l $56(A0),A2                                 ; Window\UserPort
00050A36 <PED.ab2@16507>     MOVEA.l A2,A0
00050A3A <PED.ab2@16508>     JSR _WaitPort(A6)
00050A3C <PED.ab2@16509>     MOVEA.l A2,A0
00050A40 <PED.ab2@16510>     JSR _ReplyMsg(A6)
00050A42 <PED.ab2@16511>     MOVEA.l D0,A1
00050A48 <PED.ab2@16512>     MOVE.l d0,messagestore
00050A4C <PED.ab2@16513>     MOVE.l $14(A1),D1
00050A52 <PED.ab2@16514>     CMP.l #IDCMP_VANILLAKEY,D1
00050A56 <PED.ab2@16515>     BNE.w JL_0_8030
00050A5A <PED.ab2@16517>     MOVE.w $18(A1),D2           ; keycode
00050A5E <PED.ab2@16518>     CMP.w #$D,D2
00050A62 <PED.ab2@16519>     BEQ.w JL_0_8036
00050A66 <PED.ab2@16520>     CMP.w #$10,D6
00050A6A <PED.ab2@16521>     BEQ.w JL_0_8036
00050A6C <PED.ab2@16522>     MOVE.b D2,(A3)+
00050A6E <PED.ab2@16524>     ADDQ.w #1,D6
00050A74 <PED.ab2@16527>     MOVE.l messagestore,d0
00050A78 <PED.ab2@16528>     BEQ 'l1
00050A7A <PED.ab2@16529>     MOVE.l d0,a1
00050A7E <PED.ab2@16530>     JSR _ReplyMsg(A6)
00050A84 <PED.ab2@16532>     CLR.l messagestore
00050A88 <PED.ab2@16533>   BRA.b JL_0_7FF8
00050A8E <PED.ab2@16536>   MOVE.l messagestore,d0
00050A92 <PED.ab2@16537>   BEQ 'l1
00050A94 <PED.ab2@16538>   MOVE.l d0,a1
00050A98 <PED.ab2@16539>   JSR _ReplyMsg(A6)
00050A9E <PED.ab2@16541>   CLR.l messagestore
00050AA0 <PED.ab2@16542>   MOVEQ.l #$00,D0
00050AA2 <PED.ab2@16543>   MOVEQ.l #$00,D7
00050AA8 <PED.ab2@16544>   LEA L_0_808E,A1
00050AAE <PED.ab2@16545>   MOVEA.l comPtr_LabelList,A0
00050AB0 <PED.ab2@16546>   MOVEQ.l #$00,D4
00050AB4 <PED.ab2@16549>   MOVEA.l $4(A0),A2
00050AB8 <PED.ab2@16550>   LEA $9(A2),A2
00050ABA <PED.ab2@16551>   ADDQ.l #1,A2
00050AC0 <PED.ab2@16552>   LEA L_0_80B0,A3
00050AC2 <PED.ab2@16555>   MOVE.b (A2)+,(A3)+
00050AC6 <PED.ab2@16556>   BNE.b JL_0_8056
00050ACC <PED.ab2@16557>   LEA L_0_80B0,A3
00050AD2 <PED.ab2@16558>   JSR compare_strings
00050AD6 <PED.ab2@16559>   BNE.w JL_0_8076
00050AD8 <PED.ab2@16560>   ADDQ.l #1,D4
00050ADA <PED.ab2@16561>   MOVEA.l (A0),A0
00050AE0 <PED.ab2@16562>   CMPA.l #$0,A0
00050AE4 <PED.ab2@16563>   BNE.b JL_0_8048
00050AE8 <PED.ab2@16564>   BRA.w JL_0_808C
00050AEA <PED.ab2@16567>   MOVEQ.l #$00,D2
00050AF0 <PED.ab2@16568>   MOVE.w visiblecolumns,D2
00050AF2 <PED.ab2@16569>   ADDQ.w #4,D2
00050AF4 <PED.ab2@16570>   MOVE.l D4,D3
00050AF6 <PED.ab2@16574> RTS
00050B18 <PED.ab2@16576> L_0_808E: Ds.w 17
00050B3A <PED.ab2@16577> L_0_80B0: Ds.w 17
00050B64 <PED.ab2@16580>   !basic
00050B92 <PED.ab2@16582>     error{"checkfor_compilerwindow"}
00050BB0 <PED.ab2@16584>   !asm
00050BB2 <PED.ab2@16590> RTS
00050BB8 <PED.ab2@16593>   MOVEA.l _execbase,A6
00050BBE <PED.ab2@16595>   TST.l ptr_sourcewindow
00050BC2 <PED.ab2@16596>    BEQ.w JL_0_8104
00050BC8 <PED.ab2@16597>   MOVEA.l ptr_sourcewindow,A2
00050BCC <PED.ab2@16598>   MOVEA.l $56(A2),A2             ; Window->UserPort
00050BCE <PED.ab2@16599>   MOVEA.l A2,A0
00050BD2 <PED.ab2@16600>   JSR _GetMsg(A6)
00050BD4 <PED.ab2@16601>   TST.l D0
00050BD8 <PED.ab2@16602>   BNE.w event_sourcewindow  ;JL_0_81CA
00050BDA <PED.ab2@16603>   MOVEQ.l #$00,D7
00050BDC <PED.ab2@16604> RTS
00050BDE <PED.ab2@16608> RTS
00050C08 <PED.ab2@16609>   !basic
00050C62 <PED.ab2@16610>   Request "","sub_mouseblicked","Ok"
00050C7E <PED.ab2@16612>   If Peek.w(?comWord_Column) > 0
00050C84 <PED.ab2@16613>     MOVE.l a2,d0 : lineaddr.l = PutD0
00050CC2 <PED.ab2@16614>     strline$ = Peeks$(lineaddr,Peek.w(?comWord_Column))
00050CDC <PED.ab2@16615>     slen.w = FLen(strline$) : found = False
00050D2C <PED.ab2@16616>     tokname$ = "" : strhelp$ = ""
00050D4E <PED.ab2@16617>     While (slen > 0) AND (found = False)
00050DA6 <PED.ab2@16618>       schar$ = Mid$(strline$,slen,1)
00050DDE <PED.ab2@16619>       If schar$ = " "
00050DE4 <PED.ab2@16620>         found = True
00050DEA <PED.ab2@16621>       Else
00050E3C <PED.ab2@16622>         tokname$ = schar$ + tokname$
00050E48 <PED.ab2@16623>         slen - 1
00050E4E <PED.ab2@16625>     Wend
00050E6C <PED.ab2@16627>   !asm
00050E6E <PED.ab2@16628> RTS
00050E74 <PED.ab2@16631>   MOVEA.l ptr_sourcewindow,A0
00050E7A <PED.ab2@16632>   CLR.w win_TopLeft
00050E80 <PED.ab2@16633>   CLR.w win_TopEdge
00050E86 <PED.ab2@16634>   CLR.w win_Width
00050E8C <PED.ab2@16635>   CLR.w win_Height
00050E94 <PED.ab2@16636>   MOVE.w $04(A0),win_TopLeft
00050E9C <PED.ab2@16637>   MOVE.w $06(A0),win_TopEdge
00050EA4 <PED.ab2@16638>   MOVE.w $08(A0),win_Width
00050EAC <PED.ab2@16639>   MOVE.w $0A(A0),win_Height
00050ED6 <PED.ab2@16640>   !basic
00050F28 <PED.ab2@16641>   Poke.w ?win_InnerHeight, Peek.w(?win_Height) - Peek.w(?win_BorTop) - Peek.w(?win_BorBot)
00050F7A <PED.ab2@16642>   Poke.w ?win_InnerWidth , Peek.w(?win_Width)  - Peek.w(?win_BorLef) - Peek.w(?win_BorRig)
00050F98 <PED.ab2@16643>   !asm
00050F9E <PED.ab2@16646>   MOVE.l messagestore,d0
00050FA2 <PED.ab2@16647>   BEQ 'ls1
00050FA4 <PED.ab2@16648>   MOVE.l d0,a1
00050FA8 <PED.ab2@16649>   JSR _ReplyMsg(A6)
00050FAA <PED.ab2@16650>   MOVEQ.l #$00,D0
00050FB0 <PED.ab2@16651>   CLR.l messagestore
00050FBA <PED.ab2@16654>   CMP.l #$FFFFC000,message_qualifier
00050FBE <PED.ab2@16655>   BNE resize_sourcewindow
00050FC0 <PED.ab2@16659> RTS
00050FC4 <PED.ab2@16662>   MOVEM.l d0-d7/a0-a6,-(a7)
00050FCA <PED.ab2@16664>   JSR cursor_off
00050FD0 <PED.ab2@16665>   JSR free_textbuffer
00050FD6 <PED.ab2@16666>   JSR sub_calculatedimensions
00050FDC <PED.ab2@16667>   JSR allocate_textbuffer
00050FE2 <PED.ab2@16668>   JSR clear_sourcewindow_visual
00050FE8 <PED.ab2@16669>   JSR update_statusline
00050FEE <PED.ab2@16670>   JSR _redraw
00050FF4 <PED.ab2@16671>   JSR cursor_on
00050FF8 <PED.ab2@16673>   MOVEM.l (a7)+,d0-d7/a0-a6
00050FFA <PED.ab2@16675> RTS
00050FFC <PED.ab2@16679>   MOVEA.l D0,A1
00051000 <PED.ab2@16680>   JSR _ReplyMsg(A6)
00051006 <PED.ab2@16681>   MOVEA.l _intuibase,A6
0005100C <PED.ab2@16682>   MOVEA.l ptr_sourcewindow,A0
00051010 <PED.ab2@16683>   JSR _ActivateWindow(A6)
00051012 <PED.ab2@16684>   MOVEQ.l #$00,D0
00051014 <PED.ab2@16685> RTS
00051018 <PED.ab2@16689>   MOVEM.l d0-d7/a0-a6,-(a7)
00051042 <PED.ab2@16709>   !basic
0005104E <PED.ab2@16710>   TEDSetJumpTable  {?COMDATABASE}
0005105A <PED.ab2@16711>   TEDSetFirstLine  {?comPtr_FirstSourceLine}
00051066 <PED.ab2@16712>   TEDSetCurrentLine{?comPtr_CurrentSourceLine} ; or Peek.l(?comPtr_CurrentSourceLine) !?
00051072 <PED.ab2@16713>   TEDSetLabelList  {?comPtr_LabelList}
0005107E <PED.ab2@16714>   TEDSetLabelCount {?comWord_LabelCounter}
0005109C <PED.ab2@16715>   !asm
000510A0 <PED.ab2@16716>   MOVEM.l (a7)+,a0-a6/d0-d7
000510A2 <PED.ab2@16717> RTS
000510A8 <PED.ab2@16721> JMP event_arexx
000510AE <PED.ab2@16725>   TST.l arexxport_available
000510B2 <PED.ab2@16726>    BEQ.w general_message_loop
000510B8 <PED.ab2@16727>   MOVEA.l _execbase,A6
000510BE <PED.ab2@16728>   MOVEA.l struct_ArexxMsgPort,A0
000510C2 <PED.ab2@16729>   JSR _WaitPort(A6)
000510C8 <PED.ab2@16730>   MOVEA.l struct_ArexxMsgPort,A0
000510CC <PED.ab2@16731>   JSR _GetMsg(A6)
000510D2 <PED.ab2@16732>   MOVE.l D0,struct_RexxMsg
000510D6 <PED.ab2@16733>    BNE.w JUMP_event_arexx
000510DC <PED.ab2@16736>   MOVEA.l _execbase,A6
000510E2 <PED.ab2@16739>   CLR.w message_qualifier
000510E8 <PED.ab2@16741>   TST.l ptr_sourcewindow
000510EC <PED.ab2@16742>    BEQ.b JL_0_8104
000510F2 <PED.ab2@16743>   MOVEA.l ptr_sourcewindow,A2
000510F6 <PED.ab2@16744>   MOVEA.l $56(A2),A2                      ; Window->UserPort
000510FC <PED.ab2@16747>   JSR check_state_of_debuggertoggle
000510FE <PED.ab2@16748>   MOVEA.l A2,A0
00051104 <PED.ab2@16749>   MOVEA.l _execbase,A6
00051108 <PED.ab2@16750>   JSR _GetMsg(A6)
0005110A <PED.ab2@16751>   TST.l D0
0005110E <PED.ab2@16752>    BNE.w message_loop
00051114 <PED.ab2@16754>   TST.l struct_ArexxMsgPort
00051118 <PED.ab2@16755>    BEQ.w JL_0_816C
0005111E <PED.ab2@16756>   MOVEA.l struct_ArexxMsgPort,A0
00051122 <PED.ab2@16757>   JSR _GetMsg(A6)
00051124 <PED.ab2@16758>   TST.l D0
00051128 <PED.ab2@16759>    BNE.w JL_0_81A0
0005112E <PED.ab2@16762>   MOVE.l #$fffF0000,D0
00051134 <PED.ab2@16763>   MOVE.b rexx_signalbits,D1
00051136 <PED.ab2@16764>   BSET D1,D0
0005113A <PED.ab2@16768>   JSR _Wait(A6)
0005113C <PED.ab2@16771>   MOVE.l a2,-(a7)                           ; sichern des Msg-Port in A2
0005113E <PED.ab2@16772>   MOVE.l a1,-(a7)
00051146 <PED.ab2@16773>   ADD.b #1,blinkcount
0005114C <PED.ab2@16774>   MOVE.b blinkrate,d0
00051150 <PED.ab2@16775>   BEQ 'l1
00051156 <PED.ab2@16776>   CMP.b blinkcount,d0
0005115A <PED.ab2@16777>   BGT 'l1
00051162 <PED.ab2@16778>   MOVE.b #0,blinkcount
00051168 <PED.ab2@16779>   MOVEA.l comPtr_SourceAreaRastPort,A1
0005116E <PED.ab2@16780>   MOVE.b #3,$18(a1)
00051174 <PED.ab2@16781>   JSR switch_cursordisplay
0005117A <PED.ab2@16782>   MOVEA.l comPtr_SourceAreaRastPort,A1
00051180 <PED.ab2@16785>   MOVE.b #15,$18(a1)
00051182 <PED.ab2@16788>   MOVE.l (a7)+,a1
000511AC <PED.ab2@16792>   !basic
000511B6 <PED.ab2@16800>   ev.l = Event
000511C0 <PED.ab2@16801>   While ev
000511DE <PED.ab2@16803>     If Peek.b(?onlinehelp)<>0
0005122C <PED.ab2@16804>       If (ev<>#IDCMP_INTUITICKS) AND (ev<>#IDCMP_ACTIVEWINDOW) AND (ev<>#IDCMP_GADGETHELP)  AND (ev<>#IDCMP_CHANGEWINDOW)
0005123A <PED.ab2@16805>         WZ_HideHelp{}
00051252 <PED.ab2@16807>       If ev = #IDCMP_GADGETHELP Then WZ_ShowHelp{}
00051264 <PED.ab2@16810>     If ev = #IDCMP_MENUPICK
0005128A <PED.ab2@16811>       addr_menuitem.l = ItemAddress_(Peek.l(?addr_menustrip),EventCode)
0005129E <PED.ab2@16812>       itemnumber.l = Peek.l(addr_menuitem+$22)
000512A2 <PED.ab2@16813>       GetD0 itemnumber
000512C0 <PED.ab2@16814>       !asm
000512C2 <PED.ab2@16815>       MOVE.l d0,d6
000512C8 <PED.ab2@16816>       JSR event_shortcut
000512F2 <PED.ab2@16817>       !basic
000512F8 <PED.ab2@16818>     Else
00051310 <PED.ab2@16819>       Use Window EventWindow
00051318 <PED.ab2@16820>       Select EventWindow
0005134E <PED.ab2@16822>         Case WZID("WIN_SEARCH")             : Gosub event_find
0005139C <PED.ab2@16824>         Case WZID("WIN_CONTEXTHELP")        : If ev = #IDCMP_CLOSEWINDOW Then Gosub close_bubblehelp
000513D8 <PED.ab2@16826>         Case WZID("WIN_NEWTYPE")            : Gosub event_newtype
00051414 <PED.ab2@16828>         Case WZID("WIN_INSTRUCTIONBROWSER") : Gosub event_instructionbrowser
00051450 <PED.ab2@16830>         Case WZID("WIN_LIBRARYBROWSER")     : Gosub event_librarybrowser
0005148C <PED.ab2@16832>         Case WZID("WIN_LABELS")             : Gosub event_label
000514C8 <PED.ab2@16834>         Case WZID("WIN_POPUP")              : Gosub event_popup
00051504 <PED.ab2@16836>         Case WZID("WIN_HELPDIAG")           : Gosub event_diag
00051540 <PED.ab2@16838>         Case WZID("WIN_SHORTCUTS")          : Gosub event_shortcuts
00051546 <PED.ab2@16842>         Default
0005155C <PED.ab2@16844>         If EventQualifier = $ffff8040
00051564 <PED.ab2@16845>           Select EventCode
0005158A <PED.ab2@16847>             Case 83 : savewinpref{0,?ptr_sourcewindow} : JSR write_newprefs
000515B6 <PED.ab2@16849>             Case 84 : savewinpref{1,?ptr_sourcewindow} : JSR write_newprefs
000515E2 <PED.ab2@16851>             Case 85 : savewinpref{2,?ptr_sourcewindow} : JSR write_newprefs
000515E4 <PED.ab2@16853>           End Select
000515EC <PED.ab2@16856>         Select EventCode
0005160E <PED.ab2@16858>           Case 83 : num.l = 0 : Gosub load_windowlayouts : Gosub do_windowlayout
00051636 <PED.ab2@16860>           Case 84 : num = 1   : Gosub load_windowlayouts : Gosub do_windowlayout
0005165E <PED.ab2@16862>           Case 85 : num = 2   : Gosub load_windowlayouts : Gosub do_windowlayout
0005168A <PED.ab2@16864>           Case 86 : AutoLayout{&wtemp,0} : Gosub do_windowlayout
000516B6 <PED.ab2@16866>           Case 87 : AutoLayout{&wtemp,1} : Gosub do_windowlayout
000516BC <PED.ab2@16870>           Default
000516BE <PED.ab2@16871>         End Select
000516C0 <PED.ab2@16876>       End Select
000516CA <PED.ab2@16878>     ev = Event
000516D0 <PED.ab2@16879>   Wend
000516D6 <PED.ab2@16882>   TST.b comByte_RunningFlag
000516DA <PED.ab2@16883>   BEQ 'l1
000516FE <PED.ab2@16884>   PrintScreenTitle{Peek$(?warningtitle)}
00051706 <PED.ab2@16885>   rf.l = 1
0005170A <PED.ab2@16886> BRA 'l2
00051744 <PED.ab2@16889>   If rf = 1 AND Peek.b(?comByte_RunningFlag) = 0
00051768 <PED.ab2@16890>     PrintScreenTitle{Peek$(?str_screentitle)}
00051770 <PED.ab2@16891>     rf = 0
0005178E <PED.ab2@16896>   !asm                                                                         
00051790 <PED.ab2@16898>   MOVE.l (a7)+,a2             ; zurueckholen vom MsgPort in A2
00051796 <PED.ab2@16899>   MOVE.l _execbase,A6
00051798 <PED.ab2@16901>   MOVEA.l A2,A0
0005179C <PED.ab2@16902>   JSR _GetMsg(A6)
0005179E <PED.ab2@16903>   TST.l D0
000517A2 <PED.ab2@16904>    BNE.w message_loop
000517A8 <PED.ab2@16906>   TST.l arexxport_available
000517AC <PED.ab2@16907>   BEQ.b JL_0_8142
000517B2 <PED.ab2@16909>   MOVEA.l struct_ArexxMsgPort,A0
000517B6 <PED.ab2@16910>   JSR _GetMsg(A6)
000517B8 <PED.ab2@16911>   TST.l D0
000517BC <PED.ab2@16912>   BEQ.b JL_0_8142
000517C2 <PED.ab2@16915>   MOVE.l D0,struct_RexxMsg
000517C6 <PED.ab2@16916>   MOVEM.l D2-D5/A2-A6,-(A7)
000517CC <PED.ab2@16917>   JSR event_arexx
000517D0 <PED.ab2@16918>   MOVEM.l (A7)+,D2-D5/A2-A6
000517D6 <PED.ab2@16919>   TST.l ptr_sourcewindow
000517DA <PED.ab2@16920>   BEQ.w JL_0_8104
000517E0 <PED.ab2@16921>   MOVEA.l ptr_sourcewindow,A2
000517E2 <PED.ab2@16922> RTS
000517E6 <PED.ab2@16927>   MOVEM.l d0-d1/a0-a1/a6,-(a7)
00051810 <PED.ab2@16928>   !basic
00051844 <PED.ab2@16929>   If Peek.b(?comByte_DebugMode)<>Peek.b(?olddebugmode)
00051868 <PED.ab2@16930>     Poke.b ?olddebugmode,Peek.b(?comByte_DebugMode)
0005189C <PED.ab2@16932>   GTSetMenuChecked 0,4,12,Peek.b(?comByte_DebugMode)
000518BA <PED.ab2@16933>   !asm
000518BE <PED.ab2@16934>   MOVEM.l (a7)+,d0-d1/a0-a1/a6
000518C0 <PED.ab2@16935> RTS
000518C6 <PED.ab2@16939>   JSR event_sourcewindow       ;JL_0_81CA
000518CA <PED.ab2@16940>   BEQ.w JL_0_8134
000518CC <PED.ab2@16941> RTS
000518CE <PED.ab2@16946>   MOVEA.l D0,A1                  ; A1: IntuiMessage
000518D4 <PED.ab2@16947>   MOVE.l D0,messagestore
000518FE <PED.ab2@16948>   !basic
00051902 <PED.ab2@16949>   *intuimessage.IntuiMessage = PutD0
00051920 <PED.ab2@16950>   !asm
00051928 <PED.ab2@16951>   MOVE.l $14(A1),message_class        ;   MessageClass
0005192C <PED.ab2@16952>   MOVE.l $14(A1),D1
00051934 <PED.ab2@16954>   MOVE.w $18(A1),message_code         ;   MessageClass
0005193C <PED.ab2@16955>   MOVE.w $1A(A1),message_qualifier
00051946 <PED.ab2@16957>   CMP.l #IDCMP_REFRESHWINDOW,message_class
0005194A <PED.ab2@16958>   BEQ.w sub_newsizeparameters
00051954 <PED.ab2@16959>   CMP.l #IDCMP_NEWSIZE,message_class
00051958 <PED.ab2@16960>   BEQ.w sub_newsizeparameters
00051962 <PED.ab2@16962>   CMP.l #IDCMP_INACTIVEWINDOW,message_class
00051966 <PED.ab2@16963>   BEQ.w message_inactivewindow
00051970 <PED.ab2@16965>   CMP.l #IDCMP_GADGETDOWN,message_class
00051974 <PED.ab2@16966>   BEQ.b message_gadgetevent
0005197E <PED.ab2@16968>   CMP.l #IDCMP_GADGETUP,message_class
00051982 <PED.ab2@16969>   BEQ.b message_gadgetevent
00051988 <PED.ab2@16971>   MOVE.w message_code,D0               ; IntuiMessage->Code to D0
00051992 <PED.ab2@16972>   CMP.l #IDCMP_MENUVERIFY,message_class
00051996 <PED.ab2@16973>   BEQ.w JL_0_844C
000519A0 <PED.ab2@16975>   CMP.l #IDCMP_CLOSEWINDOW,message_class
000519A4 <PED.ab2@16976>   BEQ.w message_closewindow
000519AE <PED.ab2@16978>   CMP.l #IDCMP_MENUPICK,message_class
000519B2 <PED.ab2@16979>   BEQ.w message_menupick
000519BC <PED.ab2@16981>   CMP.l #IDCMP_MOUSEBUTTONS,message_class
000519C0 <PED.ab2@16982>   BEQ.w message_mousebuttons
000519CA <PED.ab2@16984>   CMP.l #IDCMP_RAWKEY,message_class
000519CE <PED.ab2@16985>   BEQ.w message_rawkey
000519D8 <PED.ab2@16987>   CMP.l #IDCMP_VANILLAKEY,message_class
000519DC <PED.ab2@16988>   BEQ.w message_vanillakey
000519E2 <PED.ab2@16991>   MOVE.l _execbase,A6
000519E8 <PED.ab2@16992>   MOVE.l messagestore,d0
000519EC <PED.ab2@16993>   BEQ 'l1
000519EE <PED.ab2@16994>   MOVE.l d0,a1
000519F2 <PED.ab2@16995>   JSR _ReplyMsg(A6)
000519F8 <PED.ab2@16998>   CLR.l messagestore
000519FA <PED.ab2@16999>   MOVEQ.l #$00,D7
000519FC <PED.ab2@17000>   MOVEQ.l #$00,D0
000519FE <PED.ab2@17001>   RTS
00051A00 <PED.ab2@17004>   MOVEQ.l #$00,D0
00051A02 <PED.ab2@17005> RTS
00051A06 <PED.ab2@17009>   MOVEA.l $1C(A1),A0            ; IntuiMessage -> IAdress -> hier Gadget
00051A0A <PED.ab2@17012>   MOVE.w $26(A0),D6             ; GadgetID
00051A0C <PED.ab2@17013>   MOVEQ.l #-$01,D7
00051A10 <PED.ab2@17014>   CMPI.w #910,D6                ; BOOPSI-Gadget (Pfeilgadgets) gedrueckt ?
00051A14 <PED.ab2@17015>    BGE.w message_boopsiarrow
00051A1A <PED.ab2@17016>   CMPI.b #$4,$11(A0)            ; GadgetType: 4 = StrGadget
00051A1E <PED.ab2@17017>    BNE.b JL_0_825C
00051A24 <PED.ab2@17018>   CMPI.w #$9,$18(A1)            ; MessageClass->Code: $9 =
00051A28 <PED.ab2@17019>    BEQ.w JL_0_844C
00051A2E <PED.ab2@17022>   BTST #$2,$F(A0)               ;

00051A32 <PED.ab2@17023>   BEQ.w reply_idcmp_message
00051A3A <PED.ab2@17024>   CMP.w #IDCMP_GADGETDOWN,message_class
00051A3E <PED.ab2@17025>   BEQ.w reply_idcmp_message
00051A44 <PED.ab2@17026>   MOVE.l messagestore,d0
00051A48 <PED.ab2@17027>   BEQ 'l1
00051A4A <PED.ab2@17028>   MOVE.l d0,a1
00051A4E <PED.ab2@17029>   JSR _ReplyMsg(A6)
00051A54 <PED.ab2@17031>   CLR.l messagestore
00051A5A <PED.ab2@17032>   JSR comwin_close
00051A5C <PED.ab2@17033>   MOVEQ.l #-$01,D0
00051A5E <PED.ab2@17034> RTS
00051A60 <PED.ab2@17037>   MOVEA.l D0,A1
00051A66 <PED.ab2@17038>   MOVE.l messagestore,d0
00051A6A <PED.ab2@17039>   BEQ 'l1
00051A6C <PED.ab2@17040>   MOVE.l d0,a1
00051A70 <PED.ab2@17041>   JSR _ReplyMsg(A6)
00051A76 <PED.ab2@17043>   CLR.l messagestore
00051A78 <PED.ab2@17048>   MOVEA.l A2,A0
00051A7C <PED.ab2@17049>   JSR _GetMsg(A6)
00051A7E <PED.ab2@17050>   TST.l D0
00051A82 <PED.ab2@17051>    BEQ.w JL_0_822A
00051A84 <PED.ab2@17052>   MOVEA.l D0,A1
00051A8E <PED.ab2@17054>   CMP.l #IDCMP_ACTIVEWINDOW,message_class
00051A92 <PED.ab2@17055>   BEQ.w sub_activatewindow
00051A94 <PED.ab2@17056>   MOVEA.l D0,A1
00051A98 <PED.ab2@17057>   JSR _ReplyMsg(A6)
00051A9A <PED.ab2@17058>   MOVEQ.l #$00,D0
00051A9C <PED.ab2@17059> RTS
00051A9E <PED.ab2@17062>   MOVE.l d6,d0
00051AC8 <PED.ab2@17063>   !basic
00051AD2 <PED.ab2@17064>   gadgetid.w = PutD0 : arrow_pressed.w = 0
00051AEA <PED.ab2@17065>   If *intuimessage\Class = #IDCMP_GADGETDOWN
00051AF0 <PED.ab2@17066>     Select gadgetid
00051AFC <PED.ab2@17067>     Case #GID_RARROW
00051B02 <PED.ab2@17068>       arrow_pressed = $1E
00051B14 <PED.ab2@17070>     Case #GID_LARROW
00051B1A <PED.ab2@17071>       arrow_pressed = $1F
00051B2C <PED.ab2@17073>     Case #GID_UARROW
00051B32 <PED.ab2@17074>       arrow_pressed = $1C
00051B44 <PED.ab2@17076>     Case #GID_DARROW
00051B4A <PED.ab2@17077>       arrow_pressed = $1D
00051B4C <PED.ab2@17087>     End Select
00051B56 <PED.ab2@17088>     If arrow_pressed
00051B5C <PED.ab2@17089>       GetD0 arrow_pressed
00051B7A <PED.ab2@17090>       !asm
00051B84 <PED.ab2@17091>       MOVE.l #IDCMP_VANILLAKEY,message_class
00051B8A <PED.ab2@17092>       MOVE.w D0,message_code
00051B8E <PED.ab2@17093>       BRA.w message_vanillakey
00051B90 <PED.ab2@17097>   MOVEQ.l #$00,D7
00051B94 <PED.ab2@17098> BRA.w JL_0_844C
00051B96 <PED.ab2@17101>   MOVEQ.l #$6C,D6
00051B98 <PED.ab2@17102>   MOVEQ.l #-$02,D7
00051B9C <PED.ab2@17103> BRA.w reply_idcmp_message
00051BA0 <PED.ab2@17106>   CMP.w #-$1,D0
00051BA4 <PED.ab2@17107>   BEQ.w JL_0_844C
00051BAA <PED.ab2@17108>   JSR set_tedlibbase
00051BAC <PED.ab2@17109>   MOVE.l A1,-(A7)
00051BB2 <PED.ab2@17110>   ANDI.l #MaxWord,D0
00051BB8 <PED.ab2@17112>   MOVEA.l addr_menustrip,A0
00051BBE <PED.ab2@17113>   MOVEA.l _intuibase,A6
00051BC2 <PED.ab2@17114>   JSR _ItemAdress(A6)
00051BC8 <PED.ab2@17116>   MOVEA.l _execbase,A6
00051BCA <PED.ab2@17117>   MOVEA.l D0,A0
00051BCE <PED.ab2@17118>   MOVE.l $22(A0),D6
00051BD4 <PED.ab2@17127>   CMP.l #$58,d6
00051BD8 <PED.ab2@17128>   BNE 'l10
00051BDE <PED.ab2@17129>   LEA instrtab,a1
00051BE4 <PED.ab2@17130>   MOVE.l #32767,d0
00051BE6 <PED.ab2@17132>     CLR.l (a1)+
00051BEA <PED.ab2@17133>   DBF d0,'l11
00051BEC <PED.ab2@17136>   MOVEQ.l #-$02,D7
00051BEE <PED.ab2@17137>   MOVEA.l (A7)+,A1
00051BF2 <PED.ab2@17138> BRA.w reply_idcmp_message
00051BF4 <PED.ab2@17141>   MOVEQ.l #-$03,D7
00051BFA <PED.ab2@17142>   TST.b comByte_RunningFlag
00051BFE <PED.ab2@17143>   BNE 'l1r
00051C04 <PED.ab2@17148>   JSR check_mouse_in_statusarea
00051C0C <PED.ab2@17150>   MOVE.w #$0001,comWord__AL_0_8520
00051C10 <PED.ab2@17151>   CMP.w #$68,D0
00051C14 <PED.ab2@17152>   BEQ.w 'l10
00051C1C <PED.ab2@17153>   MOVE.w #$0000,comWord__AL_0_8520
00051C1E <PED.ab2@17154>   MOVEQ.l #-$04,D7
00051C22 <PED.ab2@17155>   CMP.w #$e8,d0
00051C26 <PED.ab2@17156>   BNE 'noshift
00051C2A <PED.ab2@17157>   BRA  reply_idcmp_message
00051C30 <PED.ab2@17160>   MOVE.l _execbase,A6
00051C36 <PED.ab2@17161>   MOVE.l messagestore,d0
00051C3A <PED.ab2@17162>   BEQ 'l1
00051C3C <PED.ab2@17163>   MOVE.l d0,a1
00051C40 <PED.ab2@17164>   JSR _ReplyMsg(A6)
00051C46 <PED.ab2@17167>   CLR.l messagestore
00051C48 <PED.ab2@17168>   MOVEQ.l #-$01,D0
00051C4A <PED.ab2@17169>   RTS
00051C4E <PED.ab2@17170>   BRA  reply_idcmp_message
00051C52 <PED.ab2@17173>   CMP.w #$6a,d0
00051C56 <PED.ab2@17174>   BNE nomid
00051C5C <PED.ab2@17175>   MOVE.w message_qualifier,d1
00051C60 <PED.ab2@17176>   AND.w #$30,d1
00051C64 <PED.ab2@17177>   BEQ nomid
00051C6A <PED.ab2@17179>   JSR jump_historyup
00051C70 <PED.ab2@17180>   MOVE.l _execbase,A6
00051C76 <PED.ab2@17181>   MOVE.l messagestore,d0
00051C7A <PED.ab2@17182>   BEQ 'l1b
00051C7C <PED.ab2@17183>   MOVE.l d0,a1
00051C80 <PED.ab2@17184>   JSR _ReplyMsg(A6)
00051C86 <PED.ab2@17186>   CLR.l messagestore
00051C88 <PED.ab2@17187>   MOVEQ #0,d0
00051C8A <PED.ab2@17188>   RTS
00051C8E <PED.ab2@17191> BRA.w reply_idcmp_message
00051C98 <PED.ab2@17195>   MOVE.w message_qualifier,comWord_QualifierStore   ; Message->Qualifier
00051CC2 <PED.ab2@17197>   !basic
00051CD4 <PED.ab2@17198>   last_key.l = Peek.w(?message_code)
00051CF2 <PED.ab2@17199>   !asm
00051CF4 <PED.ab2@17200>   MOVEQ.l #$00,D7
00051CFA <PED.ab2@17201>   MOVE.w message_code,D7               ; Message->Code
00051D00 <PED.ab2@17203>   JSR navigate_in_label_window
00051D04 <PED.ab2@17204>   CMP.w #$50,D7                   ; "F1"
00051D08 <PED.ab2@17205>    BLT.w JL_0_831E
00051D0C <PED.ab2@17206>   CMP.w #$59,D7                   ; "F10"
00051D10 <PED.ab2@17207>    BGT.w JL_0_831E
00051D14 <PED.ab2@17208>   ADDI.w #$31,D7
00051D18 <PED.ab2@17209>   BRA.w JL_0_8346
00051D1C <PED.ab2@17212>   CMP.w #$5F,D7                   ; "HELP"
00051D20 <PED.ab2@17213>    BEQ.w JL_0_8354
00051D24 <PED.ab2@17214>   CMP.w #$44,D7                   ; "RETURN"
00051D28 <PED.ab2@17215>    BEQ.w JL_0_8364
00051D2C <PED.ab2@17216>   CMP.w #$4F,D7                   ; "CURSOR <"
00051D30 <PED.ab2@17217>    BGT.w JL_0_844C
00051D34 <PED.ab2@17218>   CMP.w #$4C,D7                   ; "CURSOR up"
00051D38 <PED.ab2@17219>    BLT.w JL_0_844C
00051D3C <PED.ab2@17220>   SUBI.w #$30,D7                  ; ""
00051D40 <PED.ab2@17221>   BRA.w reply_idcmp_message
00051D4A <PED.ab2@17224>   MOVE.l #IDCMP_VANILLAKEY,message_class
00051D50 <PED.ab2@17225>   MOVE.w D7,message_code
00051D54 <PED.ab2@17226>   BRA.w check_for_vanillakey
00051D5E <PED.ab2@17229>   MOVE.l #IDCMP_VANILLAKEY,message_class
00051D66 <PED.ab2@17230>   MOVE.w #$008B,message_code     ; set message_code to HELP-Key
00051D6A <PED.ab2@17231>   BRA.w check_for_vanillakey
00051D74 <PED.ab2@17234>   MOVE.l #IDCMP_VANILLAKEY,message_class
00051D7C <PED.ab2@17235>   MOVE.w #$000D,message_code     ; set message_code to RETURN-Key
00051D86 <PED.ab2@17238>   CMP.l #IDCMP_VANILLAKEY,message_class
00051D8A <PED.ab2@17239>   BNE.w JL_0_844C    ;JL_0_8438
00051D8E <PED.ab2@17240> BRA message_vanillakey
00051DB8 <PED.ab2@17245>   !basic
00051DCA <PED.ab2@17246>   last_key.l = Peek.w(?message_code)
00051DE8 <PED.ab2@17247>   !asm
00051DEA <PED.ab2@17248>   MOVEQ.l #$00,D7
00051DF0 <PED.ab2@17249>   MOVE.w message_code,D7               ; Vanillakey
00051DF6 <PED.ab2@17250>   MOVE.w message_qualifier,D1
00051DFC <PED.ab2@17251>   MOVE.w D1,comWord_QualifierStore
00051E00 <PED.ab2@17253>   CMP.w #$0d,d7                        ; check for "RETURN"
00051E04 <PED.ab2@17254>   BNE 'noreturn
00051E0A <PED.ab2@17255>   JSR immediate_syntaxhelp
00051E0E <PED.ab2@17258>   CMP.w #$8b,d7                        ; check for "HELP"
00051E12 <PED.ab2@17259>   BNE 'nohelp
00051E16 <PED.ab2@17261>   CMP.w #$8000,D1
00051E1A <PED.ab2@17262>   BNE.w 'check_ctrlhelp
00051E20 <PED.ab2@17263>   JSR immediate_syntaxhelp
00051E24 <PED.ab2@17266>   CMP.w #$8008,D1
00051E28 <PED.ab2@17267>   BNE.w 'check_shifthelp
00051E2E <PED.ab2@17268>   JSR diag_help
00051E32 <PED.ab2@17271>   CMP.w #$8001,D1
00051E36 <PED.ab2@17272>   BNE.w 'nohelp
00051E3C <PED.ab2@17273>   JSR startguide
00051E40 <PED.ab2@17276>   CMP.w #$1b,d7                        ; check for "ESC"
00051E44 <PED.ab2@17277>   BNE 'noesc
00051E6E <PED.ab2@17278>   !basic
00051E74 <PED.ab2@17279>   Gosub close_bubblehelp
00051E7A <PED.ab2@17280>   Gosub close_popupwindow
00051E98 <PED.ab2@17281>   !asm
00051E9C <PED.ab2@17284>   CMP.w #$15,d7                        ; check for "CTRL_U"
00051EA0 <PED.ab2@17285>   BNE 'noCTRL_U
00051EA4 <PED.ab2@17286>   MOVEM.l a0-a6/d0-d7,-(a7)
00051EAA <PED.ab2@17287>   JSR cursor_off
00051EB0 <PED.ab2@17288>   JSR _redraw
00051EB4 <PED.ab2@17289>   BSR cursor_on
00051EB8 <PED.ab2@17290>   MOVEM.l (a7)+,a0-a6/d0-d7
00051EBA <PED.ab2@17291>   CLR.l d7
00051EBE <PED.ab2@17292>   BRA.w reply_idcmp_message
00051EC2 <PED.ab2@17295>   CMP.w #$e,d7                         ; check for "CTRL_N"
00051EC6 <PED.ab2@17296>   BNE 'noctrl_n   ;newtype
00051EF0 <PED.ab2@17297>   !basic
00051F18 <PED.ab2@17298>   a$ = "newtype ."
00051F1E <PED.ab2@17299>   JSR cursor_off
00051F24 <PED.ab2@17300>   Gosub insertstring
00051F42 <PED.ab2@17301>   !asm
00051F48 <PED.ab2@17302>   JSR insertreturn
00051F4E <PED.ab2@17303>   JSR insertreturn
00051F78 <PED.ab2@17304>   !basic
00051FA0 <PED.ab2@17305>   a$ = "end newtype "
00051FA6 <PED.ab2@17306>   Gosub insertstring
00051FC4 <PED.ab2@17307>   !asm
00051FC8 <PED.ab2@17310>   CMP.w #$6,d7
00051FCC <PED.ab2@17311>   BNE 'noctrl_f   ;function
00051FF6 <PED.ab2@17312>   !basic
0005201E <PED.ab2@17313>   a$ = "function.l { }"
00052024 <PED.ab2@17314>   JSR cursor_off
0005202A <PED.ab2@17315>   Gosub insertstring
00052048 <PED.ab2@17316>   !asm
0005204E <PED.ab2@17317>   JSR insertreturn
00052054 <PED.ab2@17318>   JSR insertreturn
0005207E <PED.ab2@17319>   !basic
000520A6 <PED.ab2@17320>   a$ = "function return 0"
000520AC <PED.ab2@17321>   JSR cursor_off
000520B2 <PED.ab2@17322>   Gosub insertstring
000520D0 <PED.ab2@17323>   !asm
000520D6 <PED.ab2@17324>   JSR insertreturn
00052100 <PED.ab2@17325>   !basic
00052128 <PED.ab2@17326>   a$ = "end function "
0005212E <PED.ab2@17327>   Gosub insertstring
0005214C <PED.ab2@17328>   !asm
00052150 <PED.ab2@17331>   CMP.w #$5,d7                         ; check for "CTRL_E"
00052154 <PED.ab2@17332>   BNE 'noctrl_e   ;end if
0005217E <PED.ab2@17333>   !basic
000521A6 <PED.ab2@17334>   a$ = "end if "
000521AC <PED.ab2@17335>   JSR cursor_off
000521B2 <PED.ab2@17336>   Gosub insertstring
000521D0 <PED.ab2@17337>   !asm
000521D4 <PED.ab2@17340>   CMP.w #$8040,d1                      ; check for "L-AMIGA"
000521D8 <PED.ab2@17341>   BNE nolamiga
000521DC <PED.ab2@17342>   CMP.w #$84,d7                        ; check for "LA-F4"
000521E0 <PED.ab2@17343>   BNE 'nof14
0005220A <PED.ab2@17344>   !basic
00052222 <PED.ab2@17345>   savewinpref{0,?ptr_sourcewindow} : JSR write_newprefs
00052240 <PED.ab2@17346>   !asm
00052244 <PED.ab2@17349>   CMP.w #$85,d7                        ; check for "LA-F5"
00052248 <PED.ab2@17350>   BNE 'nof15
00052272 <PED.ab2@17351>   !basic
0005228A <PED.ab2@17352>   savewinpref{1,?ptr_sourcewindow } : JSR write_newprefs
000522A8 <PED.ab2@17353>   !asm
000522AC <PED.ab2@17356>   CMP.w #$86,d7                        ; check for "LA-F6"
000522B0 <PED.ab2@17357>   BNE 'nof16
000522DA <PED.ab2@17358>   !basic
000522F2 <PED.ab2@17359>   savewinpref{2,?ptr_sourcewindow } : JSR write_newprefs
00052310 <PED.ab2@17360>   !asm
00052314 <PED.ab2@17363>   CMP.w #$61,d7                        ; ???
00052318 <PED.ab2@17364>   BNE 'noa
0005231C <PED.ab2@17365>   MOVEM.l a0-a6/d0-d7,-(a7)
00052322 <PED.ab2@17366>   MOVE.l lastedited_line,d0
00052328 <PED.ab2@17368>   MOVE.l comPtr_CurrentSourceLine,a4
0005232E <PED.ab2@17369>   JSR cursor_off
00052334 <PED.ab2@17370>   JSR gotoline
00052338 <PED.ab2@17371>   BSR cursor_on
0005233C <PED.ab2@17372>   MOVEM.l (a7)+,a0-a6/d0-d7
0005233E <PED.ab2@17373>   CLR.l d7
00052342 <PED.ab2@17374>   BRA reply_idcmp_message
00052346 <PED.ab2@17377>   CMP.w #$31,d7                       ; check for "1"
0005234A <PED.ab2@17378>   BNE 'no1
0005234E <PED.ab2@17379>   MOVEM.l a0-a6/d0-d7,-(a7)
00052354 <PED.ab2@17380>   MOVE.l storeline1,d0
00052358 <PED.ab2@17381>   BRA 'doit
0005235C <PED.ab2@17383>   CMP.w #$32,d7                       ; check for "2"
00052360 <PED.ab2@17384>   BNE 'no2
00052364 <PED.ab2@17385>   MOVEM.l a0-a6/d0-d7,-(a7)
0005236A <PED.ab2@17386>   MOVE.l storeline2,d0
0005236E <PED.ab2@17387>   BRA 'doit
00052372 <PED.ab2@17389>   CMP.w #$33,d7                       ; check for "3"
00052376 <PED.ab2@17390>   BNE 'no3
0005237A <PED.ab2@17391>   MOVEM.l a0-a6/d0-d7,-(a7)
00052380 <PED.ab2@17392>   MOVE.l storeline3,d0
00052384 <PED.ab2@17393>   BRA 'doit
00052388 <PED.ab2@17397>   CMP.w #$84,d7                       ; check for "F4"
0005238C <PED.ab2@17398>   BNE 'nof4
000523B6 <PED.ab2@17399>   !basic
000523CA <PED.ab2@17400>   num = 0:Gosub load_windowlayouts: Gosub do_windowlayout
000523E8 <PED.ab2@17401>   !asm
000523EA <PED.ab2@17402>   CLR d7
000523EC <PED.ab2@17403>   CLR d1
000523F0 <PED.ab2@17406>   CMP.w #$85,d7                       ; check for "F5"
000523F4 <PED.ab2@17407>   BNE 'nof5
0005241E <PED.ab2@17408>   !basic
00052432 <PED.ab2@17409>   num = 1:Gosub load_windowlayouts: Gosub do_windowlayout
00052450 <PED.ab2@17410>   !asm
00052452 <PED.ab2@17411>   CLR d7
00052454 <PED.ab2@17412>   CLR d1
00052458 <PED.ab2@17415>   CMP.w #$86,d7                       ; check for "F6"
0005245C <PED.ab2@17416>   BNE 'nof6
00052486 <PED.ab2@17417>   !basic
0005249A <PED.ab2@17418>   num = 2:Gosub load_windowlayouts: Gosub do_windowlayout
000524B8 <PED.ab2@17419>   !asm
000524BA <PED.ab2@17420>   CLR d7
000524BC <PED.ab2@17421>   CLR d1
000524C0 <PED.ab2@17424>   CMP.w #$87,d7                       ; check for "F7"
000524C4 <PED.ab2@17425>   BNE 'nof7
000524EE <PED.ab2@17426>   !basic
00052500 <PED.ab2@17427>   AutoLayout{&wtemp,0}
00052506 <PED.ab2@17428>   Gosub do_windowlayout
00052524 <PED.ab2@17429>   !asm
00052526 <PED.ab2@17430>   CLR d7
00052528 <PED.ab2@17431>   CLR d1
0005252C <PED.ab2@17434>   CMP.w #$88,d7                       ; check for "F8"
00052530 <PED.ab2@17435>   BNE 'nof8
0005255A <PED.ab2@17436>   !basic
0005256C <PED.ab2@17437>   AutoLayout{&wtemp,1}
00052572 <PED.ab2@17438>   Gosub do_windowlayout
00052590 <PED.ab2@17439>   !asm
00052592 <PED.ab2@17440>   CLR d7
00052594 <PED.ab2@17441>   CLR d1
00052598 <PED.ab2@17455>   CMP.w #$8041,d1             ; check for ""
0005259C <PED.ab2@17456>   BEQ 'ok
000525A0 <PED.ab2@17457>   CMP.w #$8042,d1             ; check for ""
000525A4 <PED.ab2@17458>   BNE 'nolsamiga
000525A8 <PED.ab2@17460>   CMP.w #$21,d7               ; check for ""
000525AC <PED.ab2@17461>   BNE 'no1
000525AE <PED.ab2@17462>   MOVE.l d1,-(a7)
000525B4 <PED.ab2@17463>   MOVE.l comLong_DisplayLine,D1
000525BA <PED.ab2@17464>   ADD.l comLong_DisplayLineOffset,D1
000525C0 <PED.ab2@17465>   MOVE.l d1,storeline1
000525C2 <PED.ab2@17466>   MOVE.l (a7)+,d1
000525C4 <PED.ab2@17467>   CLR.l d7
000525C8 <PED.ab2@17468>   BRA reply_idcmp_message
000525CC <PED.ab2@17470>   CMP.w #$22,d7               ; check for ""
000525D0 <PED.ab2@17471>   BNE 'no2
000525D2 <PED.ab2@17472>   MOVE.l d1,-(a7)
000525D8 <PED.ab2@17473>   MOVE.l comLong_DisplayLine,D1
000525DE <PED.ab2@17474>   ADD.l comLong_DisplayLineOffset,D1
000525E4 <PED.ab2@17475>   MOVE.l d1,storeline2
000525E6 <PED.ab2@17476>   MOVE.l (a7)+,d1
000525E8 <PED.ab2@17477>   CLR.l d7
000525EC <PED.ab2@17478>   BRA reply_idcmp_message
000525F0 <PED.ab2@17480>   CMP.w #$23,d7               ; check for ""
000525F4 <PED.ab2@17481>   BNE 'no3
000525F6 <PED.ab2@17482>   MOVE.l d1,-(a7)
000525FC <PED.ab2@17483>   MOVE.l comLong_DisplayLine,D1
00052602 <PED.ab2@17484>   ADD.l comLong_DisplayLineOffset,D1
00052608 <PED.ab2@17485>   MOVE.l d1,storeline3
0005260A <PED.ab2@17486>   MOVE.l (a7)+,d1
0005260C <PED.ab2@17487>   CLR.l d7
00052610 <PED.ab2@17488>   BRA reply_idcmp_message
00052616 <PED.ab2@17493>   MOVE.l _execbase,A6
0005261C <PED.ab2@17494>   MOVE.l messagestore,d0
00052620 <PED.ab2@17495>   BEQ 'l1
00052622 <PED.ab2@17496>   MOVE.l d0,a1
00052626 <PED.ab2@17497>   JSR _ReplyMsg(A6)
0005262C <PED.ab2@17499>   CLR.l messagestore
0005262E <PED.ab2@17500>   MOVEQ.l #-$01,D0
00052630 <PED.ab2@17501> RTS
00052634 <PED.ab2@17518> actualfile:             Dc.l 0  ; current node
00052638 <PED.ab2@17519> loadedfilesbase:        Dc.l 0  ; base node of file linked list
0005263C <PED.ab2@17520> AL_0_84B2:              Dc.l 0
00052640 <PED.ab2@17531>  viewablelines:         Dc.l 0
00052642 <PED.ab2@17532>  visiblecolumns:        Dc.w 0
00052646 <PED.ab2@17533>  fontheight:            Dc.l 0
0005264A <PED.ab2@17534>  fontheightl:           Dc.l 0
0005264E <PED.ab2@17536>  ypos_statusarea        Dc.l 0
00052652 <PED.ab2@17537>  viewablelines_m1:      Dc.l 0
00052654 <PED.ab2@17538>  win_InnerHeight:       Dc.w 0
00052656 <PED.ab2@17539>  win_InnerWidth:        Dc.w 0
00052658 <PED.ab2@17540>  win_TopEdge:           Dc.w 0
0005265A <PED.ab2@17541>  font_Heightm1:         Dc.w $0005
0005265E <PED.ab2@17542>  font_Baseline:         Ds.l 1
00052662 <PED.ab2@17543>  ptr_sourcewindow:      Dc.l 0
00052666 <PED.ab2@17544>  rp_sourcewindow:       Dc.l 0
0005266A <PED.ab2@17545>  ptr_pedscreen:         Dc.l 0
0005266E <PED.ab2@17546>  ptr_exescreen:         Dc.l 0
00052672 <PED.ab2@17547>  textbufferaddr:        Dc.l 0
0005269C <PED.ab2@17551>   !basic
000526A2 <PED.ab2@17552>   Gosub open_shortcuts
000526C0 <PED.ab2@17553>   !asm
000526C2 <PED.ab2@17554> RTS
000526EC <PED.ab2@17557>   !basic
000526F2 <PED.ab2@17558>   Gosub open_librarybrowser
00052710 <PED.ab2@17559>   !asm
00052712 <PED.ab2@17560> RTS
0005273C <PED.ab2@17563>   !basic
0005274A <PED.ab2@17564>   wtemp\ibrowser_x = -2
00052758 <PED.ab2@17565>   wtemp\ibrowser_y = -2
00052766 <PED.ab2@17566>   wtemp\ibrowser_w = -2
00052774 <PED.ab2@17567>   wtemp\ibrowser_h = -2
0005277A <PED.ab2@17568>   Gosub open_instructionbrowser
00052798 <PED.ab2@17569>   !asm
0005279A <PED.ab2@17570> RTS
000527C4 <PED.ab2@17573>   !basic
0005282A <PED.ab2@17574>   Show_Helpfile{"Changelog","main",Peek$(?str_defaultpubscreen)}
00052848 <PED.ab2@17575>   !asm
0005284A <PED.ab2@17576> RTS
00052874 <PED.ab2@17579>   !basic
000528DA <PED.ab2@17580>   Show_Helpfile{"BlitzLibs","main",Peek$(?str_defaultpubscreen)}
000528F8 <PED.ab2@17581>   !asm
000528FA <PED.ab2@17582> RTS
00052924 <PED.ab2@17585>   !basic
0005298A <PED.ab2@17586>   Show_Helpfile{"AmiBlitz3","main",Peek$(?str_defaultpubscreen)}
000529A8 <PED.ab2@17587>   !asm
000529AA <PED.ab2@17588> RTS
000529D4 <PED.ab2@17591>   !basic
00052A3A <PED.ab2@17592>   Show_Helpfile{"BlitzProgrammers","main",Peek$(?str_defaultpubscreen)}
00052A58 <PED.ab2@17593>   !asm
00052A5A <PED.ab2@17594> RTS
00052A84 <PED.ab2@17597>   !basic
00052AEA <PED.ab2@17598>   Show_Helpfile{"Main","main",Peek$(?str_defaultpubscreen)}
00052B08 <PED.ab2@17599>   !asm
00052B0A <PED.ab2@17600> RTS
00052B10 <PED.ab2@17605>   MOVE.l #$8b,D7
00052B16 <PED.ab2@17606>   JSR immediate_syntaxhelp
00052B18 <PED.ab2@17608> RTS
00052B42 <PED.ab2@17612>   !basic
00052B48 <PED.ab2@17613>   Gosub build_HelpIndexFile
00052B66 <PED.ab2@17614>   !asm
00052B68 <PED.ab2@17615> RTS
00052B6E <PED.ab2@17618>   JSR menu_settings
00052B70 <PED.ab2@17619> RTS
00052BBA <PED.ab2@17622>   If WriteFile (0,addonprefs$)
00052BF6 <PED.ab2@17623>     WriteType 0,wpref(0)
00052C32 <PED.ab2@17624>     WriteType 0,wpref(1)
00052C6E <PED.ab2@17625>     WriteType 0,wpref(2)
00052C86 <PED.ab2@17626>     CloseFile 0
00052C88 <PED.ab2@17628> RTS
00052C8C <PED.ab2@17632> ptr_tempmsgport:       Ds.l 1
00052C90 <PED.ab2@17633> ptr_colormap:          Ds.l 1
00052CAB <PED.ab2@17634> str_title_palreq:      Dc.b "Choose A Colour Palette...",0
00052CBB <PED.ab2@17637> str_tedhistory_env:    Dc.b "ENV:Ted.history",0
00052CCE <PED.ab2@17638>                        Dc.b "ENVARC:TED.history",0
00052CD0 <PED.ab2@17644>                         Dc.b $00,$00
00052CD2 <PED.ab2@17646>                         Dc.b $00,$00
00052CD4 <PED.ab2@17648>                         Dc.b $FF,$FF
00052CD8 <PED.ab2@17649>  aslreq_x:              Dc.l $18
00052CDC <PED.ab2@17650>  aslreq_y:              Dc.l $18
00052CE0 <PED.ab2@17651>  aslreq_width:          Dc.l $17C
00052CE4 <PED.ab2@17652>  aslreq_height:         Dc.l $17C
00052CE6 <PED.ab2@17654>                         Dc.b $FF,$FF
00052CEC <PED.ab2@17655>  prefs_source_icon:     Ds.w 3
00052CF0 <PED.ab2@17657>                         Dc.l 0
00052CF2 <PED.ab2@17659>                         Ds.w 1
00052CF4 <PED.ab2@17661>                         Dc.b $02,$80
00052CF6 <PED.ab2@17663>                         Ds.w 1
00052CF8 <PED.ab2@17665>                         Dc.b $01,$00
00052CFA <PED.ab2@17667>                         Dc.b $00,$00
00052CFC <PED.ab2@17668>                         Ds.w 1
00052CFE <PED.ab2@17670>                         Dc.b $00,$0f
00052D00 <PED.ab2@17672>                         Dc.b $00,$02
00052D01 <PED.ab2@17675>                         Dc.b $00 ;.
00052D02 <PED.ab2@17676>                         Dc.b $03 ;.
00052D03 <PED.ab2@17678>                         Dc.b 0
00052F03 <PED.ab2@17679>                         Ds.b #MAX_STRINGSIZE
00052F04 <PED.ab2@17680>                         Even
00052F05 <PED.ab2@17682>                         Dc.b $00
00052F06 <PED.ab2@17684>                         Dc.b $03
00052F08 <PED.ab2@17686>                         Dc.b $00,$08
00052F0A <PED.ab2@17688>                         Dc.w 1               ;DUMMY
00052F0C <PED.ab2@17690>                         Dc.b $FF,$FF
00052F0E <PED.ab2@17693>                         Dc.b $FF,$FF
00052F10 <PED.ab2@17696>                         Dc.b $FF,$FF
00052F12 <PED.ab2@17699>                         Dc.b $00,$02
00052F14 <PED.ab2@17702>                         Dc.b $FF,$FF
00052F16 <PED.ab2@17705>                         Dc.b $FF,$FF
00052F18 <PED.ab2@17708>                         Ds.w 1
00052F1A <PED.ab2@17710>                         Dc.b $00,$02
00052F1C <PED.ab2@17713>                         Dc.b $FF,$FF
00052F1E <PED.ab2@17716>                         Ds.w 1
00052F20 <PED.ab2@17718>                         Ds.w 1
00052F22 <PED.ab2@17720>                         Ds.w 1
00052F24 <PED.ab2@17722>                         Dc.b $00,$0C
00052F25 <PED.ab2@17725>                         Dc.b $00 ;.
00052F26 <PED.ab2@17726>                         Dc.b $06 ;.
00052F2C <PED.ab2@17728>                         Dc.b "%1ld ",0
00052F3C <PED.ab2@17730>                         Ds.l 4
00052F40 <PED.ab2@17737>   CMP.w #$10,D6
00052F44 <PED.ab2@17738>    BEQ.w JL_0_B902
00052F48 <PED.ab2@17739>   CMP.w #$C,D6
00052F4C <PED.ab2@17740>    BEQ.w JL_0_B8A8
00052F50 <PED.ab2@17741>   CMP.w #$8,D6
00052F54 <PED.ab2@17742>    BEQ.w JL_0_B862
00052F58 <PED.ab2@17743>   CMP.w #$4,D6
00052F5C <PED.ab2@17744>    BEQ.w JL_0_B830
00052F5E <PED.ab2@17745>   RTS
00052F64 <PED.ab2@17748>   MOVEA.l AL_0_BFFA,A0
00052F6A <PED.ab2@17749>   MOVEA.l AL_0_BE28,A1
00052F74 <PED.ab2@17750>   MOVE.l AL_0_BFE6,AL_0_BFFA
00052F7E <PED.ab2@17751>   MOVE.l AL_0_BE24,AL_0_BE28
00052F84 <PED.ab2@17752>   MOVE.l A0,AL_0_BFE6
00052F8A <PED.ab2@17753>   MOVE.l A1,AL_0_BE24
00052F90 <PED.ab2@17754>   JSR update_historymenu
00052F92 <PED.ab2@17755>   RTS
00052F98 <PED.ab2@17758>   MOVEA.l AL_0_C00E,A0
00052F9E <PED.ab2@17759>   MOVEA.l AL_0_BE2C,A1
00052FA8 <PED.ab2@17760>   MOVE.l AL_0_BFFA,AL_0_C00E
00052FB2 <PED.ab2@17761>   MOVE.l AL_0_BFE6,AL_0_BFFA
00052FBC <PED.ab2@17762>   MOVE.l AL_0_BE28,AL_0_BE2C
00052FC6 <PED.ab2@17763>   MOVE.l AL_0_BE24,AL_0_BE28
00052FCC <PED.ab2@17764>   MOVE.l A0,AL_0_BFE6
00052FD2 <PED.ab2@17765>   MOVE.l A1,AL_0_BE24
00052FD8 <PED.ab2@17766>   JSR update_historymenu
00052FDA <PED.ab2@17767>   RTS
00052FE0 <PED.ab2@17770>   MOVEA.l AL_0_C022,A0
00052FE6 <PED.ab2@17771>   MOVEA.l AL_0_BE30,A1
00052FF0 <PED.ab2@17772>   MOVE.l AL_0_C00E,AL_0_C022
00052FFA <PED.ab2@17773>   MOVE.l AL_0_BFFA,AL_0_C00E
00053004 <PED.ab2@17774>   MOVE.l AL_0_BFE6,AL_0_BFFA
0005300E <PED.ab2@17775>   MOVE.l AL_0_BE2C,AL_0_BE30
00053018 <PED.ab2@17776>   MOVE.l AL_0_BE28,AL_0_BE2C
00053022 <PED.ab2@17777>   MOVE.l AL_0_BE24,AL_0_BE28
00053028 <PED.ab2@17778>   MOVE.l A0,AL_0_BFE6
0005302E <PED.ab2@17779>   MOVE.l A1,AL_0_BE24
00053034 <PED.ab2@17780>   JSR update_historymenu
00053036 <PED.ab2@17781>   RTS
0005303C <PED.ab2@17784>   MOVEA.l AL_0_C036,A0
00053042 <PED.ab2@17785>   MOVEA.l AL_0_BE34,A1
0005304C <PED.ab2@17786>   MOVE.l AL_0_C022,AL_0_C036
00053056 <PED.ab2@17787>   MOVE.l AL_0_C00E,AL_0_C022
00053060 <PED.ab2@17788>   MOVE.l AL_0_BFFA,AL_0_C00E
0005306A <PED.ab2@17789>   MOVE.l AL_0_BFE6,AL_0_BFFA
00053074 <PED.ab2@17790>   MOVE.l AL_0_BE30,AL_0_BE34
0005307E <PED.ab2@17791>   MOVE.l AL_0_BE2C,AL_0_BE30
00053088 <PED.ab2@17792>   MOVE.l AL_0_BE28,AL_0_BE2C
00053092 <PED.ab2@17793>   MOVE.l AL_0_BE24,AL_0_BE28
00053098 <PED.ab2@17794>   MOVE.l A1,AL_0_BE24
0005309E <PED.ab2@17795>   MOVE.l A0,AL_0_BFE6
000530A4 <PED.ab2@17796>   JSR update_historymenu
000530A6 <PED.ab2@17797> RTS
000530AC <PED.ab2@17800>   TST.w remember_saved
000530B0 <PED.ab2@17801>    BEQ.w JL_0_B98E
000530B6 <PED.ab2@17802>   TST.l ptr_historyfilelist
000530BA <PED.ab2@17803>    BEQ.w JL_0_B98E
000530C0 <PED.ab2@17804>   MOVEA.l ptr_historyfilelist,A1
000530D2 <PED.ab2@17805>   !newfree
000530D4 <PED.ab2@17807> RTS
000530D6 <PED.ab2@17810>   MOVEQ.l #$00,D6
000530DC <PED.ab2@17811>   MOVEA.l #AL_0_BE10,A0
000530E2 <PED.ab2@17812>   ANDI.l #MaxWord,D6
000530E8 <PED.ab2@17813>   LEA comStr_SourceName,A3
000530EC <PED.ab2@17815>     MOVEA.l $0(A0,D6.W),A1
000530EE <PED.ab2@17816>     MOVEA.l (A1),A1
000530F4 <PED.ab2@17817>     JSR compare_strings
000530F8 <PED.ab2@17818>     BNE.w JL_0_B9BE
000530FA <PED.ab2@17820>     ADDQ.w #4,D6
000530FE <PED.ab2@17821>     CMP.w #$14,D6
00053102 <PED.ab2@17822>   BNE.b JL_0_B9A2
00053106 <PED.ab2@17823>   BRA.w JL_0_B9E0
00053108 <PED.ab2@17826>   MOVEQ.l #$00,D7
0005310E <PED.ab2@17827>   MOVEA.l #AL_0_BE24,A2
00053112 <PED.ab2@17828>   MOVEA.l $0(A2,D6.W),A1
00053114 <PED.ab2@17829>   MOVEA.l (A1),A1
0005311A <PED.ab2@17830>   LEA comStr_CurrentDir,A3
00053120 <PED.ab2@17831>   JSR compare_strings
00053124 <PED.ab2@17832>   BNE.w JL_0_BA3C
0005312A <PED.ab2@17833>   LEA comStr_SourceName,A3
0005312E <PED.ab2@17834>   BRA.b JL_0_B9B2
00053130 <PED.ab2@17837>   MOVEQ.l #$10,D6
00053136 <PED.ab2@17838>   MOVEA.l #AL_0_BE10,A0
0005313C <PED.ab2@17839>   MOVEA.l #AL_0_BE24,A2
00053142 <PED.ab2@17840>   MOVEA.l #str_unnamed,A3
00053146 <PED.ab2@17843>   MOVEA.l $0(A0,D6.W),A1
00053148 <PED.ab2@17844>   MOVEA.l (A1),A1
0005314E <PED.ab2@17845>   JSR compare_strings
00053152 <PED.ab2@17846>    BNE.w JL_0_BA0E
00053154 <PED.ab2@17847>   SUBQ.w #4,D6
00053158 <PED.ab2@17848>    BPL.b JL_0_B9F4
0005315A <PED.ab2@17849>   MOVEQ.l #$10,D6
0005315E <PED.ab2@17850>   BRA.w JL_0_BA1C
00053160 <PED.ab2@17853>   ADDQ.l #4,D6
00053166 <PED.ab2@17854>   CMP.l #$10,D6
0005316A <PED.ab2@17855>    BLE.w JL_0_BA1C
0005316C <PED.ab2@17856>   MOVEQ.l #$10,D6
00053170 <PED.ab2@17859>   MOVEA.l $0(A0,D6.W),A1
00053172 <PED.ab2@17860>   MOVEA.l (A1),A1
00053178 <PED.ab2@17861>   LEA comStr_SourceName,A0
0005317C <PED.ab2@17862>   MOVEA.l $0(A2,D6.W),A2
00053182 <PED.ab2@17863>   JSR AJL_0_4A8E
00053188 <PED.ab2@17864>   LEA comStr_CurrentDir,A0
0005318A <PED.ab2@17865>   MOVEA.l (A2),A1
00053190 <PED.ab2@17866>   JSR AJL_0_4A8E
00053196 <PED.ab2@17869>    JSR update_tedhistoryfiles
0005319C <PED.ab2@17870>    JSR write_tedhistoryfiles
0005319E <PED.ab2@17871> RTS
000531A4 <PED.ab2@17874>   TST.w remember_saved
000531A8 <PED.ab2@17875>    BEQ.w JL_0_BA58
000531AE <PED.ab2@17876>   JSR load_tedhistoryfile
000531B2 <PED.ab2@17877>   BRA.w JL_0_BA5C
000531B8 <PED.ab2@17880>   JSR update_historymenu
000531BA <PED.ab2@17883> RTS
000531C0 <PED.ab2@17886>   MOVE.l #str_tedhistory_env,D1
000531C6 <PED.ab2@17887>   JSR write_historyfile
000531C8 <PED.ab2@17888> RTS
000531CE <PED.ab2@17891>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
000531D4 <PED.ab2@17892>   MOVEA.l _dosbase,A6
000531D8 <PED.ab2@17893>    JSR _Open(A6)
000531DA <PED.ab2@17894>   MOVE.l D0,D7
000531DE <PED.ab2@17895>    BEQ.w JL_0_BAE0      ; if open not possible, exit
000531E0 <PED.ab2@17896>   MOVE.l D7,D1
000531E6 <PED.ab2@17897>   MOVE.l AL_0_BFE6,D2
000531EC <PED.ab2@17898>   MOVE.l #$100,D3
000531F0 <PED.ab2@17899>    JSR _Write(A6)
000531F2 <PED.ab2@17900>   MOVE.l D7,D1
000531F8 <PED.ab2@17901>   MOVE.l AL_0_BFFA,D2
000531FE <PED.ab2@17902>   MOVE.l #$100,D3
00053202 <PED.ab2@17903>    JSR _Write(A6)
00053204 <PED.ab2@17904>   MOVE.l D7,D1
0005320A <PED.ab2@17905>   MOVE.l AL_0_C00E,D2
00053210 <PED.ab2@17906>   MOVE.l #$100,D3
00053214 <PED.ab2@17907>    JSR _Write(A6)
00053216 <PED.ab2@17908>   MOVE.l D7,D1
0005321C <PED.ab2@17909>   MOVE.l AL_0_C022,D2
00053222 <PED.ab2@17910>   MOVE.l #$100,D3
00053226 <PED.ab2@17911>    JSR _Write(A6)
00053228 <PED.ab2@17912>   MOVE.l D7,D1
0005322E <PED.ab2@17913>   MOVE.l AL_0_C036,D2
00053234 <PED.ab2@17914>   MOVE.l #$100,D3
00053238 <PED.ab2@17915>    JSR _Write(A6)
0005323A <PED.ab2@17916>   MOVE.l D7,D1
0005323E <PED.ab2@17917>    JSR _Close(A6)
00053240 <PED.ab2@17919> RTS
00053246 <PED.ab2@17922>   MOVE.l ptr_historyfilelist,D0
0005324A <PED.ab2@17923>    BNE.w load_historyfile
00053250 <PED.ab2@17924>   MOVEA.l _execbase,A6
00053256 <PED.ab2@17925>   MOVE.l #$500,D0
0005325C <PED.ab2@17926>   MOVE.l #$10000,D1
0005327E <PED.ab2@17927>   !newalloc;JSR _AllocVec(A6)
00053284 <PED.ab2@17928>   MOVE.l D0,ptr_historyfilelist
00053286 <PED.ab2@17931>   MOVEA.l D0,A0
0005328C <PED.ab2@17932>   MOVE.l A0,AL_0_BFE6
00053290 <PED.ab2@17933>   LEA $40(A0),A0
00053296 <PED.ab2@17934>   MOVE.l A0,AL_0_BE38
0005329A <PED.ab2@17935>   LEA $C0(A0),A0
000532A0 <PED.ab2@17936>   MOVE.l A0,AL_0_BFFA
000532A4 <PED.ab2@17937>   LEA $40(A0),A0
000532AA <PED.ab2@17938>   MOVE.l A0,AL_0_BE3C
000532AE <PED.ab2@17939>   LEA $C0(A0),A0
000532B4 <PED.ab2@17940>   MOVE.l A0,AL_0_C00E
000532B8 <PED.ab2@17941>   LEA $40(A0),A0
000532BE <PED.ab2@17942>   MOVE.l A0,AL_0_BE40
000532C2 <PED.ab2@17943>   LEA $C0(A0),A0
000532C8 <PED.ab2@17944>   MOVE.l A0,AL_0_C022
000532CC <PED.ab2@17945>   LEA $40(A0),A0
000532D2 <PED.ab2@17946>   MOVE.l A0,AL_0_BE44
000532D6 <PED.ab2@17947>   LEA $C0(A0),A0
000532DC <PED.ab2@17948>   MOVE.l A0,AL_0_C036
000532E0 <PED.ab2@17949>   LEA $40(A0),A0
000532E6 <PED.ab2@17950>   MOVE.l A0,AL_0_BE48
000532EA <PED.ab2@17951>   LEA $C0(A0),A0
000532F0 <PED.ab2@17952>   JSR JL_0_BBCC
000532F6 <PED.ab2@17953>   MOVE.l #str_tedhistory_env,D1
000532FC <PED.ab2@17954>   MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
00053302 <PED.ab2@17955>   MOVEA.l _dosbase,A6
00053306 <PED.ab2@17956>   JSR _Open(A6)
00053308 <PED.ab2@17957>   MOVE.l D0,D7
0005330C <PED.ab2@17958>   BEQ.w JL_0_BBA6
0005330E <PED.ab2@17959>   MOVE.l D7,D1
00053314 <PED.ab2@17960>   MOVE.l AL_0_BFE6,D2
0005331A <PED.ab2@17961>   MOVE.l #$500,D3
0005331E <PED.ab2@17962>   JSR _Read(A6)
00053320 <PED.ab2@17963>   MOVE.l D7,D1
00053324 <PED.ab2@17964>   JSR _Close(A6)
0005332A <PED.ab2@17965>   JSR update_historymenu
0005332C <PED.ab2@17967> RTS
00053332 <PED.ab2@17972>   MOVEA.l #str_unnamed,A0
00053338 <PED.ab2@17973>   MOVEA.l AL_0_BFE6,A1
0005333E <PED.ab2@17974>   JSR AJL_0_4A8E
00053344 <PED.ab2@17975>   MOVEA.l AL_0_BFFA,A1
0005334A <PED.ab2@17976>   JSR AJL_0_4A8E
00053350 <PED.ab2@17977>   MOVEA.l AL_0_C00E,A1
00053356 <PED.ab2@17978>   JSR AJL_0_4A8E
0005335C <PED.ab2@17979>   MOVEA.l AL_0_C022,A1
00053362 <PED.ab2@17980>   JSR AJL_0_4A8E
00053368 <PED.ab2@17981>   MOVEA.l AL_0_C036,A1
0005336E <PED.ab2@17982>   JSR AJL_0_4A8E
00053370 <PED.ab2@17983> RTS
00053376 <PED.ab2@17986>   TST.l ptr_sourcewindow
0005337A <PED.ab2@17987>   BEQ.w exit_updatemenus
000533A4 <PED.ab2@17988>   !basic
000533AA <PED.ab2@17989>   Gosub init_menus
000533C8 <PED.ab2@17990>   !asm
000533CA <PED.ab2@17993> RTS
000533D0 <PED.ab2@17996>   TST.w remember_saved
000533D4 <PED.ab2@17997>    BNE.w JL_0_BCD6
000533D6 <PED.ab2@17998>   RTS
000533DA <PED.ab2@18001>    SUBI.w #$78,D6
000533E0 <PED.ab2@18002>    LEA AL_0_BE10,A0
000533E2 <PED.ab2@18003>    ASL.w #2,D6
000533E8 <PED.ab2@18004>    ANDI.l #MaxWord,D6
000533EC <PED.ab2@18005>    MOVEA.l $0(A0,D6.W),A1
000533EE <PED.ab2@18006>    MOVEA.l (A1),A1
000533F4 <PED.ab2@18009>    LEA str_unnamed,A3
000533FA <PED.ab2@18010>    JSR compare_strings
000533FE <PED.ab2@18011>    BNE.w no_source_loaded
00053404 <PED.ab2@18021>   MOVEA.l loadedfilesbase,A2
00053406 <PED.ab2@18023>     MOVEA.l A2,A3
0005340A <PED.ab2@18024>     LEA $DE(A3),A3
00053410 <PED.ab2@18025>     JSR compare_strings
00053414 <PED.ab2@18026>     BNE.w source_already_opened
00053416 <PED.ab2@18028>     MOVEA.l (A2),A2
0005341C <PED.ab2@18029>     CMPA.l #$0,A2
00053420 <PED.ab2@18030>   BNE.b JL_0_BCFC
0005344A <PED.ab2@18035>   !basic
0005345A <PED.ab2@18036>   af.l = Peek.l(?actualfile)
00053464 <PED.ab2@18037>   If af
0005349C <PED.ab2@18038>     If Peek$(af+$DE)<>""
000534BA <PED.ab2@18040>       !asm
000534C0 <PED.ab2@18041>       JSR menu_opennew
000534EA <PED.ab2@18042>       !basic
00053508 <PED.ab2@18045>   !asm
0005350C <PED.ab2@18046>   BRA.w load_sourcefile
00053512 <PED.ab2@18049>    LEA AL_0_BE24,A0
00053516 <PED.ab2@18050>    MOVEA.l $0(A0,D6.W),A1
00053518 <PED.ab2@18051>    MOVEA.l (A1),A1
0005351A <PED.ab2@18052>    MOVEA.l A2,A3
0005351E <PED.ab2@18053>    LEA $1E(A3),A3
00053524 <PED.ab2@18054>    JSR compare_strings
00053528 <PED.ab2@18055>    BEQ.b JL_0_BD0A
0005352A <PED.ab2@18056>    MOVEA.l A2,A0
00053530 <PED.ab2@18057>    JSR selectfile
00053532 <PED.ab2@18058>   RTS
00053534 <PED.ab2@18061>    MOVE.w D6,-(A7)
0005353A <PED.ab2@18062>    JSR menu_load
0005353C <PED.ab2@18063>    TST.l D0
00053540 <PED.ab2@18064>    BEQ.w JL_0_BD5A
00053546 <PED.ab2@18065>    JSR analyze_loadedsource
00053548 <PED.ab2@18066>    MOVE.w (A7)+,D6
0005354E <PED.ab2@18067>    JSR set_remembered_filename
00053554 <PED.ab2@18068>    JSR update_statusline
0005355A <PED.ab2@18069>    JSR write_tedhistoryfiles
0005355C <PED.ab2@18070>   RTS
0005355E <PED.ab2@18073>    MOVE.w (A7)+,D6
00053560 <PED.ab2@18074> RTS
00053566 <PED.ab2@18077>   LEA AL_0_BE10,A1
0005356A <PED.ab2@18078>   MOVEA.l $0(A1,D6.W),A1
0005356C <PED.ab2@18079>   MOVEA.l (A1),A1
00053572 <PED.ab2@18080>   LEA comStr_SourceName,A0
00053578 <PED.ab2@18081>   JSR AJL_0_4A8E
0005357E <PED.ab2@18082>   LEA AL_0_BE24,A1
00053582 <PED.ab2@18083>   MOVEA.l $0(A1,D6.W),A1
00053584 <PED.ab2@18084>   MOVEA.l (A1),A1
0005358A <PED.ab2@18085>   LEA comStr_CurrentDir,A0
00053590 <PED.ab2@18086>   JSR AJL_0_4A8E
00053592 <PED.ab2@18087> RTS
00053598 <PED.ab2@18090>   LEA AL_0_BE10,A0
0005359C <PED.ab2@18091>   MOVEA.l $0(A0,D6.W),A1
000535A2 <PED.ab2@18093>   LEA comStr_SourceName,A2
000535A4 <PED.ab2@18094>   MOVEA.l (A1),A1
000535A6 <PED.ab2@18096>     MOVE.b (A1)+,(A2)+
000535AA <PED.ab2@18097>   BNE.b JL_0_BD96
000535B0 <PED.ab2@18099>   LEA comStr_CurrentDir,A2
000535B6 <PED.ab2@18100>   LEA AL_0_BE24,A0
000535BA <PED.ab2@18101>   MOVEA.l $0(A0,D6.W),A1
000535BC <PED.ab2@18102>   MOVEA.l (A1),A1
000535BE <PED.ab2@18104>     MOVE.b (A1)+,(A2)+
000535C2 <PED.ab2@18105>   BNE.b JL_0_BDA8
000535C4 <PED.ab2@18106> RTS
000535CA <PED.ab2@18110>   JSR show_newfilerequest
000535CC <PED.ab2@18111>   TST.l D0
000535D0 <PED.ab2@18112>   BNE.w JL_0_BDBA
000535D2 <PED.ab2@18113>   RTS
000535D8 <PED.ab2@18116>   LEA AL_0_BE24,A0
000535DC <PED.ab2@18117>   MOVEA.l $0(A0,D6.W),A1
000535DE <PED.ab2@18118>   MOVEA.l (A1),A1
000535E4 <PED.ab2@18119>   LEA AL_0_BE10,A2
000535E8 <PED.ab2@18120>   MOVEA.l $0(A2,D6.W),A2
000535EA <PED.ab2@18121>   MOVEA.l (A2),A2
000535F0 <PED.ab2@18122>   MOVEA.l #comStr_SourceFileComplete,A0
000535F2 <PED.ab2@18123>   TST.b (A1)
000535F6 <PED.ab2@18124>   BEQ.w JL_0_BDEE
000535F8 <PED.ab2@18127>     MOVE.b (A1)+,(A0)+
000535FC <PED.ab2@18128>   BNE.b JL_0_BDDA
000535FE <PED.ab2@18130>   SUBQ.w #1,A0
00053604 <PED.ab2@18131>   CMPI.b #":",-$1(A0)
00053608 <PED.ab2@18132>   BEQ.w JL_0_BDEE
0005360C <PED.ab2@18133>   MOVE.b #$2F,(A0)+    ; add a "/" if no ":" found
0005360E <PED.ab2@18136>     MOVE.b (A2)+,(A0)+
00053612 <PED.ab2@18137>   BNE.b JL_0_BDEE
00053618 <PED.ab2@18139>   MOVE.l #comStr_SourceFileComplete,D7
0005361A <PED.ab2@18140>   MOVE.l D6,-(A7)
00053620 <PED.ab2@18141>   JSR load_source
00053622 <PED.ab2@18142>   MOVE.l (A7)+,D6
00053628 <PED.ab2@18143>   JSR get_remembered_filename
0005362E <PED.ab2@18144>   JSR analyze_loadedsource
00053634 <PED.ab2@18145>   JSR update_statusline
00053636 <PED.ab2@18146> RTS
0005363A <PED.ab2@18149> ptr_historyfilelist:  Ds.l 1
0005363E <PED.ab2@18150> AL_0_BE10:            Dc.l AL_0_BFE6
00053642 <PED.ab2@18151> AL_0_BE14:            Dc.l AL_0_BFFA
00053646 <PED.ab2@18152> AL_0_BE18:            Dc.l AL_0_C00E
0005364A <PED.ab2@18153> AL_0_BE1C:            Dc.l AL_0_C022
0005364E <PED.ab2@18154> AL_0_BE20:            Dc.l AL_0_C036
00053652 <PED.ab2@18155> AL_0_BE24:            Dc.l AL_0_BE38
00053656 <PED.ab2@18156> AL_0_BE28:            Dc.l AL_0_BE3C
0005365A <PED.ab2@18157> AL_0_BE2C:            Dc.l AL_0_BE40
0005365E <PED.ab2@18158> AL_0_BE30:            Dc.l AL_0_BE44
00053662 <PED.ab2@18159> AL_0_BE34:            Dc.l AL_0_BE48
00053666 <PED.ab2@18160> AL_0_BE38:            Ds.l 1
0005366A <PED.ab2@18161> AL_0_BE3C:            Ds.l 1
0005366E <PED.ab2@18162> AL_0_BE40:            Ds.l 1
00053672 <PED.ab2@18163> AL_0_BE44:            Ds.l 1
00053676 <PED.ab2@18164> AL_0_BE48:            Ds.l 1
0005367E <PED.ab2@18165>                       Dc.b "tEdMeNuS"
00053682 <PED.ab2@18171> AL_0_BFE6:            Ds.l 1
00053686 <PED.ab2@18172> AL_0_BFFA:            Ds.l 1
0005368A <PED.ab2@18173> AL_0_C00E:            Ds.l 1
0005368E <PED.ab2@18174> AL_0_C022:            Ds.l 1
00053692 <PED.ab2@18175> AL_0_C036:            Ds.l 1
00053696 <PED.ab2@18176> addr_menustrip:       Ds.l 1
000536A2 <PED.ab2@18177>                       Dc.b "tEdMeNuS oK!"
000536CA <PED.ab2@18181>   If Peek.l(Addr GTMenuList(0))<>0
000536EC <PED.ab2@18182>     If *sourcewin<>0 Then ClearMenuStrip_ *sourcewin
00053768 <PED.ab2@18183>     If WZ_CheckOpen{"WIN_NEWTYPE"} Then Use Window WZID("WIN_NEWTYPE") : ClearMenuStrip_ WZWindowAddr
000537E4 <PED.ab2@18184>     If WZ_CheckOpen{"WIN_LABELS"} Then Use Window WZID("WIN_INSTRUCTIONWINDOW"): ClearMenuStrip_ WZWindowAddr
000537F6 <PED.ab2@18185>     Free GTMenuList 0
000537F8 <PED.ab2@18187> Return
000537FE <PED.ab2@18191>   Gosub kill_menus
00053866 <PED.ab2@18192>   GTMenuTitle    0,0,   !TRANS{"Project"                     }
00053900 <PED.ab2@18193>    GTMenuItem  0,0,0, 0,!TRANS{"Project Settings"            },"M"         ,0,#MENU_PROJECTSETTINGS
0005399A <PED.ab2@18194>    GTMenuItem  0,0,0, 1,!TRANS{"IDE Preferences"             },""          ,0,#MENU_IDEPREFERENCES
000539BA <PED.ab2@18195>    GTMenuItem  0,0,0, 2
00053A54 <PED.ab2@18196>    GTMenuItem  0,0,0, 3,!TRANS{"Open WB"                     },""          ,0,#MENU_OPENWORKBENCH
00053AEE <PED.ab2@18197>    GTMenuItem  0,0,0, 4,!TRANS{"Close WB"                    },""          ,0,#MENU_CLOSEWORKBENCH
00053B88 <PED.ab2@18198>    GTMenuItem  0,0,0, 5,!TRANS{"Open Shell"                  },""          ,0,#MENU_OPENSHELL
00053C22 <PED.ab2@18199>    GTMenuItem  0,0,0, 6,!TRANS{"Calculator"                  },""          ,0,#MENU_CALCULATOR
00053C42 <PED.ab2@18200>    GTMenuItem  0,0,0, 7
00053CDC <PED.ab2@18201>    GTMenuItem  0,0,0, 8,!TRANS{"About AmiBlitz3"             },""          ,0,#MENU_ABOUT
00053CFC <PED.ab2@18202>    GTMenuItem  0,0,0, 9
00053D96 <PED.ab2@18203>    GTMenuItem  0,0,0,10,!TRANS{"Iconify"                     },""          ,0,#MENU_ICONIFY
00053E30 <PED.ab2@18204>    GTMenuItem  0,0,0,11,!TRANS{"Quit"                        },"Q"         ,0,#MENU_QUIT
00053E98 <PED.ab2@18206>   GTMenuTitle    0,1,   !TRANS{"Source File"                 }
00053F32 <PED.ab2@18207>    GTMenuItem  0,0,1, 0,!TRANS{"New..."                      },""          ,0,#MENU_NEW
00053F3C <PED.ab2@18209>    ClearList templates()
00053FB0 <PED.ab2@18210>    templatepath.s = dos_AddPart{sourcedir$ , "Templates"}
0005400A <PED.ab2@18211>    *root.ml_node  = ml_AddPathNode{0,templatepath.s,"#?.(bb2|ab2|ab3|asc)"}
00054010 <PED.ab2@18212>    *node.ml_node  = *root
00054016 <PED.ab2@18213>    templates.w    = 0
0005403C <PED.ab2@18214>    While *node><0 AND templates < #MAX_TEMPLATES
00054070 <PED.ab2@18215>      fil.s = ml_GetUserString{*node}
000540AE <PED.ab2@18216>      If dos_IsDir{fil} = False
00054174 <PED.ab2@18217>         mtitle.s = Replace$(dos_RemExt{dos_FilePart{fil}},"_"," ")
00054186 <PED.ab2@18218>         shortc.l = #MENU_TEMPLATE + templates
000541FE <PED.ab2@18219>         GTSubItem  0,0,1, 0,templates,mtitle.s                    ,""          ,0,shortc
0005424A <PED.ab2@18220>         If AddLast(templates()) Then templates()\filename = fil
00054258 <PED.ab2@18221>         templates + 1
00054266 <PED.ab2@18223>      *node = ml_GetNextNode{*node}
0005426C <PED.ab2@18224>    Wend
00054276 <PED.ab2@18225>    ml_RemoveAllNodes{*root}
00054310 <PED.ab2@18226>    GTMenuItem  0,0,1, 1,!TRANS{"Open"                        },"O"         ,0,#MENU_OPEN
000543AA <PED.ab2@18227>    GTMenuItem  0,0,1, 2,!TRANS{"Open New"                    },""          ,0,#MENU_OPENNEW
00054444 <PED.ab2@18228>    GTMenuItem  0,0,1, 3,!TRANS{"Include File"                },"I"         ,0,#MENU_INCLUDEFILE
00054464 <PED.ab2@18229>    GTMenuItem  0,0,1, 4
000544FE <PED.ab2@18230>    GTMenuItem  0,0,1, 5,!TRANS{"Save"                        },"S"         ,0,#MENU_SAVE
00054598 <PED.ab2@18231>    GTMenuItem  0,0,1, 6,!TRANS{"Save As..."                  },"A"         ,0,#MENU_SAVEAS
000545B8 <PED.ab2@18233>    GTMenuItem  0,0,1, 7
00054652 <PED.ab2@18234>    GTMenuItem  0,0,1, 8,!TRANS{"Print..."                    },""          ,0,#MENU_PRINT
00054672 <PED.ab2@18235>    GTMenuItem  0,0,1, 9
0005470C <PED.ab2@18236>    GTMenuItem  0,0,1,10,!TRANS{"Close"                       },""          ,0,#MENU_CLOSE
00054720 <PED.ab2@18237>    If Peek.w(?remember_saved)
00054740 <PED.ab2@18238>      GTMenuItem  0,0,1,11
000547C4 <PED.ab2@18246>      GTMenuItem  0,0,1,12,Peek$(Peek.l(?AL_0_BFE6))             ,"1"         ,0,#MENU_LASTSOURCE1
00054848 <PED.ab2@18247>      GTMenuItem  0,0,1,13,Peek$(Peek.l(?AL_0_BFFA))             ,"2"         ,0,#MENU_LASTSOURCE2
000548CC <PED.ab2@18248>      GTMenuItem  0,0,1,14,Peek$(Peek.l(?AL_0_C00E))             ,"3"         ,0,#MENU_LASTSOURCE3
00054950 <PED.ab2@18249>      GTMenuItem  0,0,1,15,Peek$(Peek.l(?AL_0_C022))             ,"4"         ,0,#MENU_LASTSOURCE4
000549D4 <PED.ab2@18250>      GTMenuItem  0,0,1,16,Peek$(Peek.l(?AL_0_C036))             ,"5"         ,0,#MENU_LASTSOURCE5
00054A3C <PED.ab2@18254>   GTMenuTitle    0,2,   !TRANS{"Edit"                        }
00054AD6 <PED.ab2@18255>    GTMenuItem  0,0,2, 0,!TRANS{"Cut"                         },"X"         ,0,#MENU_CUT
00054B70 <PED.ab2@18256>    GTMenuItem  0,0,2, 1,!TRANS{"Copy"                        },"C"         ,0,#MENU_COPY
00054C0A <PED.ab2@18257>    GTMenuItem  0,0,2, 2,!TRANS{"Paste"                       },"V"         ,0,#MENU_PASTE
00054CA4 <PED.ab2@18258>    GTMenuItem  0,0,2, 3,!TRANS{"Duplicate"                   },"Z"         ,0,#MENU_DUPLICATE
00054D3E <PED.ab2@18259>    GTMenuItem  0,0,2, 4,!TRANS{"Forget"                      },"W"         ,0,#MENU_FORGET
00054DD8 <PED.ab2@18260>    GTMenuItem  0,0,2, 5,!TRANS{"Kill"                        },"K"         ,0,#MENU_KILL
00054E72 <PED.ab2@18261>    GTMenuItem  0,0,2, 6,!TRANS{"Save Block As..."            },""          ,0,#MENU_SAVEBLOCKAS
00054E92 <PED.ab2@18262>    GTMenuItem  0,0,2, 7
00054F2C <PED.ab2@18263>    GTMenuItem  0,0,2, 8,!TRANS{"Insert Line"                 },""          ,0,#MENU_INSERTLINE
00054FC6 <PED.ab2@18264>    GTMenuItem  0,0,2,09,!TRANS{"Delete Line"                 },"D"         ,0,#MENU_DELETELINE
00055060 <PED.ab2@18265>    GTMenuItem  0,0,2,10,!TRANS{"Undelete Line"               },"U"         ,0,#MENU_UNDELETELINE
000550FA <PED.ab2@18266>    GTMenuItem  0,0,2,11,!TRANS{"Join Lines"                  },"J"         ,0,#MENU_JOINLINES
00055194 <PED.ab2@18267>    GTMenuItem  0,0,2,12,!TRANS{"Delete to EOL"               },"Y"         ,0,#MENU_DELETETOEOL
000551B4 <PED.ab2@18268>    GTMenuItem  0,0,2,13
0005524E <PED.ab2@18269>    GTMenuItem  0,4,2,14,!TRANS{"Block Tab"                   },"CTRL+Right",0,#MENU_BLOCKTAB
000552E8 <PED.ab2@18270>    GTMenuItem  0,4,2,15,!TRANS{"Block Untab"                 },"CTRL+Left" ,0,#MENU_BLOCKUNTAB
00055382 <PED.ab2@18271>    GTMenuItem  0,0,2,16,!TRANS{"Block Comment"               },"{"         ,0,#MENU_BLOCKCOMMENT
0005541C <PED.ab2@18272>    GTMenuItem  0,0,2,17,!TRANS{"Block Uncomment"             },"}"         ,0,#MENU_BLOCKUNCOMMENT
000554B6 <PED.ab2@18273>    GTMenuItem  0,0,2,18,!TRANS{"Mark Indent"                 },""          ,0,#MENU_MARKINDENT
00055550 <PED.ab2@18274>    GTMenuItem  0,0,2,19,!TRANS{"Insert Filename"             },""          ,0,#MENU_INSERTFILENAME
000555EA <PED.ab2@18275>    GTMenuItem  0,0,2,20,!TRANS{"Open Filename Under Cursor"  },""          ,0,#MENU_OPENFILEUNDERCURSOR
00055652 <PED.ab2@18279>   GTMenuTitle    0,3,   !TRANS{"Navigation"                  }
000556EC <PED.ab2@18280>    GTMenuItem  0,0,3, 0,!TRANS{"Find..."                     },"F"         ,0,#MENU_OPENFIND
00055786 <PED.ab2@18281>    GTMenuItem  0,0,3, 1,!TRANS{"Find Next"                   },"N"         ,0,#MENU_FIND
00055820 <PED.ab2@18282>    GTMenuItem  0,0,3, 2,!TRANS{"Find Previous"               },"P"         ,0,#MENU_PREVIOUS
000558BA <PED.ab2@18283>    GTMenuItem  0,0,3, 3,!TRANS{"Replace & Find"              },"R"         ,0,#MENU_REPLACE
000558DA <PED.ab2@18284>    GTMenuItem  0,0,3, 4
00055974 <PED.ab2@18285>    GTMenuItem  0,4,3, 5,!TRANS{"Top"                         },"CTRL+Up"   ,0,#MENU_TOP
00055A0E <PED.ab2@18286>    GTMenuItem  0,4,3, 6,!TRANS{"Bottom"                      },"CTRL+Down" ,0,#MENU_BOTTOM
00055AA8 <PED.ab2@18287>    GTMenuItem  0,0,3, 7,!TRANS{"Goto Line..."                },"G"         ,0,#MENU_GOTOLINE
00055AC8 <PED.ab2@18288>    GTMenuItem  0,0,3, 8
00055B62 <PED.ab2@18289>    GTMenuItem  0,4,3,09,!TRANS{"Previous Page"               },"F9"        ,0,#MENU_PREVPAGE
00055BFC <PED.ab2@18290>    GTMenuItem  0,4,3,10,!TRANS{"Next Page"                   },"F10"       ,0,#MENU_NEXTPAGE
00055C64 <PED.ab2@18293>   GTMenuTitle    0,4,   !TRANS{"Compiler"                    }
00055CFE <PED.ab2@18294>    GTMenuItem  0,0,4, 0,!TRANS{"Compile & Run"               },"#"         ,0,#MENU_COMPILERUN
00055D98 <PED.ab2@18295>    GTMenuItem  0,0,4, 1,!TRANS{"Save & Compile & Run"        },"B"         ,0,#MENU_SAVECOMPILERUN
00055E32 <PED.ab2@18296>    GTMenuItem  0,0,4, 2,!TRANS{"Run"                         },""          ,0,#MENU_RUN
00055ECC <PED.ab2@18297>    GTMenuItem  0,0,4, 3,!TRANS{"Create Executable..."        },"E"         ,0,#MENU_CREATEEXE
00055F66 <PED.ab2@18298>    GTMenuItem  0,0,4, 4,!TRANS{"Save & Create Executable"    },"T"         ,0,#MENU_SAVECREATEEXE
00056000 <PED.ab2@18299>    GTMenuItem  0,0,4, 5,!TRANS{"Create minimized Executable" },""          ,0,#MENU_CREATERELEASEEXE
0005609A <PED.ab2@18300>    GTMenuItem  0,0,4, 6,!TRANS{"Create Resident..."          },""          ,0,#MENU_CREATERESIDENT
000560BA <PED.ab2@18301>    GTMenuItem  0,0,4, 7
00056154 <PED.ab2@18302>    GTMenuItem  0,0,4, 8,!TRANS{"Set CLI Arguments"           },""          ,0,#MENU_SETCLIARGS
000561EE <PED.ab2@18303>    GTMenuItem  0,0,4, 9,!TRANS{"Reload Blitzlibs"            },"\"         ,0,#MENU_RELOADBLITZLIBS
0005620E <PED.ab2@18304>    GTMenuItem  0,0,4,10
000562A8 <PED.ab2@18305>    GTMenuItem  0,0,4,11,!TRANS{"Compiler Settings"           },""          ,0,#MENU_COMPILERSETTINGS
00056342 <PED.ab2@18306>    GTMenuItem  0,1,4,12,!TRANS{"Create Debug Code"           },""          ,0,#MENU_CREATEDEBUGCODE
000563AA <PED.ab2@18309>   GTMenuTitle    0,5,   !TRANS{"Help"                        }
00056444 <PED.ab2@18310>    GTMenuItem  0,0,5, 0,!TRANS{"What's New?"                 },""          ,0,#MENU_WHATSNEW
00056464 <PED.ab2@18311>    GTMenuItem  0,0,5, 1
000564FE <PED.ab2@18312>    GTMenuItem  0,0,5, 2,!TRANS{"General AB3 Guide"           },""          ,0,#MENU_GENERALGUIDE
00056598 <PED.ab2@18313>    GTMenuItem  0,0,5, 3,!TRANS{"Programming in Blitz"        },""          ,0,#MENU_PROGRAMGUIDE
00056632 <PED.ab2@18314>    GTMenuItem  0,0,5, 4,!TRANS{"Includes Guide"              },""          ,0,#MENU_INCLUDEGUIDE
000566CC <PED.ab2@18315>    GTMenuItem  0,0,5, 5,!TRANS{"Blitzlibs Guide"             },""          ,0,#MENU_BLITZLIBSGUIDE
00056766 <PED.ab2@18316>    GTMenuItem  0,0,5, 6,!TRANS{"Shortcuts Reference"         },""          ,0,#MENU_SHORTCUTREFERENCE
00056786 <PED.ab2@18317>    GTMenuItem  0,0,5, 7
00056820 <PED.ab2@18318>    GTMenuItem  0,0,5, 8,!TRANS{"Instruction Browser"         },""          ,0,#MENU_INSTRUCTIONBROWSER
000568BA <PED.ab2@18319>    GTMenuItem  0,0,5, 9,!TRANS{"Source Browser"              },""          ,0,#MENU_SOURCEBROWSER
00056954 <PED.ab2@18320>    GTMenuItem  0,0,5,10,!TRANS{"Definition Browser"          },""          ,0,#MENU_DEFINITIONBROWSER
000569EE <PED.ab2@18321>    GTMenuItem  0,0,5,11,!TRANS{"Library Browser"             },""          ,0,#MENU_LIBRARYBROWSER
00056A0E <PED.ab2@18322>    GTMenuItem  0,0,5,12
00056AA8 <PED.ab2@18323>    GTMenuItem  0,0,5,13,!TRANS{"Update Instruction Index"    },""          ,0,#MENU_UPDATEHELPINDEX
00056AAE <PED.ab2@18325>   Gosub load_custommenus
00056AC0 <PED.ab2@18326>   If LastItem(custommenu())
00056AF6 <PED.ab2@18327>     GTMenuTitle 0,6,"Custom"
00056B08 <PED.ab2@18328>     If FirstItem(custommenu())
00056B10 <PED.ab2@18329>       menuentry = 0
00056B4E <PED.ab2@18331>         If custommenu()\itemname = "~"
00056B6E <PED.ab2@18332>           GTMenuItem 0,0,6,menuentry
00056B74 <PED.ab2@18333>         Else
00056B84 <PED.ab2@18334>           shortc = #MENU_CUSTOM+menuentry
00056BFC <PED.ab2@18335>           GTMenuItem 0,0,6,menuentry,custommenu()\itemname,"",0,shortc
00056C0A <PED.ab2@18337>         menuentry + 1
00056C1E <PED.ab2@18338>       Until NOT NextItem(custommenu())
00056C36 <PED.ab2@18342>   CreateMenuStrip 0
00056C5E <PED.ab2@18344>   If Peek.l(Addr GTMenuList(0))<>0
00056C88 <PED.ab2@18345>     Poke.l ?addr_menustrip,Peek.l(Addr GTMenuList(0))
00056CBA <PED.ab2@18347>     If *sourcewin<>0               Then SetMenuStrip_ *sourcewin,Peek.l(?addr_menustrip)
00056D46 <PED.ab2@18348>     If WZ_CheckOpen{"WIN_NEWTYPE"} Then Use Window WZID("WIN_NEWTYPE") : SetMenuStrip_ WZWindowAddr,Peek.l(?addr_menustrip)
00056DD2 <PED.ab2@18349>     If WZ_CheckOpen{"WIN_LABELS"}  Then Use Window WZID("WIN_INSTRUCTIONWINDOW"): SetMenuStrip_ WZWindowAddr,Peek.l(?addr_menustrip)
00056DD4 <PED.ab2@18351> Return
00056E0A <PED.ab2@18354>   If dos_Exist{tedmenufile$}
00056E4E <PED.ab2@18355>     fid.l = file_Open{tedmenufile$,#file_read}
00056E60 <PED.ab2@18356>     If fid>=0
00056E6A <PED.ab2@18357>       ClearList custommenu()
00056E86 <PED.ab2@18358>       While file_EOF{fid} = False
00056EBA <PED.ab2@18359>         textline.s = file_ReadLine{fid}
00056F10 <PED.ab2@18360>         If textline<>"" AND AddLast(custommenu())
00056F3C <PED.ab2@18361>           InitArgParse textline
00056F6A <PED.ab2@18362>           custommenu()\itemname = NextArgChar$(@",")
00056F9C <PED.ab2@18363>           custommenu()\shortcut = NextArgChar$(@",")
00056FD0 <PED.ab2@18364>           custommenu()\id = Vallong(NextArgChar$(@","))
00057002 <PED.ab2@18365>           custommenu()\command = NextArgChar$(@",")
00057008 <PED.ab2@18367>       Wend
00057012 <PED.ab2@18368>       file_Close{fid}
00057014 <PED.ab2@18371> Return
00057016 <PED.ab2@18388>   Ds.w 1
0005701A <PED.ab2@18389>   Dc.b $00,$65,$00,$00
0005701C <PED.ab2@18390>   Ds.w 1
00057020 <PED.ab2@18391>   Dc.l menu_opennew                   ;new
00057022 <PED.ab2@18393>   Ds.w 1
00057026 <PED.ab2@18394>   Dc.b $00,$66,$00,$00
00057028 <PED.ab2@18395>   Ds.w 1
0005702C <PED.ab2@18396>   Dc.l menu_openload                  ;open new and load
0005702E <PED.ab2@18398>   Ds.w 1
00057032 <PED.ab2@18399>   Dc.b $00,$67,$00,$00
00057034 <PED.ab2@18400>   Dc.b $00,$01
00057038 <PED.ab2@18401>   Dc.l menu_load                      ;load
0005703A <PED.ab2@18403>   Ds.w 1
0005703E <PED.ab2@18404>   Dc.b $00,$68,$00,$00
00057040 <PED.ab2@18405>   Dc.b $00,$01
00057044 <PED.ab2@18406>   Dc.l menu_includeblock              ;include block
00057046 <PED.ab2@18408>   Ds.w 1
0005704A <PED.ab2@18409>   Dc.b $00,$69,$00,$00
0005704C <PED.ab2@18410>   Ds.w 1
00057050 <PED.ab2@18411>   Dc.l menu_save                      ;save
00057052 <PED.ab2@18413>   Ds.w 1
00057056 <PED.ab2@18414>   Dc.b $00,$6A,$00,$00
00057058 <PED.ab2@18415>   Ds.w 1
0005705C <PED.ab2@18416>   Dc.l menu_saveas                    ;save as
0005705E <PED.ab2@18418>   Ds.w 1
00057062 <PED.ab2@18419>   Dc.b $00,$6B,$00,$00
00057064 <PED.ab2@18420>   Ds.w 1
00057068 <PED.ab2@18421>   Dc.l menu_saveascii                 ;save ascii
0005706A <PED.ab2@18423>   Ds.w 1
0005706E <PED.ab2@18424>   Dc.b $00,$6C,$00,$00
00057070 <PED.ab2@18425>   Ds.w 1
00057074 <PED.ab2@18426>   Dc.l menu_quit                      ;quit
00057076 <PED.ab2@18428>   Ds.w 1
0005707A <PED.ab2@18429>   Dc.b $00,$6D,$00,$00
0005707C <PED.ab2@18430>   Ds.w 1
00057080 <PED.ab2@18431>   Dc.l menu_quitall                   ;quitall
00057082 <PED.ab2@18433>   Ds.w 1
00057086 <PED.ab2@18434>   Dc.b $00,$6E,$00,$00
00057088 <PED.ab2@18435>   Ds.w 1
0005708C <PED.ab2@18436>   Dc.l menu_print                     ;print
0005708E <PED.ab2@18438>   Ds.w 1
00057092 <PED.ab2@18439>   Dc.b $00,$6F,$00,$00
00057094 <PED.ab2@18440>   Ds.w 1
00057098 <PED.ab2@18441>   Dc.l menu_openwb                    ;openwb
0005709A <PED.ab2@18443>   Ds.w 1
0005709E <PED.ab2@18444>   Dc.b $00,$70,$00,$00
000570A0 <PED.ab2@18445>   Ds.w 1
000570A4 <PED.ab2@18446>   Dc.l menu_closewb                   ;closewb
000570A6 <PED.ab2@18448>   Ds.w 1
000570AA <PED.ab2@18449>   Dc.b $00,$71,$00,$00
000570AC <PED.ab2@18450>   Ds.w 1
000570B0 <PED.ab2@18451>   Dc.l menu_iconify                   ;iconify
000570B2 <PED.ab2@18453>   Ds.w 1
000570B6 <PED.ab2@18454>   Dc.b $00,$72,$00,$00
000570B8 <PED.ab2@18455>   Ds.w 1
000570BC <PED.ab2@18456>   Dc.l menu_newshell                  ;newcli
000570BE <PED.ab2@18458>   Ds.w 1
000570C2 <PED.ab2@18459>   Dc.b $00,$73,$00,$00
000570C4 <PED.ab2@18460>   Ds.w 1
000570C8 <PED.ab2@18461>   Dc.l menu_prefs                     ;prefs
000570CA <PED.ab2@18463>   Ds.w 1
000570CE <PED.ab2@18464>   Dc.b $00,$74,$00,$00
000570D0 <PED.ab2@18465>   Ds.w 1
000570D4 <PED.ab2@18466>   Dc.l menu_about                     ; about
000570D6 <PED.ab2@18468>   Ds.w 1
000570DA <PED.ab2@18470>   Dc.b $00,$78,$00,$00                ; remembered sources
000570DC <PED.ab2@18471>   Dc.b $00,$01
000570E0 <PED.ab2@18472>   Dc.l load_remembered
000570E2 <PED.ab2@18474>   Ds.w 1
000570E6 <PED.ab2@18475>   Dc.b $00,$79,$00,$00
000570E8 <PED.ab2@18476>   Dc.b $00,$01
000570EC <PED.ab2@18477>   Dc.l load_remembered
000570EE <PED.ab2@18479>   Ds.w 1
000570F2 <PED.ab2@18480>   Dc.b $00,$7A,$00,$00
000570F4 <PED.ab2@18481>   Dc.b $00,$01
000570F8 <PED.ab2@18482>   Dc.l load_remembered
000570FA <PED.ab2@18484>   Ds.w 1
000570FE <PED.ab2@18485>   Dc.b $00,$7B,$00,$00
00057100 <PED.ab2@18486>   Dc.b $00,$01
00057104 <PED.ab2@18487>   Dc.l load_remembered
00057106 <PED.ab2@18489>   Ds.w 1
0005710A <PED.ab2@18490>   Dc.b $00,$7C,$00,$00
0005710C <PED.ab2@18491>   Dc.b $00,$01
00057110 <PED.ab2@18492>   Dc.l load_remembered
00057112 <PED.ab2@18494>   Ds.w 1
00057116 <PED.ab2@18496>   Dc.b $00,$C9,$00,$00
00057118 <PED.ab2@18497>   Dc.b $00,$01
0005711C <PED.ab2@18498>   Dc.l menu_cut
0005711E <PED.ab2@18500>   Ds.w 1
00057122 <PED.ab2@18501>   Dc.b $00,$CA,$00,$00
00057124 <PED.ab2@18502>   Dc.b $00,$01
00057128 <PED.ab2@18503>   Dc.l menu_copy
0005712A <PED.ab2@18505>   Ds.w 1
0005712E <PED.ab2@18506>   Dc.b $00,$CB,$00,$00
00057130 <PED.ab2@18507>   Dc.b $00,$01
00057134 <PED.ab2@18508>   Dc.l menu_paste
00057136 <PED.ab2@18510>   Ds.w 1
0005713A <PED.ab2@18511>   Dc.b $00,$D8,$00,$00
0005713C <PED.ab2@18512>   Dc.b $00,$01
00057140 <PED.ab2@18513>   Dc.l menu_dublicate
00057142 <PED.ab2@18515>   Ds.w 1
00057146 <PED.ab2@18516>   Dc.b $00,$CC,$00,$00
00057148 <PED.ab2@18517>   Dc.b $00,$01
0005714C <PED.ab2@18518>   Dc.l menu_forget
0005714E <PED.ab2@18520>   Ds.w 1
00057152 <PED.ab2@18521>   Dc.b $00,$D7,$00,$00
00057154 <PED.ab2@18522>   Dc.b $00,$01
00057158 <PED.ab2@18523>   Dc.l menu_kill
0005715A <PED.ab2@18525>   Ds.w 1
0005715E <PED.ab2@18526>   Dc.b $00,$CD,$00,$00
00057160 <PED.ab2@18527>   Dc.b $00,$01
00057164 <PED.ab2@18528>   Dc.l menu_saveblockas
00057166 <PED.ab2@18530>   Ds.w 1
0005716A <PED.ab2@18531>   Dc.b $00,$CE,$00,$00
0005716C <PED.ab2@18532>   Ds.w 1
00057170 <PED.ab2@18533>   Dc.l menu_insertline
00057172 <PED.ab2@18535>   Ds.w 1
00057176 <PED.ab2@18536>   Dc.b $00,$CF,$00,$00
00057178 <PED.ab2@18537>   Ds.w 1
0005717C <PED.ab2@18538>   Dc.l menu_deleteline
0005717E <PED.ab2@18540>   Ds.w 1
00057182 <PED.ab2@18541>   Dc.b $00,$D0,$00,$00
00057184 <PED.ab2@18542>   Ds.w 1
00057188 <PED.ab2@18543>   Dc.l menu_undeleteline            ; undelete
0005718A <PED.ab2@18545>   Ds.w 1
0005718E <PED.ab2@18546>   Dc.b $00,$D1,$00,$00
00057190 <PED.ab2@18547>   Ds.w 1
00057194 <PED.ab2@18548>   Dc.l menu_joinline                ; join
00057196 <PED.ab2@18550>   Ds.w 1
0005719A <PED.ab2@18551>   Dc.b $00,$D2,$00,$00
0005719C <PED.ab2@18552>   Dc.b $00,$01
000571A0 <PED.ab2@18553>   Dc.l menu_blocktab                ; block Tab
000571A2 <PED.ab2@18555>   Ds.w 1
000571A6 <PED.ab2@18556>   Dc.b $00,$D3,$00,$00
000571A8 <PED.ab2@18557>   Dc.b $00,$01
000571AC <PED.ab2@18558>   Dc.l menu_blockuntab              ; block untab
000571AE <PED.ab2@18560>   Ds.w 1
000571B2 <PED.ab2@18561>   Dc.b $00,$D4,$00,$00
000571B4 <PED.ab2@18562>   Dc.b $00,$01
000571B8 <PED.ab2@18563>   Dc.l menu_blockcomment            ; block comment
000571BA <PED.ab2@18565>   Ds.w 1
000571BE <PED.ab2@18566>   Dc.b $00,$D5,$00,$00
000571C0 <PED.ab2@18567>   Dc.b $00,$01
000571C4 <PED.ab2@18568>   Dc.l menu_blockuncomment
000571C6 <PED.ab2@18570>   Ds.w 1
000571CA <PED.ab2@18571>   Dc.b $00,$D6,$00,$00
000571CC <PED.ab2@18572>   Dc.b $00,$01
000571D0 <PED.ab2@18573>   Dc.l menu_markindent
000571D2 <PED.ab2@18575>   Ds.w 1
000571D6 <PED.ab2@18576>   Dc.b $01,$32,$00,$00
000571D8 <PED.ab2@18577>   Ds.w 1
000571DC <PED.ab2@18578>   Dc.l menu_project
000571DE <PED.ab2@18580>   Ds.w 1
000571E2 <PED.ab2@18581>   Dc.b $01,$2D,$00,$00
000571E4 <PED.ab2@18582>   Dc.b $00,$01
000571E8 <PED.ab2@18583>   Dc.l menu_top
000571EA <PED.ab2@18585>   Ds.w 1
000571EE <PED.ab2@18586>   Dc.b $01,$2E,$00,$00
000571F0 <PED.ab2@18587>   Dc.b $00,$01
000571F4 <PED.ab2@18588>   Dc.l menu_bottom
000571F6 <PED.ab2@18590>   Ds.w 1
000571FA <PED.ab2@18591>   Dc.b $01,$2F,$00,$00
000571FC <PED.ab2@18592>   Dc.b $00,$01
00057200 <PED.ab2@18593>   Dc.l menu_gotoline
00057202 <PED.ab2@18595>   Ds.w 1
00057206 <PED.ab2@18596>   Dc.b $01,$30,$00,$00
00057208 <PED.ab2@18597>   Ds.w 1
0005720C <PED.ab2@18598>   Dc.l menu_previousfile
0005720E <PED.ab2@18600>   Ds.w 1
00057212 <PED.ab2@18601>   Dc.b $01,$31,$00,$00
00057214 <PED.ab2@18602>   Ds.w 1
00057218 <PED.ab2@18603>   Dc.l menu_nextfile
0005721A <PED.ab2@18605>   Ds.w 1
0005721E <PED.ab2@18606>   Dc.b $01,$91,$00,$00
00057220 <PED.ab2@18607>   Dc.b $00,$01
00057224 <PED.ab2@18608>   Dc.l menu_find
00057226 <PED.ab2@18610>   Ds.w 1
0005722A <PED.ab2@18611>   Dc.b $01,$92,$00,$00
0005722C <PED.ab2@18612>   Dc.b $00,$01
00057230 <PED.ab2@18613>   Dc.l menu_findnext
00057232 <PED.ab2@18615>   Ds.w 1
00057236 <PED.ab2@18616>   Dc.b $01,$93,$00,$00
00057238 <PED.ab2@18617>   Dc.b $00,$01
0005723C <PED.ab2@18618>   Dc.l menu_previous
0005723E <PED.ab2@18620>   Ds.w 1
00057242 <PED.ab2@18621>   Dc.b $01,$94,$00,$00
00057244 <PED.ab2@18622>   Dc.b $00,$01
00057248 <PED.ab2@18623>   Dc.l menu_replace
0005724A <PED.ab2@18625>   Ds.w 1
0005724E <PED.ab2@18626>   Dc.b $01,$F0,$00,$00
00057250 <PED.ab2@18627>   Dc.w 1
00057254 <PED.ab2@18628>   Dc.l menu_helpnews
00057256 <PED.ab2@18630>   Ds.w 1
0005725A <PED.ab2@18631>   Dc.b $01,$F1,$00,$00
0005725C <PED.ab2@18632>   Dc.w 1
00057260 <PED.ab2@18633>   Dc.l menu_helpgeneral
00057262 <PED.ab2@18635>   Ds.w 1
00057266 <PED.ab2@18636>   Dc.b $01,$F2,$00,$00
00057268 <PED.ab2@18637>   Dc.w 1
0005726C <PED.ab2@18638>   Dc.l menu_helpprogramming
0005726E <PED.ab2@18640>   Ds.w 1
00057272 <PED.ab2@18641>   Dc.b $01,$F3,$00,$00
00057274 <PED.ab2@18642>   Dc.w 1
00057278 <PED.ab2@18643>   Dc.l menu_helpblitzlibs
0005727A <PED.ab2@18645>   Ds.w 1
0005727E <PED.ab2@18646>   Dc.b $01,$F4,$00,$00
00057280 <PED.ab2@18647>   Dc.w 1
00057284 <PED.ab2@18648>   Dc.l menu_helpincludesguide ;syntax
00057286 <PED.ab2@18650>   Ds.w 1
0005728A <PED.ab2@18651>   Dc.b $01,$F5,$00,$00
0005728C <PED.ab2@18652>   Dc.w 1
00057290 <PED.ab2@18653>   Dc.l menu_helpcompletion
00057292 <PED.ab2@18655>   Ds.w 1
00057296 <PED.ab2@18656>   Dc.b $01,$F6,$00,$00
00057298 <PED.ab2@18657>   Dc.w 1
0005729C <PED.ab2@18658>   Dc.l menu_helpshortcuts
0005729E <PED.ab2@18660>   Ds.w 1
000572A2 <PED.ab2@18661>   Dc.b $01,$F7,$00,$00
000572A4 <PED.ab2@18662>   Dc.w 1
000572A8 <PED.ab2@18663>   Dc.l menu_helplibrarybrowser
000572AA <PED.ab2@18665>   Ds.w 1
000572AE <PED.ab2@18666>   Dc.b $01,$F8,$00,$00
000572B0 <PED.ab2@18667>   Dc.w 1
000572B4 <PED.ab2@18668>   Dc.l menu_helpbuildindex
000572B8 <PED.ab2@18671>   Dc.b $FF,$FF,$FF,$FF
000572BC <PED.ab2@18740>                          Ds.l 1
000572BE <PED.ab2@18742>                          Dc.b $00,$08
000572BF <PED.ab2@18744>                          Dc.b $00
000572C0 <PED.ab2@18746>                          Dc.b $00
000572C8 <PED.ab2@18747>                          Ds.l 2
000572D0 <PED.ab2@18749>                          Ds.l 2
000572D4 <PED.ab2@18750>                          Dc.b $FF,$FF,$00,$00
000572D6 <PED.ab2@18751>                          Ds.w 1
000572DA <PED.ab2@18752>                          Dc.b $00,$20,$09,$00
000572F6 <PED.ab2@18753>                          Ds.l 7
000572F8 <PED.ab2@18754>                          Dc.b $00,$0F
00057310 <PED.ab2@18759>                          Dc.b "Unable to open screen!",0 : Even
00057328 <PED.ab2@18761>                          Dc.b "Unable to open window!",0 : Even
00057350 <PED.ab2@18763>                          Dc.b "Unable to open asl.library V36 or newer",0 : Even
00057370 <PED.ab2@18765>                          Dc.b "Unable to open clipboard.device",0 : Even
00057372 <PED.ab2@18770>                          Ds.w 1
00057376 <PED.ab2@18771>                          Dc.b $00,$14,$00,$00
00057378 <PED.ab2@18772>                          Ds.w 1
0005737C <PED.ab2@18773>   AL_0_D3D0:             Dc.l AL_0_D3Dca
00057380 <PED.ab2@18774>   AL_0_D3D4:             Dc.l AL_0_D3EA
00057384 <PED.ab2@18775>   AL_0_D3D8:             Dc.l AL_0_D430
00057392 <PED.ab2@18777>   AL_0_D3Dca:            Dc.b "Public Screen",0 : Even
000573D8 <PED.ab2@18778>   AL_0_D3EA:             Dc.b "I'm attempting to close my screen.",10,"Please close all visitor windows.",0 : Even
000573DE <PED.ab2@18779>   AL_0_D430:             Dc.b "Retry",0 :Even
000573E0 <PED.ab2@18783>                           Ds.w 1
000573E4 <PED.ab2@18784>                           Dc.b $00,$14,$00,$00
000573E6 <PED.ab2@18785>                           Ds.w 1
000573EA <PED.ab2@18786>   AL_0_D43E:              Dc.l AL_0_D44A
000573EE <PED.ab2@18787>   AL_0_D442:              Dc.l AL_0_D45A
000573F2 <PED.ab2@18788>   AL_0_D446:              Dc.l AL_0_D47A
00057402 <PED.ab2@18790>   AL_0_D44A:              Dc.b "Save File As...",0 : Even
00057418 <PED.ab2@18791>   AL_0_D45A:              Dc.b "File already exists!",0 : Even
0005742A <PED.ab2@18792>   AL_0_D47A:              Dc.b "Overwrite|Cancel",0 : Even
0005742C <PED.ab2@18796>                           Ds.w 1
00057430 <PED.ab2@18797>                           Dc.b $00,$14,$00,$00
00057432 <PED.ab2@18798>                           Ds.w 1
00057436 <PED.ab2@18799>   ptr_errortitle:         Dc.l AL_0_D5E8        ; Title
0005743A <PED.ab2@18800>   ptr_errortext:          Ds.l 1                ; Text
0005743E <PED.ab2@18801>                           Dc.l AL_0_D5F0        ; Gadget
00057446 <PED.ab2@18803>   AL_0_D5E8:              Dc.b "Error!",0 : Even
0005744A <PED.ab2@18804>   AL_0_D5F0:              Dc.b "Ok",0 : Even
0005744C <PED.ab2@18808>                           Ds.w 1
00057450 <PED.ab2@18809>                           Dc.b $00,$14,$00,$00
00057452 <PED.ab2@18810>                           Ds.w 1
00057456 <PED.ab2@18811>   AL_0_D5FE:              Dc.l str_newfile_req
0005745A <PED.ab2@18812>   AL_0_D602:              Dc.l AL_0_D614
0005745E <PED.ab2@18813>   AL_0_D606:              Dc.l AL_0_D63C
00057468 <PED.ab2@18816> str_newfile_req:          Dc.b "New File ",0 : Even                     ; added a space to the string because the code at label "load_menu" copy the string "Load File" in to avoid a overwrite
00057486 <PED.ab2@18817>   AL_0_D614:              Dc.b "This will erase altered file!",0 : Even
00057496 <PED.ab2@18818>   AL_0_D63C:              Dc.b "Continue|Cancel",0 : Even
000574A2 <PED.ab2@18827> AL_0_D68E:                Dc.b "topaz.font",0 : Even
000574A6 <PED.ab2@18828> topaz_font:               Dc.l AL_0_D68E
000574AA <PED.ab2@18829>                           Dc.b $00,$08,$00,$00
000574B4 <PED.ab2@18830> str_unnamed:              Dc.b "<unnamed>",0 : Even
000574BA <PED.ab2@18832> str_printerdevice:        Dc.b "PRT:",0 : Even
000574F4 <PED.ab2@18833>                           Ds.w 29
000574F8 <PED.ab2@18835> str_Arexx_PortName:       Dc.b "TED_"
000574FC <PED.ab2@18836> str_Arexx_availability:   Dc.b "REXX"
000574FD <PED.ab2@18837> str_Arexx_portnumber:     Dc.b $31
00057500 <PED.ab2@18838>                           Dc.b $00,$20,$0A
00057510 <PED.ab2@18839> str_label_publicscreen:   Dc.b "Public Screen : "
0005751A <PED.ab2@18840> str_defaultpubscreen:     Dc.b "AmiBlitz3_"
0005751D <PED.ab2@18841> screen_number:            Dc.b 0,0,0
0005751E <PED.ab2@18842>                           Dc.b $00
00057522 <PED.ab2@18844> str_windowtitle:          Ds.l 1
00057526 <PED.ab2@18845> struct_MsgPort:           Ds.l 1
0005752A <PED.ab2@18846> ptr_tempstring:           Ds.l 1
0005752C <PED.ab2@18850>   MOVEQ.l #$00,D0
0005752E <PED.ab2@18851>   MOVEQ.l #$00,D1
00057532 <PED.ab2@18852>   MOVEM.l A1/A3,-(A7)
00057534 <PED.ab2@18855>     MOVE.b (A1)+,D2
00057536 <PED.ab2@18856>     MOVE.b (A3)+,D3
0005753A <PED.ab2@18857>     CMP.b #$20,D2
0005753E <PED.ab2@18858>      BNE.w JL_0_DD2C
00057540 <PED.ab2@18859>     TST.b D3
00057544 <PED.ab2@18860>      BEQ.w JL_0_DD4C
00057546 <PED.ab2@18863>     TST.b D2
0005754A <PED.ab2@18864>      BNE.w JL_0_DD38
0005754C <PED.ab2@18865>     TST.b D3
00057550 <PED.ab2@18866>      BEQ.w JL_0_DD4C
00057554 <PED.ab2@18869>     BSET #$5,D2
00057558 <PED.ab2@18870>     BSET #$5,D3
0005755A <PED.ab2@18871>     CMP.b D2,D3
0005755E <PED.ab2@18872>   BEQ.b JL_0_DD1A
00057562 <PED.ab2@18874>   MOVEM.l (A7)+,A1/A3
00057564 <PED.ab2@18875>   MOVEQ.l #$00,D0
00057566 <PED.ab2@18876>   RTS
0005756A <PED.ab2@18879>   MOVEM.l (A7)+,A1/A3
0005756C <PED.ab2@18880>   MOVEQ.l #-$01,D0          ; string not equal
0005756E <PED.ab2@18881> RTS
00057574 <PED.ab2@18885>   JSR StoreXtraData
0005759E <PED.ab2@18886>   !basic
000575CC <PED.ab2@18887>   If NOT WZ_CheckOpen{"WIN_PROJECT"}
00057676 <PED.ab2@18888>     WZWindow WZID("WIN_PROJECT"),0,192,-2,-2,-2,-2,WZID("WIN_PROJECT")
000576B0 <PED.ab2@18889>     Use Window WZID("WIN_PROJECT")
000576F8 <PED.ab2@18890>     WZ_InitTable{"WIN_PROJECT","PROJECTTABLE",2}
0005779E <PED.ab2@18891>     WZ_SetTableTitle{"PROJECTTABLE","File","Category"}
000577DA <PED.ab2@18892>     WZ_SetTableColors{"PROJECTTABLE",1,0,1,0}
00057836 <PED.ab2@18893>     WZ_SetPriority{"PROJECTTABLE",3,1}
0005785C <PED.ab2@18894>     WZ_SetSortable{"PROJECTTABLE",Off}
00057884 <PED.ab2@18895>     project_tab.b = WZInput("PROJECT_TABS")
0005788A <PED.ab2@18896>     Gosub update_versiongadgets
000578A0 <PED.ab2@18899>   MaxLen lf$=64
000578B6 <PED.ab2@18900>   MaxLen pa$=64
000578C0 <PED.ab2@18902>   MOVE.l actualfile,D0 : *ptr_filename.l = PutD0
000578EE <PED.ab2@18903>   actual_file$ = Peek.s(*ptr_filename + $DE)
00057918 <PED.ab2@18904>   actual_drawer$ = Peek.s(?comStr_CurrentDir)
00057928 <PED.ab2@18906>   If project_tab = 1
0005794A <PED.ab2@18907>     WZ_DrawTable{"PROJECTTABLE"}
00057950 <PED.ab2@18908>     Gosub project_updatesourcelist
00057956 <PED.ab2@18911>   exit_project.b = False
00057960 <PED.ab2@18913>     !ev_WaitEvent
00057966 <PED.ab2@18914>     Select ev
00057974 <PED.ab2@18915>     Case #IDCMP_IDCMPUPDATE
0005799C <PED.ab2@18916>       Select WZGadName
000579C0 <PED.ab2@18917>       Case "PROJECT_TABS"
000579E8 <PED.ab2@18918>         project_tab.b = WZInput("PROJECT_TABS")
000579F8 <PED.ab2@18919>         If project_tab = 1
00057A1A <PED.ab2@18920>           WZ_DrawTable{"PROJECTTABLE"}
00057A20 <PED.ab2@18921>           Gosub project_updatesourcelist
00057A4A <PED.ab2@18924>       Case "PROJECT_NAME"
00057A6C <PED.ab2@18925>         ab2_project\name = WZInputstr
00057A96 <PED.ab2@18927>       Case "PROJECT_DRAWER"
00057ABC <PED.ab2@18928>         ab2_project\drawer = WZInputstr
00057AE6 <PED.ab2@18930>       Case "PROJECT_VERSION"
00057AF4 <PED.ab2@18931>         ab2_project\version = WZInput
00057B1E <PED.ab2@18933>       Case "PROJECT_REVISION"
00057B2C <PED.ab2@18934>         ab2_project\revision = WZInput
00057B56 <PED.ab2@18937>       Case "PROJECT_CREATE"
00057B8E <PED.ab2@18938>         If ab2_project\name<>""
00057C78 <PED.ab2@18939>           If RTEZRequest(!TRANS{"Create Project"},!TRANS{"The current project and its files will be closed,\\nand all source files will be saved."},!TRANS{"_Ok|_Cancel"})
00057C9A <PED.ab2@18940>             WZ_ClearTable{"PROJECTTABLE"}
00057CBC <PED.ab2@18941>             WZ_UpdateTable{"PROJECTTABLE"}
00057CC2 <PED.ab2@18942>             Gosub project_closeallfiles
00057D6A <PED.ab2@18943>             ClearType ab2_project
00057D70 <PED.ab2@18944>             Gosub project_updatesourcelist
00057DB8 <PED.ab2@18945>             ActivateGadget_ WZGadAddr("PROJECT_NAME"),WZWindowAddr,0
00057DBE <PED.ab2@18947>         Else
00057E74 <PED.ab2@18948>           dummy = RTEZRequest(!TRANS{"Create Project"},!TRANS{"Illegal Projectname"},"_Ok")
00057E9E <PED.ab2@18951>       Case "PROJECT_LOAD"
00057EC8 <PED.ab2@18952>         RTEZSetPattern 0,"(#?.a2p)"
00057F54 <PED.ab2@18953>         lf$ = RTEZLoadFile(!TRANS{"Choose Project"},lf$)
00057F9C <PED.ab2@18954>         If Exists(lf$)>0
00057FA2 <PED.ab2@18955>           Gosub project_load
00057FB8 <PED.ab2@18956>           If ab2_project\sourcecounter > 0
00057FEA <PED.ab2@18957>             For pc.l = 1 To ab2_project\sourcecounter
0005804E <PED.ab2@18958>               fext$ = dos_GetExt{ab2_project\sourcefile[pc]}
000580F4 <PED.ab2@18959>               If fext$="ab2" OR fext$="bb2" OR fext$="bb"
0005815E <PED.ab2@18960>                 sourcefile$ = ab2_project\sourcepath[pc]+ab2_project\sourcefile[pc]
00058164 <PED.ab2@18961>                 GetD0 &sourcefile$
00058182 <PED.ab2@18962>                 !asm
00058188 <PED.ab2@18963>                 JSR loadfile
000581B2 <PED.ab2@18964>                 !basic
000581C2 <PED.ab2@18966>             Next pc
000581C8 <PED.ab2@18967>             JSR activatesource
000581CE <PED.ab2@18968>             Gosub project_updatesourcelist
00058208 <PED.ab2@18969>             Use Window WZID("WIN_PROJECT")
0005821E <PED.ab2@18970>             WindowToFront_ WZWindowAddr
00058224 <PED.ab2@18972>         Else
000582F0 <PED.ab2@18973>           If lf$ <> "" Then dummy = RTEZRequest("",!TRANS{"This project does not exist."},"_Ok")
0005831A <PED.ab2@18976>       Case "PROJECT_SAVE"
00058368 <PED.ab2@18977>         ab2_project\name = WZGetString("PROJECT_NAME")
000583BA <PED.ab2@18978>         ab2_project\drawer = WZGetString("PROJECT_DRAWER")
000583F2 <PED.ab2@18979>         If ab2_project\name <> ""
000583F8 <PED.ab2@18980>           Gosub project_save
000583FE <PED.ab2@18981>         Else
0005848C <PED.ab2@18982>           dummy = RTEZRequest("",!TRANS{"Illegal Projectname"},"_Ok")
000584B6 <PED.ab2@18985>       Case "PROJECT_ADDFILE"
000584E0 <PED.ab2@18986>         RTEZSetPattern 0,""
0005851A <PED.ab2@18987>         RTEZSetDefaultDirectory 0,ab2_project\drawer
0005857E <PED.ab2@18988>         actual_file$ = RTEZLoadFile("Add File",lf$)
000585C6 <PED.ab2@18989>         If Exists(actual_file$) > 0
000585DE <PED.ab2@18990>           ab2_project\sourcecounter + 1
00058650 <PED.ab2@18991>           ab2_project\sourcefile[ab2_project\sourcecounter] = dos_FilePart{actual_file$}
00058656 <PED.ab2@18993>           Gosub project_loadfile
000586AE <PED.ab2@18994>           actual_file$ = dos_FilePart{actual_file$}
000586B4 <PED.ab2@18995>           Gosub project_updatesourcelist
000586EE <PED.ab2@18996>           Use Window WZID("WIN_PROJECT")
00058704 <PED.ab2@18997>           WindowToFront_ WZWindowAddr
0005870A <PED.ab2@18998>         Else
000587D6 <PED.ab2@18999>           If lf$<>"" Then dummy = RTEZRequest("",!TRANS{"This file does not exist."},"_Ok")
00058800 <PED.ab2@19002>       Case "PROJECT_REMOVEFILE"
00058890 <PED.ab2@19003>         actual_file$ = WZ_GetCell{"PROJECTTABLE",WZ_Row{"PROJECTTABLE"},1}
000588C2 <PED.ab2@19004>         For pc = 1 To ab2_project\sourcecounter
00058912 <PED.ab2@19005>           If actual_file$ = ab2_project\sourcefile[pc]
00058918 <PED.ab2@19006>             Gosub project_removefile
0005894C <PED.ab2@19007>             ab2_project\sourcefile[pc] = ""
00058980 <PED.ab2@19008>             ab2_project\sourcepath[pc] = ""
00058986 <PED.ab2@19009>             Gosub project_sortsourcelist
0005898C <PED.ab2@19010>             Gosub project_updatesourcelist
0005899C <PED.ab2@19012>         Next pc
000589C6 <PED.ab2@19020>       Case "INTEGER_VER_MAJOR"
000589CC <PED.ab2@19021>         Gosub get_versiondata_from_gui
000589F6 <PED.ab2@19023>       Case "INTEGER_VER_MINOR"
000589FC <PED.ab2@19024>         Gosub get_versiondata_from_gui
00058A26 <PED.ab2@19026>       Case "INTEGER_VER_PATCH"
00058A2C <PED.ab2@19027>         Gosub get_versiondata_from_gui
00058A56 <PED.ab2@19029>       Case "INTEGER_VER_BUILD"
00058A5C <PED.ab2@19030>         Gosub get_versiondata_from_gui
00058A86 <PED.ab2@19034>       Case "CHANGELOG_ADDENTRY"
00058AB2 <PED.ab2@19035>         If Peek.l(?comPtr_VersionInformation) AND Peek.l(?comPtr_NumberOfBuilds)
00058AF6 <PED.ab2@19036>           If (Peek.l(?comPtr_VersionInformation)<>0) AND (Peek.l(?comPtr_NumberOfBuilds )<>0)
00058B18 <PED.ab2@19037>             version_code.l = Peek.l(Peek.l(?comPtr_VersionInformation))
00058B3A <PED.ab2@19038>             anz_builds.l   = Peek.l(Peek.l(?comPtr_NumberOfBuilds))
00058B88 <PED.ab2@19039>             vercode$ = Str$(version_code LSR 24 )+"."
00058C06 <PED.ab2@19040>             vercode$ + Str$((version_code LSL 8) LSR 24 )+"."
00058C84 <PED.ab2@19041>             vercode$ + Str$((version_code LSL 16)LSR 24 )+" (build: "
00058CF2 <PED.ab2@19042>             vercode$ + Str$(anz_builds)+")"
00058D68 <PED.ab2@19043>             changelog$ =  "V"+vercode$ + ":\\0a\\0a" + changelog$
00058DA2 <PED.ab2@19044>             WZPrint "CHANGELOG_TEXTFIELD",&changelog$
00058DCC <PED.ab2@19048>       Case "CHANGELOG_TEXTFIELD"
00058E18 <PED.ab2@19049>         changelog$ = WZ_GetStringField{"CHANGELOG_TEXTFIELD"}
00058E26 <PED.ab2@19051>       End Select
00058E3A <PED.ab2@19053>    Case #IDCMP_VANILLAKEY
00058E42 <PED.ab2@19054>      Select EventCode
00058E56 <PED.ab2@19055>      Case $1B: exit_project = True
00058E58 <PED.ab2@19056>      End Select
00058E6C <PED.ab2@19059>     Case #IDCMP_CLOSEWINDOW
00058E72 <PED.ab2@19060>       exit_project = True
00058E74 <PED.ab2@19061>     End Select
00058E84 <PED.ab2@19063>     If project_tab = 1
00058E98 <PED.ab2@19064>       wev.l = WZ_CheckTableEvent{ev}
00058EAA <PED.ab2@19065>       If wev = #WZTABLEEVENT_DOUBLECLICK
00058F3A <PED.ab2@19066>         _sf$ = WZ_GetCell{"PROJECTTABLE",WZ_Row{"PROJECTTABLE"},1}
00058FC4 <PED.ab2@19067>         If (_sf$<>actual_file$) AND (_sf$<>Peek.s(?str_unnamed))
00058FF8 <PED.ab2@19068>           actual_file$ = _sf$
00058FFE <PED.ab2@19069>           Gosub project_loadfile
00059038 <PED.ab2@19075>           Use Window WZID("WIN_PROJECT")
0005904E <PED.ab2@19076>           WindowToFront_ WZWindowAddr
00059068 <PED.ab2@19081>   Until exit_project = True
0005908A <PED.ab2@19083>   WZ_KillTable{"PROJECTTABLE"}
000590C2 <PED.ab2@19084>   WZCloseWindow WZID("WIN_PROJECT")
000590D4 <PED.ab2@19085>   ActivateWindow_(?ptr_sourcewindow)
000590F2 <PED.ab2@19087>   !asm
000590F4 <PED.ab2@19088> RTS
000590FA <PED.ab2@19091>   tempcounter.w = 0
00059124 <PED.ab2@19092>   For i = 1 To #MAX_SOURCEFILES
00059168 <PED.ab2@19093>     If ab2_project\sourcefile[i]<> ""
00059176 <PED.ab2@19094>       tempcounter + 1
000591CE <PED.ab2@19095>       tempproject$(tempcounter,0) = ab2_project\sourcefile[i]
00059226 <PED.ab2@19096>       tempproject$(tempcounter,1) = ab2_project\sourcepath[i]
0005925A <PED.ab2@19098>     ab2_project\sourcefile[i] = ""
0005928E <PED.ab2@19099>     ab2_project\sourcepath[i] = ""
0005929E <PED.ab2@19100>   Next i
000592C8 <PED.ab2@19102>   For i = 1 To tempcounter
0005931E <PED.ab2@19103>     ab2_project\sourcefile[i] = tempproject$(i,0)
00059374 <PED.ab2@19104>     ab2_project\sourcepath[i] = tempproject$(i,1)
00059384 <PED.ab2@19105>   Next i
00059390 <PED.ab2@19106>   ab2_project\sourcecounter = tempcounter
00059392 <PED.ab2@19107> Return
000593A2 <PED.ab2@19110>   If project_tab = 1
000593C4 <PED.ab2@19111>     WZ_ClearTable{"PROJECTTABLE"}
000593DA <PED.ab2@19112>     If ab2_project\sourcecounter > 0
0005940C <PED.ab2@19113>       For pc = 1 To ab2_project\sourcecounter
0005944C <PED.ab2@19114>         t$ = ab2_project\sourcefile[pc]
000594CA <PED.ab2@19115>         If Instr(t$,".include") Then u$ = "Include" Else
00059548 <PED.ab2@19116>         If Instr(t$,".bb2")     Then u$ = "AB2-Source" Else
000595C6 <PED.ab2@19117>         If Instr(t$,".ab2")     Then u$ = "AB2-Source" Else
00059644 <PED.ab2@19118>         If Instr(t$,".ab3")     Then u$ = "AB3-Source" Else
000596C2 <PED.ab2@19119>         If Instr(t$,".bb")      Then u$ = "BB2-Source" Else
000597AA <PED.ab2@19120>         If Instr(t$,".wizard")  Then u$ = "Wizard-GUI-File" Else u$ = dos_GetExt{t$}+" File"
00059868 <PED.ab2@19121>         WZ_AddRow{"PROJECTTABLE",t$,u$}
000598D8 <PED.ab2@19122>         If t$ = actual_file$ Then WZ_SetActiveRow{"PROJECTTABLE",pc}
000598E8 <PED.ab2@19123>       Next pc
0005990A <PED.ab2@19125>     WZ_UpdateTable{"PROJECTTABLE"}
0005993E <PED.ab2@19127>     ab2p$ = ab2_project\name
00059976 <PED.ab2@19128>     ab2d$ = ab2_project\drawer
000599B0 <PED.ab2@19129>     WZPrint "PROJECT_NAME",&ab2p$
000599EA <PED.ab2@19130>     WZPrint "PROJECT_DRAWER",&ab2d$
000599EC <PED.ab2@19134> Return
000599F2 <PED.ab2@19137>   JSR activatesource
00059A10 <PED.ab2@19138>   !asm
00059A16 <PED.ab2@19140>   JSR dummy_compilercall
00059A1C <PED.ab2@19141>   JSR clear_labellist
00059A22 <PED.ab2@19142>   JSR clear_actualsource
00059A28 <PED.ab2@19143>   MOVEA.l actualfile,A0
00059A2E <PED.ab2@19144>   JSR close_actualsource
00059A34 <PED.ab2@19145>   TST.l loadedfilesbase
00059A38 <PED.ab2@19146>   BNE.b go_on_closing
00059A62 <PED.ab2@19148>   !basic
00059A68 <PED.ab2@19149>   JSR activatesource
00059A6A <PED.ab2@19150> Return
00059A9E <PED.ab2@19153>   t$ = actual_file$
00059BEA <PED.ab2@19154>   If Instr(t$,".bb2")     OR Instr(t$,".ab2") OR Instr(t$,".ab3")     OR Instr(t$,".bb")
00059BF0 <PED.ab2@19155>     Gosub project_loadfile
00059C0E <PED.ab2@19156>     !asm
00059C14 <PED.ab2@19157>     JSR menu_quit
00059C3E <PED.ab2@19158>     !basic
00059C48 <PED.ab2@19159>     MOVE.l actualfile,D0 : *ptr_filename = PutD0
00059C76 <PED.ab2@19160>     actual_file$ = Peek.s(*ptr_filename + $DE)
00059C78 <PED.ab2@19162> Return
00059CAC <PED.ab2@19165>   t$ = actual_file$
00059DF8 <PED.ab2@19166>   If Instr(t$,".bb2")     OR Instr(t$,".ab2")  OR Instr(t$,".ab3")    OR Instr(t$,".bb")
00059DFE <PED.ab2@19167>     GetD0 &actual_file$
00059E1C <PED.ab2@19168>     !asm
00059E22 <PED.ab2@19169>     JSR loadfile
00059E4C <PED.ab2@19170>     !basic
00059E4E <PED.ab2@19172> Return
00059E98 <PED.ab2@19175>   If OpenFile(1,lf$)
00059F40 <PED.ab2@19176>     ClearType ab2_project
00059FFA <PED.ab2@19177>     ReadType 1,ab2_project
0005A012 <PED.ab2@19178>     CloseFile 1
0005A018 <PED.ab2@19179>   Else
0005A0A6 <PED.ab2@19180>     dummy = RTEZRequest("",!TRANS{"This project could not be loaded."},"_Ok")
0005A0A8 <PED.ab2@19182> Return
0005A0EE <PED.ab2@19185>   lf$ = ab2_project\name+".a2p"
0005A118 <PED.ab2@19186>   RTEZSetPattern 1,"(#?.a2p)"
0005A152 <PED.ab2@19187>   RTEZSetDefaultDirectory 1,ab2_project\drawer
0005A1B6 <PED.ab2@19188>   lf$ = RTEZSaveFile("Save Projectfile",lf$)
0005A200 <PED.ab2@19189>   If OpenFile(1,lf$)
0005A2BA <PED.ab2@19190>     WriteType 1,ab2_project
0005A2D2 <PED.ab2@19191>     CloseFile 1
0005A2D8 <PED.ab2@19192>   Else
0005A366 <PED.ab2@19193>     dummy = RTEZRequest("",!TRANS{"The project could not be saved."},"_Ok")
0005A368 <PED.ab2@19195> Return
0005A394 <PED.ab2@19198>   If WZ_CheckOpen{"WIN_PROJECT"}
0005A3A8 <PED.ab2@19199>     If Peek.l(?comPtr_VersionInformation)
0005A3D8 <PED.ab2@19200>       version_code = WZInput("INTEGER_VER_MAJOR") LSL 24
0005A418 <PED.ab2@19201>       version_code + (WZInput("INTEGER_VER_MINOR") LSL 16)
0005A458 <PED.ab2@19202>       version_code + (WZInput("INTEGER_VER_PATCH") LSL 8)
0005A478 <PED.ab2@19203>       Poke.l Peek.l(?comPtr_VersionInformation),version_code
0005A4C2 <PED.ab2@19205>       Poke.l Peek.l(?comPtr_NumberOfBuilds), WZInput("INTEGER_VER_BUILD")
0005A4C4 <PED.ab2@19208> Return
0005A4F0 <PED.ab2@19211>   If Peek.l(?comPtr_VersionInformation) AND Peek.l(?comPtr_NumberOfBuilds)
0005A534 <PED.ab2@19212>     If (Peek.l(?comPtr_VersionInformation)<>0) AND (Peek.l(?comPtr_NumberOfBuilds)<>0)
0005A556 <PED.ab2@19213>       version_code.l = Peek.l(Peek.l(?comPtr_VersionInformation))
0005A578 <PED.ab2@19214>       anz_builds.l   = Peek.l(Peek.l(?comPtr_NumberOfBuilds))
0005A5A4 <PED.ab2@19215>       If WZ_CheckOpen{"WIN_PROJECT"}
0005A5DE <PED.ab2@19216>         Use Window WZID("WIN_PROJECT")
0005A61E <PED.ab2@19217>         WZPrint "INTEGER_VER_MAJOR",version_code LSR 24
0005A666 <PED.ab2@19218>         WZPrint "INTEGER_VER_MINOR",(version_code LSL 8) LSR 24
0005A6AE <PED.ab2@19219>         WZPrint "INTEGER_VER_PATCH",(version_code LSL 16)LSR 24
0005A6E6 <PED.ab2@19220>         WZPrint "INTEGER_VER_BUILD",anz_builds
0005A720 <PED.ab2@19221>         WZPrint "CHANGELOG_TEXTFIELD",&changelog$
0005A722 <PED.ab2@19225> Return
0005A728 <PED.ab2@19233>   MOVE.l D0,struct_RexxMsg
0005A72A <PED.ab2@19234>   MOVEA.l D0,A0
0005A732 <PED.ab2@19235>   MOVE.l $A(A0),ptr_arexx_sendername
0005A734 <PED.ab2@19237>   MOVEA.l A0,A1
0005A73C <PED.ab2@19238>   MOVE.l $28(A1),ptr_arexx_commandstr
0005A742 <PED.ab2@19239>   CMPI.b #$7,$8(A0)
0005A746 <PED.ab2@19240>    BEQ.w ignore_arexx_message
0005A74C <PED.ab2@19241>   CMPI.b #$5,$8(A0)
0005A750 <PED.ab2@19242>    BEQ.w handle_arexx_message
0005A752 <PED.ab2@19243>   MOVEA.l A0,A1
0005A756 <PED.ab2@19244>   JSR _ReplyMsg(A6)
0005A758 <PED.ab2@19245>   RTS
0005A75E <PED.ab2@19248>   MOVE.l struct_RexxMsg,D0
0005A764 <PED.ab2@19249>   JSR free_RexxMsg
0005A766 <PED.ab2@19250>   RTS
0005A76C <PED.ab2@19254>   SF checked_arexxcmd
0005A772 <PED.ab2@19255>   JSR cursor_off
0005A778 <PED.ab2@19256>   LEA ptr_arexxcmd_list,A2
0005A77A <PED.ab2@19257>   MOVEA.l (A2)+,A3
0005A780 <PED.ab2@19258>   MOVEA.l ptr_arexx_commandstr,A1
0005A786 <PED.ab2@19261>     JSR compare_strings
0005A78A <PED.ab2@19262>     BNE.w command_found
0005A78C <PED.ab2@19263>     ADDQ.l #4,A2
0005A78E <PED.ab2@19264>     MOVEA.l (A2)+,A3
0005A794 <PED.ab2@19265>     CMPA.l #$0,A3
0005A798 <PED.ab2@19266>   BNE.b JL_0_DF90
0005A79A <PED.ab2@19267>   SUBA.l A0,A0
0005A79C <PED.ab2@19268>   MOVEQ.l #$00,D0
0005A7A0 <PED.ab2@19269>   BRA.w arexx_answer_message
0005A7A2 <PED.ab2@19272>   MOVEA.l (A2),A0
0005A7A6 <PED.ab2@19274>   MOVEM.l D1-D7/A0-A3,-(A7)
0005A7AC <PED.ab2@19275>   JSR arexx_count_parameters
0005A7B0 <PED.ab2@19276>   MOVEM.l (A7)+,D1-D7/A0-A3
0005A7B2 <PED.ab2@19280>   JSR (A0)
0005A7B8 <PED.ab2@19281>   JSR arexx_answer_message
0005A7BE <PED.ab2@19282> JMP cursor_on
0005A7C0 <PED.ab2@19286>   MOVEQ.l #-$01,D0
0005A7C2 <PED.ab2@19289>     ADDQ.l #1,D0
0005A7C4 <PED.ab2@19290>     TST.b (A0)+
0005A7C8 <PED.ab2@19291>   BNE.b JL_0_DFCA
0005A7CA <PED.ab2@19292> RTS
0005A7D0 <PED.ab2@19295>   TST.b checked_arexxcmd
0005A7D4 <PED.ab2@19296>    BNE.w exit_answerarexx
0005A7D6 <PED.ab2@19298>   MOVE.l D0,-(A7)           ; return code, geht unten in $20(A1)
0005A7DC <PED.ab2@19300>   CMPA.l #$0,A0
0005A7E0 <PED.ab2@19301>    BEQ.w no_return_string
0005A7E2 <PED.ab2@19303>   MOVE.l A0,-(A7)
0005A7E6 <PED.ab2@19304>   BSR.b get_strlength
0005A7E8 <PED.ab2@19305>   MOVEA.l (A7)+,A0
0005A7EE <PED.ab2@19307>   MOVEA.l _rexxsyslibbase,A6
0005A7F2 <PED.ab2@19308>   JSR _CreateArgstring(A6)            ; create the return string
0005A7F4 <PED.ab2@19309>   MOVEA.l D0,A0
0005A7F6 <PED.ab2@19311>   MOVE.l a0,-(a7)
0005A7FC <PED.ab2@19321>   MOVEA.l struct_RexxMsg,A1
0005A800 <PED.ab2@19322>   MOVE.l A0,$24(A1)                   ; AtrString -> rn_Result2
0005A804 <PED.ab2@19323>   MOVE.l (A7)+,$20(A1)                ; return code -> rm_Result1
0005A80A <PED.ab2@19324>   MOVE.b #NT_REPLYMSG,$8(A1)          ; Message has been replied -> ln_Type
0005A810 <PED.ab2@19325>   MOVEA.l _execbase,A6
0005A814 <PED.ab2@19326>   JSR _ReplyMsg(A6)
0005A816 <PED.ab2@19327>   MOVEQ.l #$00,D7
0005A818 <PED.ab2@19330> RTS
0005A81E <PED.ab2@19333>   MOVE.l #$10000,D1
0005A824 <PED.ab2@19334>   MOVE.l #$200,D0
0005A846 <PED.ab2@19335>   !newalloc;JSR _AllocVec(A6)         ;for arexxfunc_getword
0005A84C <PED.ab2@19336>   MOVE.l D0,ptr_tempstring
0005A852 <PED.ab2@19339>   MOVEA.l _execbase,A6
0005A858 <PED.ab2@19340>   LEA str_REXX,A1
0005A85C <PED.ab2@19341>   JSR _FindPort(A6)
0005A85E <PED.ab2@19342>   TST.l D0
0005A862 <PED.ab2@19343>   BEQ.w no_arexx_port_available
0005A868 <PED.ab2@19344>   MOVE.l D0,ptr_arexxport
0005A86E <PED.ab2@19348>     LEA str_Arexx_PortName,A1
0005A872 <PED.ab2@19349>     JSR _FindPort(A6)
0005A874 <PED.ab2@19350>     TST.l D0
0005A878 <PED.ab2@19351>     BEQ.w JL_0_E054
0005A87E <PED.ab2@19352>     MOVE.b str_Arexx_portnumber,D1
0005A880 <PED.ab2@19353>     ADDQ.b #1,D1
0005A886 <PED.ab2@19354>     MOVE.b D1,str_Arexx_portnumber
0005A88A <PED.ab2@19355>     CMP.b #"9",D1
0005A88E <PED.ab2@19356>   BNE.b JL_0_E032
0005A894 <PED.ab2@19359>   MOVE.l #$1000,D0
0005A89A <PED.ab2@19360>   MOVE.l #$10000,D1
0005A8BC <PED.ab2@19361>   !newalloc;JSR _AllocVec(A6)
0005A8BE <PED.ab2@19363>   MOVEQ.l #$0F,D1
0005A8C4 <PED.ab2@19364>   LEA arexx_table,A1
0005A8C6 <PED.ab2@19366>     MOVE.l D0,(A1)+
0005A8CC <PED.ab2@19367>     ADDI.l #$100,D0
0005A8D0 <PED.ab2@19368>   DBF D1,JL_0_E080
0005A8D6 <PED.ab2@19371>   LEA str_libname_rexxsyslib,A1
0005A8D8 <PED.ab2@19372>   MOVEQ.l #$00,D0
0005A8DC <PED.ab2@19373>   JSR _OpenLibrary(A6)
0005A8E2 <PED.ab2@19374>   MOVE.l D0,_rexxsyslibbase
0005A8E6 <PED.ab2@19375>   BEQ.w no_arexx_port_available
0005A8EA <PED.ab2@19377>   JSR _CreateMsgPortA(A6)
0005A8F0 <PED.ab2@19378>   MOVE.l D0,struct_ArexxMsgPort
0005A8F4 <PED.ab2@19379>   BEQ.w no_arexx_port_available
0005A8F6 <PED.ab2@19381>   MOVEA.l D0,A1
0005A8FC <PED.ab2@19382>   MOVE.b #"2",$9(A1)
0005A904 <PED.ab2@19383>   MOVE.l #str_Arexx_PortName,$A(A1)
0005A908 <PED.ab2@19384>   JSR _AddPort(A6)
0005A90E <PED.ab2@19386>   MOVEA.l struct_ArexxMsgPort,A0
0005A916 <PED.ab2@19387>   MOVE.b $F(A0),rexx_signalbits
0005A91C <PED.ab2@19389>     MOVEA.l struct_ArexxMsgPort,A0
0005A920 <PED.ab2@19390>     JSR _GetMsg(A6)
0005A922 <PED.ab2@19391>     TST.l D0
0005A926 <PED.ab2@19392>   BNE.b JL_0_E0CE
0005A930 <PED.ab2@19393>   MOVE.l #$FFFFFFFF,arexxport_available
0005A93A <PED.ab2@19394>   MOVE.l #$5445445F,str_Arexx_PortName     ; "TED_"
0005A944 <PED.ab2@19395>   MOVE.l #$52455858,str_Arexx_availability             ; "REXX"
0005A946 <PED.ab2@19396>   RTS
0005A950 <PED.ab2@19399>   MOVE.l #$4E2F4120,str_Arexx_PortName
0005A95A <PED.ab2@19400>   MOVE.l #$20202020,str_Arexx_availability             ; "N/A "
0005A962 <PED.ab2@19401>   MOVE.b #$20,str_Arexx_portnumber
0005A968 <PED.ab2@19402>   CLR.l arexxport_available
0005A96A <PED.ab2@19403> RTS
0005A970 <PED.ab2@19407>   MOVEA.l _execbase,A6
0005A976 <PED.ab2@19408>   MOVEA.l ptr_tempstring,a1
0005A988 <PED.ab2@19409>   !newfree
0005A98E <PED.ab2@19410>   TST.l arexxport_available
0005A992 <PED.ab2@19411>    BEQ.w exit_closearexxport
0005A998 <PED.ab2@19413>   JSR clear_arexxtable
0005A99E <PED.ab2@19414>   JSR init_RexxMsg
0005A9A4 <PED.ab2@19415>   MOVEA.l struct_RexxMsg,A0
0005A9AC <PED.ab2@19416>   MOVE.l #$9000000,$1C(A0)
0005A9B4 <PED.ab2@19417>   MOVE.l #str_Arexx_PortName,$28(A0)
0005A9BA <PED.ab2@19418>   LEA str_REXX,A1
0005A9BE <PED.ab2@19419>   JSR _FindPort(A6)
0005A9C0 <PED.ab2@19420>   TST.l D0
0005A9C4 <PED.ab2@19421>   BEQ.w JL_0_E192
0005A9C6 <PED.ab2@19423>   MOVEA.l D0,A0
0005A9CC <PED.ab2@19424>   MOVEA.l struct_RexxMsg,A1
0005A9D0 <PED.ab2@19425>   JSR _PutMsg(A6)
0005A9D6 <PED.ab2@19426>   MOVEA.l struct_ArexxMsgPort,A0
0005A9DA <PED.ab2@19427>   JSR _WaitPort(A6)
0005A9E0 <PED.ab2@19428>   MOVEA.l struct_ArexxMsgPort,A0
0005A9E4 <PED.ab2@19429>   JSR _GetMsg(A6)
0005A9EA <PED.ab2@19430>   MOVEA.l struct_RexxMsg,A0
0005A9F2 <PED.ab2@19431>   MOVE.l #$0,$28(A0)
0005A9F8 <PED.ab2@19434>   MOVEA.l struct_ArexxMsgPort,A1
0005A9FC <PED.ab2@19435>   JSR _RemPort(A6)
0005AA02 <PED.ab2@19436>   MOVEA.l struct_ArexxMsgPort,A0
0005AA06 <PED.ab2@19437>   JSR _DeleteMsgPort(A6)
0005AA0C <PED.ab2@19438>   CLR.l struct_ArexxMsgPort
0005AA0E <PED.ab2@19441> RTS
0005AA12 <PED.ab2@19444>   MOVEM.l D1/A0-A1/A6,-(A7)
0005AA18 <PED.ab2@19445>   MOVEA.l _execbase,A6
0005AA1A <PED.ab2@19446>   MOVEA.l D0,A1
0005AA20 <PED.ab2@19447>   MOVE.l #MinByteSgnd,D0
0005AA24 <PED.ab2@19448>   JSR _FreeMem(A6)
0005AA28 <PED.ab2@19450>   MOVEM.l (A7)+,D1/A0-A1/A6
0005AA2A <PED.ab2@19451> RTS
0005AA30 <PED.ab2@19455>   CLR.l struct_RexxMsg
0005AA36 <PED.ab2@19456>   MOVEA.l _execbase,A6
0005AA3C <PED.ab2@19457>   MOVE.l #$10000,D1
0005AA42 <PED.ab2@19458>   MOVE.l #MinByteSgnd,D0
0005AA46 <PED.ab2@19459>   JSR _AllocMem(A6)
0005AA48 <PED.ab2@19461>   MOVEA.l D0,A1
0005AA4A <PED.ab2@19462>   TST.l d0
0005AA4E <PED.ab2@19463>    BEQ.w JL_0_E21E
0005AA54 <PED.ab2@19465>   MOVE.b #$5,$8(A1)                   ; rm_Node\ln_Type
0005AA5A <PED.ab2@19466>   MOVE.b #$1,$9(A1)                   ; rm_Node\ln_Pri
0005AA62 <PED.ab2@19467>   MOVE.l #str_Arexx_PortName,$A(A1)   ; rm_Node\ln_Name
0005AA68 <PED.ab2@19468>   MOVE.w #$0080,$12(A1)               ; rm_Node\mn_Length
0005AA70 <PED.ab2@19469>   MOVE.l struct_ArexxMsgPort,$E(A1)   ; rm_Node\*mn_ReplyPort
0005AA78 <PED.ab2@19470>   MOVE.l #$1060000,$1C(A1)            ; rm_Action
0005AA7A <PED.ab2@19471>   MOVE.l A1,D0
0005AA80 <PED.ab2@19472>   MOVE.l D0,struct_RexxMsg
0005AA82 <PED.ab2@19475> RTS
0005AA8C <PED.ab2@19478>   MOVE.l #str_CLOSEWINDOW,ptr_own_arexxcommand
0005AA92 <PED.ab2@19479>   LEA str_own_arexx_message,A0
0005AA98 <PED.ab2@19480>   JSR arexx_sendmessage
0005AA9A <PED.ab2@19481> RTS
0005AAA0 <PED.ab2@19484>   LEA str_own_arexx_message,A0
0005AAA2 <PED.ab2@19485>   MOVEQ.l #$1F,D1
0005AAA4 <PED.ab2@19487>     TST.l (A0)
0005AAA8 <PED.ab2@19488>     BNE.w JL_0_E246
0005AAAC <PED.ab2@19489>   DBF D1,JL_0_E23A
0005AAAE <PED.ab2@19490>   RTS
0005AAB8 <PED.ab2@19493>   MOVE.l #str_QUITPLEASE,ptr_own_arexxcommand
0005AABE <PED.ab2@19494>   LEA str_own_arexx_message,A0
0005AAC4 <PED.ab2@19495>   JSR arexx_sendmessage
0005AACA <PED.ab2@19496>   LEA str_own_arexx_message,A0
0005AACC <PED.ab2@19497>   MOVEQ.l #$1F,D1
0005AACE <PED.ab2@19499>     CLR.l (A0)+
0005AAD2 <PED.ab2@19500>   DBF D1,JL_0_E25E
0005AAD4 <PED.ab2@19501> RTS
0005AADE <PED.ab2@19504>   MOVE.l #str_OPENWINDOW,ptr_own_arexxcommand
0005AAE4 <PED.ab2@19505>   LEA str_own_arexx_message,A0
0005AAEA <PED.ab2@19506>   JSR arexx_sendmessage
0005AAEC <PED.ab2@19507> RTS
0005AAF0 <PED.ab2@19527>   MOVEM.l D0-D2/A0-A1/A6,-(A7)
0005AAF2 <PED.ab2@19529>   MOVEQ.l #$1F,D1
0005AAF4 <PED.ab2@19531>       MOVE.l (A0)+,D2
0005AAF8 <PED.ab2@19532>       BNE.w JL_0_E2C6
0005AAFC <PED.ab2@19533>     DBF D1,JL_0_E2B8
0005AB00 <PED.ab2@19534>     BRA.w exit_sendmessage
0005AB04 <PED.ab2@19537>     MOVEM.l D1/A0,-(A7)
0005AB0A <PED.ab2@19538>     JSR init_RexxMsg
0005AB10 <PED.ab2@19539>     MOVE.l D0,ptr_own_ArexxMsg
0005AB12 <PED.ab2@19540>     MOVEA.l D0,A1
0005AB1A <PED.ab2@19541>     MOVE.l ptr_own_arexxcommand,$28(A1)
0005AB1E <PED.ab2@19542>     MOVEM.l D1/A1,-(A7)
0005AB20 <PED.ab2@19544>     MOVEA.l D2,A1
0005AB26 <PED.ab2@19545>     MOVEA.l _execbase,A6
0005AB2A <PED.ab2@19546>     JSR _FindPort(A6)     ; A0 : Portname
0005AB2E <PED.ab2@19547>     MOVEM.l (A7)+,D1/A1
0005AB30 <PED.ab2@19549>     TST.l D0
0005AB34 <PED.ab2@19550>      BEQ.w no_port_found
0005AB36 <PED.ab2@19552>     MOVEA.l D0,A0
0005AB3A <PED.ab2@19553>     JSR _PutMsg(A6)
0005AB40 <PED.ab2@19555>       MOVEA.l struct_ArexxMsgPort,A0
0005AB44 <PED.ab2@19556>       JSR _WaitPort(A6)
0005AB4A <PED.ab2@19558>       MOVEA.l struct_ArexxMsgPort,A0
0005AB4E <PED.ab2@19559>       JSR _GetMsg(A6)
0005AB54 <PED.ab2@19561>       CMP.l ptr_own_ArexxMsg,D0
0005AB58 <PED.ab2@19562>        BEQ.w no_port_found
0005AB5A <PED.ab2@19563>       MOVEA.l D0,A0
0005AB62 <PED.ab2@19564>       MOVE.l $A(A0),ptr_arexx_sendername
0005AB64 <PED.ab2@19565>       MOVEA.l A0,A1
0005AB6C <PED.ab2@19566>       MOVE.l $28(A1),ptr_arexx_commandstr
0005AB72 <PED.ab2@19567>       CMPI.b #$7,$8(A0)
0005AB76 <PED.ab2@19568>        BNE.w JL_0_E33E
0005AB7C <PED.ab2@19569>       JSR free_RexxMsg
0005AB80 <PED.ab2@19570>     BRA.b JL_0_E2FC
0005AB82 <PED.ab2@19573>     MOVEA.l A0,A1
0005AB86 <PED.ab2@19574>     JSR _ReplyMsg(A6)
0005AB8A <PED.ab2@19575>     BRA.b JL_0_E2FC
0005AB90 <PED.ab2@19578>     MOVE.l struct_RexxMsg,D0
0005AB96 <PED.ab2@19579>     JSR free_RexxMsg
0005AB9A <PED.ab2@19580>     MOVEM.l (A7)+,D1/A0
0005AB9E <PED.ab2@19581>   DBF D1,JL_0_E2B8
0005ABA2 <PED.ab2@19584>   MOVEM.l (A7)+,D0-D2/A0-A1/A6
0005ABA4 <PED.ab2@19585> RTS
0005ABAA <PED.ab2@19588>   MOVEA.l _execbase,A6
0005ABB0 <PED.ab2@19589>   MOVEA.l arexx_table,A1
0005ABC2 <PED.ab2@19590>   !newfree
0005ABC4 <PED.ab2@19591> RTS
0005ABC8 <PED.ab2@19593> ptr_own_arexxcommand:        Ds.l 1
0005ABD8 <PED.ab2@19594> ptr_own_ArexxMsg:            Ds.l 4
0005ABDC <PED.ab2@19595> struct_RexxMsg:              Ds.l 1
0005ABE0 <PED.ab2@19596> arexxport_available:         Ds.l 1
0005ABE4 <PED.ab2@19597> struct_ArexxMsgPort:         Ds.l 1
0005ABE8 <PED.ab2@19598> ptr_arexxport:               Ds.l 1
0005ABEA <PED.ab2@19599> rexx_signalbits:             Ds.w 1
0005ABEC <PED.ab2@19600> arexx_number_of_parameters:  Ds.w 1
0005ABEE <PED.ab2@19601> checked_arexxcmd:            Ds.w 1
0005ABF2 <PED.ab2@19602> ptr_arexx_sendername:        Ds.l 1
0005ABF6 <PED.ab2@19603> ptr_arexx_commandstr:        Ds.l 1
0005ABFA <PED.ab2@19604> ptr_arexx_currsourceline:    Ds.l 1
0005AC0E <PED.ab2@19605> str_libname_rexxsyslib:      Dc.b "rexxsyslib.library",0,0
0005AC12 <PED.ab2@19606> _rexxsyslibbase:             Ds.l 1
0005AC18 <PED.ab2@19608> str_REXX:                    Dc.b "REXX",0,0
0005AC24 <PED.ab2@19609> str_CLOSEWINDOW:             Dc.b "CLOSEWINDOW",0
0005AC30 <PED.ab2@19610> str_OPENWINDOW:              Dc.b "OPENWINDOW",0,0
0005AC3C <PED.ab2@19611> str_QUITPLEASE:              Dc.b "QUITPLEASE",0,0
0005AC4C <PED.ab2@19612> str_DOCLISTCHANGED:          Dc.b "DOCLISTCHANGED",0,0
0005AC5A <PED.ab2@19613> str_DOCNUMCHANGED:           Dc.b "DOCNUMCHANGED",0
0005ACDA <PED.ab2@19614> str_own_arexx_message:       Ds.l 32
0005AD5A <PED.ab2@19615> str_arexx_message_doclist:   Ds.l 32
0005AD5E <PED.ab2@19623>  Dc.l AL_0_E66C
0005AD62 <PED.ab2@19624>  Dc.l arexxfunc_runexe             ;runfunc
0005AD66 <PED.ab2@19625>  Dc.l AL_0_E57C
0005AD6A <PED.ab2@19626>  Dc.l arexxfunc_compilerun         ;compilefunc
0005AD6E <PED.ab2@19627>  Dc.l AL_0_E600
0005AD72 <PED.ab2@19628>  Dc.l arexxfunc_prevsource         ;prevdoc
0005AD76 <PED.ab2@19629>  Dc.l AL_0_E608
0005AD7A <PED.ab2@19630>  Dc.l arexxfunc_nextsource         ;nextdoc
0005AD7E <PED.ab2@19631>  Dc.l AL_0_E6B6
0005AD82 <PED.ab2@19632>  Dc.l arexxfunc_cut                ;cut
0005AD86 <PED.ab2@19633>  Dc.l AL_0_E6BA
0005AD8A <PED.ab2@19634>  Dc.l arexxfunc_copy               ;copy
0005AD8E <PED.ab2@19635>  Dc.l AL_0_E6C0
0005AD92 <PED.ab2@19636>  Dc.l arexxfunc_paste              ;paste
0005AD96 <PED.ab2@19637>  Dc.l AL_0_E63C
0005AD9A <PED.ab2@19638>  Dc.l arexxfunc_load               ;load file
0005AD9E <PED.ab2@19639>  Dc.l AL_0_E636
0005ADA2 <PED.ab2@19640>  Dc.l arexxfunc_quit               ;quit
0005ADA6 <PED.ab2@19641>  Dc.l AL_0_E642
0005ADAA <PED.ab2@19642>  Dc.l arexxfunc_loadnew            ;loadnew
0005ADAE <PED.ab2@19643>  Dc.l AL_0_E64A
0005ADB2 <PED.ab2@19644>  Dc.l arexxfunc_save               ;save
0005ADB6 <PED.ab2@19645>  Dc.l AL_0_E632
0005ADBA <PED.ab2@19646>  Dc.l arexxfunc_new                ;new
0005ADBE <PED.ab2@19647>  Dc.l AL_0_E650
0005ADC2 <PED.ab2@19648>  Dc.l arexxfunc_print              ;print
0005ADC6 <PED.ab2@19649>  Dc.l AL_0_E61C
0005ADCA <PED.ab2@19650>  Dc.l arexxfunc_erase              ;erase
0005ADCE <PED.ab2@19651>  Dc.l AL_0_E6A4
0005ADD2 <PED.ab2@19652>  Dc.l arexxfunc_doclist            ;doclist
0005ADD6 <PED.ab2@19653>  Dc.l AL_0_E5BC
0005ADDA <PED.ab2@19654>  Dc.l arexxfunc_topline            ;topline
0005ADDE <PED.ab2@19655>  Dc.l AL_0_E5C4
0005ADE2 <PED.ab2@19656>  Dc.l arexxfunc_bottomline         ;bottomline
0005ADE6 <PED.ab2@19657>  Dc.l AL_0_E5E0
0005ADEA <PED.ab2@19658>  Dc.l arexxfunc_nextline           ;nextline
0005ADEE <PED.ab2@19659>  Dc.l AL_0_E5D0
0005ADF2 <PED.ab2@19660>  Dc.l arexxfunc_getline            ;getline
0005ADF6 <PED.ab2@19661>  Dc.l AL_0_E5F6
0005ADFA <PED.ab2@19662>  Dc.l arexxfunc_prevline           ;prevline
0005ADFE <PED.ab2@19663>  Dc.l AL_0_E5EA
0005AE02 <PED.ab2@19664>  Dc.l arexxfunc_screentoback       ;hidescreen
0005AE06 <PED.ab2@19665>  Dc.l AL_0_E5D8
0005AE0A <PED.ab2@19666>  Dc.l arexxfunc_redraw             ;redraw
0005AE0E <PED.ab2@19667>  Dc.l AL_0_E610
0005AE12 <PED.ab2@19668>  Dc.l arexxfunc_screenname         ;screenname
0005AE16 <PED.ab2@19669>  Dc.l AL_0_E59C
0005AE1A <PED.ab2@19670>  Dc.l arexxfunc_iconify            ;iconify
0005AE1E <PED.ab2@19671>  Dc.l AL_0_E670
0005AE22 <PED.ab2@19672>  Dc.l arexxfunc_notifynewdoc       ;notifynewdoc
0005AE26 <PED.ab2@19673>  Dc.l AL_0_E67E
0005AE2A <PED.ab2@19674>  Dc.l arexxfunc_dontnotifynewdoc   ;dontnotifynewdoc
0005AE2E <PED.ab2@19675>  Dc.l AL_0_E690
0005AE32 <PED.ab2@19676>  Dc.l arexxfunc_getdoclist         ;getdoclist
0005AE36 <PED.ab2@19677>  Dc.l AL_0_E584
0005AE3A <PED.ab2@19678>  Dc.l arexxfunc_screentofront      ;showscreen
0005AE3E <PED.ab2@19679>  Dc.l AL_0_E574
0005AE42 <PED.ab2@19680>  Dc.l arexxfunc_getword
0005AE46 <PED.ab2@19681>  Dc.l AL_0_E622
0005AE4A <PED.ab2@19682>  Dc.l arexxfunc_help               ;help
0005AE4E <PED.ab2@19683>  Dc.l AL_0_E628
0005AE52 <PED.ab2@19684>  Dc.l arexxfunc_helptext           ;helptext
0005AE56 <PED.ab2@19685>  Dc.l AL_0_E6C6
0005AE5A <PED.ab2@19686>  Dc.l arexxfunc_libguide           ;libguide
0005AE5E <PED.ab2@19687>  Dc.l AL_0_E6D0
0005AE62 <PED.ab2@19688>  Dc.l arexxfunc_activate           ;activate
0005AE66 <PED.ab2@19689>  Dc.l AL_0_E69C
0005AE6A <PED.ab2@19690>  Dc.l arexx_gotodoc                ;gotodoc
0005AE6E <PED.ab2@19691>  Dc.l AL_0_E6AC
0005AE72 <PED.ab2@19692>  Dc.l arexxfunc_getdocnum          ;getdocnum
0005AE76 <PED.ab2@19693>  Dc.l AL_0_E656
0005AE7A <PED.ab2@19694>  Dc.l arexxfunc_rememberme         ;rememberme
0005AE7E <PED.ab2@19695>  Dc.l AL_0_E662
0005AE82 <PED.ab2@19696>  Dc.l arexxfunc_forgetme           ;forgetme
0005AE86 <PED.ab2@19697>  Dc.l AL_0_E5A4
0005AE8A <PED.ab2@19698>  Dc.l arexxfunc_about              ;about
0005AE8E <PED.ab2@19699>  Dc.l AL_0_E5B4
0005AE92 <PED.ab2@19700>  Dc.l arexxfunc_version            ;version
0005AE96 <PED.ab2@19701>  Dc.l AL_0_E5AA
0005AE9A <PED.ab2@19702>  Dc.l arexxfunc_numlines           ;numlines
0005AE9E <PED.ab2@19703>  Dc.l AL_0_E590
0005AEA2 <PED.ab2@19704>  Dc.l rebuild_menus                ;reloadmenus
0005AEA6 <PED.ab2@19705>  Dc.l AL_0_E6E4
0005AEAA <PED.ab2@19706>  Dc.l arexxfunc_windowshorten      ;windowshorten
0005AEAE <PED.ab2@19707>  Dc.l AL_0_E6DA
0005AEB2 <PED.ab2@19708>  Dc.l arexxfunc_windowpos          ;windowpos
0005AEB6 <PED.ab2@19709>  Dc.l AL_0_E6F2
0005AEBA <PED.ab2@19710>  Dc.l arexxfunc_makeexec           ;makeexec
0005AECA <PED.ab2@19711>  Ds.l 4
0005AED2 <PED.ab2@19716>  AL_0_E574:  Dc.b "GETWORD",0
0005AEDA <PED.ab2@19717>  AL_0_E57C:  Dc.b "COMPILE",0
0005AEE6 <PED.ab2@19718>  AL_0_E584:  Dc.b "SHOWSCREEN",0,0
0005AEF2 <PED.ab2@19719>  AL_0_E590:  Dc.b "RELOADMENUS",0
0005AEFA <PED.ab2@19720>  AL_0_E59C:  Dc.b "ICONIFY",0
0005AF00 <PED.ab2@19721>  AL_0_E5A4:  Dc.b "ABOUT",0
0005AF0A <PED.ab2@19722>  AL_0_E5AA:  Dc.b "NUMLINES",0,0
0005AF12 <PED.ab2@19723>  AL_0_E5B4:  Dc.b "VERSION",0
0005AF1A <PED.ab2@19724>  AL_0_E5BC:  Dc.b "TOPLINE",0
0005AF26 <PED.ab2@19725>  AL_0_E5C4:  Dc.b "BOTTOMLINE",0,0
0005AF2E <PED.ab2@19726>  AL_0_E5D0:  Dc.b "GETLINE",0
0005AF36 <PED.ab2@19727>  AL_0_E5D8:  Dc.b "REDRAW",0,0
0005AF40 <PED.ab2@19728>  AL_0_E5E0:  Dc.b "NEXTLINE",0,0
0005AF4C <PED.ab2@19729>  AL_0_E5EA:  Dc.b "HIDESCREEN",0,0
0005AF56 <PED.ab2@19730>  AL_0_E5F6:  Dc.b "PREVLINE",0,0
0005AF5E <PED.ab2@19731>  AL_0_E600:  Dc.b "PREVDOC",0
0005AF66 <PED.ab2@19732>  AL_0_E608:  Dc.b "NEXTDOC",0
0005AF72 <PED.ab2@19733>  AL_0_E610:  Dc.b "SCREENNAME",0,0
0005AF78 <PED.ab2@19734>  AL_0_E61C:  Dc.b "ERASE",0
0005AF7E <PED.ab2@19735>  AL_0_E622:  Dc.b "HELP",0,0
0005AF88 <PED.ab2@19736>  AL_0_E628:  Dc.b "HELPTEXT",0,0
0005AF8C <PED.ab2@19737>  AL_0_E632:  Dc.b "NEW",0
0005AF92 <PED.ab2@19738>  AL_0_E636:  Dc.b "QUIT",0,0
0005AF98 <PED.ab2@19739>  AL_0_E63C:  Dc.b "LOAD",0,0
0005AFA0 <PED.ab2@19740>  AL_0_E642:  Dc.b "LOADNEW",0
0005AFA6 <PED.ab2@19741>  AL_0_E64A:  Dc.b "SAVE",0,0
0005AFAC <PED.ab2@19742>  AL_0_E650:  Dc.b "PRINT",0
0005AFB8 <PED.ab2@19743>  AL_0_E656:  Dc.b "REMEMBERME",0,0
0005AFC2 <PED.ab2@19744>  AL_0_E662:  Dc.b "FORGETME",0,0
0005AFC6 <PED.ab2@19745>  AL_0_E66C:  Dc.b "RUN",0
0005AFD4 <PED.ab2@19746>  AL_0_E670:  Dc.b "NOTIFYNEWDOC",0,0
0005AFE6 <PED.ab2@19747>  AL_0_E67E:  Dc.b "DONTNOTIFYNEWDOC",0,0
0005AFF2 <PED.ab2@19748>  AL_0_E690:  Dc.b "GETDOCLIST",0,0
0005AFFA <PED.ab2@19749>  AL_0_E69C:  Dc.b "GOTODOC",0
0005B002 <PED.ab2@19750>  AL_0_E6A4:  Dc.b "DOCLIST",0
0005B00C <PED.ab2@19751>  AL_0_E6AC:  Dc.b "GETDOCNUM",0
0005B010 <PED.ab2@19752>  AL_0_E6B6:  Dc.b "CUT",0
0005B016 <PED.ab2@19753>  AL_0_E6BA:  Dc.b "COPY",0,0
0005B01C <PED.ab2@19754>  AL_0_E6C0:  Dc.b "PASTE",0
0005B026 <PED.ab2@19755>  AL_0_E6C6:  Dc.b "LIBGUIDE",0,0
0005B030 <PED.ab2@19756>  AL_0_E6D0:  Dc.b "ACTIVATE",0,0
0005B03A <PED.ab2@19757>  AL_0_E6DA:  Dc.b "WINDOWPOS",0
0005B048 <PED.ab2@19758>  AL_0_E6E4:  Dc.b "WINDOWSHORTEN",0
0005B052 <PED.ab2@19759>  AL_0_E6F2:  Dc.b "MAKEEXEC",0,0
0005B058 <PED.ab2@19766>   TST.l ptr_sourcewindow
0005B05C <PED.ab2@19767>   BEQ.w JL_0_E826
0005B062 <PED.ab2@19768>   MOVEA.l ptr_sourcewindow,A0
0005B068 <PED.ab2@19769>   TST.w AL_0_5388
0005B06C <PED.ab2@19770>   BEQ.w JL_0_E818
0005B072 <PED.ab2@19771>   MOVEA.l comPtr_CompilerWindow,A0
0005B074 <PED.ab2@19774>   MOVE.l A6,-(A7)
0005B07A <PED.ab2@19775>   MOVEA.l _intuibase,A6
0005B07E <PED.ab2@19776>   JSR _ActivateWindow(A6)
0005B080 <PED.ab2@19777>   MOVEA.l (A7)+,A6
0005B082 <PED.ab2@19780>   MOVEQ.l #$00,D0
0005B084 <PED.ab2@19781>   SUBA.l A0,A0
0005B086 <PED.ab2@19782> RTS
0005B08C <PED.ab2@19785>   LEA str_own_arexx_message,A0
0005B08E <PED.ab2@19786>   MOVEQ.l #$1F,D0
0005B090 <PED.ab2@19788>     TST.l (A0)+
0005B094 <PED.ab2@19789>      BEQ.w JL_0_E842
0005B098 <PED.ab2@19790>   DBF D0,JL_0_E832
0005B09A <PED.ab2@19791>   MOVEQ.l #$00,D0
0005B09C <PED.ab2@19792>   SUBA.l A0,A0
0005B09E <PED.ab2@19793>   RTS
0005B0A4 <PED.ab2@19796>   MOVE.l ptr_arexx_sendername,-(A0)
0005B0A6 <PED.ab2@19797>   MOVEQ.l #$00,D0
0005B0A8 <PED.ab2@19798>   SUBA.l A0,A0
0005B0AA <PED.ab2@19799> RTS
0005B0B0 <PED.ab2@19802>   LEA str_own_arexx_message,A0
0005B0B6 <PED.ab2@19803>   MOVE.l ptr_arexx_sendername,D0
0005B0B8 <PED.ab2@19804>   MOVEQ.l #$1F,D1
0005B0BA <PED.ab2@19806>     CMP.l (A0)+,D0
0005B0BE <PED.ab2@19807>      BEQ.w JL_0_E868
0005B0C2 <PED.ab2@19808>   DBF D1,JL_0_E85A
0005B0C6 <PED.ab2@19809>   BRA.w JL_0_E86A
0005B0C8 <PED.ab2@19812>   CLR.l -(A0)
0005B0CA <PED.ab2@19815>   SUBA.l A0,A0
0005B0CC <PED.ab2@19816>   MOVEQ.l #$00,D0
0005B0CE <PED.ab2@19817> RTS
0005B0D0 <PED.ab2@19820>   SUBA.l A0,A0
0005B0D2 <PED.ab2@19821>   MOVEQ.l #$01,D0
0005B0D8 <PED.ab2@19822>   JSR arexx_answer_message
0005B0DE <PED.ab2@19823>   JSR menu_settings
0005B0E4 <PED.ab2@19824>   ST checked_arexxcmd
0005B0E6 <PED.ab2@19825>   MOVEQ.l #$00,D7
0005B0E8 <PED.ab2@19826> RTS
0005B0EE <PED.ab2@19829>   JSR menu_project
0005B0F0 <PED.ab2@19830>   SUBA.l A0,A0
0005B0F2 <PED.ab2@19831>   MOVEQ.l #$00,D0
0005B0F4 <PED.ab2@19832> RTS
0005B0FA <PED.ab2@19835>   MOVEA.l _execbase,A6
0005B100 <PED.ab2@19836>   MOVEA.l struct_RexxMsg,A1
0005B104 <PED.ab2@19837>   JSR _ReplyMsg(A6)
0005B10A <PED.ab2@19838>   ST checked_arexxcmd
0005B10C <PED.ab2@19839>   MOVEQ.l #$00,D7
0005B10E <PED.ab2@19840>   SUBA.l A0,A0
0005B110 <PED.ab2@19841>   MOVEQ.l #$00,D0
0005B112 <PED.ab2@19842> RTS
0005B118 <PED.ab2@19845>   MOVEA.l ptr_tempstring,A0
0005B11E <PED.ab2@19846>   MOVE.l #$30000000,(A0)
0005B120 <PED.ab2@19847>   MOVEQ.l #$00,D0
0005B122 <PED.ab2@19848> RTS
0005B126 <PED.ab2@19851>   MOVEM.l D1-D7/A1-A6,-(A7)
0005B12C <PED.ab2@19852>   MOVEA.l actualfile,A1
0005B132 <PED.ab2@19853>   MOVEA.l loadedfilesbase,A0
0005B134 <PED.ab2@19854>   MOVEQ.l #$00,D0
0005B136 <PED.ab2@19857>     CMPA.l A0,A1
0005B13A <PED.ab2@19858>      BEQ.w JL_0_E8E6
0005B13C <PED.ab2@19859>     MOVEA.l (A0),A0
0005B13E <PED.ab2@19860>     ADDQ.l #1,D0
0005B144 <PED.ab2@19861>     CMPA.l #$0,A0
0005B148 <PED.ab2@19862>   BNE.b JL_0_E8D4
0005B14E <PED.ab2@19865>   MOVEA.l ptr_tempstring,A0
0005B150 <PED.ab2@19866>   CLR.l (A0)
0005B154 <PED.ab2@19867>   CLR.l $4(A0)
0005B15A <PED.ab2@19868>   JSR format_value
0005B15E <PED.ab2@19869>   MOVEM.l (A7)+,D1-D7/A1-A6
0005B160 <PED.ab2@19870>   MOVEQ.l #$00,D0
0005B166 <PED.ab2@19871>   MOVEA.l ptr_tempstring,A0
0005B168 <PED.ab2@19872> RTS
0005B16E <PED.ab2@19875>   MOVEA.l loadedfilesbase,A0
0005B170 <PED.ab2@19876>   TST.l D0
0005B174 <PED.ab2@19877>   BEQ.w JL_0_E918
0005B176 <PED.ab2@19880>   MOVEA.l (A0),A0
0005B178 <PED.ab2@19881>   SUBQ.l #1,D0
0005B17C <PED.ab2@19882>   BNE.b JL_0_E912
0005B17E <PED.ab2@19885>   MOVE.l A0,D0
0005B184 <PED.ab2@19886>   CMP.l actualfile,D0
0005B188 <PED.ab2@19887>   BEQ.w JL_0_E92A
0005B18E <PED.ab2@19888>   JSR selectfile
0005B190 <PED.ab2@19891>   SUBA.l A0,A0
0005B192 <PED.ab2@19892>   MOVEQ.l #$00,D0
0005B194 <PED.ab2@19893> RTS
0005B19A <PED.ab2@19896>   JSR StoreXtraData
0005B1A0 <PED.ab2@19897>   MOVE.l loadedfilesbase,D0
0005B1A6 <PED.ab2@19898>   MOVEA.l ptr_tempstring,A0
0005B1AC <PED.ab2@19899>   JSR generate_tempfilename
0005B1B2 <PED.ab2@19900>   MOVEA.l ptr_tempstring,A0
0005B1B4 <PED.ab2@19901>   MOVEQ.l #$00,D0
0005B1B6 <PED.ab2@19902> RTS
0005B1BE <PED.ab2@19905>   CMPI.w #$2,arexx_number_of_parameters
0005B1C2 <PED.ab2@19906>     BNE.w JL_0_E9A4
0005B1C8 <PED.ab2@19908>   MOVEA.l AL_0_EEC6,A0
0005B1CE <PED.ab2@19909>   JSR JL_0_EA02
0005B1D4 <PED.ab2@19910>   MOVE.w AL_0_B7EE,D6
0005B1D6 <PED.ab2@19911>   CMP.w D6,D7
0005B1DA <PED.ab2@19912>     BEQ.w JL_0_E9A4
0005B1E0 <PED.ab2@19914>   MOVE.w D7,AL_0_B7EE
0005B1E6 <PED.ab2@19915>   MOVE.w D7,comWord__AL_0_86C4
0005B1EC <PED.ab2@19916>   CLR.w AL_0_B7F0
0005B1F2 <PED.ab2@19917>   CLR.w comWord__AL_0_86C6
0005B1F8 <PED.ab2@19918>   TST.l ptr_sourcewindow
0005B1FC <PED.ab2@19919>     BEQ.w JL_0_E9A4
0005B226 <PED.ab2@19920>   !basic
0005B280 <PED.ab2@19921>   Request "","close id! E9A4","Ok"
0005B29E <PED.ab2@19922>   !asm
0005B2A4 <PED.ab2@19924>   JSR close_sourcewindow
0005B2AA <PED.ab2@19925>   JSR open_sourcewindow
0005B2B0 <PED.ab2@19926>   JSR update_labelstuff
0005B2B2 <PED.ab2@19929>   SUBA.l A0,A0
0005B2B4 <PED.ab2@19930>   MOVEQ.l #$00,D0
0005B2B6 <PED.ab2@19931> RTS
0005B2BE <PED.ab2@19934>   CMPI.w #$2,arexx_number_of_parameters
0005B2C2 <PED.ab2@19935>    BNE.w JL_0_E9FC
0005B2C8 <PED.ab2@19936>   MOVEA.l AL_0_EEC6,A0
0005B2CE <PED.ab2@19937>    JSR JL_0_EA02
0005B2D4 <PED.ab2@19938>   MOVE.w AL_0_B7F0,D6
0005B2D6 <PED.ab2@19939>   CMP.w D6,D7
0005B2DA <PED.ab2@19940>    BEQ.w JL_0_E9FC
0005B2E0 <PED.ab2@19941>   MOVE.w D7,AL_0_B7F0
0005B2E6 <PED.ab2@19942>   MOVE.w D7,comWord__AL_0_86C6
0005B2EC <PED.ab2@19943>   CLR.w AL_0_B7EE
0005B2F2 <PED.ab2@19944>   CLR.w comWord__AL_0_86C4
0005B2F8 <PED.ab2@19945>   TST.l ptr_sourcewindow
0005B2FC <PED.ab2@19946>    BEQ.w JL_0_E9FC
0005B326 <PED.ab2@19947>   !basic
0005B380 <PED.ab2@19948>   Request "","close id! E9AA","Ok"
0005B39E <PED.ab2@19949>   !asm
0005B3A4 <PED.ab2@19951>    JSR close_sourcewindow
0005B3AA <PED.ab2@19952>    JSR open_sourcewindow
0005B3B0 <PED.ab2@19953>    JSR update_labelstuff
0005B3B2 <PED.ab2@19956>   SUBA.l A0,A0
0005B3B4 <PED.ab2@19957>   MOVEQ.l #$00,D0
0005B3B6 <PED.ab2@19958> RTS
0005B3B8 <PED.ab2@19961>   MOVEQ.l #$00,D7
0005B3BA <PED.ab2@19962>   MOVEQ.l #$00,D0
0005B3BC <PED.ab2@19964>     MOVE.b (A0)+,D0
0005B3C0 <PED.ab2@19965>      BEQ.w JL_0_EA18
0005B3C4 <PED.ab2@19966>     SUBI.b #"0",D0
0005B3C8 <PED.ab2@19967>     MULU #$A,D7
0005B3CA <PED.ab2@19968>     ADD.b D0,D7
0005B3CE <PED.ab2@19969>   BRA.b JL_0_EA06
0005B3D0 <PED.ab2@19972> RTS
0005B3D6 <PED.ab2@19975>   JSR menu_cut
0005B3D8 <PED.ab2@19976>   SUBA.l A0,A0
0005B3DA <PED.ab2@19977>   MOVEQ.l #$00,D0
0005B3DC <PED.ab2@19978> RTS
0005B3E2 <PED.ab2@19981>   JSR menu_copy
0005B3E4 <PED.ab2@19982>   SUBA.l A0,A0
0005B3E6 <PED.ab2@19983>   MOVEQ.l #$00,D0
0005B3E8 <PED.ab2@19984> RTS
0005B3EE <PED.ab2@19987>   JSR menu_paste
0005B3F0 <PED.ab2@19988>   SUBA.l A0,A0
0005B3F2 <PED.ab2@19989>   MOVEQ.l #$00,D0
0005B3F4 <PED.ab2@19990> RTS
0005B3FA <PED.ab2@19993>   LEA str_arexx_message_doclist,A0
0005B3FC <PED.ab2@19994>   MOVEQ.l #$1F,D0
0005B3FE <PED.ab2@19997>     TST.l (A0)+
0005B402 <PED.ab2@19998>      BEQ.w JL_0_EA54
0005B406 <PED.ab2@19999>   DBF D0,JL_0_EA44
0005B408 <PED.ab2@20000>   MOVEQ.l #$00,D0
0005B40A <PED.ab2@20001>   SUBA.l A0,A0
0005B40C <PED.ab2@20002>   RTS
0005B412 <PED.ab2@20005>   MOVE.l ptr_arexx_sendername,-(A0)
0005B414 <PED.ab2@20006>   MOVEQ.l #$00,D0
0005B416 <PED.ab2@20007>   SUBA.l A0,A0
0005B418 <PED.ab2@20008> RTS
0005B41E <PED.ab2@20011>   LEA str_arexx_message_doclist,A0
0005B424 <PED.ab2@20012>   MOVE.l ptr_arexx_sendername,D0
0005B426 <PED.ab2@20013>   MOVEQ.l #$1F,D1
0005B428 <PED.ab2@20016>   CMP.l (A0)+,D0
0005B42C <PED.ab2@20017>    BEQ.w JL_0_EA7A
0005B430 <PED.ab2@20018>    DBF D1,JL_0_EA6C
0005B434 <PED.ab2@20019>  BRA.w JL_0_EA7C
0005B436 <PED.ab2@20022>   CLR.l -(A0)
0005B438 <PED.ab2@20024>   SUBA.l A0,A0
0005B43A <PED.ab2@20025>   MOVEQ.l #$00,D0
0005B43C <PED.ab2@20026> RTS
0005B442 <PED.ab2@20029>   SF checked_arexxcmd
0005B444 <PED.ab2@20030>   SUBA.l A0,A0
0005B446 <PED.ab2@20031>   MOVEQ.l #$00,D0
0005B44C <PED.ab2@20032>   JSR arexx_answer_message
0005B452 <PED.ab2@20033>   ST checked_arexxcmd
0005B454 <PED.ab2@20034>   MOVEQ.l #$65,D6
0005B456 <PED.ab2@20035>   MOVEQ.l #-$02,D7
0005B458 <PED.ab2@20036> RTS
0005B45E <PED.ab2@20039>   SF checked_arexxcmd
0005B460 <PED.ab2@20040>   SUBA.l A0,A0
0005B462 <PED.ab2@20041>   MOVEQ.l #$01,D0
0005B468 <PED.ab2@20042>   JSR arexx_answer_message
0005B46E <PED.ab2@20043>   ST checked_arexxcmd
0005B470 <PED.ab2@20044>   MOVEQ.l #$73,D6
0005B472 <PED.ab2@20045>   MOVEQ.l #-$02,D7
0005B474 <PED.ab2@20046> RTS
0005B47A <PED.ab2@20049>   JSR menu_opennew
0005B47C <PED.ab2@20050>   SUBA.l A0,A0
0005B47E <PED.ab2@20051>   MOVEQ.l #$00,D0
0005B480 <PED.ab2@20052> RTS
0005B488 <PED.ab2@20055>   CMPI.w #$2,arexx_number_of_parameters
0005B48C <PED.ab2@20056>    BNE.w JL_0_EAF2
0005B48E <PED.ab2@20057>   SUBA.l A0,A0
0005B490 <PED.ab2@20058>   MOVEQ.l #$00,D0
0005B496 <PED.ab2@20059>   JSR arexx_answer_message
0005B49C <PED.ab2@20060>   ST checked_arexxcmd
0005B4A2 <PED.ab2@20061>   JSR menu_opennew
0005B4A8 <PED.ab2@20062>   MOVE.l AL_0_EEC6,D7
0005B4AE <PED.ab2@20063>   JSR load_source
0005B4B0 <PED.ab2@20064>   MOVEQ.l #$00,D7
0005B4B2 <PED.ab2@20065>   RTS
0005B4B4 <PED.ab2@20068>   SUBA.l A0,A0
0005B4B6 <PED.ab2@20069>   MOVEQ.l #$00,D0
0005B4BC <PED.ab2@20070>   JSR arexx_answer_message
0005B4C2 <PED.ab2@20071>   ST checked_arexxcmd
0005B4C8 <PED.ab2@20072>   JSR menu_opennew
0005B4CE <PED.ab2@20073>   JSR menu_load
0005B4D0 <PED.ab2@20074>   MOVEQ.l #$00,D7
0005B4D2 <PED.ab2@20075> RTS
0005B4DA <PED.ab2@20078>   CMPI.w #$2,arexx_number_of_parameters
0005B4DE <PED.ab2@20079>    BNE.w JL_0_EB3A
0005B4E0 <PED.ab2@20080>   SUBA.l A0,A0
0005B4E2 <PED.ab2@20081>   MOVEQ.l #$00,D0
0005B4E8 <PED.ab2@20082>   JSR arexx_answer_message
0005B4EE <PED.ab2@20083>   ST checked_arexxcmd
0005B4F4 <PED.ab2@20084>   MOVE.l AL_0_EEC6,D7
0005B4FA <PED.ab2@20085>   JSR load_source
0005B4FC <PED.ab2@20086>   MOVEQ.l #$00,D7
0005B4FE <PED.ab2@20087>   RTS
0005B500 <PED.ab2@20090>   SUBA.l A0,A0
0005B502 <PED.ab2@20091>   MOVEQ.l #$00,D0
0005B508 <PED.ab2@20092>   JSR arexx_answer_message
0005B50E <PED.ab2@20093>   ST checked_arexxcmd
0005B514 <PED.ab2@20094>   JSR menu_load
0005B516 <PED.ab2@20095>   MOVEQ.l #$00,D7
0005B518 <PED.ab2@20096> RTS
0005B51E <PED.ab2@20099>   SF AL_0_1162
0005B524 <PED.ab2@20100>   JSR menu_save
0005B526 <PED.ab2@20101>   SUBA.l A0,A0
0005B528 <PED.ab2@20102>   MOVEQ.l #$00,D0
0005B52A <PED.ab2@20103> RTS
0005B530 <PED.ab2@20106>   JSR menu_print
0005B532 <PED.ab2@20107>   SUBA.l A0,A0
0005B534 <PED.ab2@20108>   MOVEQ.l #$00,D0
0005B536 <PED.ab2@20109> RTS
0005B53C <PED.ab2@20112>    JSR menu_previousfile
0005B53E <PED.ab2@20113>   SUBA.l A0,A0
0005B540 <PED.ab2@20114>   MOVEQ.l #$00,D0
0005B542 <PED.ab2@20115> RTS
0005B548 <PED.ab2@20118>    JSR menu_nextfile
0005B54A <PED.ab2@20119>   SUBA.l A0,A0
0005B54C <PED.ab2@20120>   MOVEQ.l #$00,D0
0005B54E <PED.ab2@20121> RTS
0005B554 <PED.ab2@20124>   LEA str_defaultpubscreen,A0
0005B556 <PED.ab2@20125>   MOVEQ.l #$00,D0
0005B558 <PED.ab2@20126> RTS
0005B55E <PED.ab2@20129>   JSR _redraw
0005B560 <PED.ab2@20130>   SUBA.l A0,A0
0005B562 <PED.ab2@20131>   MOVEQ.l #$00,D0
0005B564 <PED.ab2@20132> RTS
0005B56A <PED.ab2@20135>   JSR menu_about
0005B56C <PED.ab2@20136>   SUBA.l A0,A0
0005B56E <PED.ab2@20137>   MOVEQ.l #$00,D0
0005B570 <PED.ab2@20138> RTS
0005B572 <PED.ab2@20141>   MOVEQ.l #$00,D0
0005B578 <PED.ab2@20142>   MOVE.l comLong_TotalLines,D0
0005B57E <PED.ab2@20143>   LEA L_0_EF02,A0
0005B584 <PED.ab2@20144>   JSR format_value
0005B58A <PED.ab2@20145>   LEA L_0_EF02,A0
0005B58C <PED.ab2@20146>   MOVEQ.l #$00,D0
0005B58E <PED.ab2@20147> RTS
0005B594 <PED.ab2@20151>   LEA str_pedname,A0
0005B596 <PED.ab2@20152>   MOVEQ.l #$00,D0
0005B598 <PED.ab2@20153> RTS
0005B5A2 <PED.ab2@20156>   MOVE.l comPtr_FirstSourceLine,ptr_arexx_currsourceline
0005B5A4 <PED.ab2@20157>   SUBA.l A0,A0
0005B5A6 <PED.ab2@20158>   MOVEQ.l #$00,D0
0005B5A8 <PED.ab2@20159> RTS
0005B5B2 <PED.ab2@20162>   MOVE.l comPtr_LastSourceLine,ptr_arexx_currsourceline
0005B5B4 <PED.ab2@20163>   SUBA.l A0,A0
0005B5B6 <PED.ab2@20164>   MOVEQ.l #$00,D0
0005B5B8 <PED.ab2@20165> RTS
0005B5BE <PED.ab2@20168>   MOVEA.l ptr_arexx_currsourceline,A0
0005B5C4 <PED.ab2@20169>   CMPA.l #$0,A0
0005B5C8 <PED.ab2@20170>    BEQ.w JL_0_EC0A
0005B5CA <PED.ab2@20171>   TST.l (A0)
0005B5CE <PED.ab2@20172>    BEQ.w JL_0_EC0A
0005B5D0 <PED.ab2@20173>   MOVEA.l (A0),A0
0005B5D6 <PED.ab2@20174>   MOVE.l A0,ptr_arexx_currsourceline
0005B5D8 <PED.ab2@20175>   SUBA.l A0,A0
0005B5DA <PED.ab2@20177>   MOVEQ.l #$00,D0
0005B5DC <PED.ab2@20178> RTS
0005B5E2 <PED.ab2@20181>   MOVEA.l _intuibase,A6
0005B5E8 <PED.ab2@20182>   MOVEA.l ptr_pedscreen,A0
0005B5EC <PED.ab2@20183>    JSR _ScreenToBack(A6)
0005B5EE <PED.ab2@20184>   SUBA.l A0,A0
0005B5F0 <PED.ab2@20185>   MOVEQ.l #$00,D0
0005B5F2 <PED.ab2@20186> RTS
0005B5F8 <PED.ab2@20189>   MOVEA.l _intuibase,A6
0005B5FE <PED.ab2@20190>   MOVEA.l ptr_pedscreen,A0
0005B602 <PED.ab2@20191>   JSR _ScreenToFront(A6)
0005B604 <PED.ab2@20192>   SUBA.l A0,A0
0005B606 <PED.ab2@20193>   MOVEQ.l #$00,D0
0005B608 <PED.ab2@20194> RTS
0005B60E <PED.ab2@20197>   MOVEA.l ptr_arexx_currsourceline,A0
0005B614 <PED.ab2@20198>   CMPA.l #$0,A0
0005B618 <PED.ab2@20199>    BEQ.w JL_0_EC60
0005B61C <PED.ab2@20200>   LEA $9(A0),A0
0005B622 <PED.ab2@20201>   MOVEA.l ptr_tempstring,A1
0005B628 <PED.ab2@20202>   JSR detokenize_line
0005B62E <PED.ab2@20203>   MOVEA.l ptr_tempstring,A0
0005B630 <PED.ab2@20204>   MOVEQ.l #$00,D0
0005B632 <PED.ab2@20208>   RTS
0005B634 <PED.ab2@20211>   MOVEQ.l #$05,D0
0005B636 <PED.ab2@20212> RTS
0005B63C <PED.ab2@20215>   MOVEA.l ptr_arexx_currsourceline,A0
0005B642 <PED.ab2@20216>   CMPA.l #$0,A0
0005B646 <PED.ab2@20217>   BEQ.w JL_0_EC88
0005B64A <PED.ab2@20218>   TST.l $4(A0)
0005B64E <PED.ab2@20219>   BEQ.w JL_0_EC88
0005B652 <PED.ab2@20220>   MOVEA.l $4(A0),A0
0005B658 <PED.ab2@20221>   MOVE.l A0,ptr_arexx_currsourceline
0005B65A <PED.ab2@20222>   SUBA.l A0,A0
0005B65C <PED.ab2@20225>   MOVEQ.l #$00,D0
0005B65E <PED.ab2@20226>   RTS
0005B660 <PED.ab2@20229> RTS
0005B666 <PED.ab2@20232>   MOVEA.l ptr_tempstring,A1
0005B66C <PED.ab2@20233>   JSR JL_0_ECD6
0005B672 <PED.ab2@20234>   MOVEA.l ptr_tempstring,A0
0005B678 <PED.ab2@20235>   MOVE.w replacestartcolumn,d0
0005B67E <PED.ab2@20237>   MOVE.w d0,comWord_Column
0005B684 <PED.ab2@20238>   CLR.w comWord_ColumnsOffset
0005B686 <PED.ab2@20239>   MOVEQ.l #$00,D0
0005B688 <PED.ab2@20240> RTS
0005B68E <PED.ab2@20243>   MOVEA.l ptr_tempstring,A1
0005B694 <PED.ab2@20244>   JSR JL_0_ECA2
0005B69A <PED.ab2@20245>   MOVEA.l ptr_tempstring,A0
0005B69C <PED.ab2@20246>   MOVEQ.l #$00,D0
0005B69E <PED.ab2@20247>   RTS
0005B6A4 <PED.ab2@20250>   CLR.b macro_
0005B6AA <PED.ab2@20251>   MOVEA.l comPtr_CurrentSourceLine,A0
0005B6AE <PED.ab2@20252>   LEA $9(A0),A0
0005B6B0 <PED.ab2@20253>   MOVE.l A1,-(A7)
0005B6B6 <PED.ab2@20254>   MOVEA.l expandstore,A1
0005B6B8 <PED.ab2@20255>   MOVEQ #120/4,d0
0005B6BA <PED.ab2@20257>     CLR.l (a1)+
0005B6BE <PED.ab2@20258>   DBF d0,'lo
0005B6C4 <PED.ab2@20260>   MOVEA.l expandstore,A1
0005B6CA <PED.ab2@20261>   JSR detokenize_line
0005B6D0 <PED.ab2@20262>   MOVEA.l expandstore,A0
0005B6D2 <PED.ab2@20263>   MOVE.l (A7)+,A1
0005B6D4 <PED.ab2@20264>   MOVEQ.l #$00,D1
0005B6DA <PED.ab2@20265>   MOVE.w comWord_Column,D1
0005B6E0 <PED.ab2@20266>   ADD.w comWord_ColumnsOffset,D1
0005B6E2 <PED.ab2@20268>   ADDA.l D1,A0
0005B6E4 <PED.ab2@20271>     TST.w D1
0005B6E8 <PED.ab2@20272>      BMI.w JL_0_ED14
0005B6EA <PED.ab2@20273>     MOVE.b (A0),D0
0005B6EE <PED.ab2@20274>     CMP.b #"!",d0
0005B6F2 <PED.ab2@20275>     BNE 'l1
0005B6FA <PED.ab2@20276>     MOVE.b #1,macro_
0005B6FE <PED.ab2@20278>     CMP.b #"_",d0
0005B702 <PED.ab2@20279>      BEQ JL_0_ED0E
0005B706 <PED.ab2@20280>     CMP.b #"z",D0
0005B70A <PED.ab2@20281>      BGT.w JL_0_ED14
0005B70E <PED.ab2@20282>     CMP.b #"a",D0
0005B712 <PED.ab2@20283>      BGE.w JL_0_ED0E
0005B716 <PED.ab2@20284>     CMP.b #"Z",D0
0005B71A <PED.ab2@20285>      BGT.w JL_0_ED14
0005B71E <PED.ab2@20286>     CMP.b #"A",D0
0005B722 <PED.ab2@20287>      BGE.w JL_0_ED0E
0005B726 <PED.ab2@20288>     CMP.b #"9",D0
0005B72A <PED.ab2@20289>      BGT.w JL_0_ED14
0005B72E <PED.ab2@20290>     CMP.b #"0",D0
0005B732 <PED.ab2@20291>      BLT.w JL_0_ED14
0005B734 <PED.ab2@20294>     SUBQ.l #1,A0
0005B736 <PED.ab2@20295>     SUBQ.w #1,D1
0005B73A <PED.ab2@20296>   BRA.b JL_0_ECD6
0005B73C <PED.ab2@20299>   ADDQ.l #1,a0
0005B742 <PED.ab2@20300>   MOVE.w d1,replacestartcolumn
0005B744 <PED.ab2@20303>   MOVE.b (A0)+,D0
0005B748 <PED.ab2@20306>   CMP.b #"{",d0
0005B74C <PED.ab2@20307>   BEQ JL_0_ED46
0005B750 <PED.ab2@20308>   CMP.b #"_",d0
0005B754 <PED.ab2@20309>   BEQ JL_0_ED48
0005B758 <PED.ab2@20310>   CMP.b #"z",D0
0005B75C <PED.ab2@20311>    BGT.w JL_0_ED46
0005B760 <PED.ab2@20312>   CMP.b #"a",D0
0005B764 <PED.ab2@20313>    BGE.w JL_0_ED48
0005B768 <PED.ab2@20314>   CMP.b #"Z",D0
0005B76C <PED.ab2@20315>    BGT.w JL_0_ED46
0005B770 <PED.ab2@20316>   CMP.b #"A",D0
0005B774 <PED.ab2@20317>    BGE.w JL_0_ED48
0005B778 <PED.ab2@20318>   CMP.b #"9",D0
0005B77C <PED.ab2@20319>    BGT.w JL_0_ED46
0005B780 <PED.ab2@20320>   CMP.b #"0",D0
0005B784 <PED.ab2@20321>    BGE.w JL_0_ED48
0005B786 <PED.ab2@20324>   MOVEQ.l #$00,D0
0005B788 <PED.ab2@20327>   MOVE.b D0,(A1)+
0005B78A <PED.ab2@20328>   TST.b D0
0005B78E <PED.ab2@20329>   BNE.b JL_0_ED14b
0005B790 <PED.ab2@20330> RTS
0005B7A0 <PED.ab2@20334>   *textline.l = TEDGetCurrentLine{} + 9
0005B7AE <PED.ab2@20335>   *detokened.l = TEDDetoke{*textline}
0005B7D6 <PED.ab2@20336>   text$ = Peek$(*detokened)
0005B7E8 <PED.ab2@20337>   cursorpos.l = Peek.w(?comWord_Column)
0005B848 <PED.ab2@20338>   actualword$ = preproc_CropToken{*PreProcessor,text$,cursorpos}
0005B84A <PED.ab2@20339> RTS
0005B85A <PED.ab2@20346>   *textline.l = TEDGetCurrentLine{} + 9
0005B868 <PED.ab2@20347>   *detokened.l = TEDDetoke{*textline}
0005B890 <PED.ab2@20351>   text$ = Peek$(*detokened)
0005B8A8 <PED.ab2@20352>   cursorpos.l = Peek.w(?comWord_Column)+1
0005B8F8 <PED.ab2@20353>   aword$ = "" : char$ =""
0005B90C <PED.ab2@20354>   tlen = FLen(text$)
0005B912 <PED.ab2@20355>   nextpos.l = cursorpos
0005B920 <PED.ab2@20356>   backpos.l = cursorpos - 1
0005B972 <PED.ab2@20359>     aword$ = char$ + aword$
0005B9C8 <PED.ab2@20360>     char$ = Mid$(text$,backpos,1)
0005B9D6 <PED.ab2@20361>     backpos - 1
0005BB98 <PED.ab2@20362>   Until (char$=" ") OR (char$="(") OR (char$=")") OR (char$="{") OR (char$=Chr$(34)) OR (char$ = "{") OR (char$="}") OR (char$=",") OR (backpos<0)
0005BBC0 <PED.ab2@20363>   char$ = ""
0005BC12 <PED.ab2@20366>     aword$ = aword$ + char$
0005BC68 <PED.ab2@20367>     char$ = Mid$(text$,nextpos,1)
0005BC76 <PED.ab2@20368>     nextpos + 1
0005BE3C <PED.ab2@20369>   Until (char$=" ") OR (char$=")") OR (char$="(") OR (char$="}") OR (char$=Chr$(34)) OR (char$ = "{") OR (char$="}") OR (char$=",") OR (nextpos>(tlen+1))
0005BE70 <PED.ab2@20370>   actualword$ = aword$
0005BE72 <PED.ab2@20372> RTS
0005BE78 <PED.ab2@20375>   MOVEA.l ptr_tempstring,A1
0005BE7E <PED.ab2@20376>   MOVEA.l comPtr_CurrentSourceLine,A0
0005BE82 <PED.ab2@20377>   LEA $9(A0),A0
0005BE84 <PED.ab2@20378>   MOVE.l A1,-(A7)
0005BE8A <PED.ab2@20379>   MOVEA.l expandstore,A1
0005BE8C <PED.ab2@20380>   MOVEQ #120/4,d0
0005BE8E <PED.ab2@20382>     CLR.l (a1)+
0005BE92 <PED.ab2@20383>   DBF d0,'lo
0005BE98 <PED.ab2@20385>   MOVEA.l expandstore,A1
0005BE9E <PED.ab2@20386>   JSR detokenize_line
0005BEA4 <PED.ab2@20387>   MOVEA.l expandstore,A0
0005BEA6 <PED.ab2@20388>   MOVE.l (A7)+,A1
0005BEA8 <PED.ab2@20389>   MOVEQ.l #$00,D1
0005BEAE <PED.ab2@20390>   MOVE.w comWord_Column,D1
0005BEB4 <PED.ab2@20391>   ADD.w comWord_ColumnsOffset,D1
0005BEB6 <PED.ab2@20393>   ADDA.l D1,A0
0005BEB8 <PED.ab2@20395>   MOVE.b (a0),d0
0005BEBC <PED.ab2@20396>   CMP.b #$22,d0
0005BEC0 <PED.ab2@20397>   BEQ 'x1
0005BEC2 <PED.ab2@20398>   SUBQ.l #1,A0
0005BEC4 <PED.ab2@20399>   SUBQ.w #1,D1
0005BEC6 <PED.ab2@20400>   TST.w d1
0005BECA <PED.ab2@20401>   BNE 'l1
0005BED0 <PED.ab2@20403>   MOVEA.l ptr_tempstring,A1
0005BED2 <PED.ab2@20404>   ADDQ.l #1,a0
0005BED4 <PED.ab2@20406>     MOVE.b (a0)+,d0
0005BED8 <PED.ab2@20407>     BEQ 'x2
0005BEDC <PED.ab2@20408>     CMP.b #$22,d0
0005BEE0 <PED.ab2@20409>     BEQ 'x2
0005BEE2 <PED.ab2@20410>     MOVE.b d0,(a1)+
0005BEE6 <PED.ab2@20411>   BRA 'l2
0005BEE8 <PED.ab2@20413>   CLR.b (a1)+
0005BEEE <PED.ab2@20414>   MOVEA.l ptr_tempstring,A0
0005BEF0 <PED.ab2@20415>   MOVEQ.l #$00,D0
0005BEF2 <PED.ab2@20416> RTS
0005BEF4 <PED.ab2@20421>   SUBA.l     A0,A0
0005BEF6 <PED.ab2@20422>   MOVEQ.l    #$01,D0
0005BEFC <PED.ab2@20423>   JSR        arexx_answer_message
0005BF02 <PED.ab2@20424>   ST         checked_arexxcmd
0005BF06 <PED.ab2@20426>   MOVEM.l    D2-D7/A1-A6,-(A7)
0005BF08 <PED.ab2@20427>   MOVEQ.l    #$50,D6
0005BF0E <PED.ab2@20428>   JSR        call_compilermenuitem
0005BF12 <PED.ab2@20429>   MOVEM.l    (A7)+,D2-D7/A1-A6
0005BF14 <PED.ab2@20430> RTS
0005BF16 <PED.ab2@20433>   SUBA.l     A0,A0
0005BF18 <PED.ab2@20434>   MOVEQ.l    #$01,D0
0005BF1C <PED.ab2@20435>   BSR.w      arexx_answer_message
0005BF22 <PED.ab2@20436>   ST         checked_arexxcmd
0005BF26 <PED.ab2@20437>   MOVEM.l    D2-D7/A1-A6,-(A7)
0005BF28 <PED.ab2@20438>   MOVEQ.l    #$51,D6
0005BF2E <PED.ab2@20439>   JSR        call_compilermenuitem
0005BF32 <PED.ab2@20440>   MOVEM.l    (A7)+,D2-D7/A1-A6
0005BF34 <PED.ab2@20441> RTS
0005BF36 <PED.ab2@20445>   SUBA.l     A0,A0
0005BF38 <PED.ab2@20446>   MOVEQ.l    #$01,D0
0005BF3C <PED.ab2@20447>   BSR.w      arexx_answer_message
0005BF42 <PED.ab2@20448>   ST         checked_arexxcmd
0005BF46 <PED.ab2@20449>   MOVEM.l    D2-D7/A1-A6,-(A7)
0005BF48 <PED.ab2@20450>   MOVEQ.l    ##MENU_CREATEEXE,D6
0005BF4E <PED.ab2@20451>   JSR        call_compilermenuitem
0005BF52 <PED.ab2@20452>   MOVEM.l    (A7)+,D2-D7/A1-A6
0005BF54 <PED.ab2@20453> RTS
0005BF58 <PED.ab2@20458>   MOVEM.l    A0-A4,-(A7)
0005BF5E <PED.ab2@20459>   MOVEA.l    comPtr_CurrentSourceLine,A4
0005BF62 <PED.ab2@20461>   MOVEM.l    (A7)+,A0-A4
0005BF64 <PED.ab2@20462>   MOVEQ.l    #$00,D0
0005BF66 <PED.ab2@20463>   SUBA.l     A0,A0
0005BF68 <PED.ab2@20464> RTS
0005BF6C <PED.ab2@20467>   MOVEM.l    A0-A4,-(A7)
0005BF72 <PED.ab2@20468>   MOVE.w     comWord_DoTokenize,D0
0005BF76 <PED.ab2@20469>   BEQ.w      JL_0_EE70
0005BF7C <PED.ab2@20470>   MOVEA.l    comPtr_CurrentSourceLine,A4
0005BF80 <PED.ab2@20471>   LEA        $9(A4),A4
0005BF86 <PED.ab2@20472>   MOVE.w     comWord_ColumnsOffset,D3
0005BF8C <PED.ab2@20473>   ADD.w      comWord_Column,D3
0005BF8E <PED.ab2@20474>   MOVEQ.l    #$00,D1
0005BF90 <PED.ab2@20475>   MOVEQ.l    #$00,D2
0005BF92 <PED.ab2@20478>   MOVEQ.l    #$00,D0
0005BF94 <PED.ab2@20479>   MOVE.b     (A4)+,D0
0005BF96 <PED.ab2@20480>   MOVE.b     (A4)+,D0
0005BF9A <PED.ab2@20481>   BEQ.w      JL_0_EE3E
0005BF9E <PED.ab2@20482>   BPL.w      JL_0_EE38
0005BFA0 <PED.ab2@20483>   LSL.w      #8,D0
0005BFA2 <PED.ab2@20484>   MOVE.b     (A4)+,D0
0005BFA8 <PED.ab2@20486>   JSR        token_to_ascii
0005BFAA <PED.ab2@20487>   MOVE.l     A3,D1
0005BFAC <PED.ab2@20490>   ADDQ.w     #1,D2
0005BFAE <PED.ab2@20491>   TST.b      (A3)+
0005BFB2 <PED.ab2@20492>   BNE.b      JL_0_EE2E
0005BFB4 <PED.ab2@20493>   MOVEA.l    A3,A2
0005BFB6 <PED.ab2@20494>   SUBQ.w     #2,D2
0005BFB8 <PED.ab2@20497>   ADDQ.w     #1,D2
0005BFBA <PED.ab2@20498>   CMP.w      D3,D2
0005BFBE <PED.ab2@20499>   BLS.b      JL_0_EE10
0005BFC0 <PED.ab2@20502>   TST.l      D1
0005BFC4 <PED.ab2@20503>   BEQ.w      JL_0_EE70
0005BFC6 <PED.ab2@20504>   MOVEA.l    D1,A0
0005BFCC <PED.ab2@20505>   MOVEA.l    ptr_tempstring,A1
0005BFCE <PED.ab2@20508>   MOVE.b     (A0)+,(A1)+
0005BFD2 <PED.ab2@20509>   BNE.b      JL_0_EE4C
0005BFD4 <PED.ab2@20510>   SUBQ.w     #1,A1
0005BFD8 <PED.ab2@20511>   CMPI.b     #$28,(A2)
0005BFDC <PED.ab2@20512>   BEQ.w      JL_0_EE5E
0005BFE0 <PED.ab2@20513>   MOVE.b     #$20,(A1)+
0005BFE2 <PED.ab2@20516>   MOVE.b     (A2)+,(A1)+
0005BFE6 <PED.ab2@20517>   BNE.b      JL_0_EE5E
0005BFEA <PED.ab2@20518>   MOVEM.l    (A7)+,A0-A4
0005BFEC <PED.ab2@20519>   MOVEQ.l    #$00,D0
0005BFF2 <PED.ab2@20520>   MOVEA.l    ptr_tempstring,A0
0005BFF4 <PED.ab2@20521> RTS
0005BFF6 <PED.ab2@20524>   SUBA.l     A0,A0
0005BFF8 <PED.ab2@20525>   MOVEQ.l    #$00,D0
0005BFFA <PED.ab2@20526> RTS
0005C024 <PED.ab2@20529>   !basic
0005C0E4 <PED.ab2@20530>   dummy = RTEZRequest("",!TRANS{"This AREXX command is not available anymore."},!TRANS{"Ok"})
0005C102 <PED.ab2@20531>   !asm
0005C104 <PED.ab2@20532>   MOVEQ.l #$00,D0
0005C106 <PED.ab2@20533> RTS
0005C130 <PED.ab2@20556>   !basic
0005C136 <PED.ab2@20557>   Gosub init_menus
0005C154 <PED.ab2@20558>   !asm
0005C156 <PED.ab2@20559>   SUBA.l  A0,A0
0005C158 <PED.ab2@20560>   MOVEQ.l #$00,D0
0005C15A <PED.ab2@20561> RTS
0005C15E <PED.ab2@20564> arexx_table:    Ds.l 1
0005C19A <PED.ab2@20565> AL_0_EEC6:      Ds.l 15
0005C1A8 <PED.ab2@20566> L_0_EF02:       Ds.w 7
0005C1AE <PED.ab2@20569>   MOVEA.l struct_RexxMsg,A1
0005C1B2 <PED.ab2@20570>   LEA $28(A1),A0              ; string: AREXX-Command
0005C1B8 <PED.ab2@20571>   LEA arexx_table,A1
0005C1BA <PED.ab2@20572>   MOVEQ.l #$00,D6
0005C1BE <PED.ab2@20575>   CMP.b #$10,D6
0005C1C2 <PED.ab2@20576>    BEQ.w exit_counting
0005C1C4 <PED.ab2@20578>   MOVEA.l (A0)+,A2
0005C1CA <PED.ab2@20579>   CMPA.l #$0,A2
0005C1CE <PED.ab2@20580>    BEQ.w exit_counting
0005C1D0 <PED.ab2@20583>   MOVEA.l (A1)+,A3
0005C1D2 <PED.ab2@20584>   MOVE.b (A2)+,D1
0005C1D6 <PED.ab2@20585>    BEQ.b JL_0_EF20
0005C1DA <PED.ab2@20586>   CMP.b #$22,D1
0005C1DE <PED.ab2@20587>    BEQ.w JL_0_EF74
0005C1E2 <PED.ab2@20588>   CMP.b #$27,D1
0005C1E6 <PED.ab2@20589>    BEQ.w JL_0_EF60
0005C1E8 <PED.ab2@20590>   ADDQ.w #1,D6
0005C1EA <PED.ab2@20591>   MOVE.b D1,(A3)+
0005C1EC <PED.ab2@20593>     MOVE.b (A2)+,D0
0005C1EE <PED.ab2@20594>     CLR.b (A3)
0005C1F0 <PED.ab2@20595>     TST.b D0
0005C1F4 <PED.ab2@20596>      BEQ.b JL_0_EF28
0005C1F8 <PED.ab2@20597>     CMP.b #$20,D0
0005C1FC <PED.ab2@20598>      BEQ.b JL_0_EF34
0005C1FE <PED.ab2@20599>     MOVE.b D0,(A3)+
0005C202 <PED.ab2@20600>   BRA.b JL_0_EF4E
0005C204 <PED.ab2@20603>   ADDQ.w #1,D6
0005C206 <PED.ab2@20606>     MOVE.b (A2)+,D0
0005C208 <PED.ab2@20607>     CLR.b (A3)
0005C20A <PED.ab2@20608>     TST.b D0
0005C20E <PED.ab2@20609>      BEQ.b JL_0_EF28
0005C212 <PED.ab2@20610>     CMP.b #$22,D0
0005C216 <PED.ab2@20611>      BEQ.b JL_0_EF34
0005C218 <PED.ab2@20612>     MOVE.b D0,(A3)+
0005C21C <PED.ab2@20613>   BRA.b JL_0_EF62
0005C21E <PED.ab2@20616>   ADDQ.w #1,D6
0005C220 <PED.ab2@20619>     MOVE.b (A2)+,D0
0005C222 <PED.ab2@20620>     CLR.b (A3)
0005C224 <PED.ab2@20621>     TST.b D0
0005C228 <PED.ab2@20622>      BEQ.b JL_0_EF28
0005C22C <PED.ab2@20623>     CMP.b #$22,D0
0005C230 <PED.ab2@20624>      BEQ.b JL_0_EF34
0005C232 <PED.ab2@20625>     MOVE.b D0,(A3)+
0005C236 <PED.ab2@20626>   BRA.b JL_0_EF76
0005C23C <PED.ab2@20629>   MOVE.w D6,arexx_number_of_parameters
0005C23E <PED.ab2@20630> RTS
0005C268 <PED.ab2@21031>   !basic
0005C2BE <PED.ab2@21032>   If Peek.l(Addr Window(WZID("WIN_PRINT")))=0
0005C368 <PED.ab2@21033>     WZWindow WZID("WIN_PRINT"),0,128,-2,-2,-2,-2,WZID("WIN_PRINT")
0005C3A2 <PED.ab2@21034>     Use Window WZID("WIN_PRINT")
0005C3A8 <PED.ab2@21035>     exit_print.b = False
0005C3B2 <PED.ab2@21037>       !ev_WaitEvent
0005C3B8 <PED.ab2@21038>       Select ev
0005C3C6 <PED.ab2@21039>       Case #IDCMP_CLOSEWINDOW
0005C3CC <PED.ab2@21040>         exit_print = True
0005C3E0 <PED.ab2@21041>       Case #IDCMP_IDCMPUPDATE
0005C408 <PED.ab2@21042>         Select WZGadName
0005C42C <PED.ab2@21043>         Case "PRINT_CANCEL"
0005C432 <PED.ab2@21044>           exit_print = True
0005C45C <PED.ab2@21045>         Case "PRINT_PRINT"
0005C4B8 <PED.ab2@21046>           Poke.s ?str_printerdevice,WZGetString("PRINT_DEVICE")
0005C4D6 <PED.ab2@21047>           !asm
0005C4DC <PED.ab2@21048>           JSR printout_source
0005C506 <PED.ab2@21049>           !basic
0005C50C <PED.ab2@21050>           exit_print = True
0005C51A <PED.ab2@21051>         End Select
0005C51C <PED.ab2@21052>       End Select
0005C536 <PED.ab2@21053>     Until exit_print = True
0005C56E <PED.ab2@21054>     WZCloseWindow WZID("WIN_PRINT")
0005C58C <PED.ab2@21057>   !asm
0005C58E <PED.ab2@21058> RTS
0005C594 <PED.ab2@21061>   MOVE.l #str_printerdevice,D1
0005C59A <PED.ab2@21062>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
0005C5A0 <PED.ab2@21063>   MOVEA.l _dosbase,A6
0005C5A4 <PED.ab2@21064>    JSR _Open(A6)
0005C5A6 <PED.ab2@21065>   MOVE.l D0,D7
0005C5AA <PED.ab2@21066>    BEQ.w JL_0_F5F4
0005C5B0 <PED.ab2@21067>    CLR.b instring
0005C5B6 <PED.ab2@21068>   MOVE.l comLong_TotalLines,D6
0005C5BC <PED.ab2@21069>   MOVEA.l comPtr_FirstSourceLine,A4
0005C5C2 <PED.ab2@21072>     MOVEA.l comPtr_Temp_TokenString1,A0
0005C5C6 <PED.ab2@21073>     LEA $9(A4),A1
0005C5C8 <PED.ab2@21074>     MOVE.l A0,D2
0005C5CA <PED.ab2@21077>       MOVE.b (A1)+,(A0)+
0005C5CE <PED.ab2@21078>       BEQ.w JL_0_F5D8
0005C5D4 <PED.ab2@21079>       CMP.b #$22,-1(a0)
0005C5D8 <PED.ab2@21080>       BNE 'l1
0005C5DE <PED.ab2@21081>       NOT.b instring
0005C5E2 <PED.ab2@21083>       TST.b -1(a0)
0005C5E6 <PED.ab2@21084>       BPL.b JL_0_F598
0005C5EC <PED.ab2@21085>       TST.b instring
0005C5F0 <PED.ab2@21086>       BNE JL_0_F598
0005C5F2 <PED.ab2@21088>       MOVE.b -(A0),D0
0005C5F4 <PED.ab2@21089>       LSL.w #8,D0
0005C5F6 <PED.ab2@21090>       MOVE.b (A1)+,D0
0005C5FA <PED.ab2@21091>       MOVE.b #$1B,(A0)+
0005C5FE <PED.ab2@21092>       MOVE.b #"[",(A0)+
0005C602 <PED.ab2@21093>       MOVE.b #"1",(A0)+
0005C606 <PED.ab2@21094>       MOVE.b #"m",(A0)+
0005C60C <PED.ab2@21095>       JSR token_to_ascii
0005C60E <PED.ab2@21098>       MOVE.b (A3)+,(A0)+
0005C612 <PED.ab2@21099>       BNE.b JL_0_F5BC
0005C618 <PED.ab2@21100>       MOVE.b #$1B,-$1(A0)
0005C61C <PED.ab2@21101>       MOVE.b #"[",(A0)+
0005C620 <PED.ab2@21102>       MOVE.b #"2",(A0)+
0005C624 <PED.ab2@21103>       MOVE.b #"2",(A0)+
0005C628 <PED.ab2@21104>       MOVE.b #"m",(A0)+
0005C62C <PED.ab2@21105>     BRA.b JL_0_F598
0005C632 <PED.ab2@21108>     MOVE.b #$A,-$1(A0)
0005C634 <PED.ab2@21109>     MOVE.l A0,D3
0005C636 <PED.ab2@21110>     SUB.l D2,D3
0005C638 <PED.ab2@21111>     MOVE.l D7,D1
0005C63C <PED.ab2@21112>     JSR _Write(A6)
0005C63E <PED.ab2@21113>     MOVEA.l (A4),A4
0005C640 <PED.ab2@21114>     SUBQ.l #1,D6
0005C644 <PED.ab2@21115>   BNE.b JL_0_F58E
0005C646 <PED.ab2@21116>   MOVE.l D7,D1
0005C64A <PED.ab2@21117>   JSR _Close(A6)
0005C64C <PED.ab2@21119> RTS
0005C652 <PED.ab2@21125>   TST.w use_pubscreen
0005C656 <PED.ab2@21126>    BEQ.w JL_0_FB72
0005C65C <PED.ab2@21127>   TST.w use_default_pubscreen
0005C660 <PED.ab2@21128>    BEQ.w JL_0_FB72
0005C666 <PED.ab2@21129>   MOVEA.l _intuibase,A6
0005C66C <PED.ab2@21130>   LEA str_defaultpubscreen,A0
0005C670 <PED.ab2@21131>   JSR _SetDefaultPubScreen(A6)
0005C672 <PED.ab2@21134>   MOVE d6,-(a7)
0005C69C <PED.ab2@21135>   !basic
0005C6A8 <PED.ab2@21136>   MOVE (a7)+,D0 : id_menuitem.w = PutD0 - $258
0005C6B6 <PED.ab2@21137>   If id_menuitem = 1
0005C6BC <PED.ab2@21138>     Gosub open_menueditor
0005C6C2 <PED.ab2@21139>     Gosub init_menus
0005C6C8 <PED.ab2@21140>   Else
0005C6DA <PED.ab2@21141>     If FirstItem(custommenu())
0005C6E2 <PED.ab2@21142>       menuentry = 1
0005C6FA <PED.ab2@21143>       While id_menuitem > menuentry
0005C708 <PED.ab2@21144>         dummy = NextItem(custommenu())
0005C716 <PED.ab2@21145>         menuentry + 1
0005C71C <PED.ab2@21146>       Wend
0005C75E <PED.ab2@21147>       If custommenu()\command = ""
0005C822 <PED.ab2@21148>         dummy = RTEZRequest("",custommenu()\itemname+" "+!TRANS{"has no assigned command."},"_Ok")
0005C828 <PED.ab2@21149>       Else
0005C858 <PED.ab2@21150>         Execute_ &custommenu()\command,0,0
0005C876 <PED.ab2@21154>   !asm
0005C878 <PED.ab2@21155> RTS
0005C8A6 <PED.ab2@21158>   If NOT WZ_CheckOpen{"WIN_MENUED"}
0005C952 <PED.ab2@21159>     WZWindow WZID("WIN_MENUED"),?wzgui,255,-2,-2,-2,-2,WZID("WIN_MENUED")
0005C964 <PED.ab2@21163>   If FirstItem(custommenu())
0005C9A4 <PED.ab2@21165>       WZListAdd menuedlist,custommenu()\itemname,-2
0005C9B8 <PED.ab2@21166>     Until NOT NextItem(custommenu())
0005C9FE <PED.ab2@21168>   WZPrint "MENUED_LIST",0,menuedlist
0005CA04 <PED.ab2@21169>   menued_exit.b = False
0005CA0E <PED.ab2@21171>     menued_ev.l = WaitEvent
0005CA14 <PED.ab2@21172>     Select menued_ev
0005CA22 <PED.ab2@21173>     Case #IDCMP_CLOSEWINDOW
0005CA28 <PED.ab2@21174>       menued_exit = True
0005CA3C <PED.ab2@21175>     Case #IDCMP_IDCMPUPDATE
0005CA64 <PED.ab2@21176>       Select WZGadName
0005CA8E <PED.ab2@21177>       Case "MENUED_EXIT" : menued_exit = True
0005CAC2 <PED.ab2@21178>       Case "MENUED_LIST" : selected_item.b = WZInput
0005CAC8 <PED.ab2@21179>         item_counter.b = 0
0005CAD2 <PED.ab2@21180>         ResetList custommenu()
0005CB04 <PED.ab2@21181>         While (item_counter < selected_item) AND NextItem(custommenu())
0005CB12 <PED.ab2@21182>           item_counter + 1
0005CB18 <PED.ab2@21183>         Wend
0005CB2C <PED.ab2@21184>         If item_counter = selected_item
0005CB96 <PED.ab2@21185>           WZPrint "MENUED_ITEMNAME",custommenu()\itemname
0005CC04 <PED.ab2@21186>           WZPrint "MENUED_COMMAND",custommenu()\command
0005CC12 <PED.ab2@21188>       End Select
0005CC14 <PED.ab2@21189>     End Select
0005CC2E <PED.ab2@21190>   Until menued_exit = True
0005CC3A <PED.ab2@21192>   WZListRemove menuedlist
0005CC72 <PED.ab2@21193>   WZCloseWindow WZID("WIN_MENUED")
0005CC74 <PED.ab2@21194> Return
0005CC76 <PED.ab2@21198>   MOVEA.l D0,A0
0005CC78 <PED.ab2@21199>   CLR.l (A0)
0005CC7C <PED.ab2@21200>   CLR.l $4(A0)
0005CC80 <PED.ab2@21201>   MOVE.b D5,$8(A0)
0005CC82 <PED.ab2@21202> RTS
0005CC84 <PED.ab2@21205>   MOVEQ #0,d0
0005CC88 <PED.ab2@21206>   TST.l 4(a4)
0005CC8C <PED.ab2@21207>   BEQ 'l20
0005CC90 <PED.ab2@21209>     MOVE.l 4(a4),a4
0005CC92 <PED.ab2@21210>     ADDQ.l #1,d0
0005CC96 <PED.ab2@21211>     TST.l 4(a4)
0005CC9A <PED.ab2@21212>   BNE 'l10
0005CC9C <PED.ab2@21215> RTS
0005CCA0 <PED.ab2@21218>   TST.l 4(a4)
0005CCA4 <PED.ab2@21219>   BEQ 'l20
0005CCA8 <PED.ab2@21220>   MOVE.l 4(a4),a4
0005CCAA <PED.ab2@21221>   MOVE.l a4,d0
0005CCAC <PED.ab2@21222>   RTS
0005CCAE <PED.ab2@21225>   MOVEQ #0,d0
0005CCB0 <PED.ab2@21226> RTS
0005CCB4 <PED.ab2@21230>   MOVEM.l a0/d1,-(a7)
0005CCBA <PED.ab2@21231>   LEA history,a0
0005CCBC <PED.ab2@21232>    MOVEQ #0,d1
0005CCC2 <PED.ab2@21233>   MOVE.w historypointer,d1
0005CCC8 <PED.ab2@21234>   MOVE.l comLong_DisplayLineOffset,d0
0005CCCE <PED.ab2@21235>   ADD.l comLong_DisplayLine,d0
0005CCD2 <PED.ab2@21236>   MOVE.l d0,0(a0,d1)
0005CCD4 <PED.ab2@21237>   ADDQ.w #4,d1
0005CCD8 <PED.ab2@21238>   CMP.w  #maxhistory,d1
0005CCDC <PED.ab2@21239>   BLE 'nowrap
0005CCDE <PED.ab2@21240>   MOVEQ #0,d1
0005CCE4 <PED.ab2@21242>   MOVE.w d1,historypointer
0005CCE8 <PED.ab2@21243>   MOVEM.l (a7)+,a0/d1
0005CCEA <PED.ab2@21244> RTS
0005CCEC <PED.ab2@21247>   MOVE.l a1,-(a7)
0005CCF2 <PED.ab2@21248>   JSR storeline
0005CCF8 <PED.ab2@21249>   LEA history,a0
0005CCFE <PED.ab2@21250>   MOVE.w historypointer,d1
0005CD00 <PED.ab2@21251>   SUBQ #4,d1
0005CD04 <PED.ab2@21252>   BPL 'l10
0005CD06 <PED.ab2@21253>   MOVEQ #maxhistory,d1
0005CD0C <PED.ab2@21255>   MOVE.w d1,historypointer
0005CD10 <PED.ab2@21256>   MOVE.l 0(a0,d1.w),d0
0005CD16 <PED.ab2@21257>   JSR jumpline
0005CD18 <PED.ab2@21258>   MOVE.l (a7)+,a1
0005CD1A <PED.ab2@21259> RTS
0005CD1C <PED.ab2@21262>   MOVE.l a1,-(a7)
0005CD22 <PED.ab2@21263>   JSR storeline
0005CD28 <PED.ab2@21264>   LEA history,a0
0005CD2E <PED.ab2@21265>   MOVE.w historypointer,d1
0005CD30 <PED.ab2@21266>   ADDQ #4,d1
0005CD34 <PED.ab2@21267>   CMP.w #maxhistory,d1
0005CD38 <PED.ab2@21268>   BLE 'l10
0005CD3A <PED.ab2@21269>   MOVEQ #0,d1
0005CD40 <PED.ab2@21271>   MOVE.w d1,historypointer
0005CD44 <PED.ab2@21272>   MOVE.l 0(a0,d1.w),d0
0005CD4A <PED.ab2@21273>   JSR jumpline
0005CD4C <PED.ab2@21274>   MOVE.l (a7)+,a1
0005CD4E <PED.ab2@21275> RTS
0005CD52 <PED.ab2@21278>   MOVEM.l d2-d7/a1/a5-a6,-(a7)
0005CD58 <PED.ab2@21279>   MOVEA.l comPtr_CurrentSourceLine,A4
0005CD5E <PED.ab2@21280>   MOVE.l a4,olda4
0005CD64 <PED.ab2@21281>   CLR.b foundf2
0005CD66 <PED.ab2@21283>   MOVE.b (a4)+,d0
0005CD6A <PED.ab2@21284>    BEQ 'ex1
0005CD6E <PED.ab2@21285>   CMP.b #"{",d0
0005CD72 <PED.ab2@21286>    BNE 'lp1
0005CD7A <PED.ab2@21287>   MOVE.b #1,foundf2
0005CD80 <PED.ab2@21289>   MOVEA.l comPtr_CurrentSourceLine,A4
0005CD86 <PED.ab2@21290>   JSR arexxfunc_getword
0005CD8C <PED.ab2@21291>   JSR reset_currsourceline
0005CD92 <PED.ab2@21292>   JSR jump_addhistory
0005CD9C <PED.ab2@21293>   MOVE.l #0,clickjump_fromfile ; in-same-file search first
0005CD9E <PED.ab2@21295>   MOVEQ #0,d3
0005CDA4 <PED.ab2@21297>     CLR.b foundf
0005CDA8 <PED.ab2@21298>     LEA 9(a4),a0
0005CDAE <PED.ab2@21299>     CMP.l olda4,a4
0005CDB2 <PED.ab2@21300>     BEQ 'nextline
0005CDB6 <PED.ab2@21302>       CMP.b #" ",(a0)
0005CDBA <PED.ab2@21303>       BNE 'l5b
0005CDBC <PED.ab2@21304>       ADDQ.l #1,a0
0005CDC0 <PED.ab2@21305>       BRA 'l5
0005CDC4 <PED.ab2@21307>       CMP.w #$8008,(a0)
0005CDC8 <PED.ab2@21308>       BNE 'nostatement
0005CDD0 <PED.ab2@21309>       MOVE.b #1,foundf
0005CDD2 <PED.ab2@21310>       ADDQ.w #2,a0
0005CDD6 <PED.ab2@21311>     BRA 'l5
0005CDDA <PED.ab2@21314>     CMP.w #$8009,(a0)
0005CDDE <PED.ab2@21315>     BNE 'nofunction
0005CDE6 <PED.ab2@21316>     MOVE.b #1,foundf
0005CDE8 <PED.ab2@21317>     ADDQ.w #2,a0
0005CDEC <PED.ab2@21318>     CMP.b #".",(a0)
0005CDF0 <PED.ab2@21319>     BNE 'nod
0005CDF2 <PED.ab2@21320>     ADDQ.l #2,a0
0005CE00 <PED.ab2@21321>     !skipspace a0
0005CE04 <PED.ab2@21323>     BRA 'l5
0005CE08 <PED.ab2@21326>     CMP.w #$800d,(a0)
0005CE0C <PED.ab2@21327>     BNE 'nomacro
0005CE14 <PED.ab2@21328>     MOVE.b #1,foundf
0005CE16 <PED.ab2@21329>     ADDQ.w #2,a0
0005CE1A <PED.ab2@21330>     BRA 'l5
0005CE1E <PED.ab2@21333>     CMP.b #".",(a0)
0005CE22 <PED.ab2@21334>     BNE 'l100
0005CE24 <PED.ab2@21335>     ADDQ #1,a0
0005CE28 <PED.ab2@21337>       CMP.b #" ",(a0)
0005CE2C <PED.ab2@21338>       BNE 'l51b
0005CE2E <PED.ab2@21339>       ADDQ.l #1,a0
0005CE32 <PED.ab2@21340>     BRA 'l51
0005CE34 <PED.ab2@21344>     TST.b (a0)
0005CE38 <PED.ab2@21345>     BEQ 'nextline
0005CE3E <PED.ab2@21346>     CMP.l #"FAST",(a0)
0005CE42 <PED.ab2@21347>     BNE 'la1
0005CE44 <PED.ab2@21348>     ADDQ.l #4,a0
0005CE52 <PED.ab2@21349>     !skipspace a0
0005CE58 <PED.ab2@21351>     MOVE.l ptr_tempstring,a1
0005CE5A <PED.ab2@21353>     CMPM.b (a0)+,(a1)+
0005CE5E <PED.ab2@21354>     BNE 'nextline
0005CE60 <PED.ab2@21355>     TST.b (a1)
0005CE64 <PED.ab2@21356>      BNE 'l1
0005CE6A <PED.ab2@21357>     TST.w foundf2
0005CE6E <PED.ab2@21358>      BEQ 'lb2
0005CE74 <PED.ab2@21359>     TST.w foundf
0005CE78 <PED.ab2@21360>      BEQ 'nextline
0005CE7C <PED.ab2@21362>     CMP.b #" ",(a0)
0005CE80 <PED.ab2@21363>      BEQ 'do
0005CE84 <PED.ab2@21364>     CMP.b #";",(a0)
0005CE88 <PED.ab2@21365>      BEQ 'do
0005CE8C <PED.ab2@21366>     CMP.b #":",(a0)
0005CE90 <PED.ab2@21367>      BEQ 'do
0005CE94 <PED.ab2@21368>     CMP.b #"{",(a0)
0005CE98 <PED.ab2@21369>      BEQ 'do
0005CE9A <PED.ab2@21370>     TST.b (a0)
0005CE9E <PED.ab2@21371>      BNE 'nextline
0005CEA0 <PED.ab2@21373>     MOVE.l d3,d0
0005CEA6 <PED.ab2@21374>     JSR jumpline
0005CEAA <PED.ab2@21375>     MOVEM.l (a7)+,d2-d7/a1/a5-a6
0005CEAC <PED.ab2@21377>     RTS
0005CEAE <PED.ab2@21380>     TST.l (a4)
0005CEB2 <PED.ab2@21381>     BEQ 'l20
0005CEB4 <PED.ab2@21382>     ADDQ.l #1,d3
0005CEB6 <PED.ab2@21383>     MOVE.l (a4),a4
0005CEBA <PED.ab2@21384>   BRA begin_search
0005CEC0 <PED.ab2@21387>   TST.l clickjump_fromfile
0005CEC4 <PED.ab2@21388>   BNE clickjump_exit
0005CECE <PED.ab2@21389>   MOVE.l #1,clickjump_fromfile
0005CED4 <PED.ab2@21391>   JSR set_pointerbusy
0005CEFE <PED.ab2@21392>   !basic
0005CF0A <PED.ab2@21394>   TEDSetCurrentLine{?comPtr_CurrentSourceLine}
0005CF10 <PED.ab2@21395>   Gosub getstring_new2
0005CF68 <PED.ab2@21396>   word1$ = dos_Trim{actualword$}
0005CF6E <PED.ab2@21436>   found.l = False
0005CFA6 <PED.ab2@21437>   If word1$><""
0005CFB0 <PED.ab2@21438>     ResetList HelpIndexCache()
0005CFD0 <PED.ab2@21439>     While NextItemFast(HelpIndexCache()) AND found=False
0005D066 <PED.ab2@21440>       If word1$=HelpIndexCache()\name OR word1$=HelpIndexCache()\includefile
0005D0F0 <PED.ab2@21441>         temp_filename$ = dos_AddPart{includedir$,HelpIndexCache()\includefile}
0005D0F6 <PED.ab2@21442>         found=True
0005D0FC <PED.ab2@21444>         GetD0 &temp_filename$
0005D11A <PED.ab2@21445>         !asm
0005D120 <PED.ab2@21446>         JSR loadfile
0005D126 <PED.ab2@21447>         JSR update_vertscroller
0005D12C <PED.ab2@21448>         JSR update_statusline
0005D132 <PED.ab2@21449>         JSR set_pointernormal
0005D15C <PED.ab2@21450>         !basic
0005D162 <PED.ab2@21452>     Wend
0005D16C <PED.ab2@21455>   If found
0005D18A <PED.ab2@21456>     !asm
0005D190 <PED.ab2@21458>     MOVEA.l comPtr_CurrentSourceLine,A4
0005D196 <PED.ab2@21459>     JSR reset_currsourceline
0005D198 <PED.ab2@21460>     MOVEQ #0,D3
0005D19C <PED.ab2@21461>     BRA begin_search
0005D1C6 <PED.ab2@21462>     !basic
0005D1E4 <PED.ab2@21465>   !asm
0005D1EA <PED.ab2@21467>   JSR set_pointernormal
0005D1F0 <PED.ab2@21468>   MOVE.l olda4,a4
0005D1F4 <PED.ab2@21469>   MOVEM.l (a7)+,d2-d7/a1/a5-a6
0005D1F6 <PED.ab2@21470> RTS
0005D1FA <PED.ab2@21472> clickjump_fromfile: Dc.l 0
0005D200 <PED.ab2@21475>   CMP.l comLong_TotalLines,d0
0005D204 <PED.ab2@21476>   BGE 'ret
0005D20A <PED.ab2@21477>   MOVEA.l comPtr_CurrentSourceLine,A4
0005D210 <PED.ab2@21478>   JSR cursor_off
0005D216 <PED.ab2@21479>   CLR.w comWord_Column
0005D21C <PED.ab2@21480>   CLR.w comWord_ColumnsOffset
0005D222 <PED.ab2@21481>   JSR gotoline
0005D228 <PED.ab2@21484>   JSR update_vertscroller
0005D22A <PED.ab2@21488> RTS
0005D22C <PED.ab2@21491>   MOVE.l a0,d0
0005D256 <PED.ab2@21492>   !basic
0005D268 <PED.ab2@21493>   If diag.l = 0
0005D320 <PED.ab2@21494>     WZWindow WZID("WIN_HELPDIAG"),?wzgui,80,wtemp\diag_x,wtemp\diag_y,wtemp\diag_w,wtemp\diag_h,WZID("WIN_HELPDIAG")
0005D328 <PED.ab2@21495>     diag = 1
0005D32E <PED.ab2@21497>   Gosub diag_redraw
0005D34C <PED.ab2@21499>   !asm
0005D34E <PED.ab2@21500> RTS
0005D362 <PED.ab2@21504>   If diag = 0 Then Return
0005D368 <PED.ab2@21506>   Gosub getstring_new2   ; getstring_new2 should be better (uses preprocessor)
0005D39C <PED.ab2@21507>   w$ = actualword$
0005D3D0 <PED.ab2@21508>   tokname$ = actualword$
0005D3F8 <PED.ab2@21509>   res$ = ""
0005D400 <PED.ab2@21510>   MOVE.l comPtr_TokenBase,token@(a5)
0005D40A <PED.ab2@21511>   While token.l
0005D438 <PED.ab2@21512>     b$ = Peek$(token+6)
0005D47C <PED.ab2@21513>     If b$ = w$
0005D4E4 <PED.ab2@21514>       res$ = Peek$(token+7+Len(b$))
0005D530 <PED.ab2@21515>       i = Instr(res$,";")
0005D58A <PED.ab2@21516>       If i Then res$ = Left$(res$,i)
0005D598 <PED.ab2@21518>     token = Peek.l(token)
0005D59E <PED.ab2@21519>   Wend
0005D5D6 <PED.ab2@21520>   If res$ = ""
0005D5E0 <PED.ab2@21521>     MOVE.l comPtr_MacroBase,a0:MOVE.l (a0),token@(a5)
0005D5E8 <PED.ab2@21522>     c.l = 0
0005D5F2 <PED.ab2@21523>     While token
0005D620 <PED.ab2@21524>       b$ = Peek$(token+13)
0005D664 <PED.ab2@21525>       If b$ = w$
0005D67A <PED.ab2@21526>         i = Peek.w(token+8)
0005D694 <PED.ab2@21527>         If i>100 Then i = 100
0005D6CA <PED.ab2@21528>         res$ = Peeks$(Peek.l(token+4),i)
0005D748 <PED.ab2@21529>         res$ = Replace$(res$,";","")
0005D794 <PED.ab2@21530>         i = Instr(res$,"}")
0005D7EE <PED.ab2@21531>         If i Then res$ = Left$(res$,i)
0005D7FC <PED.ab2@21533>       token = Peek.l(token)
0005D802 <PED.ab2@21534>     Wend
0005D812 <PED.ab2@21536>   addcodesize.l = 0:linesize.l = 0
0005D84A <PED.ab2@21537>   If res$<>""
0005D884 <PED.ab2@21538>        Use Window WZID("WIN_HELPDIAG")
0005D8E8 <PED.ab2@21539>        tokname$ + "   " + res$
0005D922 <PED.ab2@21540>        WZPrint "DIAG_TOKEN",&tokname$
0005D94E <PED.ab2@21541>        InitArgParse res$
0005D978 <PED.ab2@21542>        For i =  1 To 12
0005D9A8 <PED.ab2@21543>        diag_lab$(i) = NextArgChar$ (@",")
0005DA52 <PED.ab2@21544>        If diag_lab$(i) = "[" Then i = i-1:diag_lab$(i)+"["
0005DABC <PED.ab2@21545>        WZPrint "lab"+UStr$(i),&diag_lab$(i)
0005DAEC <PED.ab2@21546>        diag_val$(i) = ""
0005DB56 <PED.ab2@21547>        WZPrint "val"+UStr$(i),&diag_val$(i)
0005DB66 <PED.ab2@21548>        Next
0005DB6E <PED.ab2@21549>        linesize.l = 0
0005DB74 <PED.ab2@21550>        MOVEA.l textbufferaddr,A0
0005DB7A <PED.ab2@21551>        ADDA.w comWord_TextBufferOffset,A0
0005DB7C <PED.ab2@21552>        MOVE.l a0,a1
0005DB82 <PED.ab2@21553>        ADD.w comWord_MaxColumns,a1
0005DB84 <PED.ab2@21554>        SUBQ.l #1,a1
0005DB88 <PED.ab2@21555> 's2    CMP.b #" ",(a1)
0005DB8C <PED.ab2@21556>        BNE 's1
0005DB8E <PED.ab2@21557>        SUBQ.l #1,a1
0005DB90 <PED.ab2@21558>        CMP.l a0,a1
0005DB94 <PED.ab2@21559>        BNE 's2
0005DB96 <PED.ab2@21560> 's1    SUB.l a0,a1
0005DB98 <PED.ab2@21561>        MOVE.l a1,d1
0005DB9C <PED.ab2@21562>        MOVE.l d1,linesize@(a5)
0005DBA2 <PED.ab2@21565>        MOVE.w comWord_Column,d0
0005DBA6 <PED.ab2@21566>        BEQ 'l3
0005DBAC <PED.ab2@21567> 'l1    CMP.b #" ",0(a0,d0)
0005DBB0 <PED.ab2@21568>        BEQ 'l2
0005DBB6 <PED.ab2@21569>        CMP.b #"{",0(a0,d0)
0005DBBA <PED.ab2@21570>        BEQ 'l2
0005DBBE <PED.ab2@21571>        TST.b 0(a0,d0)
0005DBC2 <PED.ab2@21572>        BMI 'l3
0005DBC4 <PED.ab2@21573>        ADDQ.w #1,d0
0005DBC8 <PED.ab2@21574>        BNE 'l1
0005DBCA <PED.ab2@21575> 'l3    ADDQ.w #1,d0
0005DBD0 <PED.ab2@21576>        CMP.b #":",0(a0,d0)
0005DBD4 <PED.ab2@21577>        BEQ 'q
0005DBDA <PED.ab2@21578>        CMP.b #";",0(a0,d0)
0005DBDE <PED.ab2@21579>        BEQ 'q
0005DBE0 <PED.ab2@21580>        CMP.w d1,d0
0005DBE4 <PED.ab2@21581>        BEQ 'q
0005DBEA <PED.ab2@21582>        CMP.b #" ",0(a0,d0)
0005DBEE <PED.ab2@21583>        BEQ 'l2
0005DBF4 <PED.ab2@21584>        CMP.b #"(",0(a0,d0)
0005DBF8 <PED.ab2@21585>        BEQ 'l2
0005DBFE <PED.ab2@21586>        CMP.b #"{",0(a0,d0)
0005DC02 <PED.ab2@21587>        BEQ 'l2
0005DC06 <PED.ab2@21588>        BRA 'l3
0005DC08 <PED.ab2@21589> 'q     RTS
0005DC0A <PED.ab2@21590> 'l2    ADD.l d0,a0
0005DC10 <PED.ab2@21591>        MOVE.l #MAX_Columns,d0
0005DC16 <PED.ab2@21592>        SUB.w comWord_Column,d0
0005DC18 <PED.ab2@21593>        SUBQ.l #1,d0
0005DC1C <PED.ab2@21594> 'la1   CMP.b #$20,(a0)+
0005DC20 <PED.ab2@21595>        BNE 'la2
0005DC22 <PED.ab2@21596>        SUBQ.l #1,d0
0005DC26 <PED.ab2@21597>        BNE 'la1
0005DC2A <PED.ab2@21598> 'la3   CMP.b #$20,-(a0)
0005DC2E <PED.ab2@21599>        BEQ 'la3
0005DC30 <PED.ab2@21600>        ADDQ.l #3,a0
0005DC32 <PED.ab2@21601> 'la2   MOVE.l a0,d0
0005DC3C <PED.ab2@21602>        addcodepos.l = PutD0-1
0005DC40 <PED.ab2@21603>        MOVE.l addcodepos@(a5),a0
0005DC42 <PED.ab2@21604>        SUBQ #2,a0
0005DC48 <PED.ab2@21605>        SUB.l textbufferaddr,A0
0005DC4E <PED.ab2@21606>        SUB.w comWord_TextBufferOffset,A0
0005DC50 <PED.ab2@21607>        MOVE.l a0,d0
0005DC54 <PED.ab2@21608>        SUB.l d0,linesize@(a5)
0005DC74 <PED.ab2@21609>        If linesize >1 Then linesize-1
0005DCDE <PED.ab2@21610>        If linesize >0 Then res$ = Peeks$(addcodepos,linesize):Else res$ = ""
0005DCEE <PED.ab2@21611>        i.l = 0:i2.l = 0
0005DD06 <PED.ab2@21613>        w.l = PeekUB(&res$+i)
0005DD2E <PED.ab2@21614>        If w = $22 Then i2 BitChg 0
0005DD40 <PED.ab2@21615>        If i2 = 0
0005DD76 <PED.ab2@21616>           If w>$80 Then Poke.b &res$+i,w BitClr 7
0005DDA8 <PED.ab2@21617>           If w = @";" OR w = @":" Then w = 0:
0005DDB6 <PED.ab2@21619>        i+1
0005DDCE <PED.ab2@21620>        Until w = 0
0005DDD4 <PED.ab2@21621>        addcodesize.l = i
0005DDFC <PED.ab2@21622>        addstr$ = ""
0005DE5C <PED.ab2@21623>        If i Then res$ = Left$(res$,i-1)
0005DF30 <PED.ab2@21624>        If Peek.b (&res$) = @"(" Then res$ = Right$(res$,Len(res$)-1):addstr$ = "("
0005E004 <PED.ab2@21625>        If Peek.b (&res$) = @"{" Then res$ = Right$(res$,Len(res$)-1):addstr$ = "{"
0005E030 <PED.ab2@21626> nopeek:  InitArgParse res$
0005E05A <PED.ab2@21627>        For i = 1 To 12
0005E0C0 <PED.ab2@21628>        diag_val$(i) = NextArgChar$(@",","{[(\\22",")]}\\22")
0005E170 <PED.ab2@21629>        If diag_lab$(i)<>"" Then WZPrint "val"+UStr$(i),&diag_val$(i)
0005E180 <PED.ab2@21630>        Next
0005E182 <PED.ab2@21632> RTS
0005E1AC <PED.ab2@21635>   !basic
0005E206 <PED.ab2@21636>   Request "debug","old newhelp routine called.","  Ok  "
0005E224 <PED.ab2@21637>   !asm
0005E226 <PED.ab2@21638> RTS
0005E22C <PED.ab2@21641>   MOVE.w comWord_Column,d1
0005E232 <PED.ab2@21642>   MOVE.w d1,columnstore
0005E234 <PED.ab2@21643>   SUBQ.w #2,d1
0005E238 <PED.ab2@21644>   BGT 'w1
0005E23A <PED.ab2@21645>   MOVEQ #1,d1
0005E240 <PED.ab2@21647>   MOVE.l textbufferaddr,a0
0005E246 <PED.ab2@21648>   ADD.w comWord_TextBufferOffset,a0
0005E248 <PED.ab2@21649>   MOVE.l a0,a1
0005E24A <PED.ab2@21650>   SUBQ.l #1,a1
0005E250 <PED.ab2@21651>   ADD.w comWord_Column,a0
0005E256 <PED.ab2@21652>   CMP.b #"\",-1(a0)
0005E25A <PED.ab2@21653>   BEQ typehelp1
0005E25E <PED.ab2@21654>   CMP.b #"\",(a0)
0005E262 <PED.ab2@21655>   BEQ typehelp2
0005E264 <PED.ab2@21657>   RTS
0005E266 <PED.ab2@21660>   SUBQ #1,a0
0005E26A <PED.ab2@21662>   CMP.b #$20,-(a0)
0005E26E <PED.ab2@21663>   BNE 't2b
0005E270 <PED.ab2@21664>   CMP.l a0,a1
0005E274 <PED.ab2@21665>   BNE typehelp2
0005E278 <PED.ab2@21667>   CMP.b #")",(a0)
0005E27C <PED.ab2@21668>   BNE 't2
0005E280 <PED.ab2@21670>   CMP.b #"(",-(a0)
0005E284 <PED.ab2@21671>   BEQ 't2c
0005E286 <PED.ab2@21672>   CMP.l a0,a1
0005E28A <PED.ab2@21673>   BNE 'rb
0005E28C <PED.ab2@21675>   SUBQ.l #1,a0
0005E290 <PED.ab2@21677>   CMP.b #"_",(a0)
0005E294 <PED.ab2@21678>   BEQ 'ok
0005E298 <PED.ab2@21679>   CMP.b #$30,(a0)
0005E29C <PED.ab2@21680>   BLT 'path
0005E2A0 <PED.ab2@21681>   CMP.b #":",(a0)
0005E2A4 <PED.ab2@21682>   BLT 'p2
0005E2A8 <PED.ab2@21683>   CMP.b #"A",(a0)
0005E2AC <PED.ab2@21684>   BLT 'path
0005E2B0 <PED.ab2@21686>   CMP.b #"z",(a0)
0005E2B4 <PED.ab2@21687>   BGT 'path
0005E2B6 <PED.ab2@21689>   MOVEQ #0,d0
0005E2BC <PED.ab2@21690>   LEA chartab,a1
0005E2BE <PED.ab2@21691>   ADDQ.l #1,a0
0005E2C0 <PED.ab2@21693>     MOVE.b -(a0),d0
0005E2C4 <PED.ab2@21694>     TST.b 0(a1,d0)
0005E2C8 <PED.ab2@21695>     BNE 'x
0005E2CC <PED.ab2@21696>   BRA 'x1
0005E2D0 <PED.ab2@21698>   CMP.b #"*",d0
0005E2D4 <PED.ab2@21699>   BEQ 'x1
0005E2D8 <PED.ab2@21700>   CMP.b #".",d0
0005E2DC <PED.ab2@21701>   BNE 't1
0005E2E2 <PED.ab2@21702>   MOVE.w d1,comWord_Column
0005E2E6 <PED.ab2@21703>   BSR arexxfunc_getword
0005E2F0 <PED.ab2@21704>   MOVE.w columnstore,comWord_Column
0005E2F4 <PED.ab2@21705>   BRA typehelp
0005E2F6 <PED.ab2@21707>   MOVE.l a2,-(a7)
0005E2FC <PED.ab2@21708>   LEA typestr,a2
0005E2FE <PED.ab2@21709>   ADDQ.l #1,a0
0005E300 <PED.ab2@21711>     MOVE.b (a0)+,d0
0005E304 <PED.ab2@21712>     TST.b 0(a1,d0)
0005E308 <PED.ab2@21713>     BNE 'xc
0005E30A <PED.ab2@21715>     MOVE.b d0,(a2)+
0005E30E <PED.ab2@21716>   BRA 'x111
0005E312 <PED.ab2@21718>   CMP.b #"*",d0
0005E316 <PED.ab2@21719>   BEQ 'x12
0005E318 <PED.ab2@21720>   CLR.b (a2)
0005E31E <PED.ab2@21721>   MOVE.l comPtr_CurrentSourceLine,a0
0005E324 <PED.ab2@21722>   JSR gettype
0005E326 <PED.ab2@21723>   TST.l d0
0005E32A <PED.ab2@21724>   BNE 'found
0005E330 <PED.ab2@21725>   JSR findvar
0005E332 <PED.ab2@21727>   MOVE.l (a7)+,a2
0005E338 <PED.ab2@21728>   LEA typestr,a0
0005E33C <PED.ab2@21729>   BRA typehelp
0005E342 <PED.ab2@21731>   MOVE.l comPtr_CurrentSourceLine,a0
0005E346 <PED.ab2@21733>   MOVE.l 4(a0),d0
0005E348 <PED.ab2@21735>   RTS
0005E34A <PED.ab2@21737>   MOVE.l d0,a0
0005E34E <PED.ab2@21738>   LEA 9(a0),a1
0005E350 <PED.ab2@21740>     MOVE.b (a1)+,d0
0005E354 <PED.ab2@21741>     BEQ 'nl
0005E358 <PED.ab2@21742>     CMP.b #$80,d0
0005E35C <PED.ab2@21743>     BNE 'l1
0005E35E <PED.ab2@21744>     MOVE.b (a1)+,d0
0005E362 <PED.ab2@21745>     CMP.b #$ca,d0            ;find usepath
0005E366 <PED.ab2@21746>   BNE 'l1
0005E36A <PED.ab2@21748>     CMP.b #$20,(a1)+
0005E36E <PED.ab2@21749>   BEQ 'u1
0005E370 <PED.ab2@21750>   MOVE.l a2,-(a7)
0005E372 <PED.ab2@21751>   MOVE.l a0,-(a7)
0005E378 <PED.ab2@21752>   LEA typestr,a0
0005E37E <PED.ab2@21753>   LEA chartab,a2
0005E380 <PED.ab2@21754>   MOVEQ #0,d0
0005E382 <PED.ab2@21755>   SUBQ.l #1,a1
0005E384 <PED.ab2@21757>   MOVE.b (a1)+,d0
0005E388 <PED.ab2@21758>   CMP.b #"*",d0
0005E38C <PED.ab2@21759>   BEQ 'do2
0005E390 <PED.ab2@21760>   TST.b 0(a2,d0)
0005E394 <PED.ab2@21761>   BNE 'n1
0005E396 <PED.ab2@21763>   MOVE.b d0,(a0)+
0005E39A <PED.ab2@21764>   BRA 'n2
0005E39C <PED.ab2@21766>   CLR.b (a0)+
0005E39E <PED.ab2@21767>   MOVE.l (a7)+,a0
0005E3A4 <PED.ab2@21768>   JSR gettype
0005E3A6 <PED.ab2@21769>   TST.l d0
0005E3AA <PED.ab2@21770>   BNE 'found2
0005E3B0 <PED.ab2@21771>   JSR findvar
0005E3B2 <PED.ab2@21773>   MOVE.l (a7)+,a2
0005E3B8 <PED.ab2@21774>   LEA typestr,a0
0005E3BC <PED.ab2@21775>   BRA typehelp
0005E3C0 <PED.ab2@21777>   BRA 'nl2
0005E3C2 <PED.ab2@21779>   RTS
0005E3C6 <PED.ab2@21782>   MOVEM.l a0-a1,-(a7)
0005E3CC <PED.ab2@21783>   LEA typestr,a2
0005E3D0 <PED.ab2@21785>   MOVE.l 4(a0),d0
0005E3D4 <PED.ab2@21786>   BEQ 'exit
0005E3DA <PED.ab2@21787>   CLR.b deftypefound
0005E3DC <PED.ab2@21788>   MOVE.l d0,a0
0005E3E0 <PED.ab2@21789>   LEA 9(a0),a1
0005E3E2 <PED.ab2@21791>   MOVE.b (a1)+,d0
0005E3E6 <PED.ab2@21792>   BEQ 'nl
0005E3EA <PED.ab2@21793>   CMP.b #$80,d0
0005E3EE <PED.ab2@21794>   BNE 'notok
0005E3F0 <PED.ab2@21795>   MOVE.b (a1)+,d0
0005E3F4 <PED.ab2@21796>   CMP.b #$33,d0            ;find deftype
0005E3F8 <PED.ab2@21797>   BNE 'notok
0005E400 <PED.ab2@21798>   MOVE.b #1,deftypefound
0005E402 <PED.ab2@21800>   CMP.b (a2),d0
0005E406 <PED.ab2@21801>   BNE 'l1
0005E408 <PED.ab2@21802>   MOVE.l a1,d1
0005E40E <PED.ab2@21803>   SUB.l #10,d1
0005E410 <PED.ab2@21804>   SUB.l a0,d1
0005E414 <PED.ab2@21805>   BEQ 'bg1
0005E41A <PED.ab2@21806>   CMP.b #",",-2(a1)
0005E41E <PED.ab2@21807>   BEQ 'bg1
0005E424 <PED.ab2@21808>   CMP.b #" ",-2(a1)
0005E428 <PED.ab2@21809>   BNE 'l1
0005E42A <PED.ab2@21810>  'bg1 ADDQ.l #1,a2
0005E42C <PED.ab2@21811>  'l2 MOVE.b (a2)+,d0
0005E430 <PED.ab2@21812>   BEQ 'f1
0005E432 <PED.ab2@21813>   CMP.b (a1)+,d0
0005E436 <PED.ab2@21814>   BEQ 'l2
0005E43C <PED.ab2@21815>   LEA typestr,a2
0005E440 <PED.ab2@21816>   BRA 'l1
0005E444 <PED.ab2@21818>  'r1 CMP.b #$20,(a1)+
0005E448 <PED.ab2@21819>   BEQ 'r1
0005E44A <PED.ab2@21821>   SUBQ.l #1,a1
0005E450 <PED.ab2@21822>   TST.b deftypefound
0005E454 <PED.ab2@21823>   BEQ 'nod
0005E458 <PED.ab2@21824>   LEA 9(a0),a1
0005E45A <PED.ab2@21825>  'lop MOVE.b (a1)+,d0
0005E45E <PED.ab2@21826>   BEQ 'nl
0005E462 <PED.ab2@21827>   CMP.b #".",d0
0005E466 <PED.ab2@21828>   BNE 'lop
0005E468 <PED.ab2@21829>   SUBQ.l #1,a1
0005E46C <PED.ab2@21831>   CMP.b #".",(a1)+
0005E470 <PED.ab2@21832>   BEQ 'c1
0005E476 <PED.ab2@21833>   LEA typestr,a2
0005E47A <PED.ab2@21834>   BRA 'l1
0005E480 <PED.ab2@21836>   LEA typestr,a2
0005E486 <PED.ab2@21837>   LEA chartab,a0
0005E488 <PED.ab2@21838>   MOVEQ #0,d0
0005E48A <PED.ab2@21840>   MOVE.b (a1)+,d0
0005E48E <PED.ab2@21841>   TST.b 0(a0,d0)
0005E492 <PED.ab2@21842>   BNE 'e1
0005E494 <PED.ab2@21843>   MOVE.b d0,(a2)+
0005E498 <PED.ab2@21844>   BRA 'loop
0005E49A <PED.ab2@21846>   CLR.b (a2)+
0005E49E <PED.ab2@21847>   MOVEM.l (a7)+,a0-a1
0005E4A0 <PED.ab2@21848>   MOVEQ #1,d0
0005E4A2 <PED.ab2@21849>   RTS
0005E4A6 <PED.ab2@21851>   BRA 'nl2
0005E4AA <PED.ab2@21853>   MOVEM.l (a7)+,a0-a1
0005E4AC <PED.ab2@21854>   MOVEQ #0,d0
0005E4AE <PED.ab2@21855> RTS
0005E4B8 <PED.ab2@21859>   actline.l   = ?comPtr_CurrentSourceLine
0005E4BE <PED.ab2@21860>   nestcount.b = 1
0005E4C4 <PED.ab2@21862>     iffound.b = 0
0005E4D8 <PED.ab2@21863>     *textline.l = Peek.l(actline) + 9
0005E4EC <PED.ab2@21866>     testaddr.l = Peek.l(*textline) : bytecount = 0
0005E50C <PED.ab2@21867>     While (testaddr LSR 16) <> $0000
0005E522 <PED.ab2@21868>       testaddr = Peek.l(*textline + bytecount)
0005E532 <PED.ab2@21869>       actword.w = testaddr LSR 16
0005E538 <PED.ab2@21872>       Select actword
0005E546 <PED.ab2@21873>       Case $80C0    ; EndIf
0005E554 <PED.ab2@21874>         nestcount + 1
0005E568 <PED.ab2@21879>       Case $800b    ; If
0005E576 <PED.ab2@21880>         nestcount - 1
0005E57C <PED.ab2@21881>         iffound  = 1
0005E590 <PED.ab2@21883>       Case $8021    ; Then
0005E59E <PED.ab2@21884>         nestcount + 1
0005E5A0 <PED.ab2@21885>       End Select
0005E5AE <PED.ab2@21888>       bytecount + 1
0005E5B4 <PED.ab2@21889>     Wend
0005E5CA <PED.ab2@21890>     If (nestcount = 1) Then Pop Repeat : Goto foundif
0005E5DE <PED.ab2@21893>     actline.l = Peek.l(actline) + 4
0005E5FC <PED.ab2@21894>   Until Peek.l(actline) = 0
0005E60C <PED.ab2@21896>   If (iffound = 1)
0005E61A <PED.ab2@21897>     *detokened.l = TEDDetoke{*textline}
0005E65E <PED.ab2@21899>     linestr$ = StripLead$(Peek$(*detokened),31)
0005E69E <PED.ab2@21900>     PrintScreenTitle{"Corresponding Header: " + linestr$}
0005E6A0 <PED.ab2@21902> Return
0005E6CE <PED.ab2@21968>   error{"Bubble hlep!?"}
0005E6D8 <PED.ab2@21969>    ResetList HelpIndexCache()
0005E6EA <PED.ab2@21970>    While NextItemFast(HelpIndexCache())
0005E734 <PED.ab2@21971>      If b$=HelpIndexCache()\name
0005E73A <PED.ab2@21974>    Wend
0005E73C <PED.ab2@22034>  MOVEQ #0,d0
0005E73E <PED.ab2@22035> RTS
0005E76A <PED.ab2@22038>   If WZ_CheckOpen{"WIN_CONTEXTHELP"}
0005E776 <PED.ab2@22039>     WZListRemove helpme.List
0005E7AE <PED.ab2@22040>     WZCloseWindow WZID("WIN_CONTEXTHELP")
0005E7B0 <PED.ab2@22042> RTS
0005E7CE <PED.ab2@22045>   If Peek.b(?use_intellisense)<>0
0005E7FA <PED.ab2@22046>     If WZ_CheckOpen{"WIN_POPUP"}
0005E806 <PED.ab2@22047>       WZListRemove popupliste
0005E820 <PED.ab2@22048>       ClearType popupdata
0005E858 <PED.ab2@22049>       WZCloseWindow WZID("WIN_POPUP")
0005E860 <PED.ab2@22050>       popup_selected.l = 0
0005E862 <PED.ab2@22053> RTS
0005E88C <PED.ab2@22057>   !basic
0005E892 <PED.ab2@22058>   MOVE.l comPtr_VarBase,d0
0005E896 <PED.ab2@22059>   BEQ 'oldped
0005E898 <PED.ab2@22060>   MOVE.l d0,a0
0005E89E <PED.ab2@22061>   CMP.l #0,(a0)
0005E8A2 <PED.ab2@22062>   BEQ 'oldped
0005E8B4 <PED.ab2@22063>   *nt.l = PutD0:*nt = Peek.l(*nt):
0005E8DE <PED.ab2@22064>   fvar$ = Peek$(?typestr)
0005E930 <PED.ab2@22065>   fvar$ = StripLead$(fvar$,@"*")
0005E93A <PED.ab2@22066>   While *nt
0005E968 <PED.ab2@22067>     a$ = Peek$(*nt+$13)
0005E9AC <PED.ab2@22068>     If a$ = fvar$
0005E9C0 <PED.ab2@22069>       it.l = Peek.l(*nt+10)
0005E9CA <PED.ab2@22070>       If it
0005EA06 <PED.ab2@22071>         Poke$ ?typestr,Peek$(it+$b)
0005EA14 <PED.ab2@22074>     *nt = Peek.l(*nt)
0005EA1A <PED.ab2@22075>   Wend
0005EA38 <PED.ab2@22077>   !asm
0005EA3A <PED.ab2@22078> RTS
0005EA3C <PED.ab2@22081>   MOVE.l a0,d0
0005EA66 <PED.ab2@22082>   !basic
0005EA6A <PED.ab2@22083>   i = PutD0
0005EA92 <PED.ab2@22084>   str2$ = Peek$(i)
0005EAC6 <PED.ab2@22085>   a$ = str2$
0005EAF4 <PED.ab2@22086>   If NOT WZ_CheckOpen{"WIN_NEWTYPE"}
0005EBB0 <PED.ab2@22087>     WZWindow WZID("WIN_NEWTYPE"),?wzgui,255,\type_x,\type_y,\type_w,\type_h,WZID("WIN_NEWTYPE")
0005EBD6 <PED.ab2@22088>     SetMenuStrip_ WZWindowAddr,Peek.l(?addr_menustrip)
0005EBDC <PED.ab2@22090>     MOVE.l comPtr_VarBase,d0
0005EBE0 <PED.ab2@22091>     BEQ 'oldped
0005EBE2 <PED.ab2@22092>     MOVE.l d0,a0
0005EBE8 <PED.ab2@22093>     CMP.l #0,(a0)
0005EBEC <PED.ab2@22094>     BNE 'nocompile
0005EC18 <PED.ab2@22095>     WTitle "Compile the file to see all"
0005EC1E <PED.ab2@22098>     Gosub activatesource
0005EC58 <PED.ab2@22100>   Use Window WZID("WIN_NEWTYPE")
0005EC92 <PED.ab2@22101>   WZPrint "STRING2",&str2$
0005ECCA <PED.ab2@22102>   WZPrint "newtype_const",0
0005ED02 <PED.ab2@22103>   WZPrint "newtype_var",0
0005ED3A <PED.ab2@22104>   WZPrint "newtype_struct",1
0005ED42 <PED.ab2@22105>   newtype_mode = 2
0005ED4A <PED.ab2@22107>   lev.l = 0
0005ED52 <PED.ab2@22108>   find.l = 0
0005ED58 <PED.ab2@22109>   Gosub newtype_selecttype
0005ED60 <PED.ab2@22110>   lev = 1
0005ED66 <PED.ab2@22111>   MOVE.l newtypebase,d0
0005ED6A <PED.ab2@22112>   *nt.l = PutD0
0005ED74 <PED.ab2@22113>   If *nt
0005ED82 <PED.ab2@22114>     *nt = Peek.l(*nt):
0005ED8C <PED.ab2@22115>     While *nt
0005EDBA <PED.ab2@22116>       b$ = Peek$(*nt+11)
0005EDFE <PED.ab2@22117>       If b$ = a$:
0005EE38 <PED.ab2@22118>         quicktype = 1:*nt2(lev) = Peek.l(*nt+4):Gosub newtype_listsubtype:find = 1:Pop If:Goto f1ab
0005EE46 <PED.ab2@22120>       *nt = Peek.l(*nt)
0005EE4C <PED.ab2@22121>     Wend
0005EE54 <PED.ab2@22123>   quicktype = 0
0005EE72 <PED.ab2@22125>   !asm
0005EE74 <PED.ab2@22126> RTS
0005EF30 <PED.ab2@22130>     WZWindow WZID("WIN_LIBRARYBROWSER"),?wzgui,255,\lbrowser_x,\lbrowser_y,\lbrowser_w,\lbrowser_h,WZID("WIN_LIBRARYBROWSER")
0005EF6A <PED.ab2@22131>     Use Window WZID("WIN_LIBRARYBROWSER")
0005EFB2 <PED.ab2@22132>     WZ_InitTable{"WIN_LIBRARYBROWSER","FUNCTIONSTABLE",2}
0005F058 <PED.ab2@22133>     WZ_SetTableTitle{"FUNCTIONSTABLE","Function","Syntax"};,"Library"}
0005F0B4 <PED.ab2@22134>     WZ_SetPriority{"FUNCTIONSTABLE",2,3}
0005F0D6 <PED.ab2@22135>     WZ_DrawTable{"FUNCTIONSTABLE"}
0005F0DC <PED.ab2@22136>     Gosub update_librarylist
0005F0E2 <PED.ab2@22137>     Gosub update_functiontable
0005F11C <PED.ab2@22139>     Use Window WZID("WIN_LIBRARYBROWSER")
0005F158 <PED.ab2@22140>     Activate WZID("WIN_LIBRARYBROWSER")
0005F17A <PED.ab2@22141>     WZ_UpdateTable{"FUNCTIONSTABLE"}
0005F17C <PED.ab2@22143> Return
0005F190 <PED.ab2@22150>   wev.l = WZ_CheckTableEvent{ev}
0005F196 <PED.ab2@22151>   Select wev
0005F1A4 <PED.ab2@22153>     Case #WZTABLEEVENT_CELLSELECTED
0005F1CC <PED.ab2@22154>       pos.l = WZ_Row{"FUNCTIONSTABLE"}
0005F25C <PED.ab2@22155>       actualword$ = WZ_GetCell{"FUNCTIONSTABLE",WZ_Row{"FUNCTIONSTABLE"},1}
0005F294 <PED.ab2@22156>       If actualword$<>""
0005F396 <PED.ab2@22157>         libinfo$ = lib_mapping$(libnumber.l,0)+" (LibNr. "+Str$(libnumber)+" Token "+Hexw$(TED_GetTokenID{?comPtr_TokenBase,actualword$}) +")"
0005F3D0 <PED.ab2@22158>         WZPrint "ARGS_LIBRARYNAME",&libinfo$
0005F3E4 <PED.ab2@22161>     Case #WZTABLEEVENT_DOUBLECLICK
0005F40C <PED.ab2@22162>       pos = WZ_Row{"FUNCTIONSTABLE"}
0005F49C <PED.ab2@22163>       actualword$ = WZ_GetCell{"FUNCTIONSTABLE",WZ_Row{"FUNCTIONSTABLE"},1}
0005F4D4 <PED.ab2@22164>       If actualword$<>""
0005F4DA <PED.ab2@22165>         Gosub instructionbrowser_startguide
0005F4DC <PED.ab2@22168>   End Select
0005F4E2 <PED.ab2@22170>   Select ev
0005F4F0 <PED.ab2@22171>     Case #IDCMP_IDCMPUPDATE
0005F518 <PED.ab2@22172>       Select WZGadName
0005F53C <PED.ab2@22174>         Case "LIST_LIBRARIES"
0005F542 <PED.ab2@22175>           Gosub update_functiontable
0005F56C <PED.ab2@22177>         Case "CYCLE_SORTORDER"
0005F572 <PED.ab2@22178>           Gosub update_librarylist
0005F578 <PED.ab2@22179>           Gosub update_functiontable
0005F5A2 <PED.ab2@22181>         Case "BUTTON_LIB_FREEIDS"
0005F604 <PED.ab2@22182>           message$ = !TRANS{"The following lib-IDs are not in use:"}+"\\n\\n"
0005F62E <PED.ab2@22183>           For i = 1 To 255
0005F6A0 <PED.ab2@22184>             If Instr(lib_mapping$(i,0),"unused")<>0
0005F70E <PED.ab2@22185>               message$ + Str$(i)+ "  "
0005F71E <PED.ab2@22187>           Next i
0005F740 <PED.ab2@22188>           WZ_LockWindow{"WIN_LIBRARYBROWSER"}
0005F7A8 <PED.ab2@22189>           dummy = RTEZRequest("",message$,"_Ok")
0005F7CA <PED.ab2@22190>           WZ_UnlockWindow{"WIN_LIBRARYBROWSER"}
0005F7F4 <PED.ab2@22192>         Case "BUTTON_LIB_CHECK_CONSISTENCY"
0005F816 <PED.ab2@22193>           WZ_LockWindow{"WIN_LIBRARYBROWSER"}
0005F866 <PED.ab2@22194>           WZ_ShowMessage{!TRANS{"Checking BlitzLib consistency..."},1}
0005F88E <PED.ab2@22195>           message$ = ""
0005F8D6 <PED.ab2@22196>           For i = 0 To 255 : lib_check(i)=False : Next i
0005F8E6 <PED.ab2@22198>           *tpointer.l = Peek.l(?comPtr_TokenBase)
0005F8F6 <PED.ab2@22201>             tokeninfo\next_token = Peek.l(*tpointer)
0005F90E <PED.ab2@22202>             tokeninfo\number     = Peek.w(*tpointer+4)
0005F940 <PED.ab2@22203>             tokeninfo\name       = Peek$(*tpointer+6)
0005F998 <PED.ab2@22204>             tokeninfo\help       = Peek$(*tpointer+6+FLen(tokeninfo\name)+1)
0005F9B0 <PED.ab2@22205>             libID.l = (tokeninfo\number LSR 7)
0005F9BE <PED.ab2@22207>             If libID.l<>olibID.l
0005F9E0 <PED.ab2@22208>               If lib_check(libID) = False
0005F9EE <PED.ab2@22209>                 lib_check(libID) = True
0005F9F4 <PED.ab2@22211>               Else
0005FA1E <PED.ab2@22212>                 For i = 0 To 255
0005FA7C <PED.ab2@22213>                   If lib_mapping$(i,1) = tokeninfo\name
0005FB92 <PED.ab2@22214>                     old_libname$ = StripTrail$(UnRight$(lib_mapping$(i,0),Instr(lib_mapping$(libID,0),"with ")+4),Asc(")"))
0005FB9C <PED.ab2@22215>                     Pop If : Pop For : Goto exit_for2
0005FBAC <PED.ab2@22217>                 Next i
0005FC7C <PED.ab2@22219>                 error_libname$ = Left$(lib_mapping$(libID,0),Instr(lib_mapping$(libID,0)," ")-1)
0005FCF2 <PED.ab2@22220>                 message$ + "+ " + old_libname$ + " has been overwritten by\\n"
0005FDA2 <PED.ab2@22221>                 message$ + "\\22" + error_libname$ + "\\22 with same LibID: "+Str$(libID)+"\\n\\n"
0005FDA8 <PED.ab2@22223>               olibID = libID
0005FEE4 <PED.ab2@22224>               !WZ_GaugeInfo{&lib_mapping$(libID,0)}
0005FEEE <PED.ab2@22226>             *tpointer.l = tokeninfo\next_token
0005FF06 <PED.ab2@22227>           Until (*tpointer = 0)
0005FF0C <PED.ab2@22230>           WZ_HideMessage{}
0005FF44 <PED.ab2@22231>           If message$=""
0005FF94 <PED.ab2@22232>             message$ = !TRANS{"The internal library structure seems to be correct."}
0005FFFC <PED.ab2@22234>           dummy = RTEZRequest("",message$,"_Ok")
0006001E <PED.ab2@22235>           WZ_UnlockWindow{"WIN_LIBRARYBROWSER"}
0006002C <PED.ab2@22237>       End Select
00060040 <PED.ab2@22239>     Case #IDCMP_CLOSEWINDOW:
00060062 <PED.ab2@22240>       WZ_KillTable{"FUNCTIONSTABLE"}
0006009A <PED.ab2@22241>       WZCloseWindow WZID("WIN_LIBRARYBROWSER")
000600A6 <PED.ab2@22242>       WZListRemove libslist.List
000600A8 <PED.ab2@22244>   End Select
000600AA <PED.ab2@22246> Return
000600D2 <PED.ab2@22250>   sortorder.b = WZInput("CYCLE_SORTORDER")
000600DE <PED.ab2@22251>   WZListRemove libslist.List
00060102 <PED.ab2@22252>   Format "000"
0006012C <PED.ab2@22253>   For i = 0 To 255
0006019E <PED.ab2@22254>     If Instr(lib_mapping$(i,0),"unused") = 0
000601AE <PED.ab2@22255>       If sortorder = 0
00060202 <PED.ab2@22256>         WZListAdd libslist.List,lib_mapping$(i,0),-1,i
00060208 <PED.ab2@22257>       Else
00060296 <PED.ab2@22258>         WZListAdd libslist.List,Str$(i)+ " | "+ lib_mapping$(i,0),-1,i
000602A6 <PED.ab2@22261>   Next i
000602CA <PED.ab2@22262>   Format ""
00060310 <PED.ab2@22263>   WZPrint "LIST_LIBRARIES",0,libslist
00060312 <PED.ab2@22264> Return
0006033A <PED.ab2@22268>   selected.l = WZInput("LIST_LIBRARIES")
0006034E <PED.ab2@22269>   libnumber = WZListData(libslist,selected)
000603E4 <PED.ab2@22270>   libinfo$ = lib_mapping$(libnumber,0)+" (LibNr. "+Str$(libnumber)+")"
0006041E <PED.ab2@22272>   WZPrint "ARGS_LIBRARYNAME",&libinfo$
00060440 <PED.ab2@22274>   WZ_ClearTable{"FUNCTIONSTABLE"}
0006044A <PED.ab2@22276>   MOVE.l comPtr_TokenBase,D0    : tokenbase.l = PutD0
0006045C <PED.ab2@22277>   If tokenbase<>0
00060498 <PED.ab2@22278>     *tpointer.l = tokenbase : tfound.b = False : tcounter.l = 0 : tname$ = ""
000604A8 <PED.ab2@22280>       tokeninfo\next_token = Peek.l(*tpointer)
000604C0 <PED.ab2@22281>       tokeninfo\number     = Peek.w(*tpointer+4)
000604F2 <PED.ab2@22282>       tokeninfo\name       = Peek$(*tpointer+6)
0006054A <PED.ab2@22283>       tokeninfo\help       = Peek$(*tpointer+6+FLen(tokeninfo\name)+1)
00060566 <PED.ab2@22285>       If (tokeninfo\number LSR 7) = libnumber
0006062C <PED.ab2@22286>         WZ_AddRow{"FUNCTIONSTABLE",tokeninfo\name,tokeninfo\help}
00060644 <PED.ab2@22288>       *tpointer.l = tokeninfo\next_token : tcounter + 1
0006065C <PED.ab2@22289>     Until (*tpointer = 0)
00060682 <PED.ab2@22291>   WZ_TableSort{"FUNCTIONSTABLE",1}
000606A4 <PED.ab2@22292>   WZ_UpdateTable{"FUNCTIONSTABLE"}
000606A6 <PED.ab2@22293> Return
000606AC <PED.ab2@22297>   Gosub close_popupwindow
000606DA <PED.ab2@22298>   If NOT WZ_CheckOpen{"WIN_INSTRUCTIONBROWSER"} ; thilo: why this was commented out!?
00060796 <PED.ab2@22299>     WZWindow WZID("WIN_INSTRUCTIONBROWSER"),?wzgui,255,wtemp\ibrowser_x,wtemp\ibrowser_y,wtemp\ibrowser_w,wtemp\ibrowser_h,WZID("WIN_INSTRUCTIONBROWSER")
000607D0 <PED.ab2@22300>     Use Window WZID("WIN_INSTRUCTIONBROWSER")
00060872 <PED.ab2@22301>     If search_instruction$<>"" Then WZPrint "INSTRUCTION_STRING",search_instruction$
000608AA <PED.ab2@22302>     WZPrint "macros",browse_macros
000608E2 <PED.ab2@22303>     WZPrint "instr",browse_instructions
0006091A <PED.ab2@22304>     WZPrint "incdir",browse_includes
00060962 <PED.ab2@22305>     WZ_InitTable{"WIN_INSTRUCTIONBROWSER","INSTRUCTIONTABLE",2}
00060A08 <PED.ab2@22306>     WZ_SetTableTitle{"INSTRUCTIONTABLE","Function","Syntax"};,"Library"}
00060A64 <PED.ab2@22307>     WZ_SetPriority{"INSTRUCTIONTABLE",2,3}
00060A86 <PED.ab2@22308>     WZ_DrawTable{"INSTRUCTIONTABLE"}
00060AAE <PED.ab2@22309>     previoussearch_instruction$="|"
00060AB4 <PED.ab2@22310>     Gosub update_instructiontable
00060ABA <PED.ab2@22311>   Else
00060AF4 <PED.ab2@22312>     Use Window WZID("WIN_INSTRUCTIONBROWSER")
00060B30 <PED.ab2@22313>     Activate WZID("WIN_INSTRUCTIONBROWSER")
00060B52 <PED.ab2@22314>     WZ_UpdateTable{"INSTRUCTIONTABLE"}
00060BB6 <PED.ab2@22315>     WZPrint "INSTRUCTION_STRING",search_instruction$
00060BD8 <PED.ab2@22317>   activategadget{"INSTRUCTION_STRING"}
00060BDA <PED.ab2@22318> RTS
00060BFA <PED.ab2@22323>   If RawKeyState($42)  Then Gosub activatesource : ev = 0
00060C14 <PED.ab2@22325>   If RawKeyState($45)  Then ev = #IDCMP_CLOSEWINDOW
00060C28 <PED.ab2@22330>   wev.l = WZ_CheckTableEvent{ev}
00060C2E <PED.ab2@22331>   Select wev
00060C3C <PED.ab2@22333>     Case #WZTABLEEVENT_CELLSELECTED
00060C44 <PED.ab2@22334>       MOVE.l comPtr_TokenBase,token@(a5)
00060C4E <PED.ab2@22335>       MOVE.l comPtr_TokenBase,d0 : *tokenbase = PutD0
00060CDE <PED.ab2@22336>       b$ = WZ_GetCell{"INSTRUCTIONTABLE",WZ_Row{"INSTRUCTIONTABLE"},1}
00060D12 <PED.ab2@22337>       bstr$ = b$
00060D1C <PED.ab2@22338>       While token
00060D70 <PED.ab2@22339>         If b$ = Peek$(token+6) Then Pop While: Goto tfound
00060D7E <PED.ab2@22340>         token = Peek.l(token)
00060D84 <PED.ab2@22341>       Wend
00060D8E <PED.ab2@22344>       If token
00060DA4 <PED.ab2@22345>         tok.l = Peek.w(token+4)
00060DFC <PED.ab2@22346>         iinfo$ = "Library: " + TED_GetLibname{tok LSR 7}
00060ED8 <PED.ab2@22347>         iinfo$ + " - LibNr.: "+Str$(tok LSR 7)+" - TokenID: "+Hexw$((tok AND $7f)-1)+" - MemPointer $"+Hex$(tok)
00060EDE <PED.ab2@22348>       Else
00060F52 <PED.ab2@22349>         iinfo$ = "Include: " + TED_GetIncludeName{bstr$}
00060F72 <PED.ab2@22351>       WZTags #WARGSA_TextPen,2
00060FAC <PED.ab2@22352>       WZPrint "INSTRUCTION_INFO",&iinfo$
00060FC0 <PED.ab2@22354>     Case #WZTABLEEVENT_DOUBLECLICK
00060FE8 <PED.ab2@22355>       pos = WZ_Row{"INSTRUCTIONTABLE"}
00061078 <PED.ab2@22356>       actualword$ = WZ_GetCell{"INSTRUCTIONTABLE",WZ_Row{"INSTRUCTIONTABLE"},1}
0006107E <PED.ab2@22357>       Gosub instructionbrowser_startguide
00061080 <PED.ab2@22359>   End Select
00061086 <PED.ab2@22361>   Select ev
00061094 <PED.ab2@22363>     Case #IDCMP_INTUITICKS
0006109A <PED.ab2@22364>       Gosub update_instructiontable
000610AE <PED.ab2@22366>     Case #IDCMP_CLOSEWINDOW:
000610C0 <PED.ab2@22367>       wtemp\ibrowser_x = WindowX
000610D2 <PED.ab2@22368>       wtemp\ibrowser_y = WindowY
000610E4 <PED.ab2@22369>       wtemp\ibrowser_w = WindowWidth
000610F6 <PED.ab2@22370>       wtemp\ibrowser_h = WindowHeight
00061118 <PED.ab2@22371>       WZ_KillTable{"INSTRUCTIONTABLE"}
00061150 <PED.ab2@22373>       WZCloseWindow WZID("WIN_INSTRUCTIONBROWSER")
00061164 <PED.ab2@22375>     Case #IDCMP_RAWKEY:
0006116C <PED.ab2@22376>       Select EventCode
0006117A <PED.ab2@22378>         Case  $45
0006119C <PED.ab2@22379>           WZ_KillTable{"INSTRUCTIONTABLE"}
000611D4 <PED.ab2@22381>           WZCloseWindow WZID("WIN_INSTRUCTIONBROWSER")
000611D6 <PED.ab2@22383>       End Select
000611EA <PED.ab2@22385>     Case #IDCMP_IDCMPUPDATE
0006122A <PED.ab2@22386>       Select LCase$(WZGadName)
0006124E <PED.ab2@22388>         Case "add" ;addcode
00061282 <PED.ab2@22389>           a$ = bstr$
000612A0 <PED.ab2@22390>           !asm
000612A6 <PED.ab2@22391>           MOVE.l textbufferaddr,a0
000612AC <PED.ab2@22392>           ADD.w comWord_TextBufferOffset,a0
000612B2 <PED.ab2@22393>           ADD.w comWord_ColumnsOffset,a0
000612B8 <PED.ab2@22394>           ADD.w comWord_Column,a0
000612BC <PED.ab2@22395>           CMP.b #" ",(a0)
000612C0 <PED.ab2@22396>           BEQ nocharunder
000612C2 <PED.ab2@22397>           MOVEQ #-1,d0
000612C4 <PED.ab2@22400>           ADDQ.l #1,d0
000612C8 <PED.ab2@22401>           CMP.b #" ",(a0)+
000612CC <PED.ab2@22402>           BNE 'loop
000612D0 <PED.ab2@22403>           i2 = PutD0
000612D6 <PED.ab2@22404>           JSR cursor_off
00061300 <PED.ab2@22405>           !basic
00061328 <PED.ab2@22406>           For i = 1 To i2
0006132E <PED.ab2@22407>             JSR deletechar
0006133E <PED.ab2@22408>           Next
0006135C <PED.ab2@22409>           !asm
00061362 <PED.ab2@22410>           JSR cursor_on
0006138C <PED.ab2@22413>           !basic
00061392 <PED.ab2@22414>           Gosub insertstring
00061398 <PED.ab2@22415>           JSR activatesource
000613C2 <PED.ab2@22417>         Case "macros"
000613CC <PED.ab2@22418>           browse_macros = WZInput
000613F4 <PED.ab2@22419>           previoussearch_instruction$ = "|"
00061416 <PED.ab2@22420>           activategadget{"INSTRUCTION_STRING"}
00061440 <PED.ab2@22422>         Case "instr"
0006144A <PED.ab2@22423>           browse_instructions = WZInput
00061472 <PED.ab2@22424>           previoussearch_instruction$ = "|"
00061494 <PED.ab2@22425>           activategadget{"INSTRUCTION_STRING"}
000614BE <PED.ab2@22427>         Case "incdir"
000614C8 <PED.ab2@22428>           browse_includes = WZInput
000614F0 <PED.ab2@22429>           previoussearch_instruction$ = "|"
00061512 <PED.ab2@22430>           activategadget {"INSTRUCTION_STRING"}
00061520 <PED.ab2@22432>       End Select
00061522 <PED.ab2@22434>   End Select
00061524 <PED.ab2@22436> Return
00061572 <PED.ab2@22440>   search_instruction$ = WZGetString("INSTRUCTION_STRING")
00061602 <PED.ab2@22441>   If (search_instruction$<>previoussearch_instruction$) AND (Len(search_instruction$) > 1)
00061636 <PED.ab2@22442>     previoussearch_instruction$ = search_instruction$
00061658 <PED.ab2@22443>     WZ_ClearTable{"INSTRUCTIONTABLE"}
00061684 <PED.ab2@22444>     InitArgParse search_instruction$
000616A6 <PED.ab2@22445>     word1$ = NextArg$
000616C8 <PED.ab2@22446>     word2$ = NextArg$
000616D0 <PED.ab2@22447>     MOVE.l comPtr_TokenBase,token@(a5)
000616D8 <PED.ab2@22448>     numcount.l = 0
000616E2 <PED.ab2@22449>     If browse_instructions
000616EC <PED.ab2@22450>       While token
0006171A <PED.ab2@22451>         b$ = Peek$(token+6)
00061788 <PED.ab2@22452>         c$ = Peek$(token+6+Len(b$)+1)
000617F6 <PED.ab2@22454>         If Instr(b$,word1$) AND numcount < #maxlabels
00061852 <PED.ab2@22455>           If Instr(b$,word2$)
00061860 <PED.ab2@22456>             numcount = numcount+1
000618C8 <PED.ab2@22457>             c$ = Peek$(token+7+Len(b$))
000618CE <PED.ab2@22458>             TST.l classiccolor
000618D2 <PED.ab2@22459>             BEQ 'nomore
000618D8 <PED.ab2@22460>             LEA classiccommands,a0
000618DC <PED.ab2@22461>             MOVE.l token@(a5),a1
000618E0 <PED.ab2@22462>             MOVE.w 4(a1),d0
000618E2 <PED.ab2@22463>             LSR.w #7,d0
000618E4 <PED.ab2@22466>               MOVE.w (a0)+,d1
000618E8 <PED.ab2@22467>               BEQ 'nomore
000618EA <PED.ab2@22468>               CMP.w d1,d0
000618EE <PED.ab2@22469>             BNE 'again
000618F8 <PED.ab2@22471>             CMP.l #99,classiccolor
000618FC <PED.ab2@22472>             BEQ 'skip
000619BA <PED.ab2@22477>             WZ_AddRow{"INSTRUCTIONTABLE",b$,c$}
000619C8 <PED.ab2@22482>         token = Peek.l(token)
000619CE <PED.ab2@22483>       Wend
000619D8 <PED.ab2@22486>     If browse_macros
000619E2 <PED.ab2@22487>       MOVE.l comPtr_MacroBase,a0:MOVE.l (a0),token@(a5)
000619EA <PED.ab2@22488>       c.l = 0
000619F4 <PED.ab2@22489>       While token
00061A22 <PED.ab2@22490>         b$ = Peek$(token+13)
00061A90 <PED.ab2@22492>         If Instr(b$,word1$) AND numcount<#maxlabels
00061AEC <PED.ab2@22493>           If Instr(b$,word2$)
00061AFA <PED.ab2@22494>             numcount = numcount + 1
00061B10 <PED.ab2@22495>             i = Peek.w(token+8)
00061B2A <PED.ab2@22496>             If i > 90 Then i = 90
00061B70 <PED.ab2@22497>             b$ = "!" + b$
00061BA6 <PED.ab2@22498>             c$ = Peeks$(Peek.l(token+4),i)
00061C64 <PED.ab2@22501>             WZ_AddRow{"INSTRUCTIONTABLE",b$,c$}
00061C72 <PED.ab2@22504>         token = Peek.l(token)
00061C78 <PED.ab2@22505>       Wend
00061C82 <PED.ab2@22509>     If browse_includes
00061C8C <PED.ab2@22537>       ResetList HelpIndexCache()
00061C9E <PED.ab2@22538>       While NextItemFast(HelpIndexCache())
00061D12 <PED.ab2@22539>         If Instr(HelpIndexCache()\name,word1$) AND numcount<#maxlabels
00061D74 <PED.ab2@22540>           If Instr(HelpIndexCache()\name,word2$)
00061D82 <PED.ab2@22541>             numcount = numcount+1
00061E50 <PED.ab2@22542>             WZ_AddRow{"INSTRUCTIONTABLE",HelpIndexCache()\name,HelpIndexCache()\help}
00061E56 <PED.ab2@22545>       Wend
00061E5E <PED.ab2@22547>     pos = 0
00061E84 <PED.ab2@22549>     WZ_TableSort{"INSTRUCTIONTABLE",1}
00061EA6 <PED.ab2@22550>     WZ_UpdateTable{"INSTRUCTIONTABLE"}
00061EAC <PED.ab2@22551>   Else
00061F3C <PED.ab2@22552>     If (search_instruction$<>previoussearch_instruction$) AND (Len(search_instruction$)<2)
00061F70 <PED.ab2@22553>       previoussearch_instruction$ = search_instruction$
00061F92 <PED.ab2@22554>       WZ_ClearTable{"INSTRUCTIONTABLE"}
00061FB4 <PED.ab2@22555>      WZ_UpdateTable{"INSTRUCTIONTABLE"}
00061FB6 <PED.ab2@22558> Return
00061FBC <PED.ab2@22562>    Select ev
00061FCA <PED.ab2@22564>      Case #IDCMP_IDCMPUPDATE
00062018 <PED.ab2@22565>        If Left$(WZGadName,9) = "POPUPMENU"
00062028 <PED.ab2@22566>          popup_selected = WZInput + 1
0006202E <PED.ab2@22567>          popexit.l = True
00062042 <PED.ab2@22570>      Case #IDCMP_MOUSEBUTTONS
00062044 <PED.ab2@22576>    End Select
00062058 <PED.ab2@22578>    If popexit = True
0006208C <PED.ab2@22579>      a$ = WZ_GetPopUpEntry{popup_selected}
00062154 <PED.ab2@22580>      a$ = dos_Trim{Left$(a$,Instr(a$,"{")-1)}
0006218C <PED.ab2@22581>      If a$<>""
00062218 <PED.ab2@22582>        PrintScreenTitle{a$ + " " + TED_GetIncludeHelp{a$}}
000622AE <PED.ab2@22583>        a$ = UnRight$(a$,Len(poptok$)) + "{"
000622B4 <PED.ab2@22584>        Gosub insertstring
000622BA <PED.ab2@22586>      Gosub close_popupwindow
000622C0 <PED.ab2@22588>    Gosub activatesource
000622C2 <PED.ab2@22589> Return
0006232A <PED.ab2@22595>   i = SearchBegin(a$,Asc(";"),1)
00062334 <PED.ab2@22596>   If i
0006238A <PED.ab2@22597>     a$ = Left$(a$,i-2) ;+" "
00062390 <PED.ab2@22600>   GetD0 &a$
00062392 <PED.ab2@22601>   MOVE.l d0,a2
00062394 <PED.ab2@22602>   MOVE.l d7,-(a7)
00062396 <PED.ab2@22605>     MOVE.b (a2)+,d7
0006239A <PED.ab2@22606>     BEQ 'e1
000623A2 <PED.ab2@22607>     CMP.w #$7d,comWord_Column
000623A6 <PED.ab2@22608>     BGE 'e1
000623AA <PED.ab2@22609>     MOVEM.l a2/a5,-(a7)
000623B0 <PED.ab2@22610>     JSR insertchar
000623B4 <PED.ab2@22611>     MOVEM.l (a7)+,a2/a5
000623B8 <PED.ab2@22612> BRA 'l1
000623BA <PED.ab2@22615>   MOVE.l (a7)+,d7
000623BC <PED.ab2@22616> Return
000623C4 <PED.ab2@22620>   MOVE.l comPtr_TokenBase,token@(a5)
000623CE <PED.ab2@22621>   MOVE.l comPtr_TokenBase,d0 : *tokenbase = PutD0
00062402 <PED.ab2@22623>   b$=actualword$
0006240C <PED.ab2@22624>   While token
00062460 <PED.ab2@22625>     If b$ = Peek$(token+6) Then Pop While:Goto found
0006246E <PED.ab2@22626>     token = Peek.l(token)
00062474 <PED.ab2@22627>   Wend
0006247E <PED.ab2@22630>   If token
00062494 <PED.ab2@22631>     tok.l = Peek.w(token+4)
000624C8 <PED.ab2@22632>     tokname$ = b$
000624D8 <PED.ab2@22633>     libnumber = tok LSR 7
000624DE <PED.ab2@22634>     Gosub open_helptool
000624E4 <PED.ab2@22635>   Else ;no token, but a function or macro
00062518 <PED.ab2@22636>     tokname$ = b$
00062520 <PED.ab2@22637>     libnumber = 0
00062526 <PED.ab2@22638>     Gosub open_helptool
00062528 <PED.ab2@22640> Return
00062560 <PED.ab2@22644>   tokid.l = TED_GetTokenID{*tokenbase,tokname$}
00062598 <PED.ab2@22645>   libnumber = TED_GetTokenLibnum{*tokenbase,tokname$}
000625CC <PED.ab2@22646>   myhelpdir$ = helpdir$
000625DE <PED.ab2@22654>   If tokid>0
0006263A <PED.ab2@22655>     If Right$(tokname$,1)="_"
000626C4 <PED.ab2@22656>       tokname$ = Left$(tokname$,Len(tokname$)-1)
00062728 <PED.ab2@22657>       helpdir$ = autodocdir$ + " -d " + helpdir$
00062772 <PED.ab2@22659>     libname$ =  lib_mapping$( libnumber,0)
000627C4 <PED.ab2@22660>     mostright$ = Right$(libname$,1)
000628C0 <PED.ab2@22661>     If mostright$ = "1" OR mostright$ = "2" Then libname$ = Left$(libname$,Len(libname$)-1)
000628C6 <PED.ab2@22662>   Else
0006291E <PED.ab2@22663>     libname$ = TED_GetIncludeName{tokname$}
000629B2 <PED.ab2@22666>   If Instr(libname$,"unused")=0 AND (libname$<>"")
00062A30 <PED.ab2@22667>     Show_Helpfile{libname$,tokname$,Peek$(?str_defaultpubscreen)}
00062A36 <PED.ab2@22668>   Else
00062A6A <PED.ab2@22669>     search_instruction$ = tokname$
00062A70 <PED.ab2@22670>     Gosub open_instructionbrowser
00062AA4 <PED.ab2@22673>   helpdir$ = myhelpdir$ ; restore standard helpdir$
00062AA6 <PED.ab2@22674> Return
00062AD4 <PED.ab2@22678>   If NOT WZ_CheckOpen{"WIN_SHORTCUTS"}
00062B8E <PED.ab2@22679>     WZWindow WZID("WIN_SHORTCUTS"),0,255,wtemp\short_x,wtemp\short_y,wtemp\short_w,wtemp\short_h,WZID("WIN_SHORTCUTS")
00062BC8 <PED.ab2@22680>     If Peek.l(?addr_menustrip) Then SetMenuStrip_ WZWindowAddr,Peek.l(?addr_menustrip)
00062C10 <PED.ab2@22682>     WZ_InitTable{"WIN_SHORTCUTS","SHORTCUTS",2}
00062D1A <PED.ab2@22683>     WZ_SetTableTitle{"SHORTCUTS",!TRANS{"Key"},!TRANS{"Function"}}
00062D76 <PED.ab2@22684>     WZ_SetPriority{"SHORTCUTS",1,2}
00062E80 <PED.ab2@22685>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<ALT> + Left Mousebutton"}   ,!TRANS{"Jump to label/func"} }
00062F8A <PED.ab2@22686>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<ALT> + Middle Mousebutton" },!TRANS{"Back from Label/func"}}
00063094 <PED.ab2@22687>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<ALT> + click on a filename"},!TRANS{"save and compile and run (see above)"}  }
0006319E <PED.ab2@22688>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<CTRL> + click on filename"} ,!TRANS{"save and create exe(save both if you click on diffrent)"}}
000632A8 <PED.ab2@22689>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<CTRL> + <U>" }              ,!TRANS{"undo current line"}   }
000633B2 <PED.ab2@22690>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<ESC>" }                     ,!TRANS{"closes any active helpwindow"}  }
00063458 <PED.ab2@22691>     WZ_AddRow{"SHORTCUTS","####","####"}
00063562 <PED.ab2@22692>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<ALT> + <CURSOR UP>"}        ,!TRANS{"move history up"}  }
0006366C <PED.ab2@22693>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<ALT> + <CURSOR DOWN>"}      ,!TRANS{"move history down"}}
00063712 <PED.ab2@22694>     WZ_AddRow{"SHORTCUTS","####","####"}
0006381C <PED.ab2@22695>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<HELP> + <SHIFT>"  }         ,!TRANS{"opens guide/autodoc of instruction under cursor"} }
00063926 <PED.ab2@22696>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<HELP> + <CTRL>"   }         ,!TRANS{"opens parameter diagnostic for actual function"} }
00063A30 <PED.ab2@22697>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<HELP> on any function"}     ,!TRANS{"displays correct syntax in screens titlebar"}   }
00063B3A <PED.ab2@22698>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<HELP> on unknown word"}     ,!TRANS{"opens instruction browser"}                      }
00063C44 <PED.ab2@22699>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<HELP> on '\'"     }         ,!TRANS{"opens window 'type browser' and shows newtype information"} }
00063D4E <PED.ab2@22700>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<HELP> on 'EndIf" }          ,!TRANS{"shows corresponding IF-Blockheader"} }
00063DF4 <PED.ab2@22701>     WZ_AddRow{"SHORTCUTS","####","####"}
00063EFE <PED.ab2@22702>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<L-Amiga> + <F4>-<F6>"}      ,!TRANS{"save winconfig"}       }
00064008 <PED.ab2@22703>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<F4> - <F6>"}                ,!TRANS{"load winconfig (F4 also startconfig)"}   }
00064112 <PED.ab2@22706>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<F7>"  }                     ,!TRANS{"window autolayout variant #1"}    }
0006421C <PED.ab2@22707>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<F8>"  }                     ,!TRANS{"window autolayout variant #2"} }
00064326 <PED.ab2@22708>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<F9>"  }                     ,!TRANS{"goto previous document"}    }
00064430 <PED.ab2@22709>     WZ_AddRow{"SHORTCUTS",!TRANS{ "<F10>" }                     ,!TRANS{"goto next document"} }
00064452 <PED.ab2@22712>     WZ_DrawTable{"SHORTCUTS"}
00064474 <PED.ab2@22713>     WZ_UpdateTable{"SHORTCUTS"}
00064476 <PED.ab2@22715> Return
0006448A <PED.ab2@22721>   wev.l = WZ_CheckTableEvent{ev}
00064490 <PED.ab2@22725>   Select ev
0006449E <PED.ab2@22727>     Case #IDCMP_CLOSEWINDOW
000644C0 <PED.ab2@22728>       WZ_KillTable{"SHORTCUTS"}
000644F8 <PED.ab2@22729>       WZCloseWindow WZID("WIN_SHORTCUTS")
000644FA <PED.ab2@22731>   End Select
000644FC <PED.ab2@22733> Return
00064506 <PED.ab2@22737>   If reg_d1
0006452E <PED.ab2@22738>     clistr$ = Peek$(reg_d1)
00064534 <PED.ab2@22739>   Else
0006455C <PED.ab2@22740>     clistr$ = ""
00064590 <PED.ab2@22742>   old_clistr$ = clistr$
000645AC <PED.ab2@22743>   FindScreen 0
0006460A <PED.ab2@22744>   WZWindow 17,?wzgui,64,-1,-1,-1,-1,17
00064682 <PED.ab2@22745>   If clistr$<>"" Then WZPrint "CLI_ARGUMENTS",&clistr$
000646A4 <PED.ab2@22746>   activategadget{"CLI_ARGUMENTS"}
000646B0 <PED.ab2@22747>   exit_cli.b = False : get_arguments.b = False
000646BA <PED.ab2@22749>     !ev_WaitEvent
000646C0 <PED.ab2@22759>     Select ev
000646CE <PED.ab2@22761>       Case #IDCMP_CLOSEWINDOW
000646D4 <PED.ab2@22762>         exit_cli = True
000646E8 <PED.ab2@22764>       Case #IDCMP_IDCMPUPDATE
00064710 <PED.ab2@22765>         Select WZGadName
00064734 <PED.ab2@22770>           Case "CLI_OK"
0006473A <PED.ab2@22771>             exit_cli = True
00064740 <PED.ab2@22772>             get_arguments = True
0006476A <PED.ab2@22774>           Case "CLI_CANCEL"
00064770 <PED.ab2@22775>             get_arguments = False
00064776 <PED.ab2@22776>             exit_cli = True
00064784 <PED.ab2@22778>         End Select
0006478A <PED.ab2@22780>       Default
000647AC <PED.ab2@22781>         activategadget{"CLI_ARGUMENTS"}
000647AE <PED.ab2@22783>     End Select
000647C8 <PED.ab2@22784>   Until exit_cli = True
000647E2 <PED.ab2@22785>   If get_arguments = True
00064830 <PED.ab2@22786>     clistr$ = WZGetString("CLI_ARGUMENTS")
0006488E <PED.ab2@22787>     Poke.s reg_d1,Left$(clistr$,127)
00064894 <PED.ab2@22788>   Else
000648C8 <PED.ab2@22789>     clistr$ = old_clistr$
000648DC <PED.ab2@22791>   WZCloseWindow 17
000648DE <PED.ab2@22792> Return
000648E0 <PED.ab2@22797> Return
0006499C <PED.ab2@22803>    WZWindow WZID("WIN_NEWTYPE"),?wzgui,255,wtemp\type_x,wtemp\type_y,wtemp\type_w,wtemp\type_h,WZID("WIN_NEWTYPE")
000649D6 <PED.ab2@22804>    If Peek.l(?addr_menustrip) Then SetMenuStrip_ WZWindowAddr,Peek.l(?addr_menustrip)
00064A10 <PED.ab2@22807>    Use Window WZID("WIN_NEWTYPE")
00064A58 <PED.ab2@22808>    WZ_InitTable{"WIN_NEWTYPE","TYPETABLE",2}
00064AFE <PED.ab2@22809>    WZ_SetTableTitle{"TYPETABLE","Type","Value"}
00064B3A <PED.ab2@22810>    WZ_SetTableColors{"TYPETABLE",1,0,1,0}
00064B96 <PED.ab2@22811>    WZ_SetPriority{"TYPETABLE",2,1}
00064BB8 <PED.ab2@22812>    WZ_DrawTable{"TYPETABLE"}
00064BBE <PED.ab2@22814>    Select newtype_mode
00064BCC <PED.ab2@22816>      Case 0
00064C30 <PED.ab2@22817>        WZPrint "STRING2",cstr$
00064C68 <PED.ab2@22818>        WZPrint "NEWTYPE_CONST",1
00064CA0 <PED.ab2@22819>        WZPrint "NEWTYPE_VAR",0
00064CD8 <PED.ab2@22820>        WZPrint "NEWTYPE_STRUCT",0
00064CDE <PED.ab2@22821>        Gosub newtype_listconsts
00064CF2 <PED.ab2@22823>      Case 1
00064D56 <PED.ab2@22824>        WZPrint "STRING2",str2$
00064D8E <PED.ab2@22825>        WZPrint "NEWTYPE_CONST",0
00064DC6 <PED.ab2@22826>        WZPrint "NEWTYPE_VAR",1
00064DFE <PED.ab2@22827>        WZPrint "NEWTYPE_STRUCT",0
00064E04 <PED.ab2@22828>        Gosub newtype_listvars
00064E18 <PED.ab2@22830>      Case 2
00064E7C <PED.ab2@22831>        WZPrint "STRING2",str2$
00064EB4 <PED.ab2@22832>        WZPrint "NEWTYPE_CONST",0
00064EEC <PED.ab2@22833>        WZPrint "NEWTYPE_VAR",0
00064F24 <PED.ab2@22834>        WZPrint "NEWTYPE_STRUCT",1
00064F2A <PED.ab2@22836>        Gosub newtype_selecttype
00064F52 <PED.ab2@22837>        a$ = ""
00064F7A <PED.ab2@22838>        For i = 1 To lev:
00064F8C <PED.ab2@22839>          If i>1
00064FF8 <PED.ab2@22840>             a$ = a$+"\"+pos$(i):
00064FFE <PED.ab2@22841>          Else
0006506A <PED.ab2@22842>             a$ = a$+"."+pos$(i):
0006507A <PED.ab2@22844>        Next
000650AE <PED.ab2@22845>        typestr$ = a$
000650D4 <PED.ab2@22846>        WZTags #WZRD_TEXTPEN,Peek.l(?newtypecolor)
0006510E <PED.ab2@22847>        WZPrint "NEWTYPE_ENTRY",&a$
00065110 <PED.ab2@22848>    End Select
00065158 <PED.ab2@22850>    ActivateGadget_ WZGadAddr ("STRING2"),WZWindowAddr,0
0006515A <PED.ab2@22851> Return
0006517A <PED.ab2@22856>   If RawKeyState($42)  Then Gosub activatesource:ev = 0
00065194 <PED.ab2@22857>   If RawKeyState($45)  Then ev = #IDCMP_CLOSEWINDOW
000651A8 <PED.ab2@22861>   tev.l = WZ_CheckTableEvent{ev}
000651BA <PED.ab2@22862>   If tev = #WZTABLEEVENT_DOUBLECLICK
000651C0 <PED.ab2@22863>     Select newtype_mode
000651CE <PED.ab2@22865>       Case 0 ; Constants
0006525E <PED.ab2@22866>         temp$ = WZ_GetCell{"TYPETABLE",WZ_Row{"TYPETABLE"},1} ;WZListString(lst2.List,WZInput)
00065292 <PED.ab2@22867>         typestr$ = temp$
000652B8 <PED.ab2@22868>         WZTags #WZRD_TEXTPEN,Peek.l(?newtypecolor)
000652F2 <PED.ab2@22869>         WZPrint "NEWTYPE_ENTRY",&typestr$
000652F8 <PED.ab2@22871>       Default
00065388 <PED.ab2@22874>         temp$ = WZ_GetCell{"TYPETABLE",WZ_Row{"TYPETABLE"},1} ;WZListString(lst2.List,WZInput)
00065418 <PED.ab2@22875>         c2$ = WZ_GetCell{"TYPETABLE",WZ_Row{"TYPETABLE"},2}
0006549C <PED.ab2@22876>         If c2$<>"" Then c2$ = " ."+c2$
0006552C <PED.ab2@22877>         c3$ = WZ_GetCell{"TYPETABLE",WZ_Row{"TYPETABLE"},3}
000655B0 <PED.ab2@22878>         If c3$<>"" Then c3$ = " $"+c3$
00065620 <PED.ab2@22879>         temp$ + c2$ + c3$
00065646 <PED.ab2@22881>         If newtype_mode = 1 AND lev  = 0
00065686 <PED.ab2@22882>           i = SearchEnd (temp$,@".",1)
000656EE <PED.ab2@22883>           If lev = 0 Then var$ = Left$(temp$,i-1)
00065744 <PED.ab2@22884>           temp$ = Mid$(temp$,i + 1)
0006577E <PED.ab2@22887>         If newtype_mode <> 1 Then var$ = ""
000657B2 <PED.ab2@22888>         a$ = temp$
000657DA <PED.ab2@22889>         lev = lev + 1 : If lev > 13 Then lev = 13
000657EE <PED.ab2@22890>         pos2(lev) = 0
000657F6 <PED.ab2@22891>         find = 0
0006582E <PED.ab2@22892>         pos2(lev-1) = WZ_Row{"TYPETABLE"} ;WZListPos("list2")
000658D2 <PED.ab2@22893>         t$ = Left$(a$,Instr(a$," ")-1)
000658E4 <PED.ab2@22894>         If lev > 1
0006594C <PED.ab2@22895>           i = SearchEnd(a$,Asc("."),1)
000659B4 <PED.ab2@22896>           i2 = SearchEnd(a$,Asc("$"),1)
00065A1A <PED.ab2@22897>           a$ = Mid$(a$,i+1,i2-i-3)
00065A20 <PED.ab2@22899>         MOVE.l newtypebase,d0
00065A24 <PED.ab2@22900>         *nt.l = PutD0
00065A2E <PED.ab2@22901>         If *nt
00065A3C <PED.ab2@22902>           *nt = Peek.l(*nt):
00065A46 <PED.ab2@22903>           While *nt
00065A74 <PED.ab2@22904>             b$ = Peek$(*nt+11)
00065AB8 <PED.ab2@22905>             If b$ = a$
00065AD6 <PED.ab2@22906>               *nt2(lev) = Peek.l(*nt+4)
00065ADC <PED.ab2@22907>               Gosub newtype_listsubtype
00065AE4 <PED.ab2@22908>               find = 1
00065AEA <PED.ab2@22909>               Pop If : Goto f1a
00065AF8 <PED.ab2@22911>             *nt = Peek.l(*nt)
00065AFE <PED.ab2@22914>           Wend
00065B04 <PED.ab2@22915>         Else
00065B32 <PED.ab2@22916>           error{"newtypebase = NULL => GURU!!!"}
00065B44 <PED.ab2@22918>         If find = 0
00065B52 <PED.ab2@22919>           lev = lev - 1 ;:WZPrint "list2",-1:
00065B7A <PED.ab2@22920>           a$ = ""
00065BA2 <PED.ab2@22921>           For i = 1 To lev:
00065BB4 <PED.ab2@22922>             If i > 1
00065C20 <PED.ab2@22923>                a$ = a$ + "\" + pos$(i):
00065C26 <PED.ab2@22924>             Else
00065C92 <PED.ab2@22925>                a$ = a$ + "." + pos$(i):
00065CA2 <PED.ab2@22927>           Next
00065CEE <PED.ab2@22928>           i = Instr(temp$," ")
00065D6C <PED.ab2@22929>           temp$ = Replace$ (temp$,"*","")
00065E14 <PED.ab2@22930>           typestr$ = var$ + a$ + "\" + Left$(temp$,i)
00065E3A <PED.ab2@22931>           WZTags #WZRD_TEXTPEN,Peek.l(?newtypecolor)
00065E74 <PED.ab2@22932>           WZPrint "NEWTYPE_ENTRY",&typestr$
00065E76 <PED.ab2@22935>     End Select
00065E7C <PED.ab2@22939>   Select ev
00065E8A <PED.ab2@22941>     Case #IDCMP_INTUITICKS
00065E90 <PED.ab2@22942>       Select newtype_mode
00065E9E <PED.ab2@22944>         Case 0
00065EA6 <PED.ab2@22945>           cpos.l = 0
00065ECE <PED.ab2@22946>           cpos.l = WZ_Column{"TYPETABLE"} ;WZListPos ("list2")
00065F1C <PED.ab2@22947>           cstr$ = WZGetString("STRING2")
00065F60 <PED.ab2@22948>           If cstr$<>cstr2$
00065F94 <PED.ab2@22949>             cstr2$ = cstr$
00065F9A <PED.ab2@22951>             Gosub newtype_listconsts
00065FAE <PED.ab2@22954>         Case 1
00065FFC <PED.ab2@22955>           str2$ = WZGetString("STRING2")
00066040 <PED.ab2@22956>           If str2$<>str2b$
00066074 <PED.ab2@22957>             str2b$ = str2$
00066088 <PED.ab2@22958>             pos2(lev) = 0
0006608E <PED.ab2@22959>             Gosub newtype_listvars
000660A2 <PED.ab2@22962>         Case 2
000660F0 <PED.ab2@22963>           str2$ = WZGetString("STRING2")
00066134 <PED.ab2@22964>           If str2$<>str2b$
00066168 <PED.ab2@22965>             str2b$ = str2$
00066170 <PED.ab2@22966>             find.l = 0
00066184 <PED.ab2@22967>             pos2(lev) = 0
000661B8 <PED.ab2@22968>             p$ = str2$
000661BE <PED.ab2@22969>             Gosub newtype_selecttype
000661C0 <PED.ab2@22972>       End Select
000661D4 <PED.ab2@22974>     Case #IDCMP_CLOSEWINDOW:
000661E6 <PED.ab2@22975>       wtemp\type_x = WindowX
000661F8 <PED.ab2@22976>       wtemp\type_y = WindowY
0006620A <PED.ab2@22977>       wtemp\type_w = WindowWidth
0006621C <PED.ab2@22978>       wtemp\type_h = WindowHeight
0006623E <PED.ab2@22979>       WZ_KillTable{"TYPETABLE"}
00066276 <PED.ab2@22980>       WZCloseWindow WZID("WIN_NEWTYPE")
0006628A <PED.ab2@22983>     Case #IDCMP_RAWKEY:
00066292 <PED.ab2@22984>       Select EventCode
000662A0 <PED.ab2@22987>         Case  $45:
000662B2 <PED.ab2@22988>           wtemp\type_x = WindowX
000662C4 <PED.ab2@22989>           wtemp\type_y = WindowY
000662D6 <PED.ab2@22990>           wtemp\type_w = WindowWidth
000662E8 <PED.ab2@22991>           wtemp\type_h = WindowHeight
0006630A <PED.ab2@22992>           WZ_KillTable{"TYPETABLE"}
00066342 <PED.ab2@22993>           WZCloseWindow WZID("WIN_NEWTYPE")
00066344 <PED.ab2@22996>       End Select
00066358 <PED.ab2@22998>     Case #IDCMP_IDCMPUPDATE
00066398 <PED.ab2@22999>       Select LCase$(WZGadName)
000663BC <PED.ab2@23001>         Case "typeadd"
000663F0 <PED.ab2@23002>           a$ = typestr$
0006649A <PED.ab2@23003>           If Instr(a$,"\",StrLen(a$)-1)<>0
00066534 <PED.ab2@23004>             a$ = Left$(a$,StrLen(a$)-1)
0006653E <PED.ab2@23006>           If quicktype
000665E2 <PED.ab2@23007>             a$ = Mid$(typestr$,Instr (typestr$,"\")+1)
000665F4 <PED.ab2@23009>           If newtype_mode <> 1
00066672 <PED.ab2@23010>             a$ = Replace$(a$,"*","")
00066678 <PED.ab2@23012>           Gosub insertstring
0006667E <PED.ab2@23013>           JSR activatesource
000666A8 <PED.ab2@23015>         Case "string2"
000666D2 <PED.ab2@23018>         Case "parent" :
000666DA <PED.ab2@23019>           quicktype = 0
000666EC <PED.ab2@23020>           If newtype_mode = 0
000666F2 <PED.ab2@23021>           Else
0006670A <PED.ab2@23022>             If lev Then lev = lev - 1
0006671C <PED.ab2@23023>             If lev = 0
0006672E <PED.ab2@23024>               If newtype_mode = 1
00066734 <PED.ab2@23025>                 Gosub newtype_listvars
0006673A <PED.ab2@23026>               Else
0006678A <PED.ab2@23027>                 If str2$<>"" Gosub newtype_selecttype Else Gosub newtype_listtype
00066790 <PED.ab2@23029>             Else
000667CC <PED.ab2@23030>               a$ = pos$(lev)
000667D2 <PED.ab2@23031>               JSR newtype_listsubtype
00066830 <PED.ab2@23033>             a$ = "":pos$(lev+1) = ""
00066858 <PED.ab2@23034>             For i = 1 To lev:
0006686A <PED.ab2@23035>               If i>1
000668D6 <PED.ab2@23036>                 a$ = a$+"\"+pos$(i):
000668DC <PED.ab2@23037>               Else
00066948 <PED.ab2@23038>                 a$ = a$+"."+pos$(i):
00066958 <PED.ab2@23040>             Next
0006698C <PED.ab2@23041>             typestr$ = a$
000669B2 <PED.ab2@23042>             WZTags #WZRD_TEXTPEN,Peek.l(?newtypecolor)
000669EC <PED.ab2@23043>             WZPrint "NEWTYPE_ENTRY",&a$
00066A16 <PED.ab2@23046>         Case "clear":
00066A28 <PED.ab2@23047>           If newtype_mode = 0
00066A50 <PED.ab2@23048>             cstr$ = "":
00066A8A <PED.ab2@23049>             WZPrint "STRING2",&cstr$
00066A90 <PED.ab2@23050>           Else
00066AB8 <PED.ab2@23051>             str2$ = "":
00066ABE <PED.ab2@23052>             Gosub newtype_selecttype
00066AF8 <PED.ab2@23053>             WZPrint "STRING2",&str2$
00066B22 <PED.ab2@23056>         Case "newtype_const"
00066B30 <PED.ab2@23057>           newtype_mode = 0 : Gosub newtype_updatelist
00066B5A <PED.ab2@23059>         Case "newtype_var"
00066B68 <PED.ab2@23060>           newtype_mode = 1 : Gosub newtype_updatelist
00066B92 <PED.ab2@23062>         Case "newtype_struct"
00066BA0 <PED.ab2@23063>           newtype_mode = 2 : Gosub newtype_updatelist
00066BAE <PED.ab2@23065>       End Select
00066BB0 <PED.ab2@23067>   End Select
00066BB2 <PED.ab2@23069> Return
00066BDA <PED.ab2@23073>   str2b$ = ""
00066BFC <PED.ab2@23074>   WZ_KillTable{"TYPETABLE"}
00066C02 <PED.ab2@23076>   Select newtype_mode
00066C10 <PED.ab2@23078>     Case 0
00066C74 <PED.ab2@23079>       WZPrint "STRING2",cstr$
00066CBC <PED.ab2@23080>       WZ_InitTable{"WIN_NEWTYPE","TYPETABLE",2}
00066D62 <PED.ab2@23081>       WZ_SetTableTitle{"TYPETABLE","Identifier","Value"}
00066D9E <PED.ab2@23082>       WZ_SetTableColors{"TYPETABLE",1,0,1,0}
00066DFA <PED.ab2@23083>       WZ_SetPriority{"TYPETABLE",2,1}
00066E1C <PED.ab2@23084>       WZ_DrawTable{"TYPETABLE"}
00066E26 <PED.ab2@23086>       ptr.l = &str2b$
00066E38 <PED.ab2@23087>       If ptr>4096
00066E72 <PED.ab2@23088>         WZPrint "NEWTYPE_ENTRY",&str2b$
00066E78 <PED.ab2@23089>       Else
00066ED6 <PED.ab2@23090>         error{"Pointer to str2b$ is not valid! \\22"+str2b$+"\\22"}
00066EDC <PED.ab2@23093>       Gosub newtype_listconsts
00066EF0 <PED.ab2@23095>     Case 1
00066F54 <PED.ab2@23096>       WZPrint "STRING2",str2$
00066F9C <PED.ab2@23097>       WZ_InitTable{"WIN_NEWTYPE","TYPETABLE",2}
00067042 <PED.ab2@23098>       WZ_SetTableTitle{"TYPETABLE","Identifier","Value"}
0006707E <PED.ab2@23099>       WZ_SetTableColors{"TYPETABLE",1,0,1,0}
000670DA <PED.ab2@23100>       WZ_SetPriority{"TYPETABLE",1,1}
000670FC <PED.ab2@23101>       WZ_DrawTable{"TYPETABLE"}
00067106 <PED.ab2@23102>       ptr.l = &str2$
00067118 <PED.ab2@23103>       If ptr>4096
00067152 <PED.ab2@23104>         WZPrint "NEWTYPE_ENTRY",&str2$
00067158 <PED.ab2@23105>       Else
000671B6 <PED.ab2@23106>         error{"1: Pointer to str2$ is not valid! \\22"+str2$+"\\22"}
000671BC <PED.ab2@23109>       Gosub newtype_listvars
000671D0 <PED.ab2@23111>     Case 2
00067234 <PED.ab2@23112>       WZPrint "STRING2",str2$
0006723E <PED.ab2@23113>       ptr.l = &str2$
00067250 <PED.ab2@23114>       If ptr>4096
0006728A <PED.ab2@23115>         WZPrint "NEWTYPE_ENTRY",&str2$
00067290 <PED.ab2@23116>       Else
000672EE <PED.ab2@23117>         error{"2: Pointer to str2$ is not valid! \\22"+str2$+"\\22"}
000672F4 <PED.ab2@23120>       Gosub newtype_selecttype
0006731C <PED.ab2@23121>       a$ = ""
00067344 <PED.ab2@23122>       For i = 1 To lev:
00067356 <PED.ab2@23123>         If i>1
000673C2 <PED.ab2@23124>            a$ = a$+"\"+pos$(i):
000673C8 <PED.ab2@23125>         Else
00067434 <PED.ab2@23126>            a$ = a$+"."+pos$(i):
00067444 <PED.ab2@23128>       Next
00067478 <PED.ab2@23129>       typestr$ = a$
0006749E <PED.ab2@23130>       WZTags #WZRD_TEXTPEN,Peek.l(?newtypecolor)
000674D8 <PED.ab2@23131>       WZPrint "NEWTYPE_ENTRY",&a$
000674DA <PED.ab2@23133>   End Select
000674DC <PED.ab2@23134> Return
000674FE <PED.ab2@23138>   WZ_ClearTable{"TYPETABLE"}
0006752A <PED.ab2@23139>   InitArgParse str2$
0006754C <PED.ab2@23140>   word1$ = NextArg$
0006756E <PED.ab2@23141>   word2$ = NextArg$
00067574 <PED.ab2@23142>   MOVE.l comPtr_VarBase,d0
00067578 <PED.ab2@23143>   *nt = PutD0
00067582 <PED.ab2@23144>   If *nt
00067590 <PED.ab2@23145>     *nt = Peek.l(*nt):
0006759A <PED.ab2@23146>     While *nt
000675C8 <PED.ab2@23147>       a$ = Peek$(*nt + $13)
0006763C <PED.ab2@23148>       If Peek.w(*nt + 6) AND 2 Then arr$ = "()" Else arr$ = ""
000676B0 <PED.ab2@23149>       If Peek.w(*nt + 6) AND 1 Then poin$ = "*" Else poin$ = ""
0006770C <PED.ab2@23150>       If Instr (a$,word1$)
00067768 <PED.ab2@23151>         If Instr(a$,word2$)
0006777C <PED.ab2@23152>           it.l = Peek.l(*nt+10)
0006787A <PED.ab2@23153>           WZ_AddRow{"TYPETABLE",poin$ + a$ + arr$,Peek$(it + $b)}
00067888 <PED.ab2@23156>       *nt = Peek.l(*nt)
0006788E <PED.ab2@23157>     Wend
00067894 <PED.ab2@23158>   Else
000678C2 <PED.ab2@23159>     error{"comPtr_VarBase = NULL => GURU!!!"}
000678E8 <PED.ab2@23161>   WZ_TableSort{"TYPETABLE",1}
0006790A <PED.ab2@23162>   WZ_UpdateTable{"TYPETABLE"}
0006790C <PED.ab2@23163> Return
0006792E <PED.ab2@23167>   WZ_ClearTable{"TYPETABLE"}
00067952 <PED.ab2@23169>   If FLen(cstr$) => 2
0006797E <PED.ab2@23170>     InitArgParse cstr$
000679A0 <PED.ab2@23171>     word1$ = NextArg$
000679C2 <PED.ab2@23172>     word2$ = NextArg$
000679C8 <PED.ab2@23173>     MOVE.l constantbase,d0
000679CC <PED.ab2@23174>     *nt = PutD0
000679D6 <PED.ab2@23175>     If *nt
000679E4 <PED.ab2@23176>       *nt = Peek.l(*nt)
000679EE <PED.ab2@23177>       While *nt
00067A1C <PED.ab2@23178>         a$ = Peek$(*nt+$13)
00067AD4 <PED.ab2@23179>         If Instr (a$,word1$) Then If Instr(a$,word2$)
00067BAC <PED.ab2@23180>           WZ_AddRow{"TYPETABLE",a$,"$"+Hex$(Peek.l(*nt+8))}
00067BBA <PED.ab2@23182>         *nt = Peek.l(*nt)
00067BC0 <PED.ab2@23183>       Wend
00067BC6 <PED.ab2@23184>     Else
00067BF4 <PED.ab2@23185>       error{"constantbase = NULL => GURU!!!"}
00067C1A <PED.ab2@23190>   WZ_TableSort{"TYPETABLE",1}
00067C3C <PED.ab2@23191>   WZ_UpdateTable{"TYPETABLE"}
00067C3E <PED.ab2@23192> Return
00067C46 <PED.ab2@23196>   lev = 0
00067C68 <PED.ab2@23197>   WZ_KillTable{"TYPETABLE"}
00067CB0 <PED.ab2@23198>   WZ_InitTable{"WIN_NEWTYPE","TYPETABLE",1}
00067CEC <PED.ab2@23199>   WZ_SetTableColors{"TYPETABLE",1,0,1,0}
00067D82 <PED.ab2@23200>   WZ_SetTableTitle{"TYPETABLE","Identifier"}
00067DA4 <PED.ab2@23201>   WZ_DrawTable{"TYPETABLE"}
00067DAA <PED.ab2@23203>   MOVE.l newtypebase,d0
00067DAE <PED.ab2@23204>   *nt = PutD0
00067DB8 <PED.ab2@23205>   If *nt
00067DC6 <PED.ab2@23206>     *nt = Peek.l(*nt)
00067DD0 <PED.ab2@23207>     While *nt
00067DFE <PED.ab2@23208>       a$ = Peek$(*nt+11)
00067EA0 <PED.ab2@23209>       WZ_AddRow{"TYPETABLE",a$}
00067EAE <PED.ab2@23210>       *nt = Peek.l(*nt)
00067EB4 <PED.ab2@23211>     Wend
00067EBA <PED.ab2@23212>   Else
00067EE8 <PED.ab2@23213>     error{"newtypebase = NULL => GURU!!!"}
00067F0A <PED.ab2@23217>   WZ_UpdateTable{"TYPETABLE"}
00067F0C <PED.ab2@23218> Return
00067F2E <PED.ab2@23222>   WZ_KillTable{"TYPETABLE"}
00067F40 <PED.ab2@23223>   If lev = 0
00067F88 <PED.ab2@23224>     WZ_InitTable{"WIN_NEWTYPE","TYPETABLE",1}
0006801E <PED.ab2@23225>     WZ_SetTableTitle{"TYPETABLE","Identifier"}
0006805A <PED.ab2@23226>     WZ_SetTableColors{"TYPETABLE",1,0,1,0}
0006807C <PED.ab2@23227>     WZ_DrawTable{"TYPETABLE"}
00068082 <PED.ab2@23228>   Else
000680CA <PED.ab2@23229>     WZ_InitTable{"WIN_NEWTYPE","TYPETABLE",3}
00068180 <PED.ab2@23230>     WZ_SetTableTitle{"TYPETABLE","Identifier","Type","Offset"}
000681BC <PED.ab2@23231>     WZ_SetTableColors{"TYPETABLE",1,0,1,0}
00068216 <PED.ab2@23232>     WZ_SetPriority{"TYPETABLE",3,2,2}
00068238 <PED.ab2@23233>     WZ_DrawTable{"TYPETABLE"}
00068240 <PED.ab2@23236>   i = 0
0006826C <PED.ab2@23237>   InitArgParse p$
0006828E <PED.ab2@23238>   word1$ = NextArg$
000682B0 <PED.ab2@23239>   word2$ = NextArg$
000682BA <PED.ab2@23240>   If lev
000682CC <PED.ab2@23241>     *nt = *nt2(lev)
000682D6 <PED.ab2@23242>     While *nt
0006834C <PED.ab2@23243>       If Peek.w(*nt+6) = 1 Then b$ = "*" Else b$ = ""
000683A2 <PED.ab2@23244>       b$ = b$ + Peek$(*nt+15)
000683E6 <PED.ab2@23245>       c$ = Peek$(Peek.l(*nt+10)+11)
0006849E <PED.ab2@23246>       If Instr(b$,word1$) Then If Instr(b$,word2$)
000685B2 <PED.ab2@23247>         WZ_AddRow{"TYPETABLE",b$,c$,"$"+Right$(Hex$(Peek.w(*nt+4)),4)}
00068616 <PED.ab2@23249>       b$ + "  ."+c$
00068624 <PED.ab2@23250>       *nt = Peek.l(*nt)
0006862A <PED.ab2@23251>     Wend
00068630 <PED.ab2@23252>   Else
00068636 <PED.ab2@23253>     MOVE.l newtypebase,d0
0006863A <PED.ab2@23254>     *nt = PutD0
00068644 <PED.ab2@23255>     If *nt
00068652 <PED.ab2@23256>       *nt = Peek.l(*nt)
00068658 <PED.ab2@23257>     Else
00068686 <PED.ab2@23258>       error{"newtypebase = NULL => GURU!!!"}
00068690 <PED.ab2@23261>   While *nt
000686BE <PED.ab2@23262>     b$ = Peek$(*nt+11)
00068776 <PED.ab2@23263>     If Instr(b$,word1$) Then If Instr(b$,word2$)
00068828 <PED.ab2@23264>       WZ_AddRow{"TYPETABLE",b$,""}
00068836 <PED.ab2@23265>       find = find + 1
0006886A <PED.ab2@23266>       f$ = b$
00068878 <PED.ab2@23268>     *nt = Peek.l(*nt)
0006887E <PED.ab2@23269>   Wend
000688A4 <PED.ab2@23270>   WZ_TableSort{"TYPETABLE",1}
000688C6 <PED.ab2@23271>   WZ_UpdateTable{"TYPETABLE"}
000688C8 <PED.ab2@23272> Return
000688EA <PED.ab2@23276>   WZ_KillTable{"TYPETABLE"}
000688FC <PED.ab2@23277>   If lev = 0
00068944 <PED.ab2@23278>     WZ_InitTable{"WIN_NEWTYPE","TYPETABLE",1}
000689DA <PED.ab2@23279>     WZ_SetTableTitle{"TYPETABLE","Identifier"}
00068A16 <PED.ab2@23280>     WZ_SetTableColors{"TYPETABLE",1,0,1,0}
00068A38 <PED.ab2@23281>     WZ_DrawTable{"TYPETABLE"}
00068A3E <PED.ab2@23282>   Else
00068A86 <PED.ab2@23283>     WZ_InitTable{"WIN_NEWTYPE","TYPETABLE",3}
00068B3C <PED.ab2@23284>     WZ_SetTableTitle{"TYPETABLE","Identifier","Type","Offset"}
00068B78 <PED.ab2@23285>     WZ_SetTableColors{"TYPETABLE",1,0,1,0}
00068BD2 <PED.ab2@23286>     WZ_SetPriority{"TYPETABLE",3,2,2}
00068BF4 <PED.ab2@23287>     WZ_DrawTable{"TYPETABLE"}
00068C06 <PED.ab2@23290>   If lev > 1
00068C42 <PED.ab2@23291>     pos$(lev) = t$
00068C48 <PED.ab2@23292>   Else
00068C84 <PED.ab2@23293>     pos$(lev) = a$
00068CAC <PED.ab2@23295>   a$ = ""
00068CD4 <PED.ab2@23296>   For i = 1 To lev:
00068CE6 <PED.ab2@23297>     If i > 1
00068D52 <PED.ab2@23298>       a$ = a$+"\"+pos$(i):
00068D58 <PED.ab2@23299>     Else
00068DC4 <PED.ab2@23300>       a$ = a$+"."+pos$(i):
00068DD4 <PED.ab2@23302>   Next
00068E08 <PED.ab2@23303>   typestr$ = a$
00068E2E <PED.ab2@23304>   WZTags #WZRD_TEXTPEN,Peek.l(?newtypecolor)
00068E68 <PED.ab2@23305>   WZPrint "NEWTYPE_ENTRY",&a$
00068E8A <PED.ab2@23306>   WZ_ClearTable{"TYPETABLE"}
00068E92 <PED.ab2@23307>   i = 0
00068EA4 <PED.ab2@23308>   *nt = *nt2(lev)
00068EAE <PED.ab2@23309>   While *nt
00068F24 <PED.ab2@23310>     If Peek.w(*nt+6) = 1 Then a$ = "*" Else a$ = ""
00068F7A <PED.ab2@23311>     a$ = a$ + Peek$(*nt+15)
00068FBE <PED.ab2@23312>     c$ = Peek$(Peek.l(*nt+10)+11)
000690D2 <PED.ab2@23313>     WZ_AddRow{"TYPETABLE",a$,c$,"$" + Right$(Hex$(Peek.w(*nt+4)),4)}
00069136 <PED.ab2@23314>     a$ = a$ + " ."+c$
00069144 <PED.ab2@23315>     *nt = Peek.l(*nt)
00069152 <PED.ab2@23316>     i = i + 1
00069158 <PED.ab2@23317>   Wend
0006917E <PED.ab2@23318>   WZ_TableSort{"TYPETABLE",3}
000691A0 <PED.ab2@23319>   WZ_UpdateTable{"TYPETABLE"}
000691A2 <PED.ab2@23320> Return
000691A8 <PED.ab2@23324>   Select ev
000691B6 <PED.ab2@23326>     Case #IDCMP_IDCMPUPDATE
000691F6 <PED.ab2@23327>       Select LCase$(WZGadName)
0006921A <PED.ab2@23329>         Case "addcode"
00069220 <PED.ab2@23330>           MOVE.l comLong_DisplayLineOffset,d0
00069226 <PED.ab2@23331>           ADD.l comLong_DisplayLine,d0
0006922C <PED.ab2@23332>           CMP.l ctrlhelpline,d0
00069230 <PED.ab2@23333>           BNE skip2
00069264 <PED.ab2@23334>           a$ = addstr$
0006928E <PED.ab2@23335>           For i =  1 To 12
0006930C <PED.ab2@23336>            diag_val$(i) = WZGetString("val"+UStr$(i))
0006931C <PED.ab2@23337>           Next
00069346 <PED.ab2@23338>           For i = 1 To 12
00069432 <PED.ab2@23339>            a$ = a$+diag_val$(i):If diag_val$(i+1) <>"" Then a$ = a$+","
00069442 <PED.ab2@23340>           Next
000694AC <PED.ab2@23341>           If addcodesize >1 Then t$ = Peeks$(addcodepos,addcodesize):Else t$ = ""
000694FC <PED.ab2@23342>           t$ = StripLead$(t$,32)
00069506 <PED.ab2@23343>           MOVE.w comWord_Column,colstore
0006950C <PED.ab2@23344>           JSR cursor_off
00069510 <PED.ab2@23345>           MOVE.l addcodepos@(a5),a0
00069516 <PED.ab2@23346>           SUB.l textbufferaddr,a0
0006951C <PED.ab2@23347>           SUB.w comWord_TextBufferOffset,a0
00069522 <PED.ab2@23348>           MOVE.w a0,comWord_Column
0006952C <PED.ab2@23349>           MOVE.w comWord_ColumnsOffset,oldcolumnsoffset
00069532 <PED.ab2@23350>           CLR.w comWord_ColumnsOffset
00069546 <PED.ab2@23351>           i = FLen(t$)
000695A4 <PED.ab2@23352>           PrintScreenTitle{Str$(i)+" "+t$}
000695AE <PED.ab2@23353>           If i
000695B2 <PED.ab2@23354>              MOVE.l addcodepos@(a5),a0
000695B8 <PED.ab2@23355>              SUB.l textbufferaddr,a0
000695BE <PED.ab2@23356>              SUB.w comWord_TextBufferOffset,a0
000695C4 <PED.ab2@23357>              MOVE.w a0,comWord_Column
000695F2 <PED.ab2@23358>              For i2 = 1 To i-1
000695F8 <PED.ab2@23359>                JSR deletechar
00069608 <PED.ab2@23360>              Next
0006960E <PED.ab2@23362>           Gosub insertstring
00069618 <PED.ab2@23363>           MOVE.w oldcolumnsoffset,comWord_ColumnsOffset
00069622 <PED.ab2@23364>           MOVE.w colstore,comWord_Column
00069628 <PED.ab2@23365>           JSR activatesource
0006962E <PED.ab2@23366>           JSR cursor_on
00069634 <PED.ab2@23367>           Gosub diag_redraw
00069674 <PED.ab2@23368>           WZCloseWindow WZID("WIN_HELPDIAG"):diag = 0
0006969E <PED.ab2@23372>         Case "diagclear"
000696C8 <PED.ab2@23373>           For i = 1 To 12
000696F8 <PED.ab2@23374>             diag_val$(i) = ""
0006978C <PED.ab2@23375>             WZPrint "val"+UStr$(i),diag_val$(i)
0006979C <PED.ab2@23376>           Next
000697BE <PED.ab2@23377>           activategadget{"val1"}
000697CC <PED.ab2@23379>       End Select
000697E0 <PED.ab2@23381>     Case #IDCMP_CLOSEWINDOW
000697E6 <PED.ab2@23382>       Gosub diag_close
000697FA <PED.ab2@23384>     Case #IDCMP_VANILLAKEY
00069814 <PED.ab2@23385>       If EventCode = $1B ; ESC
0006981A <PED.ab2@23386>         Gosub diag_close
0006981C <PED.ab2@23389>   End Select
0006981E <PED.ab2@23391> Return
0006982E <PED.ab2@23395>   wtemp\diag_x = WindowX
00069840 <PED.ab2@23396>   wtemp\diag_y = WindowY
00069852 <PED.ab2@23397>   wtemp\diag_w = WindowWidth
00069864 <PED.ab2@23398>   wtemp\diag_h = WindowHeight
0006989C <PED.ab2@23399>   WZCloseWindow WZID("WIN_HELPDIAG")
000698A4 <PED.ab2@23400>   diag = 0
000698A6 <PED.ab2@23401> Return
000698DA <PED.ab2@23406>   CopyMem_ &wpref(num),&wtemp,SizeOf .winprefs
00069908 <PED.ab2@23407>   If (\lbrowser_w<=0) OR (\lbrowser_h<=0)
00069916 <PED.ab2@23408>     \lbrowser_x = -2
00069924 <PED.ab2@23409>     \lbrowser_y = -2
00069932 <PED.ab2@23410>     \lbrowser_w = -2
00069940 <PED.ab2@23411>     \lbrowser_h = -2
0006996E <PED.ab2@23413>   If (\source_h>0) AND (\source_w>0)
00069984 <PED.ab2@23414>     Poke.w ?win_TopLeft,\source_x
0006999A <PED.ab2@23415>     Poke.w ?win_TopEdge,\source_y
000699B0 <PED.ab2@23416>     Poke.w ?win_Width,\source_w
000699C6 <PED.ab2@23417>     Poke.w ?win_Height,\source_h
000699CC <PED.ab2@23418>   Else
000699E4 <PED.ab2@23419>     *myscreen.Screen = Peek.l(Addr Screen(0))
000699F4 <PED.ab2@23420>     Poke.w ?win_TopLeft,0
00069A24 <PED.ab2@23421>     Poke.w ?win_TopEdge, *myscreen\WBorTop + *myscreen\Font\ta_YSize + 1
00069A44 <PED.ab2@23422>     Poke.w ?win_Width,ScreenWidth
00069A8C <PED.ab2@23423>     Poke.w ?win_Height,ScreenHeight - (*myscreen\WBorTop + *myscreen\Font\ta_YSize + 1)
00069A8E <PED.ab2@23425> Return
00069A98 <PED.ab2@23429>   If *sourcewin
00069AAA <PED.ab2@23430>     If *sourcewin<>0
00069B02 <PED.ab2@23431>       ChangeWindowBox_ *sourcewin,Peek.w(?win_TopLeft),Peek.w(?win_TopEdge),Peek.w(?win_Width),Peek.w(?win_Height)
00069B12 <PED.ab2@23432>       RefreshWindowFrame_ *sourcewin
00069B24 <PED.ab2@23433>       Delay_ 5
00069B42 <PED.ab2@23434>       !asm
00069B48 <PED.ab2@23435>       JSR resize_sourcewindow
00069B72 <PED.ab2@23436>       !basic
00069B78 <PED.ab2@23438>   Else
00069B7E <PED.ab2@23439>     JSR open_sourcewindow
00069B84 <PED.ab2@23440>     JSR cursor_on
00069B98 <PED.ab2@23443>   If \lbrowser_on
00069B9E <PED.ab2@23444>     Gosub open_librarybrowser
00069BA4 <PED.ab2@23445>   Else
00069BC6 <PED.ab2@23446>     WZ_KillTable{"LIBRARYBROWSER"}
00069BFE <PED.ab2@23447>     WZCloseWindow WZID("WIN_LIBRARYBROWSER")
00069C12 <PED.ab2@23450>   If \ibrowser_on
00069C18 <PED.ab2@23451>     Gosub open_instructionbrowser
00069C1E <PED.ab2@23452>   Else
00069C40 <PED.ab2@23453>     WZ_KillTable{"INSTRUCTIONBROWSER"}
00069C78 <PED.ab2@23454>     WZCloseWindow WZID("WIN_INSTRUCTIONBROWSER")
00069C8C <PED.ab2@23457>   If \diag_on
00069D18 <PED.ab2@23458>     WZWindow WZID("WIN_HELPDIAG"),?wzgui,80,\diag_x,\diag_y,\diag_w,\diag_h,4
00069D20 <PED.ab2@23459>     diag = 1
00069D26 <PED.ab2@23460>     Gosub diag_redraw
00069D2C <PED.ab2@23461>   Else
00069D64 <PED.ab2@23462>     WZCloseWindow WZID("WIN_HELPDIAG")
00069D6C <PED.ab2@23463>     diag = 0
00069D80 <PED.ab2@23466>   If \click_on
00069D86 <PED.ab2@23467>     Gosub open_labelwindow
00069D8C <PED.ab2@23468>   Else
00069DC4 <PED.ab2@23469>     WZCloseWindow WZID("WIN_LABELS")
00069DD8 <PED.ab2@23473>   If \short_on
00069DDE <PED.ab2@23474>     Gosub open_shortcuts
00069DE4 <PED.ab2@23475>   Else
00069E06 <PED.ab2@23476>     WZ_KillTable{"SHORTCUTS"}
00069E3E <PED.ab2@23477>     WZCloseWindow WZID("WIN_SHORTCUTS")
00069E52 <PED.ab2@23480>   If \type_on
00069E58 <PED.ab2@23481>     Gosub open_newtype
00069E5E <PED.ab2@23482>   Else
00069E96 <PED.ab2@23483>     WZCloseWindow WZID("WIN_NEWTYPE")
00069E9C <PED.ab2@23487>   FlushEvents
00069EB2 <PED.ab2@23488>   If \activewin > 0
00069ED2 <PED.ab2@23489>     Activate \activewin
00069EF0 <PED.ab2@23490>     Use Window \activewin
00069F22 <PED.ab2@23491>     If Peek.l(Addr Window(\activewin)) <> 0
00069F34 <PED.ab2@23492>       Select \activewin
00069F66 <PED.ab2@23493>         Case 3 : activategadget{"STRING_LABEL"}
00069F9E <PED.ab2@23494>         Case 2 : activategadget{"STRING2"}
00069FD6 <PED.ab2@23495>         Case 1 : activategadget{"STRING"}
0006A00E <PED.ab2@23496>         Case 4 : activategadget{"VAL1"}
0006A010 <PED.ab2@23497>       End Select
0006A016 <PED.ab2@23499>   Else
0006A01C <PED.ab2@23500>     Gosub activatesource
0006A024 <PED.ab2@23502>   ev = 0
0006A026 <PED.ab2@23503> Return
0006A0E2 <PED.ab2@23508>   WZWindow WZID("WIN_LABELS"),?wzgui,255,\click_x,\click_y,\click_w,\click_h,WZID("WIN_LABELS")
0006A11C <PED.ab2@23509>   Use Window WZID("WIN_LABELS")
0006A156 <PED.ab2@23510>   If Peek.l(?addr_menustrip) Then SetMenuStrip_ WZWindowAddr,Peek.l(?addr_menustrip)
0006A1A0 <PED.ab2@23512>   WZPrint "rem",Peek.w(?comWord_LabelRemark)
0006A1EA <PED.ab2@23513>   WZPrint "all",Peek.w(?comWord_LabelAll)
0006A24E <PED.ab2@23514>   WZPrint "STRING_LABEL",search_label$
0006A29E <PED.ab2@23515>   WZPrint "LISTVIEW_LABELS",LabelList_PreSelectItemNumber,list_labels,LabelList_FirstVisableItemNumber
0006A2A4 <PED.ab2@23516>   Gosub update_versiongadgets
0006A2A6 <PED.ab2@23517> Return
0006A2C6 <PED.ab2@23521>   If RawKeyState($42)  Then Gosub activatesource : ev = 0
0006A2CC <PED.ab2@23523>   Select ev
0006A2DA <PED.ab2@23525>     Case #IDCMP_INTUITICKS
0006A2FE <PED.ab2@23526>       LabelList_NewSelectItemNumber.l = WZListNum("LISTVIEW_LABELS")
0006A322 <PED.ab2@23527>       LabelList_FirstVisableItemNumber = WZListPos ("LISTVIEW_LABELS")
0006A328 <PED.ab2@23528>       MOVE.l d0,comLong_Label1VisableItem
0006A38E <PED.ab2@23529>       search_label$ = LCase$( WZGetString("STRING_LABEL") )
0006A39C <PED.ab2@23531>       If LabelList_NewSelectItemNumber<>LabelList_PreSelectItemNumber
0006A3A2 <PED.ab2@23532>         JSR jump_addhistory
0006A3B6 <PED.ab2@23533>         i = WZListData (list_labels,LabelList_NewSelectItemNumber)
0006A3D4 <PED.ab2@23534>         !asm
0006A3DA <PED.ab2@23535>         MOVEA.l comPtr_CurrentSourceLine,A4
0006A3DC <PED.ab2@23536>         MOVE.l d0,a0:
0006A3E2 <PED.ab2@23537>         JSR storeline
0006A3E8 <PED.ab2@23538>         JSR jump_to_keyword
0006A3EE <PED.ab2@23539>         JSR cursor_on
0006A3F4 <PED.ab2@23540>         MOVE.l a4,oldcurrsourceline
0006A41E <PED.ab2@23541>         !basic
0006A424 <PED.ab2@23542>         LabelList_PreSelectItemNumber = LabelList_NewSelectItemNumber
0006A468 <PED.ab2@23544>       If search_label$<>old_search_label$
0006A46E <PED.ab2@23545>         CLR.l comLong_Label1VisableItem
0006A47E <PED.ab2@23546>         LabelList_FirstVisableItemNumber = 0 : LabelList_NewSelectItemNumber = 0
0006A4B2 <PED.ab2@23547>         old_search_label$ = search_label$
0006A4D0 <PED.ab2@23548>         !asm
0006A4D6 <PED.ab2@23549>         JSR clear_labellist
0006A4DC <PED.ab2@23550>         JSR update_labellist
0006A4E2 <PED.ab2@23551>         JSR redraw_labellist
0006A50C <PED.ab2@23552>         !basic
0006A544 <PED.ab2@23553>         Poke$ ?comStr_LabelSearchString ,search_label$
0006A558 <PED.ab2@23556>     Case #IDCMP_RAWKEY
0006A56C <PED.ab2@23559>     Case #IDCMP_CLOSEWINDOW
0006A57E <PED.ab2@23560>       wtemp\click_x = WindowX
0006A590 <PED.ab2@23561>       wtemp\click_y = WindowY
0006A5A2 <PED.ab2@23562>       wtemp\click_w = WindowWidth
0006A5B4 <PED.ab2@23563>       wtemp\click_h = WindowHeight
0006A5EC <PED.ab2@23564>       WZCloseWindow WZID("WIN_LABELS")
0006A600 <PED.ab2@23567>     Case #IDCMP_IDCMPUPDATE
0006A640 <PED.ab2@23568>       Select LCase$(WZGadName)
0006A664 <PED.ab2@23570>         Case "string_label"
0006A68E <PED.ab2@23573>         Case "case"
0006A6B6 <PED.ab2@23574>           search_label$ = "Case"
0006A71A <PED.ab2@23575>           WZPrint "STRING_LABEL",search_label$
0006A72A <PED.ab2@23576>           Poke.w ?comWord_LabelRemark,1
0006A73A <PED.ab2@23577>           Poke.w ?comWord_LabelAll,0
0006A772 <PED.ab2@23578>           WZPrint "rem",1
0006A7AA <PED.ab2@23579>           WZPrint "all",0
0006A7B2 <PED.ab2@23580>           LabelList_FirstVisableItemNumber = 0
0006A7D0 <PED.ab2@23581>           !asm
0006A7D6 <PED.ab2@23582>           JSR clear_labellist
0006A7DC <PED.ab2@23583>           JSR update_labellist
0006A7E2 <PED.ab2@23584>           JSR redraw_labellist
0006A80C <PED.ab2@23585>           !basic
0006A82E <PED.ab2@23586>           activategadget {"STRING_LABEL"}
0006A858 <PED.ab2@23588>         Case "listview_labels"
0006A85E <PED.ab2@23590>           JSR activatesource
0006A89A <PED.ab2@23591>           If LabelList_PreSelectItemNumber<>WZListNum("LISTVIEW_LABELS")
0006A8A0 <PED.ab2@23592>             CLR.l oldcurrsourceline
0006A8C0 <PED.ab2@23595>           i = WZListData (list_labels,WZInput)
0006A8DE <PED.ab2@23596>           !asm
0006A8E4 <PED.ab2@23597>           MOVE.l comPtr_CurrentSourceLine,a4
0006A8EA <PED.ab2@23598>           CMP.l oldcurrsourceline,a4
0006A8EE <PED.ab2@23599>           BEQ 'l1
0006A8F0 <PED.ab2@23600>           MOVE.l d0,a0:
0006A8F6 <PED.ab2@23601>           JSR storeline
0006A8FC <PED.ab2@23602>           JSR jump_to_keyword
0006A902 <PED.ab2@23603>           JSR cursor_on
0006A908 <PED.ab2@23606>           MOVE.l a4,oldcurrsourceline
0006A932 <PED.ab2@23607>           !basic
0006A956 <PED.ab2@23608>           LabelList_FirstVisableItemNumber = WZListPos ("LISTVIEW_LABELS")
0006A95C <PED.ab2@23609>           MOVE.l d0,comLong_Label1VisableItem
0006A980 <PED.ab2@23610>           LabelList_PreSelectItemNumber = WZListNum("LISTVIEW_LABELS")
0006A9AA <PED.ab2@23613>         Case "rem"
0006A9C6 <PED.ab2@23614>           Poke.w ?comWord_LabelRemark,WZInput
0006A9D6 <PED.ab2@23615>           Poke.w ?comWord_LabelAll,0
0006AA0E <PED.ab2@23616>           WZPrint "all",0
0006AA16 <PED.ab2@23618>           LabelList_FirstVisableItemNumber = 0
0006AA34 <PED.ab2@23619>           !asm
0006AA3A <PED.ab2@23620>           JSR clear_labellist
0006AA40 <PED.ab2@23621>           JSR update_labellist
0006AA46 <PED.ab2@23622>           JSR redraw_labellist
0006AA70 <PED.ab2@23623>           !basic
0006AA92 <PED.ab2@23624>           activategadget{"STRING_LABEL"}
0006AABC <PED.ab2@23626>         Case "all"
0006AAD8 <PED.ab2@23627>           Poke.w ?comWord_LabelAll,WZInput
0006AAE8 <PED.ab2@23628>           Poke.w ?comWord_LabelRemark,0
0006AB20 <PED.ab2@23629>           WZPrint "rem",0
0006AB28 <PED.ab2@23630>           LabelList_FirstVisableItemNumber = 0
0006AB46 <PED.ab2@23631>           !asm
0006AB4C <PED.ab2@23632>           JSR clear_labellist
0006AB52 <PED.ab2@23633>           JSR update_labellist
0006AB58 <PED.ab2@23634>           JSR redraw_labellist
0006AB82 <PED.ab2@23635>           !basic
0006ABA4 <PED.ab2@23636>           activategadget{"STRING_LABEL"}
0006ABCE <PED.ab2@23638>         Case "clr"
0006ABF6 <PED.ab2@23639>           search_label$ = ""
0006AC5A <PED.ab2@23640>           WZPrint "STRING_LABEL",search_label$
0006AC62 <PED.ab2@23641>           LabelList_FirstVisableItemNumber = 0
0006AC80 <PED.ab2@23642>           !asm
0006AC86 <PED.ab2@23643>           JSR clear_labellist
0006AC8C <PED.ab2@23644>           JSR update_labellist
0006AC92 <PED.ab2@23645>           JSR redraw_labellist
0006ACBC <PED.ab2@23646>           !basic
0006ACDE <PED.ab2@23647>           activategadget{"STRING_LABEL"}
0006AD08 <PED.ab2@23649>         Case "button_update_liblist"
0006AD0E <PED.ab2@23656>           Gosub scan_source_for_used_libs
0006AD38 <PED.ab2@23658>         Case "library_list"
0006AD48 <PED.ab2@23659>           cmd_node.l = WZGetNode(lib_list.List)
0006AD74 <PED.ab2@23660>           cmd$ = WZListString(cmd_node,0)
0006ADC0 <PED.ab2@23661>           klammer.b = Instr(cmd$,"(")
0006ADCE <PED.ab2@23662>           If klammer
0006ADE8 <PED.ab2@23663>             used_win = Used Window
0006AE8C <PED.ab2@23664>             searchcmd$ = StrChg(Left$(cmd$,klammer-1)," ","")
0006AE94 <PED.ab2@23666>             BSET #7,case_sensitive
0006AECC <PED.ab2@23667>             Poke$ ?str_searchstring,searchcmd$;,60
0006AF04 <PED.ab2@23668>             Poke$ ?str_oldsearchgadget,searchcmd$;,60
0006AF16 <PED.ab2@23669>             ActivateWindow_(?ptr_sourcewindow)
0006AF5A <PED.ab2@23671>             If oldsearchcmd$ <> searchcmd$
0006AF8E <PED.ab2@23672>               oldsearchcmd$ = searchcmd$
0006AFAC <PED.ab2@23673>               !asm
0006AFAE <PED.ab2@23674>               MOVEQ #0,d0
0006AFB4 <PED.ab2@23675>               JSR jumpline
0006AFDE <PED.ab2@23676>               !basic
0006AFFC <PED.ab2@23679>             !asm
0006B002 <PED.ab2@23680>             JSR storeline
0006B008 <PED.ab2@23681>             JSR cursor_off
0006B00E <PED.ab2@23682>             MOVE.l comPtr_CurrentSourceLine,a4
0006B014 <PED.ab2@23683>             JSR menu_findnext
0006B01A <PED.ab2@23684>             JSR update_vertscroller
0006B020 <PED.ab2@23685>             JSR cursor_on
0006B04A <PED.ab2@23686>             !basic
0006B060 <PED.ab2@23687>             Use Window used_win
0006B0A0 <PED.ab2@23689>             If WZInput("FIND_SENSITIVE")<>0 Then BSET #7,case_sensitive
0006B0AE <PED.ab2@23692>       End Select
0006B0B0 <PED.ab2@23694>   End Select
0006B0DC <PED.ab2@23695>   move_cursor{"LISTVIEW_LABELS",list_labels,LabelList_PreSelectItemNumber}
0006B0DE <PED.ab2@23696> RTS
0006B0E0 <PED.ab2@23700>   MOVE.l d0,-(a7)
0006B0E4 <PED.ab2@23701>   MOVEM.l a0-a1,-(a7)
0006B0E6 <PED.ab2@23702>   MOVE.l a1,a0
0006B0EC <PED.ab2@23703>   CMP.b #".",-1(a0)
0006B0F0 <PED.ab2@23704>   BEQ 'sk1
0006B0F6 <PED.ab2@23705>   CMP.b #";",-1(a0)
0006B0FA <PED.ab2@23706>   BEQ 'sk1
0006B0FC <PED.ab2@23707>   SUBQ.l #1,a0
0006B102 <PED.ab2@23709>   MOVE.l expandstore,a1
0006B108 <PED.ab2@23710>   JSR detokenize_line
0006B10C <PED.ab2@23711>   MOVEM.l (a7)+,a0-a1
0006B10E <PED.ab2@23712>   MOVE.l a0,d0
0006B114 <PED.ab2@23713>   MOVE.l a1,temp
0006B13E <PED.ab2@23714>   !basic
0006B142 <PED.ab2@23715>   s = PutD0
0006B148 <PED.ab2@23716>   MOVE.l expandstore,d0
0006B14C <PED.ab2@23717>   i = PutD0
0006B1AC <PED.ab2@23718>   If i Then s$ = Peek$(i) : Else s$=""
0006B250 <PED.ab2@23719>   If Instr(s$,"Stop") OR Instr(s$,"Trap")
0006B256 <PED.ab2@23720>     MOVE.l temp,a0
0006B258 <PED.ab2@23722>     MOVE.b (a0)+,d0
0006B25C <PED.ab2@23723>     BEQ no_breakpoint
0006B260 <PED.ab2@23724>     CMP.b #$80,d0
0006B264 <PED.ab2@23725>     BNE 'l1
0006B268 <PED.ab2@23726>     CMP.b #$ae,(a0)
0006B26C <PED.ab2@23727>     BEQ 'l2
0006B270 <PED.ab2@23728>     CMP.b #$2d,(a0)
0006B274 <PED.ab2@23729>     BNE 'l1
0006B294 <PED.ab2@23731>     WZTags #WENTRYA_TextPen,2
0006B2A8 <PED.ab2@23732>     If sort_labels = -1
0006B2D8 <PED.ab2@23733>       WZListAdd list_labels," --Breakpoint---",0,s
0006B2DE <PED.ab2@23734>     Else
0006B30E <PED.ab2@23735>       WZListAdd list_labels," --Breakpoint---",2000,s
0006B314 <PED.ab2@23737>     ADDQ.w #1,comWord_LabelCounter
0006B31A <PED.ab2@23738>     ADDQ.l #1,numcount
0006B320 <PED.ab2@23739>     Goto nostr
0006B336 <PED.ab2@23743>   If Peek.b(?isfunction)
0006B388 <PED.ab2@23744>     s$ = Mid$(s$,2)
0006B3AE <PED.ab2@23745>     WZTags #WENTRYA_TextPen,Peek.l(?functioncolor)
0006B3B4 <PED.ab2@23746>   Else
0006B3D4 <PED.ab2@23747>     WZTags #WENTRYA_TextPen,1
0006B3DE <PED.ab2@23749>   If t
0006B44C <PED.ab2@23750>     If Instr(s$,word1$) OR skip = 1
0006B4BA <PED.ab2@23751>       If Instr(s$,word2$) OR skip = 1
0006B4F4 <PED.ab2@23752>         WZListAdd list_labels,s$,sort_labels,s
0006B4FA <PED.ab2@23753>         ADDQ.w #1,comWord_LabelCounter
0006B500 <PED.ab2@23754>         ADDQ.l #1,numcount
0006B508 <PED.ab2@23755>         skip = 0
0006B50E <PED.ab2@23758>   Else
0006B57C <PED.ab2@23759>     If Instr(s$,search_label$) OR skip = 1
0006B5B6 <PED.ab2@23760>       WZListAdd list_labels,s$,sort_labels,s
0006B5BC <PED.ab2@23761>       ADDQ.w #1,comWord_LabelCounter
0006B5C2 <PED.ab2@23762>       ADDQ.l #1,numcount
0006B5CA <PED.ab2@23763>       skip = 0
0006B5E8 <PED.ab2@23768>   !asm
0006B5EA <PED.ab2@23769>   MOVE.l (a7)+,d0
0006B5F0 <PED.ab2@23770>   CLR.b isfunction
0006B5F2 <PED.ab2@23771> RTS
0006B5F8 <PED.ab2@23775>   MOVE.w comWord_KeyBeforeReturn,D0
0006B5FC <PED.ab2@23776>   BEQ.w exit_storeline
0006B600 <PED.ab2@23778>   MOVEM.l d0-d7/a0-a6,-(a7)
0006B606 <PED.ab2@23779>   MOVE.l comPtr_CurrentSourceLine,a4
0006B60C <PED.ab2@23780>   JSR cursor_off
0006B612 <PED.ab2@23781>   MOVEA.l textbufferaddr,A2
0006B618 <PED.ab2@23782>   ADDA.w comWord_TextBufferOffset,A2
0006B61E <PED.ab2@23783>   MOVE.w D0,comWord_SourceChanged
0006B624 <PED.ab2@23785>   JSR parse_line
0006B62A <PED.ab2@23788>   SF comByte_StateBlockMark
0006B630 <PED.ab2@23789>   TST.l comLong_BlockEndY
0006B634 <PED.ab2@23790>    BMI.w exit_updateblocka
0006B638 <PED.ab2@23791>   MOVEM.l D0-D3/A0-A2,-(A7)
0006B63E <PED.ab2@23792>   MOVE.l comLong_DisplayLine,D1
0006B644 <PED.ab2@23793>   ADD.l comLong_DisplayLineOffset,D1
0006B64A <PED.ab2@23794>   CMP.l comLong_BlockStartY,D1
0006B64E <PED.ab2@23795>    BLT.w JL_0_C66a
0006B654 <PED.ab2@23796>   CMP.l comLong_BlockEndY,D1
0006B658 <PED.ab2@23797>    BGT.w JL_0_C66a
0006B65E <PED.ab2@23798>   MOVE.w comLong_BlockStartX,D0
0006B664 <PED.ab2@23799>   MOVE.l comLong_BlockStartY,D1
0006B66A <PED.ab2@23800>   MOVE.w comLong_BlockEndX,D2
0006B670 <PED.ab2@23801>   MOVE.l comLong_BlockEndY,D3
0006B672 <PED.ab2@23802>   CMP.l D1,D3
0006B676 <PED.ab2@23803>    BNE.w JL_0_C50a
0006B678 <PED.ab2@23804>   CMP.w D0,D2
0006B67C <PED.ab2@23805>    BNE.w JL_0_C50a
0006B682 <PED.ab2@23806>   MOVE.w visiblecolumns,D2
0006B688 <PED.ab2@23808>   SUB.l comLong_DisplayLineOffset,D3
0006B68E <PED.ab2@23809>   SUB.l comLong_DisplayLineOffset,D1
0006B694 <PED.ab2@23810>   JSR JL_0_59BC
0006B69A <PED.ab2@23811>   ST comByte_StateBlockMark
0006B69E <PED.ab2@23813>   MOVEM.l (A7)+,D0-D3/A0-A2
0006B6A4 <PED.ab2@23816>   JSR JL_0_55AA
0006B6AA <PED.ab2@23817>   MOVE.w comWord_DoTokenize,D0
0006B6AE <PED.ab2@23818>    BEQ.w JL_0_CC6b
0006B6B4 <PED.ab2@23819>   JSR print_current_sourceline
0006B6BA <PED.ab2@23820>   TST.b comByte_StateBlockMark
0006B6BE <PED.ab2@23821>    BEQ.w JL_0_CC6b
0006B6C2 <PED.ab2@23822>   MOVEM.l D0-D3/D7/A0-A2,-(A7)
0006B6C8 <PED.ab2@23823>   MOVE.w comLong_BlockStartX,D0
0006B6CE <PED.ab2@23824>   MOVE.l comLong_BlockStartY,D1
0006B6D4 <PED.ab2@23825>   MOVE.w comLong_BlockEndX,D2
0006B6DA <PED.ab2@23826>   MOVE.l comLong_BlockEndY,D3
0006B6DC <PED.ab2@23827>   CMP.l D1,D3
0006B6E0 <PED.ab2@23828>    BNE.w JL_0_CB2a
0006B6E2 <PED.ab2@23829>   CMP.w D0,D2
0006B6E6 <PED.ab2@23830>    BNE.w JL_0_CB2a
0006B6EC <PED.ab2@23831>   MOVE.w visiblecolumns,D2
0006B6F2 <PED.ab2@23834>   SUB.l comLong_DisplayLineOffset,D3
0006B6F8 <PED.ab2@23835>   SUB.l comLong_DisplayLineOffset,D1
0006B6FE <PED.ab2@23836>   JSR JL_0_59BC
0006B702 <PED.ab2@23837>   MOVEM.l (A7)+,D0-D3/D7/A0-A2
0006B708 <PED.ab2@23840>   MOVE.l a4,comPtr_CurrentSourceLine
0006B70C <PED.ab2@23841>   MOVEM.l (a7)+,d0-d7/a0-a6
0006B712 <PED.ab2@23844>   CLR.w comWord_KeyBeforeReturn
0006B718 <PED.ab2@23845>   MOVE.l comPtr_CurrentSourceLine,a4
0006B71A <PED.ab2@23846> RTS
0006B71E <PED.ab2@23850>   MOVEM.l d1-d7/a0-a6,-(a7)
0006B720 <PED.ab2@23851>   MOVE.l d0,a2
0006B726 <PED.ab2@23852>   MOVEA.l comPtr_TokenBase,A3
0006B728 <PED.ab2@23855>   MOVEA.l A2,A4
0006B72A <PED.ab2@23856>   MOVE.l A3,-(A7)
0006B72C <PED.ab2@23857>   ADDQ.w #6,A3
0006B72E <PED.ab2@23860>     MOVE.b (A3)+,D3
0006B732 <PED.ab2@23861>      BEQ.w JL_0_6082b     ;found
0006B734 <PED.ab2@23862>     MOVE.b (A4)+,D2
0006B736 <PED.ab2@23866>     CMP.b D3,D2
0006B73A <PED.ab2@23867>      BEQ.b JL_0_603Cb
0006B73C <PED.ab2@23870>     MOVEA.l (A7)+,A3
0006B73E <PED.ab2@23871>     MOVE.l (A3),D3
0006B742 <PED.ab2@23872>      BEQ.w JL_0_6060b
0006B744 <PED.ab2@23873>     MOVEA.l D3,A3
0006B748 <PED.ab2@23874> BRA.b JL_0_6036b
0006B74A <PED.ab2@23877>   MOVE.b (A4),D2
0006B74E <PED.ab2@23878>   BNE JL_0_6054b
0006B752 <PED.ab2@23879>   BCLR #$7,D2
0006B756 <PED.ab2@23880>    BNE.b JL_0_6054b       ;not found
0006B758 <PED.ab2@23881>   MOVEA.l (A7)+,A3
0006B75A <PED.ab2@23882>   ADDQ.w #4,A3
0006B75C <PED.ab2@23883>   MOVEQ #0,d0
0006B75E <PED.ab2@23884>   MOVE.b (A3)+,d0
0006B760 <PED.ab2@23885>   ASL.l #8,d0
0006B762 <PED.ab2@23886>   MOVE.b (a3),d0
0006B766 <PED.ab2@23887>   MOVEM.l (a7)+,d1-d7/a0-a6
0006B768 <PED.ab2@23888> RTS
0006B76A <PED.ab2@23891>   MOVEQ #0,d0
0006B76E <PED.ab2@23892>   MOVEM.l (a7)+,d1-d7/a0-a6
0006B770 <PED.ab2@23893> RTS
0006B79A <PED.ab2@23897>   !basic
0006B79E <PED.ab2@23898>   CMP.w #$57,d7      ; check for "F8"
0006B7A2 <PED.ab2@23899>   BNE 'l1
0006B7CE <PED.ab2@23900>   If WZ_CheckOpen{"WIN_LABELS"}
0006B7DC <PED.ab2@23901>     LabelList_PreSelectItemNumber = LabelList_PreSelectItemNumber+1
0006B81A <PED.ab2@23902>     If LabelList_PreSelectItemNumber = >WZListItems (list_labels) Then LabelList_PreSelectItemNumber = WZListItems (list_labels)-1
0006B820 <PED.ab2@23903>     LabelList_NewSelectItemNumber = LabelList_PreSelectItemNumber
0006B85A <PED.ab2@23904>     Use Window WZID("WIN_LABELS")
0006B8A0 <PED.ab2@23905>     WZPrint "LISTVIEW_LABELS",LabelList_PreSelectItemNumber,list_labels
0006B8B4 <PED.ab2@23906>     i = WZListData (list_labels,LabelList_NewSelectItemNumber)
0006B8D2 <PED.ab2@23907>     !asm
0006B8D6 <PED.ab2@23908>     MOVEM.l a0-a6/d1-d7,-(a7)
0006B8DC <PED.ab2@23909>     MOVEA.l comPtr_CurrentSourceLine,A4
0006B8DE <PED.ab2@23910>     MOVE.l d0,a0:
0006B8E4 <PED.ab2@23911>     JSR storeline
0006B8EA <PED.ab2@23912>     JSR jump_to_keyword
0006B8F0 <PED.ab2@23913>     JSR cursor_on
0006B8F6 <PED.ab2@23914>     MOVE.l a4,oldcurrsourceline
0006B8FA <PED.ab2@23915>     MOVEM.l (a7)+,a0-a6/d1-d7
0006B924 <PED.ab2@23916>     !basic
0006B928 <PED.ab2@23920>   CMP.w #$56,D7       ; check for "F7"
0006B92C <PED.ab2@23921>   BNE 'l2
0006B958 <PED.ab2@23922>   If WZ_CheckOpen{"WIN_LABELS"}
0006B966 <PED.ab2@23923>     LabelList_PreSelectItemNumber = LabelList_PreSelectItemNumber-1
0006B980 <PED.ab2@23924>     If LabelList_PreSelectItemNumber<0 Then LabelList_PreSelectItemNumber = 0
0006B986 <PED.ab2@23925>     LabelList_NewSelectItemNumber = LabelList_PreSelectItemNumber
0006B9C0 <PED.ab2@23926>     Use Window WZID("WIN_LABELS")
0006BA06 <PED.ab2@23927>     WZPrint "LISTVIEW_LABELS",LabelList_PreSelectItemNumber,list_labels
0006BA1A <PED.ab2@23928>     i = WZListData (list_labels,LabelList_NewSelectItemNumber)
0006BA38 <PED.ab2@23929>     !asm
0006BA3C <PED.ab2@23930>     MOVEM.l a0-a6/d1-d7,-(a7)
0006BA42 <PED.ab2@23931>     MOVEA.l comPtr_CurrentSourceLine,A4
0006BA44 <PED.ab2@23932>     MOVE.l d0,a0:
0006BA4A <PED.ab2@23933>     JSR storeline
0006BA50 <PED.ab2@23934>     JSR jump_to_keyword
0006BA56 <PED.ab2@23935>     JSR cursor_on
0006BA5C <PED.ab2@23936>     MOVE.l a4,oldcurrsourceline
0006BA60 <PED.ab2@23937>     MOVEM.l (a7)+,a0-a6/d1-d7
0006BA8A <PED.ab2@23938>     !basic
0006BAA8 <PED.ab2@23942>   !asm
0006BAAA <PED.ab2@23943> RTS
0006BAB4 <PED.ab2@23947>   MOVE.l ptr_sourcewindow,d0 : i = PutD0
0006BACE <PED.ab2@23948>   If i Then ActivateWindow_ i
0006BAD0 <PED.ab2@23949> RTS
0006BAFA <PED.ab2@23953>   !basic
0006BB00 <PED.ab2@23954>   MOVE.l #filenamepos,d2
0006BB06 <PED.ab2@23955>   MULS fontwidth,d2
0006BB0C <PED.ab2@23956>   MOVE.l d2,d0 : xpos_text.l = PutD0
0006BB1C <PED.ab2@23958>   *rastp.RastPort = Peek.l(?rp_sourcewindow)
0006BB2C <PED.ab2@23959>   *swin.Window = Peek.l(?ptr_sourcewindow)
0006BB3C <PED.ab2@23960>   *tfont.TextFont = Peek.l(?ptr_sourcefont)
0006BB62 <PED.ab2@23961>   SetAPen_ *rastp, AB3Pen(#AB3_screenfill)
0006BB7C <PED.ab2@23962>   xpos_text.l = #filenamepos * *tfont\tf_XSize
0006BBEE <PED.ab2@23963>   RectFill_ *rastp,xpos_text - 4,ypos_sa + 2,*swin\Width-*swin\BorderRight,ypos_sa + 2 + *tfont\tf_YSize + 2
0006BBF4 <PED.ab2@23965>   MOVEA.l rp_sourcewindow,A1
0006BBFA <PED.ab2@23966>   MOVEA.l _graphicsbase,A6
0006BC00 <PED.ab2@23967>   MOVE.l ptr_sourcewindow,A0
0006BC06 <PED.ab2@23969>   MOVE.l loadedfilesbase,d0
0006BC0A <PED.ab2@23970>   BEQ 'skip_filenames
0006BC10 <PED.ab2@23972>   MOVE.l #filenamepos,d2
0006BC16 <PED.ab2@23973>   MULS fontwidth,d2
0006BC18 <PED.ab2@23975>     MOVE.l d0,a0
0006BC1A <PED.ab2@23976>     MOVEQ #0,d1
0006BC20 <PED.ab2@23977>     MOVE.l d2,d0 : xpos_text.l = PutD0
0006BC42 <PED.ab2@23978>     Move_ *rastp,xpos_text,ypos_text
0006BC56 <PED.ab2@23980>     fcol.w = AB3Pen(#AB3_screentext)    ; selected
0006BC6A <PED.ab2@23981>     bcol.w = AB3Pen(#AB3_cbackground)
0006BC70 <PED.ab2@23982>     bevel_recessed.b = True
0006BC76 <PED.ab2@23983>     stylestate.w = #FSF_BOLD
0006BC7C <PED.ab2@23984>     CMP.l actualfile,a0
0006BC80 <PED.ab2@23985>     BEQ 'l1
0006BC94 <PED.ab2@23986>     fcol.w = AB3Pen(#AB3_screentext)  ; unselected
0006BCA8 <PED.ab2@23987>     bcol.w = AB3Pen(#AB3_screenback)
0006BCAE <PED.ab2@23988>     bevel_recessed.b = False
0006BCB4 <PED.ab2@23989>     stylestate.w = #FS_NORMAL
0006BCB8 <PED.ab2@23991>     MOVEM.l a0/a1,-(a7)
0006BCBA <PED.ab2@23993>     MOVE.l d2,-(a7)
0006BCC0 <PED.ab2@23994>     JSR draw_bevel
0006BCC2 <PED.ab2@23995>     MOVE.l (a7)+,d2
0006BCDC <PED.ab2@23998>     SetDrMd_ *rastp, 1
0006BCF6 <PED.ab2@23999>     SetAPen_ *rastp, fcol
0006BD10 <PED.ab2@24000>     SetBPen_ *rastp, bcol
0006BD64 <PED.ab2@24002>     If stylestate = #FSF_BOLD Then SetFont_ *rastp,Peek.l(?ptr_sourcefontb) : Else SetFont_ *rastp,Peek.l(?ptr_sourcefont)
0006BD88 <PED.ab2@24003>     SetSoftStyle_ *rastp,stylestate.w,#FSF_BOLD
0006BD8C <PED.ab2@24005>     MOVEM.l (a7)+,a1/a0
0006BD92 <PED.ab2@24007>     MOVE.l #filenameoffs,d0
0006BD98 <PED.ab2@24008>     MULS fontwidth,d0
0006BD9A <PED.ab2@24009>     ADD.w d0,d2
0006BD9C <PED.ab2@24010>     MOVEQ #10,d0
0006BDA2 <PED.ab2@24012>     CMP.l actualfile,a0
0006BDA6 <PED.ab2@24013>     BNE 'nom
0006BDB0 <PED.ab2@24014>     CMP.l #$4D4F4449,comStr_Modified     ; "MODI"
0006BDB4 <PED.ab2@24015>     BNE 'nom2
0006BDB8 <PED.ab2@24017>     MOVEM.l d0/a0/a1,-(a7)
0006BDDC <PED.ab2@24021>     Text_ *rastp,?modifymark, 1
0006BDE0 <PED.ab2@24022>     MOVEM.l (a7)+,d0/a0/a1
0006BDE6 <PED.ab2@24023>     SUB.l #1,d0 ; we show the modify mark, so 1 letter less in text
0006BDEA <PED.ab2@24024>     BRA 'nom2
0006BDF2 <PED.ab2@24027>     CMP.l #$4D4F4449,$1e6(a0)     ; "MODI"
0006BDF6 <PED.ab2@24028>     BNE 'nom2
0006BDFA <PED.ab2@24029>     MOVEM.l d0/a0/a1,-(a7)
0006BE1E <PED.ab2@24033>     Text_ *rastp,?modifymark, 1
0006BE22 <PED.ab2@24034>     MOVEM.l (a7)+,d0/a0/a1
0006BE28 <PED.ab2@24035>     SUB.l #1,d0 ; we show the modify mark, so 1 letter less in text
0006BE2A <PED.ab2@24039>     MOVE.l a0,-(a7)
0006BE2E <PED.ab2@24040>     LEA $de(a0),a0
0006BE30 <PED.ab2@24041>     TST.b (a0)
0006BE34 <PED.ab2@24042>     BNE 'sk1
0006BE3A <PED.ab2@24043>     LEA none,a0
0006BE3C <PED.ab2@24045>     MOVE.l a1,-(a7)
0006BE3E <PED.ab2@24046>     CLR.l d4
0006BE44 <PED.ab2@24047>     MOVE.l d0,bltlen
0006BE4A <PED.ab2@24048>     LEA filebuff,a1
0006BE50 <PED.ab2@24049>     MOVE.l #$20202020,(a1)
0006BE58 <PED.ab2@24050>     MOVE.l #$20202020,4(a1)
0006BE60 <PED.ab2@24051>     MOVE.l #$20202020,8(a1)
0006BE68 <PED.ab2@24052>     MOVE.l #$20202020,12(a1)
0006BE6E <PED.ab2@24055>       ADD.l #1,d4
0006BE70 <PED.ab2@24056>       MOVE.b (a0)+,(a1)+
0006BE74 <PED.ab2@24057>     BNE 'copy
0006BE7A <PED.ab2@24058>     SUB.l #1,D4
0006BE80 <PED.ab2@24059>     MOVE.l d4,reallen
0006BE86 <PED.ab2@24060>     MOVE.b #$20,-1(a1)
0006BE8C <PED.ab2@24061>     LEA filebuff,a0
0006BE8E <PED.ab2@24062>     MOVE.l (a7),a1
0006BE92 <PED.ab2@24063>     JSR _Text(a6)
0006BE98 <PED.ab2@24065>     MOVE.l bltlen,D0
0006BE9E <PED.ab2@24066>     MOVE.l reallen,D4
0006BEA0 <PED.ab2@24068>     CMP.l D0,D4
0006BEA4 <PED.ab2@24069>     BLE 'nodots
0006BEA8 <PED.ab2@24071>     MOVEM.l d1-d7,-(a7)
0006BF18 <PED.ab2@24072>     WritePixel_ *rastp,*rastp\cp_x+1,*rastp\cp_y-4-*rastp\TxBaseline +*rastp\TxHeight/2
0006BF88 <PED.ab2@24073>     WritePixel_ *rastp,*rastp\cp_x+1,*rastp\cp_y-2-*rastp\TxBaseline +*rastp\TxHeight/2
0006BFF2 <PED.ab2@24074>     WritePixel_ *rastp,*rastp\cp_x+1,*rastp\cp_y  -*rastp\TxBaseline +*rastp\TxHeight/2
0006C062 <PED.ab2@24075>     WritePixel_ *rastp,*rastp\cp_x+1,*rastp\cp_y+2-*rastp\TxBaseline +*rastp\TxHeight/2
0006C0D2 <PED.ab2@24076>     WritePixel_ *rastp,*rastp\cp_x+1,*rastp\cp_y+4-*rastp\TxBaseline +*rastp\TxHeight/2
0006C0D6 <PED.ab2@24077>      MOVEM.l (a7)+,d1-d7
0006C0D8 <PED.ab2@24084>     MOVE.l (a7)+,a1
0006C0DA <PED.ab2@24085>     MOVE.l (a7)+,a0
0006C0DE <PED.ab2@24087>     MOVEM.l a0/a1,-(a7)
0006C0F8 <PED.ab2@24089>     SetDrMd_ *rastp, 1
0006C0FC <PED.ab2@24090>     MOVEM.l (a7)+,a1/a0
0006C0FE <PED.ab2@24091>     MOVE.l (a0),d0
0006C102 <PED.ab2@24092>   BNE 'again
0006C122 <PED.ab2@24097>   SetBPen_ *rastp,Peek.l(?backgroundcolor)
0006C142 <PED.ab2@24098>   SetFont_ *rastp,Peek.l(?ptr_sourcefont)
0006C166 <PED.ab2@24099>   SetSoftStyle_ *rastp,#FS_NORMAL,#FSF_BOLD
0006C184 <PED.ab2@24100>   !asm
0006C186 <PED.ab2@24101> RTS
0006C18A <PED.ab2@24103> Dc.l  0
0006C18E <PED.ab2@24105> Dc.l  0
0006C1A8 <PED.ab2@24109>   xsa.l = *tfont\tf_XSize/2
0006C1BE <PED.ab2@24110>   xsb.l = *tfont\tf_XSize-xsa
0006C1CC <PED.ab2@24111>   bx1.l = xpos_text - xsa
0006C1DC <PED.ab2@24112>   by1.l = ypos_sa +1;+ 3
0006C20E <PED.ab2@24113>   bx2.l = *tfont\tf_XSize*10 + *tfont\tf_XSize-1 + bx1
0006C22A <PED.ab2@24114>   by2.l = *tfont\tf_YSize + 4    + by1
0006C23A <PED.ab2@24115>   cp_x.l = *rastp\cp_x
0006C24A <PED.ab2@24116>   cp_y.l = *rastp\cp_y
0006C264 <PED.ab2@24118>   If bevel_recessed = False
0006C28A <PED.ab2@24120>     SetAPen_ *rastp,AB3Pen(#AB3_screenback)
0006C2D2 <PED.ab2@24121>     RectFill_ *rastp,bx1+1,by1+1,bx2-1+1,by2
0006C2F8 <PED.ab2@24122>     SetAPen_ *rastp,AB3Pen(#AB3_screentext)
0006C318 <PED.ab2@24123>     Move_ *rastp,bx1,by1
0006C338 <PED.ab2@24124>     Draw_ *rastp,bx1,by2
0006C35E <PED.ab2@24125>     Draw_ *rastp,bx2+1,by2
0006C384 <PED.ab2@24126>     Draw_ *rastp,bx2+1,by1
0006C38A <PED.ab2@24127>   Else
0006C3B0 <PED.ab2@24129>     SetAPen_ *rastp,AB3Pen(#AB3_cbackground)
0006C3F8 <PED.ab2@24130>     RectFill_ *rastp,bx1+1,by1-1,bx2-1+1,by2
0006C41E <PED.ab2@24132>     SetAPen_ *rastp,AB3Pen(#AB3_screentext)
0006C464 <PED.ab2@24133>     Move_ *rastp,bx1,by1 : Draw_ *rastp,bx1,by2+1
0006C490 <PED.ab2@24134>     Draw_ *rastp,bx2+1,by2+1
0006C4B6 <PED.ab2@24135>     Draw_ *rastp,bx2+1,by1
0006C4C4 <PED.ab2@24136>     cp_y+1
0006C4E4 <PED.ab2@24138>   Move_ *rastp,cp_x,cp_y
0006C4E6 <PED.ab2@24139> RTS
0006C4EA <PED.ab2@24143>   MOVEM.l a0/a1/d0/d7,-(a7)
0006C514 <PED.ab2@24144>   !basic
0006C518 <PED.ab2@24152>   CMP.w #$68,D0
0006C51C <PED.ab2@24153>   BEQ.w 'no
0006C522 <PED.ab2@24154>   MOVE.l loadedfilesbase,d0
0006C526 <PED.ab2@24155>   BEQ 'no
0006C528 <PED.ab2@24156>   MOVEQ #0,d6
0006C52A <PED.ab2@24157>   MOVEQ #0,d7
0006C52E <PED.ab2@24158>   MOVE.w $20(a1),d6           ; d6 = x-pos, d7 = y-pos  of  mouse
0006C532 <PED.ab2@24159>   MOVE.w $22(a1),d7
0006C534 <PED.ab2@24162>   MOVEQ #0,d5
0006C53A <PED.ab2@24163>   MOVE.l #filenamepos,d1
0006C540 <PED.ab2@24164>   MULS fontwidth,d1           ; get x-position of first sourcename
0006C542 <PED.ab2@24166>   MOVEQ #0,d3
0006C548 <PED.ab2@24167>   MOVE.w fontwidth,d3
0006C54C <PED.ab2@24169>   MULS #filenameoffs,d3                  ;character show
0006C54E <PED.ab2@24170>   ADD.w d1,d3
0006C550 <PED.ab2@24174>   MOVE.l d0,a0
0006C554 <PED.ab2@24175>   TST.b $de(a0)
0006C556 <PED.ab2@24178>   MOVEQ #0,d2                 ; load y-Position of statusarea + some pixels until button starts
0006C55C <PED.ab2@24179>   MOVE.w ypos_statusarea,d2
0006C562 <PED.ab2@24180>   ADD.w win_BorTop,d2
0006C564 <PED.ab2@24183>   MOVE.l d2,d4                ; load bottom-pos for buttons
0006C56A <PED.ab2@24184>   ADD.w fontheight,d4
0006C56E <PED.ab2@24185>   ADD.w #8,d4
0006C570 <PED.ab2@24187>   CMP.l d1,d6                 ; check if mouse was in buttonarea
0006C574 <PED.ab2@24188>   BLE 'n1
0006C576 <PED.ab2@24189>   CMP.l d3,d6
0006C57A <PED.ab2@24190>   BGE 'n1
0006C57C <PED.ab2@24191>   CMP.l d2,d7
0006C580 <PED.ab2@24192>   BLE 'n1
0006C582 <PED.ab2@24193>   CMP.l d4,d7
0006C586 <PED.ab2@24194>   BGE 'n1
0006C58A <PED.ab2@24195>   MOVEM.l d0-d7/a0-a6,-(a7)
0006C590 <PED.ab2@24196>   CMP.l actualfile,D0
0006C594 <PED.ab2@24197>   BNE.w 'noctrl
0006C59A <PED.ab2@24198>   MOVE.w message_qualifier,d1
0006C59E <PED.ab2@24199>   AND.w ##IEQUALIFIER_CONTROL|#IEQUALIFIER_LALT|#IEQUALIFIER_RALT,d1
0006C5A2 <PED.ab2@24200>   BEQ 'noctrl
0006C5AC <PED.ab2@24201>   CMP.l #$4D4F4449,comStr_Modified    ; "MODI"
0006C5B0 <PED.ab2@24202>   BNE 'noc
0006C5CE <PED.ab2@24203>   !asm
0006C5D4 <PED.ab2@24204>   JSR storeline
0006C5FE <PED.ab2@24206>   !basic
0006C610 <PED.ab2@24207>   Delay_ 2
0006C616 <PED.ab2@24210>   JSR set_tedlibbase
0006C61C <PED.ab2@24211>   MOVE.w message_qualifier,d1
0006C620 <PED.ab2@24212>   AND.w ##IEQUALIFIER_CONTROL,d1
0006C624 <PED.ab2@24213>   BEQ 'nocreateexe
0006C642 <PED.ab2@24214>   !asm
0006C648 <PED.ab2@24215>   JSR cursor_off
0006C64C <PED.ab2@24216>   MOVEM.l    D2-D7/A1-A6,-(A7)
0006C64E <PED.ab2@24217>   MOVEQ.l    #$5b,D6
0006C654 <PED.ab2@24218>   JSR        call_compilermenuitem
0006C658 <PED.ab2@24219>   MOVEM.l    (A7)+,D2-D7/A1-A6
0006C682 <PED.ab2@24220>   !basic
0006C686 <PED.ab2@24221>   BRA 'out2
0006C68C <PED.ab2@24224>   MOVE.w message_qualifier,d1
0006C690 <PED.ab2@24225>   AND.w ##IEQUALIFIER_LALT|#IEQUALIFIER_RALT ,d1
0006C694 <PED.ab2@24226>   BEQ 'out2
0006C6B2 <PED.ab2@24227>   !asm
0006C6B8 <PED.ab2@24228>   JSR cursor_off
0006C6BC <PED.ab2@24229>   MOVEM.l    D2-D7/A1-A6,-(A7)
0006C6BE <PED.ab2@24230>   MOVEQ.l    #$50,D6
0006C6C4 <PED.ab2@24231>   JSR        call_compilermenuitem
0006C6C8 <PED.ab2@24232>   MOVEM.l    (A7)+,D2-D7/A1-A6
0006C6F2 <PED.ab2@24233>   !basic
0006C6F6 <PED.ab2@24236>   MOVEM.l (A7)+,D0-d7/a0-a6
0006C714 <PED.ab2@24237>   !asm
0006C718 <PED.ab2@24238>   MOVEM.l (a7)+,d7/d0/a1/a0
0006C71A <PED.ab2@24239>   MOVEQ #-4,d7
0006C71C <PED.ab2@24240>   RTS
0006C720 <PED.ab2@24243>   MOVEM.l (A7)+,D0-d7/a0-a6
0006C726 <PED.ab2@24244>   MOVE.w message_qualifier,d1
0006C72A <PED.ab2@24245>   AND.w ##IEQUALIFIER_CONTROL|#IEQUALIFIER_LALT|#IEQUALIFIER_RALT ,d1
0006C72E <PED.ab2@24246>   BEQ 'nos2
0006C738 <PED.ab2@24247>   CMP.l #$4D4F4449,comStr_Modified     ; "MODI"
0006C73C <PED.ab2@24248>   BNE 'nos2
0006C740 <PED.ab2@24249>   MOVEM.l a0-a6/d0-d7,-(a7)
0006C75E <PED.ab2@24250>   !asm
0006C764 <PED.ab2@24251>   JSR storeline
0006C76A <PED.ab2@24252>   JSR saverout
0006C794 <PED.ab2@24253>   !basic
0006C7A6 <PED.ab2@24254>   Delay_ 2
0006C7AA <PED.ab2@24255>   MOVEM.l (a7)+,d0-d7/a0-a6
0006C7B0 <PED.ab2@24258>   CMP.l actualfile,D0
0006C7B4 <PED.ab2@24259>    BEQ.w 'no
0006C7BA <PED.ab2@24260>   MOVE.l messagestore,d1
0006C7C0 <PED.ab2@24261>   MOVE.w message_qualifier,d1
0006C7C4 <PED.ab2@24262>   AND.w ##IEQUALIFIER_CONTROL|#IEQUALIFIER_LALT|#IEQUALIFIER_RALT ,d1
0006C7C8 <PED.ab2@24263>   BNE 'no4
0006C7CE <PED.ab2@24267>   JSR storeline
0006C7D4 <PED.ab2@24268>   JSR cursor_off
0006C7DA <PED.ab2@24269>   JSR selectfile
0006C7F8 <PED.ab2@24270>   !asm
0006C7FE <PED.ab2@24271>   JSR StoreXtraData
0006C828 <PED.ab2@24272>   !basic
0006C830 <PED.ab2@24273>   MOVE.b #0,refreshonstore
0006C836 <PED.ab2@24274>   MOVE.w message_qualifier,d1
0006C83A <PED.ab2@24275>   AND.w ##IEQUALIFIER_CONTROL|#IEQUALIFIER_LALT|#IEQUALIFIER_RALT ,d1
0006C83E <PED.ab2@24276>   BEQ 'no
0006C850 <PED.ab2@24282>   Delay_ 2
0006C856 <PED.ab2@24285>   MOVE.w message_qualifier,d1
0006C85A <PED.ab2@24286>   AND.w ##IEQUALIFIER_CONTROL,d1
0006C85E <PED.ab2@24287>   BEQ 'nocreate
0006C87C <PED.ab2@24288>   !asm
0006C882 <PED.ab2@24289>   JSR set_tedlibbase
0006C888 <PED.ab2@24290>   JSR cursor_off
0006C88C <PED.ab2@24291>   MOVEM.l    D2-D7/A1-A6,-(A7)
0006C88E <PED.ab2@24292>   MOVEQ.l    #$5b,D6
0006C894 <PED.ab2@24293>   JSR        call_compilermenuitem
0006C898 <PED.ab2@24294>   MOVEM.l    (A7)+,D2-D7/A1-A6
0006C8C2 <PED.ab2@24295>   !basic
0006C8C6 <PED.ab2@24296>   BRA 'noctrl2
0006C8CC <PED.ab2@24299>   MOVE.w message_qualifier,d1
0006C8D0 <PED.ab2@24300>   AND.w ##IEQUALIFIER_LALT|#IEQUALIFIER_RALT ,d1
0006C8D4 <PED.ab2@24301>   BEQ 'noctrl2
0006C8F2 <PED.ab2@24302>   !asm
0006C8F8 <PED.ab2@24303>   JSR set_tedlibbase
0006C8FE <PED.ab2@24304>   JSR cursor_off
0006C902 <PED.ab2@24305>   MOVEM.l    D2-D7/A1-A6,-(A7)
0006C904 <PED.ab2@24306>   MOVEQ.l    #$50,D6
0006C90A <PED.ab2@24307>   JSR        call_compilermenuitem
0006C90E <PED.ab2@24308>   MOVEM.l    (A7)+,D2-D7/A1-A6
0006C938 <PED.ab2@24309>   !basic
0006C956 <PED.ab2@24312>   !asm
0006C95A <PED.ab2@24313>   MOVEM.l (a7)+,d7/d0/a1/a0
0006C95C <PED.ab2@24314>   MOVEQ #-4,d7
0006C95E <PED.ab2@24315>   RTS
0006C960 <PED.ab2@24318>   ADDQ.l #1,d5
0006C966 <PED.ab2@24319>   MOVE.l #filenameoffs,d0
0006C96C <PED.ab2@24320>   MULS fontwidth,d0
0006C96E <PED.ab2@24321>   ADD.l d0,d1
0006C970 <PED.ab2@24322>   ADD.l d0,d3
0006C972 <PED.ab2@24323>   MOVE.l (a0),d0
0006C976 <PED.ab2@24324>   BNE 'again
0006C994 <PED.ab2@24327>   !asm
0006C998 <PED.ab2@24328>   MOVEM.l (a7)+,d7/d0/a1/a0
0006C99A <PED.ab2@24329> RTS
0006C99E <PED.ab2@24334>   MOVEM.l a0-a6/d0-d7,-(a7)
0006C9A0 <PED.ab2@24337>   MOVE.l D0,A1
0006C9A6 <PED.ab2@24340>   LEA str_unnamed,A3
0006C9AC <PED.ab2@24341>   JSR compare_strings
0006C9B0 <PED.ab2@24342>   BNE.w exit_loadfile
0006C9B6 <PED.ab2@24345>   MOVEA.l loadedfilesbase,A2
0006C9B8 <PED.ab2@24348>   MOVEA.l A2,A3
0006C9BA <PED.ab2@24349>   MOVE.l A1,-(a7)           ; A1 auf den Stack
0006C9BC <PED.ab2@24352>     TST.b (a1)+
0006C9C0 <PED.ab2@24353>   BNE 'l1
0006C9C2 <PED.ab2@24354>   MOVEQ #60,d1
0006C9C4 <PED.ab2@24357>     MOVE.b -(a1),d0
0006C9C6 <PED.ab2@24358>     CMP.l (a7),a1
0006C9CA <PED.ab2@24359>      BEQ 'out2
0006C9CE <PED.ab2@24360>     CMP.b #"/",d0
0006C9D2 <PED.ab2@24361>      BEQ 'out
0006C9D6 <PED.ab2@24362>     CMP.b #":",d0
0006C9DA <PED.ab2@24363>      BEQ 'out
0006C9DC <PED.ab2@24364>     SUBQ.l #1,d1
0006C9E0 <PED.ab2@24365>   BNE 'loop
0006C9E2 <PED.ab2@24368>   ADDQ.l #1,a1
0006C9E6 <PED.ab2@24371>   LEA $DE(A3),A3
0006C9EC <PED.ab2@24372>   JSR compare_strings
0006C9EE <PED.ab2@24373>   MOVE.l (a7)+,a1         ; A1 vom Stack
0006C9F0 <PED.ab2@24374>   TST.l d0
0006C9F4 <PED.ab2@24375>    BNE.w JL_0_BD18b
0006C9F6 <PED.ab2@24378>   MOVEA.l (A2),A2
0006C9FC <PED.ab2@24379>   CMPA.l #$0,A2
0006CA00 <PED.ab2@24380>    BNE.b JL_0_BCFCb
0006CA04 <PED.ab2@24381> BRA.w load_sourcefileb
0006CA06 <PED.ab2@24384>   MOVEA.l A2,A0
0006CA0C <PED.ab2@24385>   JSR selectfile
0006CA10 <PED.ab2@24386>   MOVEM.l (a7)+,a0-a6/d0-d7
0006CA12 <PED.ab2@24387> RTS
0006CA14 <PED.ab2@24391>   MOVE.l A1,D0
0006CA16 <PED.ab2@24393>   MOVE.l D0,-(a7)       ; D0 auf Stack
0006CA1C <PED.ab2@24394>   JSR menu_opennew
0006CA1E <PED.ab2@24395>   MOVE.l (a7)+,D7       ; D0 vom Stack nach D7
0006CA24 <PED.ab2@24397>   JSR load_source
0006CA28 <PED.ab2@24399>   MOVEM.l (a7)+,a0-a6/d0-d7
0006CA2A <PED.ab2@24402> RTS
0006CA44 <PED.ab2@24405> Function.l ab3_IsTokenChar{char.l}
0006CA76 <PED.ab2@24406>   If char>=@"a" AND char<=@"z" Then Function Return True
0006CAA8 <PED.ab2@24407>   If char>=@"A" AND char<=@"Z" Then Function Return True
0006CADA <PED.ab2@24408>   If char>=@"0" AND char<=@"9" Then Function Return True
0006CB1E <PED.ab2@24409>   If char=@"_" OR char=@"@" OR char=@"`" Then Function Return True
0006CB26 <PED.ab2@24410>   Function Return False
0006CB2C <PED.ab2@24411> End Function
0006CB66 <PED.ab2@24414> Function.l ab3_InstrToken{code.s,token.s}
0006CBBE <PED.ab2@24415>   pos.l = Instr(code,token)
0006CBC8 <PED.ab2@24416>   If pos
0006CC18 <PED.ab2@24417>     If ab3_IsTokenChar{Peek.b(&code+pos-1+FLen(token))} Then pos=0
0006CC2A <PED.ab2@24418>     If pos>1
0006CC64 <PED.ab2@24419>       If ab3_IsTokenChar{Peek.b(&code+pos-1-1)} Then pos=0
0006CC6E <PED.ab2@24422>   Function Return pos
0006CC8A <PED.ab2@24423> End Function
0006CC96 <PED.ab2@24427>   DosBuffLen 32000
0006CCA0 <PED.ab2@24428>   CaseSense On
0006CCDA <PED.ab2@24436>   Statement writeentry{mode$,instruction$}
0006CD30 <PED.ab2@24439>     If Instr(instruction$,"@H") Then Statement Return
0006CD90 <PED.ab2@24442>     If Instr(instruction$,Mki$(#TOKEN_Return)) Then Statement Return
0006CDF0 <PED.ab2@24445>     If Instr(instruction$,Mki$(#TOKEN_End)) Then Statement Return
0006CDF8 <PED.ab2@24447>     startpos.l = 0
0006CE2E <PED.ab2@24448>     Select mode$
0006CEAE <PED.ab2@24449>       Case "FUNC"  : startpos = Instr(instruction$,Mki$(#TOKEN_Function)) +2
0006CEFE <PED.ab2@24450>         i3.l = Instr (instruction$,".",startpos)
0006CF2C <PED.ab2@24451>         If (i3 < startpos+5) AND (i3 <> 0)
0006CF3A <PED.ab2@24452>           startpos = i3+2
0006CF8E <PED.ab2@24455>         If Instr(instruction$,"FAST",startpos)
0006CFE4 <PED.ab2@24456>           startpos.l = Instr(instruction$,"FAST",startpos) + 4
0006D06A <PED.ab2@24459>       Case "STAT" : startpos = Instr(instruction$,Mki$(#TOKEN_Statement)) +2
0006D0BE <PED.ab2@24460>         If Instr(instruction$,"FAST",startpos)
0006D114 <PED.ab2@24461>           startpos.l = Instr(instruction$,"FAST",startpos) + 4
0006D19A <PED.ab2@24464>       Case "MACR"     : startpos = Instr(instruction$,Mki$(#TOKEN_Macro))     +2
0006D1A8 <PED.ab2@24465>     End Select
0006D21C <PED.ab2@24468>     instruction$ = dos_Trim{Mid$(instruction$,startpos)}
0006D224 <PED.ab2@24470>     endpos.l  =1
0006D22A <PED.ab2@24471>     stopchar.l=False
0006D264 <PED.ab2@24472>     While endpos<=FLen(instruction$) AND stopchar=False
0006D2B2 <PED.ab2@24473>       If ab3_IsTokenChar{Peek.b(&instruction$+endpos-1)}=False Then stopchar=True:Else endpos+1
0006D2B8 <PED.ab2@24474>     Wend
0006D2CA <PED.ab2@24477>     If endpos <> 0
0006D326 <PED.ab2@24478>       funcname$ = Mid$( instruction$ , 1 , endpos - 1)
0006D376 <PED.ab2@24481>       funcname$ = StripLead$(funcname$,32)
0006D3FA <PED.ab2@24482>       If mode$ = "MACR" Then funcname$ = "!" + funcname$
0006D44A <PED.ab2@24484>       description$ = Mid$(instruction$,endpos)
0006D49A <PED.ab2@24485>       description$ = StripLead$(description$,32)
0006D548 <PED.ab2@24486>       If Left$(description$,1)=";" Then description$ = UnRight$(description$,1)
0006D598 <PED.ab2@24487>       description$ = StripLead$(description$,32)
0006D63C <PED.ab2@24489>       NPrint mode$+"\\09"+funcname$+"\\09"+description$
0006D656 <PED.ab2@24491>   End Statement
0006D690 <PED.ab2@24493>   Statement scanfile{rootpath$,filename$}
0006D6B8 <PED.ab2@24494>     functoken$      = Mki$($8009)
0006D6E0 <PED.ab2@24495>     statementtoken$ = Mki$($8008)
0006D708 <PED.ab2@24496>     objecttoken$    = Mki$($80d7)
0006D730 <PED.ab2@24497>     macrotoken$     = Mki$($800d)
0006D758 <PED.ab2@24498>     endtoken$       = Mki$($8002)
0006D780 <PED.ab2@24499>     returntoken$    = Mki$($8007)
0006D7B4 <PED.ab2@24500>     tok80.s         = Str$($80)
0006D844 <PED.ab2@24501>     fid.l = file_Open{dos_AddPart{rootpath$,filename$},#file_read}
0006D8B8 <PED.ab2@24502>     If dos_GetExt{filename$}="bb2" Then tokenized.l=True:Else tokenized=False
0006D8CA <PED.ab2@24504>     If fid>=0 ; ReadFile(0,filename$)
0006D936 <PED.ab2@24518>       NPrint "FILE\\09",filename$
0006D940 <PED.ab2@24522>         If tokenized
0006D974 <PED.ab2@24523>           code.s = file_ReadBB2Line{fid}
0006D97A <PED.ab2@24524>         Else
0006D9AE <PED.ab2@24525>           code.s = file_ReadLine{fid}
0006D9FA <PED.ab2@24528>         maxpos.l = Instr(code,";")
0006DA26 <PED.ab2@24529>         If maxpos = 0 Then maxpos = FLen(code)-1
0006DA3A <PED.ab2@24532>         If tokenized=False
0006DA88 <PED.ab2@24533>           pos.l = ab3_InstrToken{code,"Function"}
0006DAAA <PED.ab2@24534>           If pos>0 AND pos<maxpos
0006DB8A <PED.ab2@24536>             code.s = Left$(code,pos-1) + functoken$ + Right$(code,FLen(code)-pos-8+1)
0006DB9E <PED.ab2@24537>             If pos<maxpos Then maxpos=pos
0006DBEC <PED.ab2@24540>           pos = ab3_InstrToken{code,"Statement"}
0006DC0E <PED.ab2@24541>           If pos>0 AND pos<maxpos
0006DCEE <PED.ab2@24542>             code.s = Left$(code,pos-1) + statementtoken$ + Right$(code,FLen(code)-pos-9+1)
0006DD02 <PED.ab2@24543>             If pos<maxpos Then maxpos=pos
0006DD50 <PED.ab2@24546>           pos = ab3_InstrToken{code,"Macro"}
0006DD72 <PED.ab2@24547>           If pos>0 AND pos<maxpos
0006DE52 <PED.ab2@24548>               code.s = Left$(code,pos-1) + macrotoken$ + Right$(code,FLen(code)-pos-5+1)
0006DE66 <PED.ab2@24549>               If pos<maxpos Then maxpos=pos
0006DEB4 <PED.ab2@24552>           pos = ab3_InstrToken{code,"End "}
0006DED6 <PED.ab2@24553>           If pos>0 AND pos<maxpos
0006DFB6 <PED.ab2@24554>               code.s = Left$(code,pos-1) + endtoken$ + Right$(code,FLen(code)-pos-3+1)
0006DFCA <PED.ab2@24555>               If pos<maxpos Then maxpos=pos
0006E018 <PED.ab2@24558>           pos = ab3_InstrToken{code,"Return"}
0006E03A <PED.ab2@24559>           If pos>0 AND pos<maxpos
0006E11A <PED.ab2@24560>               code.s = Left$(code,pos-1) + returntoken$ + Right$(code,FLen(code)-pos-6+1)
0006E12E <PED.ab2@24561>               If pos<maxpos Then maxpos=pos
0006E186 <PED.ab2@24567>           pos = Instr(code,functoken$)
0006E1F2 <PED.ab2@24568>           If pos>0 AND pos<=maxpos Then writeentry{"FUNC",code}
0006E24A <PED.ab2@24570>           pos = Instr(code,statementtoken$)
0006E2B6 <PED.ab2@24571>           If pos>0 AND pos<=maxpos Then writeentry{"STAT",code}
0006E30E <PED.ab2@24573>           pos = Instr(code,macrotoken$)
0006E37A <PED.ab2@24574>           If pos>0 AND pos<=maxpos Then writeentry{"MACR",code}
0006E38C <PED.ab2@24577>       Until file_EOF{fid}
0006E396 <PED.ab2@24578>       file_Close{fid}
0006E39C <PED.ab2@24579>     Else
0006E416 <PED.ab2@24580>       dummy.l= RTEZRequest( "","Cant open file "+filename$,"ok")
0006E430 <PED.ab2@24582>   End Statement
0006E462 <PED.ab2@24584>   DeleteFile_ HelpIndexFile$
0006E46C <PED.ab2@24585>   ClearList HelpIndexCache()
0006E476 <PED.ab2@24586>   ClearList dirs()
0006E4C0 <PED.ab2@24587>   If WriteFile (1,HelpIndexFile$)
0006E510 <PED.ab2@24588>     WZ_ShowMessage{!TRANS{"Updating indexfile for onlinehelp..."},0}
0006E556 <PED.ab2@24592>    *win.Window = Peek.l(Addr Window(WZID("WIN_PROGRESS")))             ;get window pointer  tomsmart1
0006E57E <PED.ab2@24593>    newwintitle.s="(Re)Building..."                                     ;new window title tomsmart1
0006E5A4 <PED.ab2@24594>    SetWindowTitles_ *win,&newwintitle,-1                                ;show new window title  tomsmart1
0006E5DC <PED.ab2@24596>     If ChDir (includedir$)
0006E5E4 <PED.ab2@24598>       num_files.l = 0
0006E5F4 <PED.ab2@24599>       While MoreEntries
0006E604 <PED.ab2@24600>         If EntryDIR
0006E616 <PED.ab2@24601>           If AddLast(dirs())
0006E63E <PED.ab2@24602>             dirs()\name = EntryName$
0006E644 <PED.ab2@24604>         Else
0006E652 <PED.ab2@24605>           num_files + 1
0006E658 <PED.ab2@24607>       Wend
0006E6B0 <PED.ab2@24608>       If FirstItem(dirs()) Then dirname$ = dirs()\name Else exitscan.l = True
0006E6E0 <PED.ab2@24609>       ChDir (includedir$)
0006E708 <PED.ab2@24610>       subpath.s = ""
0006E710 <PED.ab2@24611>       act_file.l = 0
0006E720 <PED.ab2@24613>         While MoreEntries
0006E732 <PED.ab2@24614>           If (NOT EntryDIR)
0006E778 <PED.ab2@24615>             ex.s = dos_GetExt{EntryName$}
0006E81E <PED.ab2@24616>             If (ex="bb2" OR ex="ab2" OR ex="ab3")
0006E832 <PED.ab2@24617>               FileOutput 1
0006E85E <PED.ab2@24618>               If subpath
0006E902 <PED.ab2@24619>                 scanfile{includedir$,dos_AddPart{subpath,EntryName$}}
0006E908 <PED.ab2@24620>               Else
0006E956 <PED.ab2@24621>                 scanfile{includedir$,EntryName$}
0006E976 <PED.ab2@24627>             act_file + 1 : act_file = Min(act_file,num_files)
0006EAF6 <PED.ab2@24628>             !WZ_Update_Gauge{act_file,num_files}
0006EAFC <PED.ab2@24632>         Wend
0006EB34 <PED.ab2@24633>         If dirname$ <> ""
0006EBB0 <PED.ab2@24634>           ChDir dos_AddPart{includedir$,dirname$}
0006EBE4 <PED.ab2@24636>           subpath = dirname$
0006EC5E <PED.ab2@24638>           If NextItem(dirs()) Then dirname$ = dirs()\name Else dirname$ = ""
0006EC64 <PED.ab2@24639>         Else
0006EC6A <PED.ab2@24640>           exitscan = True
0006EC7E <PED.ab2@24642>       Until exitscan = True
0006EC88 <PED.ab2@24643>       ClearList dirs()
0006EC8E <PED.ab2@24644>     Else
0006ED90 <PED.ab2@24645>       dummy.l= RTEZRequest( "",!TRANS{"Could not determine Include directory"}+":\\n"+includedir$+"!",!TRANS{"OK"})
0006EDA8 <PED.ab2@24655>     CloseFile 1
0006EDF8 <PED.ab2@24656>     WZ_ShowMessage{!TRANS{"Updating Helpindex..."}}
0006EE26 <PED.ab2@24657>     TED_LoadHelpIndexFile{HelpIndexFile$}
0006EE76 <PED.ab2@24658>     WZ_ShowMessage{!TRANS{"Saving Helpindex to Disc..."}}
0006EEA4 <PED.ab2@24659>     TED_WriteHelpIndexCache{HelpIndexCacheFile$}
0006EEF4 <PED.ab2@24660>     WZ_ShowMessage{!TRANS{"Creating Hashmaps..."}}
0006EEFE <PED.ab2@24661>     preproc_QueryTokens{*PreProcessor}
0006EF30 <PED.ab2@24662>     preproc_SaveTokens{*PreProcessor,TokenHashMapFile}
0006EF36 <PED.ab2@24663>     WZ_HideMessage{}
0006EF40 <PED.ab2@24666>   CaseSense Off
0006EF42 <PED.ab2@24667> RTS
0006EF44 <PED.ab2@24670> findmode:   Dc.w 0
0006EF4C <PED.ab2@24678>     BSET #7,case_sensitive
0006EF9A <PED.ab2@24679>     a$ = WZGetString("FIND_FINDSTRING")
0006EFE8 <PED.ab2@24680>     b$ = WZGetString("FIND_REPLACESTRING")
0006F078 <PED.ab2@24682>     If WZInput("FIND_SENSITIVE")= 0 Then a$ = StrUpper(a$) : BCLR #7,case_sensitive
0006F0B0 <PED.ab2@24683>     Poke$ ?str_oldsearchgadget,a$;,60
0006F0E8 <PED.ab2@24684>     Poke$ ?str_searchstring,a$;,60
0006F120 <PED.ab2@24685>     Poke$ ?str_replacestring,b$;,60
0006F126 <PED.ab2@24689>     Select ev
0006F134 <PED.ab2@24691>       Case #IDCMP_CLOSEWINDOW
0006F16C <PED.ab2@24692>         WZCloseWindow WZID("WIN_SEARCH")
0006F17E <PED.ab2@24693>         ActivateWindow_(?ptr_sourcewindow)
0006F184 <PED.ab2@24694>         FlushEvents
0006F198 <PED.ab2@24696>       Case #IDCMP_VANILLAKEY
0006F1A0 <PED.ab2@24697>         Select EventCode
0006F1AE <PED.ab2@24699>           Case 13
0006F1CC <PED.ab2@24700>             !asm
0006F1D2 <PED.ab2@24701>             JSR storeline
0006F1D8 <PED.ab2@24702>             JSR cursor_off
0006F1DE <PED.ab2@24703>             MOVE.l comPtr_CurrentSourceLine,a4
0006F1E4 <PED.ab2@24704>             JSR menu_findnext
0006F1EA <PED.ab2@24705>             JSR update_vertscroller
0006F1F0 <PED.ab2@24706>             JSR cursor_on
0006F21A <PED.ab2@24707>             !basic
0006F232 <PED.ab2@24708>             FlushEvents : Delay_ 2 ; VWait 3
0006F246 <PED.ab2@24710>           Case $1B
0006F27E <PED.ab2@24711>             WZCloseWindow WZID("WIN_SEARCH")
0006F290 <PED.ab2@24712>             ActivateWindow_(?ptr_sourcewindow)
0006F296 <PED.ab2@24713>             FlushEvents
0006F298 <PED.ab2@24715>         End Select
0006F2AC <PED.ab2@24717>       Case #IDCMP_IDCMPUPDATE
0006F2D4 <PED.ab2@24718>         Select WZGadName
0006F2F8 <PED.ab2@24720>           Case "FIND_FINDSTRING"
0006F316 <PED.ab2@24721>             !asm
0006F31C <PED.ab2@24722>             JSR storeline
0006F322 <PED.ab2@24723>             JSR cursor_off
0006F328 <PED.ab2@24724>             MOVE.l comPtr_CurrentSourceLine,a4
0006F32E <PED.ab2@24725>             JSR menu_findnext
0006F334 <PED.ab2@24726>             JSR update_vertscroller
0006F33A <PED.ab2@24727>             JSR cursor_on
0006F364 <PED.ab2@24728>             !basic
0006F37C <PED.ab2@24729>             FlushEvents : Delay_ 2;VWait 3
0006F3A6 <PED.ab2@24732>           Case "FIND_NEXT"
0006F3C4 <PED.ab2@24733>             !asm
0006F3CA <PED.ab2@24734>             JSR storeline
0006F3D0 <PED.ab2@24735>             JSR cursor_off
0006F3D6 <PED.ab2@24736>             MOVE.l comPtr_CurrentSourceLine,a4
0006F3DC <PED.ab2@24737>             JSR menu_findnext
0006F3E2 <PED.ab2@24738>             JSR update_vertscroller
0006F3E8 <PED.ab2@24739>             JSR cursor_on
0006F412 <PED.ab2@24740>             !basic
0006F43C <PED.ab2@24742>           Case "FIND_PREVIOUS"
0006F45A <PED.ab2@24743>             !asm
0006F460 <PED.ab2@24744>             JSR storeline
0006F466 <PED.ab2@24745>             JSR cursor_off
0006F46C <PED.ab2@24746>             MOVE.l comPtr_CurrentSourceLine,a4
0006F472 <PED.ab2@24747>             JSR menu_previous
0006F478 <PED.ab2@24748>             JSR update_vertscroller
0006F47E <PED.ab2@24749>             JSR cursor_on
0006F4A8 <PED.ab2@24750>             !basic
0006F4D2 <PED.ab2@24752>           Case "FIND_REPLACE"
0006F4F0 <PED.ab2@24753>             !asm
0006F4F6 <PED.ab2@24754>             JSR storeline
0006F4FC <PED.ab2@24755>             JSR cursor_off
0006F502 <PED.ab2@24756>             MOVE.l comPtr_CurrentSourceLine,a4
0006F508 <PED.ab2@24757>             JSR menu_replace
0006F50E <PED.ab2@24758>             JSR cursor_on
0006F538 <PED.ab2@24759>             !basic
0006F562 <PED.ab2@24761>           Case "FIND_REPLACE_ALL"
0006F5C2 <PED.ab2@24762>             Poke.w ?findmode, Abs(WZInput("FIND_FINDMODE"))
0006F634 <PED.ab2@24763>             If a$<>"" AND b$<>""
0006F652 <PED.ab2@24764>               !asm
0006F658 <PED.ab2@24765>               JSR storeline
0006F65E <PED.ab2@24766>               JSR cursor_off
0006F664 <PED.ab2@24767>               JSR set_pointerbusy
0006F666 <PED.ab2@24769>               MOVE.l A4,D0
0006F66C <PED.ab2@24770>               TST.w findmode
0006F670 <PED.ab2@24771>                BNE.b replace_loop
0006F676 <PED.ab2@24772>               MOVE.l comPtr_FirstSourceLine,D0
0006F678 <PED.ab2@24775>                 MOVEA.l D0,A4
0006F67E <PED.ab2@24776>                 MOVE.l A4,comPtr_CurrentSourceLine
0006F684 <PED.ab2@24777>                 JSR replace_string
0006F686 <PED.ab2@24778>                 MOVE.l (A4),D0
0006F68A <PED.ab2@24779>               BNE.b replace_loop
0006F690 <PED.ab2@24781>               JSR update_currsourceline
0006F696 <PED.ab2@24782>               JSR _redraw
0006F69C <PED.ab2@24783>               JSR set_pointernormal
0006F6A2 <PED.ab2@24784>               JSR cursor_on
0006F6CC <PED.ab2@24785>               !basic
0006F6F6 <PED.ab2@24788>           Case "FIND_EXIT"
0006F72E <PED.ab2@24789>             WZCloseWindow WZID("WIN_SEARCH")
0006F740 <PED.ab2@24790>             ActivateWindow_(?ptr_sourcewindow)
0006F74E <PED.ab2@24792>         End Select
0006F77A <PED.ab2@24794>         If WZ_CheckOpen{"WIN_SEARCH"}
0006F7C8 <PED.ab2@24795>           oldfindstr$ = WZGetString("FIND_FINDSTRING" )
0006F816 <PED.ab2@24796>           oldreplacestr$ = WZGetString("FIND_REPLACESTRING" )
0006F818 <PED.ab2@24799>     End Select
0006F81A <PED.ab2@24800> Return
0006F83C <PED.ab2@24805>   !coutclose
0006F83E <PED.ab2@24806> Return
0006FA3E <PED.ab2@24816> warningtitle:         Ds.b #MAX_STRINGSIZE
0006FA3F <PED.ab2@24836> short1                Dc.b "T"
0006FA40 <PED.ab2@24837> short2                Dc.b "B"
0006FA41 <PED.ab2@24838> short3                Dc.b 0
0006FA42 <PED.ab2@24839> Even
00090B12 <PED.ab2@24841> wzgui:                IncBin "ped.wizard"
00090B13 <PED.ab2@24843> instring              Dc.b 0
00090B14 <PED.ab2@24844> instring2             Dc.b 0
00090B15 <PED.ab2@24845> instring3             Dc.b 0
00090B16 <PED.ab2@24846> modifymark            Dc.b "*"
00090B1E <PED.ab2@24847> none                  Dc.b "unnamed",0 : Even
00090B22 <PED.ab2@24848> historypointer:       Dc.l 0
00090B24 <PED.ab2@24849> oldsearch             Dc.w 0
00090B28 <PED.ab2@24850> ptr_deflibsfilename   Dc.l 0
00090B2C <PED.ab2@24851> ptr_incdirname        Dc.l 0
00090B30 <PED.ab2@24852> taskaddr              Dc.l 0
00090BF8 <PED.ab2@24853> str_spaces            Dcb.b 200,32
00090DF8 <PED.ab2@24854> str_pedpalfile        Ds.b #MAX_STRINGSIZE
00090DFA <PED.ab2@24858>                       Dc.w 11    ;Ricopperfxlib.obj
00090DFC <PED.ab2@24859>                       Dc.w 45    ;Risoundlib.obj
00090DFE <PED.ab2@24860>                       Dc.w 56    ;Xbciatrackerlib.obj
00090E00 <PED.ab2@24861>                       Dc.w 60    ;loadpt
00090E02 <PED.ab2@24862>                       Dc.w 82    ;medlib
00090E04 <PED.ab2@24863>                       Dc.w 98    ;blitzkeyslib
00090E06 <PED.ab2@24864>                       Dc.w 112   ; #spriteslib
00090E08 <PED.ab2@24865>                       Dc.w 113   ;cd32lib
00090E0A <PED.ab2@24866>                       Dc.w 116   ;audiolib
00090E0C <PED.ab2@24867>                       Dc.w 117   ;blitzoslib
00090E0E <PED.ab2@24868>                       Dc.w 119   ;2dlib
00090E10 <PED.ab2@24869>                       Dc.w 143   ;displaylib
00090E12 <PED.ab2@24870>                       Dc.w 144   ;#blitzcoplib
00090E14 <PED.ab2@24871>                       Dc.w 146   ;bblitlib
00090E16 <PED.ab2@24872>                       Dc.w 148   ;qblitlib
00090E18 <PED.ab2@24873>                       Dc.w 150   ;blitlib
00090E1A <PED.ab2@24874>                       Dc.w 156   ; #palettelib
00090E1C <PED.ab2@24875>                       Dc.w 152   ; #freqlib
00090E1E <PED.ab2@24876>                       Dc.w 204   ;bfbplaymaster.library1
00090E20 <PED.ab2@24877>                       Dc.w 209   ;thxplay.library1
00090E22 <PED.ab2@24878>                       Dc.w 96    ;#trackerlib
00090E24 <PED.ab2@24879>                       Dc.w 190   ;gameiolib
00090E26 <PED.ab2@24881>                       Dc.w 0     ;say end
00090E28 <PED.ab2@24883>                       Dc.w $3385 ;timer commands here come single commands
00090E2A <PED.ab2@24884>                       Dc.w $2588 ;timer
00090E2C <PED.ab2@24885>                       Dc.w $1784 ;timer
00090E2E <PED.ab2@24886>                       Dc.w $4d08 ;get a shape
00090E30 <PED.ab2@24888>                       Dc.w 0     ;say end
00090E34 <PED.ab2@24890> classiccolor          Dc.l 1
00090E36 <PED.ab2@24891> olddebugmode          Dc.w $0101
00090E38 <PED.ab2@24892> cutmode               Dc.w 0
00090E3A <PED.ab2@24893> NOP
00090E42 <PED.ab2@24894> blitzname             Dc.b "Blitz3:",0
00091042 <PED.ab2@24895>                       Ds.b #MAX_STRINGSIZE
00091045 <PED.ab2@24897> dummystr              Dc.b ":",0,0
00091049 <PED.ab2@24898> wheelstep             Dc.l 6
0009104A <PED.ab2@24899> Even
0009104C <PED.ab2@24901> BSS
0009104D <PED.ab2@24903> doresize              Ds.b 1
0009104E <PED.ab2@24904> blinkrate             Ds.b 1
0009104F <PED.ab2@24905> blinkcount            Ds.b 1
00091051 <PED.ab2@24906> foundf                Ds.w 1
00091053 <PED.ab2@24907> foundf2               Ds.w 1
00091055 <PED.ab2@24908> yhorizscroll          Ds.w 1
00091056 <PED.ab2@24909> clone_wbscreen        Ds.b 1
00091057 <PED.ab2@24910> no_welcome            Ds.b 1
0009105B <PED.ab2@24911> tokenbackground       Ds.l 1
0009105C <PED.ab2@24912> use_wbscreen          Ds.b 1
00091188 <PED.ab2@24913> clipbuf               Ds.b 300
00091189 <PED.ab2@24914> old_scrolling         Ds.b 1
0009118B <PED.ab2@24915> loadmode              Ds.w 1
0009128B <PED.ab2@24916> filebuff              Ds.b 256
0009128D <PED.ab2@24917> nodelete              Ds.w 1
0009128F <PED.ab2@24918> menuload              Ds.w 1
00091291 <PED.ab2@24919> replacestartcolumn    Ds.w 1
00091293 <PED.ab2@24920> fontwidth             Ds.w 1
00091297 <PED.ab2@24921> topaz8                Ds.l 1
0009129B <PED.ab2@24922> messagestore          Ds.l 1
0009129D <PED.ab2@24923> yposlow               Ds.w 1
000912A1 <PED.ab2@24924> nestcount             Ds.l 1
000912A2 <PED.ab2@24925> iffound               Ds.b 1
000912A3 <PED.ab2@24926> pad                   Ds.b 1
000912A7 <PED.ab2@24927> ctrlhelpline          Ds.l 1
000912A9 <PED.ab2@24928> oldcolumnsoffset      Ds.w 1
000912AD <PED.ab2@24929> menuitem_debugtoggle  Ds.l 1
000912B1 <PED.ab2@24930> firstcolumn           Ds.l 1
000912B2 <PED.ab2@24931> skipit                Ds.b 1
000912B3 <PED.ab2@24932> redraw_ped            Ds.b 1
000912B7 <PED.ab2@24933> foldnum               Ds.l 1
000912B9 <PED.ab2@24934> pastecolumn           Ds.w 1
000912BD <PED.ab2@24935> tempstore             Ds.l 1
0009130D <PED.ab2@24936> typestr               Ds.b 80
0009131D <PED.ab2@24937> regstore1             Ds.l 4
0009131F <PED.ab2@24938> colstore              Ds.w 1
00091323 <PED.ab2@24939> storeline1            Ds.l 1
00091327 <PED.ab2@24940> storeline2            Ds.l 1
0009132B <PED.ab2@24941> storeline3            Ds.l 1
0009132F <PED.ab2@24942> lastedited_line       Ds.l 1
00091333 <PED.ab2@24943> templine              Ds.l 1
00091335 <PED.ab2@24944> semipos               Ds.w 1
00091339 <PED.ab2@24945> ptr_source_dir        Ds.l 1
0009133B <PED.ab2@24946> amigaguide            Ds.w 1
0009133D <PED.ab2@24947> smart_tokenization    Ds.w 1
00091341 <PED.ab2@24948> textlinestart         Ds.l 1
00091342 <PED.ab2@24949> doedit2               Ds.b 1
00091343 <PED.ab2@24950> isfunction            Ds.b 1
00091344 <PED.ab2@24951> keepstring            Ds.b 1
00091345 <PED.ab2@24952> new_editmode          Ds.b 1
00091349 <PED.ab2@24953> newtypecolor          Ds.l 1
0009134D <PED.ab2@24954> stringcolor           Ds.l 1
00091351 <PED.ab2@24955> macrocolor            Ds.l 1
00091355 <PED.ab2@24956> constantcolor         Ds.l 1
00091359 <PED.ab2@24957> functioncolor         Ds.l 1
0009135B <PED.ab2@24958> macro_                Ds.w 1
0009135F <PED.ab2@24960> remarkcolor           Ds.l 1
00091363 <PED.ab2@24961> remarkbgcolor         Ds.l 1
00091367 <PED.ab2@24963> backgroundcolor       Dc.l 0
0009136B <PED.ab2@24964> oldcurrsourceline     Ds.l 1
0009146F <PED.ab2@24965> helpstring            Ds.b 260
00091471 <PED.ab2@24966> searchmode            Ds.w 1
00091472 <PED.ab2@24967> auto_format           Ds.b 1
00091474 <PED.ab2@24968> columnstore           Ds.w 1
00091476 <PED.ab2@24969> ab2mode               Ds.w 1
0009147A <PED.ab2@24970> slen2                 Ds.l 1
0009147E <PED.ab2@24971> straddr2              Dc.l 0
00091482 <PED.ab2@24972> straddr               Dc.l 0
00091486 <PED.ab2@24973> numcount              Dc.l 0
0009148A <PED.ab2@24974> constantbase          Dc.l 0
0009148E <PED.ab2@24975> newtypebase           Dc.l 0
00091492 <PED.ab2@24976> newsyntax             Dc.l 0
00091496 <PED.ab2@24977> nohelp                Dc.l 0
0009159A <PED.ab2@24979> str_oldsearchgadget   Ds.b 260
000B159E <PED.ab2@24980> instrtab              Ds.l 32769
000B15A2 <PED.ab2@24981> newted                Dc.l 0
000B15A6 <PED.ab2@24982> message_qualifier     Dc.l 0
000B15AA <PED.ab2@24983> message_code          Dc.l 0
000B15AE <PED.ab2@24984> message_class         Dc.l 0
000B15B2 <PED.ab2@24985> olda4                 Dc.l 0
000B15DA <PED.ab2@24986> history               Ds.l 10
000B15DE <PED.ab2@24987> helpsourceline        Dc.l 0
000B15E8 <PED.ab2@24988> str_actualline        Dc.b 0,0,0,0,0,0,0,0,0,0
000B16EC <PED.ab2@24989> tempbuf               Ds.b 260
000B16ED <PED.ab2@24990> convert               Dc.b 0
000B16F1 <PED.ab2@24991> count                 Ds.l 1
000B16F3 <PED.ab2@24992> instru                Ds.w 1
000B17F7 <PED.ab2@24993> chartab               Ds.b 260      ;last
000B17FB <PED.ab2@24994> comparetab            Ds.l 1
000B17FD <PED.ab2@24995> casemode              Ds.w 1
000B17FF <PED.ab2@24996> temp                  Ds.w 1
000B1803 <PED.ab2@24999> namesizestore         Ds.l 1
000B1807 <PED.ab2@25000> nodisplaybeep         Ds.l 1
000B1809 <PED.ab2@25001> refreshonstore        Ds.w 1        ; zuruecksetzen von PED beim Speichern der Preferences
000B180B <PED.ab2@25002> deftypefound          Ds.w 1
000B180D <PED.ab2@25003> bold_tokens           Dc.w 0
000B180F <PED.ab2@25004> italic_remarks        Dc.w 0
000B1810 <PED.ab2@25005> onlinehelp            Dc.b 1
000B1812 <PED.ab2@25007> pos_horizprop         Ds.w 1
000B1816 <PED.ab2@25008> blockmarking          Dc.l 0
000B1817 <PED.ab2@25009> correct_functions     Dc.b 0
000B1818 <PED.ab2@25010> load_last_source      Dc.b 0
000B1819 <PED.ab2@25011> use_intellisense      Dc.b 0
000B181A <PED.ab2@25012> auto_constructs       Dc.b 0
